(*Author: Grzegorz Gruza *)
open Leftist;;



(*----TEST1----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 17 q1;;   (* [17]*)
let (element, q1) = delete_min q1;;   (* 17 * []*)
assert(element = 17);;
let q1 = add 9 q1;;   (* [9]*)
let (element, q1) = delete_min q1;;   (* 9 * []*)
assert(element = 9);;
let q1 = add 3 q1;;   (* [3]*)
let q1 = add 26 q1;;   (* [3, 26]*)
let (element, q1) = delete_min q1;;   (* 3 * [26]*)
assert(element = 3);;
let q1 = add 29 q1;;   (* [26, 29]*)
let q1 = add 22 q1;;   (* [22, 26, 29]*)
assert(is_empty q1 = false);;   (*[22, 26, 29]*)

(* -------q2------ *)
let q2 = empty;;
assert(is_empty q2 = true);;   (*[]*)
let q2 = add 7 q2;;   (* [7]*)
let q2 = add 11 q2;;   (* [7, 11]*)
assert(is_empty q2 = false);;   (*[7, 11]*)
let q2 = add 24 q2;;   (* [7, 11, 24]*)
assert(is_empty q2 = false);;   (*[7, 11, 24]*)
let q2 = add 13 q2;;   (* [7, 11, 13, 24]*)
let q2 = add 20 q2;;   (* [7, 11, 13, 20, 24]*)
let q2 = add 22 q2;;   (* [7, 11, 13, 20, 22, 24]*)
let q2 = add 1 q2;;   (* [1, 7, 11, 13, 20, 22, 24]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;   (*[1, 7, 11, 13, 20, 22, 22, 24, 26]*)
let (element, q) = delete_min q;;   (* 1 * [7, 11, 13, 20, 22, 22, 24, 26, 29]*)
assert(element = 1);;
let (element, q) = delete_min q;;   (* 7 * [11, 13, 20, 22, 22, 24, 26, 29]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 11 * [13, 20, 22, 22, 24, 26, 29]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 13 * [20, 22, 22, 24, 26, 29]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 20 * [22, 22, 24, 26, 29]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 22 * [22, 24, 26, 29]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [24, 26, 29]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 24 * [26, 29]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 26 * [29]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 29 * []*)
assert(element = 29);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST2----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 28 q1;;   (* [28]*)
let q1 = add 18 q1;;   (* [18, 28]*)
let q1 = add 25 q1;;   (* [18, 25, 28]*)
let q1 = add 19 q1;;   (* [18, 19, 25, 28]*)
let q1 = add 37 q1;;   (* [18, 19, 25, 28, 37]*)
let (element, q1) = delete_min q1;;   (* 18 * [19, 25, 28, 37]*)
assert(element = 18);;
let q1 = add 2 q1;;   (* [2, 19, 25, 28, 37]*)
let q1 = add 35 q1;;   (* [2, 19, 25, 28, 35, 37]*)
let q1 = add 10 q1;;   (* [2, 10, 19, 25, 28, 35, 37]*)
let q1 = add 23 q1;;   (* [2, 10, 19, 23, 25, 28, 35, 37]*)
let q1 = add 22 q1;;   (* [2, 10, 19, 22, 23, 25, 28, 35, 37]*)

(* -------q2------ *)
let q2 = empty;;
assert(is_empty q2 = true);;   (*[]*)
let q2 = add 33 q2;;   (* [33]*)
let q2 = add 7 q2;;   (* [7, 33]*)
let q2 = add 20 q2;;   (* [7, 20, 33]*)
let q2 = add 34 q2;;   (* [7, 20, 33, 34]*)
let q2 = add 4 q2;;   (* [4, 7, 20, 33, 34]*)
let q2 = add 6 q2;;   (* [4, 6, 7, 20, 33, 34]*)
let (element, q2) = delete_min q2;;   (* 4 * [6, 7, 20, 33, 34]*)
assert(element = 4);;
let q2 = add 5 q2;;   (* [5, 6, 7, 20, 33, 34]*)
let q2 = add 23 q2;;   (* [5, 6, 7, 20, 23, 33, 34]*)
let (element, q2) = delete_min q2;;   (* 5 * [6, 7, 20, 23, 33, 34]*)
assert(element = 5);;

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;   (*[2, 6, 7, 10, 19, 20, 22, 23, 23, 25, 28, 33, 34, 35]*)
let (element, q) = delete_min q;;   (* 2 * [6, 7, 10, 19, 20, 22, 23, 23, 25, 28, 33, 34, 35, 37]*)
assert(element = 2);;
let (element, q) = delete_min q;;   (* 6 * [7, 10, 19, 20, 22, 23, 23, 25, 28, 33, 34, 35, 37]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 7 * [10, 19, 20, 22, 23, 23, 25, 28, 33, 34, 35, 37]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 10 * [19, 20, 22, 23, 23, 25, 28, 33, 34, 35, 37]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 19 * [20, 22, 23, 23, 25, 28, 33, 34, 35, 37]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [22, 23, 23, 25, 28, 33, 34, 35, 37]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 22 * [23, 23, 25, 28, 33, 34, 35, 37]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [23, 25, 28, 33, 34, 35, 37]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [25, 28, 33, 34, 35, 37]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 25 * [28, 33, 34, 35, 37]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 28 * [33, 34, 35, 37]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 33 * [34, 35, 37]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [35, 37]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [37]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 37 * []*)
assert(element = 37);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST3----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 8 q1;;   (* [8]*)
let q1 = add 20 q1;;   (* [8, 20]*)
let (element, q1) = delete_min q1;;   (* 8 * [20]*)
assert(element = 8);;
let (element, q1) = delete_min q1;;   (* 20 * []*)
assert(element = 20);;
assert(is_empty q1 = true);;   (*[]*)
let q1 = add 15 q1;;   (* [15]*)
let (element, q1) = delete_min q1;;   (* 15 * []*)
assert(element = 15);;
let q1 = add 18 q1;;   (* [18]*)
let q1 = add 5 q1;;   (* [5, 18]*)
let (element, q1) = delete_min q1;;   (* 5 * [18]*)
assert(element = 5);;
let q1 = add 16 q1;;   (* [16, 18]*)
assert(is_empty q1 = false);;   (*[16, 18]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 10 q2;;   (* [10]*)
let q2 = add 28 q2;;   (* [10, 28]*)
let q2 = add 8 q2;;   (* [8, 10, 28]*)
let q2 = add 32 q2;;   (* [8, 10, 28, 32]*)
let q2 = add 39 q2;;   (* [8, 10, 28, 32, 39]*)
let q2 = add 37 q2;;   (* [8, 10, 28, 32, 37, 39]*)
let q2 = add 36 q2;;   (* [8, 10, 28, 32, 36, 37, 39]*)
let (element, q2) = delete_min q2;;   (* 8 * [10, 28, 32, 36, 37, 39]*)
assert(element = 8);;
let (element, q2) = delete_min q2;;   (* 10 * [28, 32, 36, 37, 39]*)
assert(element = 10);;
let q2 = add 37 q2;;   (* [28, 32, 36, 37, 37, 39]*)
let (element, q2) = delete_min q2;;   (* 28 * [32, 36, 37, 37, 39]*)
assert(element = 28);;
let (element, q2) = delete_min q2;;   (* 32 * [36, 37, 37, 39]*)
assert(element = 32);;

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;   (*[16, 18, 36, 37, 37]*)
let (element, q) = delete_min q;;   (* 16 * [18, 36, 37, 37, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 18 * [36, 37, 37, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 36 * [37, 37, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [37, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST4----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 34 q1;;   (* [34]*)
let (element, q1) = delete_min q1;;   (* 34 * []*)
assert(element = 34);;
assert(is_empty q1 = true);;   (*[]*)
let q1 = add 34 q1;;   (* [34]*)
let q1 = add 3 q1;;   (* [3, 34]*)
let q1 = add 21 q1;;   (* [3, 21, 34]*)
let (element, q1) = delete_min q1;;   (* 3 * [21, 34]*)
assert(element = 3);;
let q1 = add 39 q1;;   (* [21, 34, 39]*)
let q1 = add 2 q1;;   (* [2, 21, 34, 39]*)
let (element, q1) = delete_min q1;;   (* 2 * [21, 34, 39]*)
assert(element = 2);;
assert(is_empty q1 = false);;   (*[21, 34, 39]*)
let q1 = add 19 q1;;   (* [19, 21, 34, 39]*)
let q1 = add 23 q1;;   (* [19, 21, 23, 34, 39]*)

(* -------q2------ *)
let q2 = empty;;
assert(is_empty q2 = true);;   (*[]*)
assert(is_empty q2 = true);;   (*[]*)
let q2 = add 18 q2;;   (* [18]*)
let (element, q2) = delete_min q2;;   (* 18 * []*)
assert(element = 18);;
let q2 = add 7 q2;;   (* [7]*)
let q2 = add 6 q2;;   (* [6, 7]*)
let (element, q2) = delete_min q2;;   (* 6 * [7]*)
assert(element = 6);;
let q2 = add 11 q2;;   (* [7, 11]*)
let q2 = add 31 q2;;   (* [7, 11, 31]*)
let (element, q2) = delete_min q2;;   (* 7 * [11, 31]*)
assert(element = 7);;
let (element, q2) = delete_min q2;;   (* 11 * [31]*)
assert(element = 11);;
let q2 = add 16 q2;;   (* [16, 31]*)
let (element, q2) = delete_min q2;;   (* 16 * [31]*)
assert(element = 16);;

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;   (*[19, 21, 23, 31, 34]*)
let (element, q) = delete_min q;;   (* 19 * [21, 23, 31, 34, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 21 * [23, 31, 34, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 23 * [31, 34, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 31 * [34, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 34 * [39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST5----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 10 q1;;   (* [10]*)
let q1 = add 32 q1;;   (* [10, 32]*)
assert(is_empty q1 = false);;   (*[10, 32]*)
let q1 = add 8 q1;;   (* [8, 10, 32]*)
let q1 = add 10 q1;;   (* [8, 10, 10, 32]*)
let q1 = add 26 q1;;   (* [8, 10, 10, 26, 32]*)
assert(is_empty q1 = false);;   (*[8, 10, 10, 26, 32]*)
let q1 = add 13 q1;;   (* [8, 10, 10, 13, 26, 32]*)
let (element, q1) = delete_min q1;;   (* 8 * [10, 10, 13, 26, 32]*)
assert(element = 8);;
let q1 = add 7 q1;;   (* [7, 10, 10, 13, 26, 32]*)
let q1 = add 4 q1;;   (* [4, 7, 10, 10, 13, 26, 32]*)
let q1 = add 1 q1;;   (* [1, 4, 7, 10, 10, 13, 26, 32]*)
let q1 = add 10 q1;;   (* [1, 4, 7, 10, 10, 10, 13, 26, 32]*)
let (element, q1) = delete_min q1;;   (* 1 * [4, 7, 10, 10, 10, 13, 26, 32]*)
assert(element = 1);;

(* -------q2------ *)
let q2 = empty;;
let q2 = add 35 q2;;   (* [35]*)
let q2 = add 7 q2;;   (* [7, 35]*)
let (element, q2) = delete_min q2;;   (* 7 * [35]*)
assert(element = 7);;
let q2 = add 13 q2;;   (* [13, 35]*)
let q2 = add 25 q2;;   (* [13, 25, 35]*)
let (element, q2) = delete_min q2;;   (* 13 * [25, 35]*)
assert(element = 13);;
let (element, q2) = delete_min q2;;   (* 25 * [35]*)
assert(element = 25);;
let (element, q2) = delete_min q2;;   (* 35 * []*)
assert(element = 35);;
let q2 = add 19 q2;;   (* [19]*)
let (element, q2) = delete_min q2;;   (* 19 * []*)
assert(element = 19);;
let q2 = add 1 q2;;   (* [1]*)
let q2 = add 38 q2;;   (* [1, 38]*)
assert(is_empty q2 = false);;   (*[1, 38]*)
let q2 = add 6 q2;;   (* [1, 6, 38]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;   (*[1, 4, 6, 7, 10, 10, 10, 13, 26, 32]*)
let (element, q) = delete_min q;;   (* 1 * [4, 6, 7, 10, 10, 10, 13, 26, 32, 38]*)
assert(element = 1);;
let (element, q) = delete_min q;;   (* 4 * [6, 7, 10, 10, 10, 13, 26, 32, 38]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 6 * [7, 10, 10, 10, 13, 26, 32, 38]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 7 * [10, 10, 10, 13, 26, 32, 38]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 10 * [10, 10, 13, 26, 32, 38]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 10 * [10, 13, 26, 32, 38]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 10 * [13, 26, 32, 38]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 13 * [26, 32, 38]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 26 * [32, 38]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 32 * [38]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 38 * []*)
assert(element = 38);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST6----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 32 q1;;   (* [32]*)
let q1 = add 5 q1;;   (* [5, 32]*)
let q1 = add 2 q1;;   (* [2, 5, 32]*)
let q1 = add 3 q1;;   (* [2, 3, 5, 32]*)
let q1 = add 2 q1;;   (* [2, 2, 3, 5, 32]*)
let q1 = add 12 q1;;   (* [2, 2, 3, 5, 12, 32]*)
let q1 = add 31 q1;;   (* [2, 2, 3, 5, 12, 31, 32]*)
let q1 = add 22 q1;;   (* [2, 2, 3, 5, 12, 22, 31, 32]*)
let q1 = add 20 q1;;   (* [2, 2, 3, 5, 12, 20, 22, 31, 32]*)
let q1 = add 15 q1;;   (* [2, 2, 3, 5, 12, 15, 20, 22, 31, 32]*)
let (element, q1) = delete_min q1;;   (* 2 * [2, 3, 5, 12, 15, 20, 22, 31, 32]*)
assert(element = 2);;
let q1 = add 21 q1;;   (* [2, 3, 5, 12, 15, 20, 21, 22, 31, 32]*)
let q1 = add 16 q1;;   (* [2, 3, 5, 12, 15, 16, 20, 21, 22, 31, 32]*)
let (element, q1) = delete_min q1;;   (* 2 * [3, 5, 12, 15, 16, 20, 21, 22, 31, 32]*)
assert(element = 2);;
let q1 = add 37 q1;;   (* [3, 5, 12, 15, 16, 20, 21, 22, 31, 32, 37]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 38 q2;;   (* [38]*)
assert(is_empty q2 = false);;   (*[38]*)
let q2 = add 27 q2;;   (* [27, 38]*)
let q2 = add 38 q2;;   (* [27, 38, 38]*)
let q2 = add 28 q2;;   (* [27, 28, 38, 38]*)
let (element, q2) = delete_min q2;;   (* 27 * [28, 38, 38]*)
assert(element = 27);;
let q2 = add 34 q2;;   (* [28, 34, 38, 38]*)
let q2 = add 21 q2;;   (* [21, 28, 34, 38, 38]*)
let (element, q2) = delete_min q2;;   (* 21 * [28, 34, 38, 38]*)
assert(element = 21);;
let q2 = add 28 q2;;   (* [28, 28, 34, 38, 38]*)
let q2 = add 7 q2;;   (* [7, 28, 28, 34, 38, 38]*)
let (element, q2) = delete_min q2;;   (* 7 * [28, 28, 34, 38, 38]*)
assert(element = 7);;
assert(is_empty q2 = false);;   (*[28, 28, 34, 38, 38]*)
assert(is_empty q2 = false);;   (*[28, 28, 34, 38, 38]*)
let q2 = add 17 q2;;   (* [17, 28, 28, 34, 38, 38]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;   (*[3, 5, 12, 15, 16, 17, 20, 21, 22, 28, 28, 31, 32, 34, 37, 38]*)
let (element, q) = delete_min q;;   (* 3 * [5, 12, 15, 16, 17, 20, 21, 22, 28, 28, 31, 32, 34, 37, 38, 38]*)
assert(element = 3);;
let (element, q) = delete_min q;;   (* 5 * [12, 15, 16, 17, 20, 21, 22, 28, 28, 31, 32, 34, 37, 38, 38]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 12 * [15, 16, 17, 20, 21, 22, 28, 28, 31, 32, 34, 37, 38, 38]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 15 * [16, 17, 20, 21, 22, 28, 28, 31, 32, 34, 37, 38, 38]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [17, 20, 21, 22, 28, 28, 31, 32, 34, 37, 38, 38]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 17 * [20, 21, 22, 28, 28, 31, 32, 34, 37, 38, 38]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 20 * [21, 22, 28, 28, 31, 32, 34, 37, 38, 38]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [22, 28, 28, 31, 32, 34, 37, 38, 38]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [28, 28, 31, 32, 34, 37, 38, 38]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 28 * [28, 31, 32, 34, 37, 38, 38]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [31, 32, 34, 37, 38, 38]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 31 * [32, 34, 37, 38, 38]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [34, 37, 38, 38]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 34 * [37, 38, 38]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 37 * [38, 38]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * []*)
assert(element = 38);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST7----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 19 q1;;   (* [19]*)
let q1 = add 3 q1;;   (* [3, 19]*)
let q1 = add 0 q1;;   (* [0, 3, 19]*)
let (element, q1) = delete_min q1;;   (* 0 * [3, 19]*)
assert(element = 0);;
let q1 = add 25 q1;;   (* [3, 19, 25]*)
let q1 = add 26 q1;;   (* [3, 19, 25, 26]*)
let q1 = add 24 q1;;   (* [3, 19, 24, 25, 26]*)
let q1 = add 24 q1;;   (* [3, 19, 24, 24, 25, 26]*)
let q1 = add 1 q1;;   (* [1, 3, 19, 24, 24, 25, 26]*)
let q1 = add 30 q1;;   (* [1, 3, 19, 24, 24, 25, 26, 30]*)
let q1 = add 10 q1;;   (* [1, 3, 10, 19, 24, 24, 25, 26, 30]*)
let (element, q1) = delete_min q1;;   (* 1 * [3, 10, 19, 24, 24, 25, 26, 30]*)
assert(element = 1);;
let q1 = add 33 q1;;   (* [3, 10, 19, 24, 24, 25, 26, 30, 33]*)
let (element, q1) = delete_min q1;;   (* 3 * [10, 19, 24, 24, 25, 26, 30, 33]*)
assert(element = 3);;
let (element, q1) = delete_min q1;;   (* 10 * [19, 24, 24, 25, 26, 30, 33]*)
assert(element = 10);;
let q1 = add 37 q1;;   (* [19, 24, 24, 25, 26, 30, 33, 37]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 13 q2;;   (* [13]*)
let (element, q2) = delete_min q2;;   (* 13 * []*)
assert(element = 13);;
let q2 = add 37 q2;;   (* [37]*)
let q2 = add 15 q2;;   (* [15, 37]*)
let q2 = add 29 q2;;   (* [15, 29, 37]*)
let q2 = add 27 q2;;   (* [15, 27, 29, 37]*)
let q2 = add 3 q2;;   (* [3, 15, 27, 29, 37]*)
let q2 = add 13 q2;;   (* [3, 13, 15, 27, 29, 37]*)
let q2 = add 33 q2;;   (* [3, 13, 15, 27, 29, 33, 37]*)
let q2 = add 6 q2;;   (* [3, 6, 13, 15, 27, 29, 33, 37]*)
let q2 = add 28 q2;;   (* [3, 6, 13, 15, 27, 28, 29, 33, 37]*)
assert(is_empty q2 = false);;   (*[3, 6, 13, 15, 27, 28, 29, 33, 37]*)
let (element, q2) = delete_min q2;;   (* 3 * [6, 13, 15, 27, 28, 29, 33, 37]*)
assert(element = 3);;
let q2 = add 14 q2;;   (* [6, 13, 14, 15, 27, 28, 29, 33, 37]*)
let (element, q2) = delete_min q2;;   (* 6 * [13, 14, 15, 27, 28, 29, 33, 37]*)
assert(element = 6);;
let (element, q2) = delete_min q2;;   (* 13 * [14, 15, 27, 28, 29, 33, 37]*)
assert(element = 13);;

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;   (*[14, 15, 19, 24, 24, 25, 26, 27, 28, 29, 30, 33, 33, 37]*)
let (element, q) = delete_min q;;   (* 14 * [15, 19, 24, 24, 25, 26, 27, 28, 29, 30, 33, 33, 37, 37]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [19, 24, 24, 25, 26, 27, 28, 29, 30, 33, 33, 37, 37]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 19 * [24, 24, 25, 26, 27, 28, 29, 30, 33, 33, 37, 37]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 24 * [24, 25, 26, 27, 28, 29, 30, 33, 33, 37, 37]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [25, 26, 27, 28, 29, 30, 33, 33, 37, 37]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [26, 27, 28, 29, 30, 33, 33, 37, 37]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [27, 28, 29, 30, 33, 33, 37, 37]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [28, 29, 30, 33, 33, 37, 37]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [29, 30, 33, 33, 37, 37]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [30, 33, 33, 37, 37]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [33, 33, 37, 37]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 33 * [33, 37, 37]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [37, 37]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 37 * [37]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * []*)
assert(element = 37);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST8----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 2 q1;;   (* [2]*)
let (element, q1) = delete_min q1;;   (* 2 * []*)
assert(element = 2);;
let q1 = add 17 q1;;   (* [17]*)
let (element, q1) = delete_min q1;;   (* 17 * []*)
assert(element = 17);;
let q1 = add 15 q1;;   (* [15]*)
let (element, q1) = delete_min q1;;   (* 15 * []*)
assert(element = 15);;
let q1 = add 25 q1;;   (* [25]*)
let q1 = add 22 q1;;   (* [22, 25]*)
let (element, q1) = delete_min q1;;   (* 22 * [25]*)
assert(element = 22);;
let q1 = add 3 q1;;   (* [3, 25]*)
let q1 = add 20 q1;;   (* [3, 20, 25]*)
let q1 = add 3 q1;;   (* [3, 3, 20, 25]*)
let q1 = add 17 q1;;   (* [3, 3, 17, 20, 25]*)
let (element, q1) = delete_min q1;;   (* 3 * [3, 17, 20, 25]*)
assert(element = 3);;
let q1 = add 23 q1;;   (* [3, 17, 20, 23, 25]*)
let q1 = add 36 q1;;   (* [3, 17, 20, 23, 25, 36]*)
assert(is_empty q1 = false);;   (*[3, 17, 20, 23, 25, 36]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 2 q2;;   (* [2]*)
let q2 = add 10 q2;;   (* [2, 10]*)
let q2 = add 17 q2;;   (* [2, 10, 17]*)
let q2 = add 9 q2;;   (* [2, 9, 10, 17]*)
let (element, q2) = delete_min q2;;   (* 2 * [9, 10, 17]*)
assert(element = 2);;
let q2 = add 18 q2;;   (* [9, 10, 17, 18]*)
let (element, q2) = delete_min q2;;   (* 9 * [10, 17, 18]*)
assert(element = 9);;
let q2 = add 8 q2;;   (* [8, 10, 17, 18]*)
let q2 = add 31 q2;;   (* [8, 10, 17, 18, 31]*)
let q2 = add 31 q2;;   (* [8, 10, 17, 18, 31, 31]*)
let q2 = add 30 q2;;   (* [8, 10, 17, 18, 30, 31, 31]*)
assert(is_empty q2 = false);;   (*[8, 10, 17, 18, 30, 31, 31]*)
let q2 = add 31 q2;;   (* [8, 10, 17, 18, 30, 31, 31, 31]*)
let (element, q2) = delete_min q2;;   (* 8 * [10, 17, 18, 30, 31, 31, 31]*)
assert(element = 8);;
let (element, q2) = delete_min q2;;   (* 10 * [17, 18, 30, 31, 31, 31]*)
assert(element = 10);;
let q2 = add 17 q2;;   (* [17, 17, 18, 30, 31, 31, 31]*)
let q2 = add 6 q2;;   (* [6, 17, 17, 18, 30, 31, 31, 31]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;   (*[3, 6, 17, 17, 17, 18, 20, 23, 25, 30, 31, 31, 31]*)
let (element, q) = delete_min q;;   (* 3 * [6, 17, 17, 17, 18, 20, 23, 25, 30, 31, 31, 31, 36]*)
assert(element = 3);;
let (element, q) = delete_min q;;   (* 6 * [17, 17, 17, 18, 20, 23, 25, 30, 31, 31, 31, 36]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 17 * [17, 17, 18, 20, 23, 25, 30, 31, 31, 31, 36]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [17, 18, 20, 23, 25, 30, 31, 31, 31, 36]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [18, 20, 23, 25, 30, 31, 31, 31, 36]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [20, 23, 25, 30, 31, 31, 31, 36]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 20 * [23, 25, 30, 31, 31, 31, 36]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 23 * [25, 30, 31, 31, 31, 36]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 25 * [30, 31, 31, 31, 36]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 31, 36]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 31, 36]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [31, 36]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [36]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 36 * []*)
assert(element = 36);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST9----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 5 q1;;   (* [5]*)
let (element, q1) = delete_min q1;;   (* 5 * []*)
assert(element = 5);;
let q1 = add 2 q1;;   (* [2]*)
let (element, q1) = delete_min q1;;   (* 2 * []*)
assert(element = 2);;
let q1 = add 37 q1;;   (* [37]*)
let q1 = add 20 q1;;   (* [20, 37]*)
let (element, q1) = delete_min q1;;   (* 20 * [37]*)
assert(element = 20);;
let q1 = add 5 q1;;   (* [5, 37]*)
let (element, q1) = delete_min q1;;   (* 5 * [37]*)
assert(element = 5);;
let q1 = add 29 q1;;   (* [29, 37]*)
let q1 = add 23 q1;;   (* [23, 29, 37]*)
let q1 = add 26 q1;;   (* [23, 26, 29, 37]*)
let q1 = add 16 q1;;   (* [16, 23, 26, 29, 37]*)
assert(is_empty q1 = false);;   (*[16, 23, 26, 29, 37]*)
let q1 = add 34 q1;;   (* [16, 23, 26, 29, 34, 37]*)
let (element, q1) = delete_min q1;;   (* 16 * [23, 26, 29, 34, 37]*)
assert(element = 16);;
let (element, q1) = delete_min q1;;   (* 23 * [26, 29, 34, 37]*)
assert(element = 23);;
let q1 = add 26 q1;;   (* [26, 26, 29, 34, 37]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 21 q2;;   (* [21]*)
assert(is_empty q2 = false);;   (*[21]*)
let (element, q2) = delete_min q2;;   (* 21 * []*)
assert(element = 21);;
let q2 = add 1 q2;;   (* [1]*)
let (element, q2) = delete_min q2;;   (* 1 * []*)
assert(element = 1);;
let q2 = add 35 q2;;   (* [35]*)
let q2 = add 12 q2;;   (* [12, 35]*)
let q2 = add 5 q2;;   (* [5, 12, 35]*)
let q2 = add 36 q2;;   (* [5, 12, 35, 36]*)
let q2 = add 27 q2;;   (* [5, 12, 27, 35, 36]*)
let (element, q2) = delete_min q2;;   (* 5 * [12, 27, 35, 36]*)
assert(element = 5);;
let (element, q2) = delete_min q2;;   (* 12 * [27, 35, 36]*)
assert(element = 12);;
let q2 = add 37 q2;;   (* [27, 35, 36, 37]*)
let (element, q2) = delete_min q2;;   (* 27 * [35, 36, 37]*)
assert(element = 27);;
assert(is_empty q2 = false);;   (*[35, 36, 37]*)
let q2 = add 6 q2;;   (* [6, 35, 36, 37]*)
let q2 = add 39 q2;;   (* [6, 35, 36, 37, 39]*)
let q2 = add 21 q2;;   (* [6, 21, 35, 36, 37, 39]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;   (*[6, 21, 26, 26, 29, 34, 35, 36, 37, 37]*)
let (element, q) = delete_min q;;   (* 6 * [21, 26, 26, 29, 34, 35, 36, 37, 37, 39]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 21 * [26, 26, 29, 34, 35, 36, 37, 37, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 26 * [26, 29, 34, 35, 36, 37, 37, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [29, 34, 35, 36, 37, 37, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 29 * [34, 35, 36, 37, 37, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 34 * [35, 36, 37, 37, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [36, 37, 37, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [37, 37, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [37, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST10----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 38 q1;;   (* [38]*)
let q1 = add 17 q1;;   (* [17, 38]*)
let (element, q1) = delete_min q1;;   (* 17 * [38]*)
assert(element = 17);;
assert(is_empty q1 = false);;   (*[38]*)
let q1 = add 24 q1;;   (* [24, 38]*)
assert(is_empty q1 = false);;   (*[24, 38]*)
let q1 = add 28 q1;;   (* [24, 28, 38]*)
let q1 = add 21 q1;;   (* [21, 24, 28, 38]*)
let q1 = add 32 q1;;   (* [21, 24, 28, 32, 38]*)
let q1 = add 6 q1;;   (* [6, 21, 24, 28, 32, 38]*)
let q1 = add 7 q1;;   (* [6, 7, 21, 24, 28, 32, 38]*)
let q1 = add 25 q1;;   (* [6, 7, 21, 24, 25, 28, 32, 38]*)
let (element, q1) = delete_min q1;;   (* 6 * [7, 21, 24, 25, 28, 32, 38]*)
assert(element = 6);;
let q1 = add 32 q1;;   (* [7, 21, 24, 25, 28, 32, 32, 38]*)
let q1 = add 37 q1;;   (* [7, 21, 24, 25, 28, 32, 32, 37, 38]*)
let q1 = add 38 q1;;   (* [7, 21, 24, 25, 28, 32, 32, 37, 38, 38]*)
let q1 = add 18 q1;;   (* [7, 18, 21, 24, 25, 28, 32, 32, 37, 38, 38]*)
let (element, q1) = delete_min q1;;   (* 7 * [18, 21, 24, 25, 28, 32, 32, 37, 38, 38]*)
assert(element = 7);;
let q1 = add 33 q1;;   (* [18, 21, 24, 25, 28, 32, 32, 33, 37, 38, 38]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 2 q2;;   (* [2]*)
let q2 = add 17 q2;;   (* [2, 17]*)
let q2 = add 38 q2;;   (* [2, 17, 38]*)
let q2 = add 5 q2;;   (* [2, 5, 17, 38]*)
let (element, q2) = delete_min q2;;   (* 2 * [5, 17, 38]*)
assert(element = 2);;
let q2 = add 35 q2;;   (* [5, 17, 35, 38]*)
assert(is_empty q2 = false);;   (*[5, 17, 35, 38]*)
let q2 = add 11 q2;;   (* [5, 11, 17, 35, 38]*)
let q2 = add 27 q2;;   (* [5, 11, 17, 27, 35, 38]*)
let (element, q2) = delete_min q2;;   (* 5 * [11, 17, 27, 35, 38]*)
assert(element = 5);;
let q2 = add 17 q2;;   (* [11, 17, 17, 27, 35, 38]*)
let q2 = add 27 q2;;   (* [11, 17, 17, 27, 27, 35, 38]*)
let q2 = add 17 q2;;   (* [11, 17, 17, 17, 27, 27, 35, 38]*)
let q2 = add 12 q2;;   (* [11, 12, 17, 17, 17, 27, 27, 35, 38]*)
let q2 = add 39 q2;;   (* [11, 12, 17, 17, 17, 27, 27, 35, 38, 39]*)
let q2 = add 31 q2;;   (* [11, 12, 17, 17, 17, 27, 27, 31, 35, 38, 39]*)
let q2 = add 37 q2;;   (* [11, 12, 17, 17, 17, 27, 27, 31, 35, 37, 38, 39]*)
let (element, q2) = delete_min q2;;   (* 11 * [12, 17, 17, 17, 27, 27, 31, 35, 37, 38, 39]*)
assert(element = 11);;
let (element, q2) = delete_min q2;;   (* 12 * [17, 17, 17, 27, 27, 31, 35, 37, 38, 39]*)
assert(element = 12);;

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;   (*[17, 17, 17, 18, 21, 24, 25, 27, 27, 28, 31, 32, 32, 33, 35, 37, 37, 38, 38, 38]*)
let (element, q) = delete_min q;;   (* 17 * [17, 17, 18, 21, 24, 25, 27, 27, 28, 31, 32, 32, 33, 35, 37, 37, 38, 38, 38, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [17, 18, 21, 24, 25, 27, 27, 28, 31, 32, 32, 33, 35, 37, 37, 38, 38, 38, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [18, 21, 24, 25, 27, 27, 28, 31, 32, 32, 33, 35, 37, 37, 38, 38, 38, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [21, 24, 25, 27, 27, 28, 31, 32, 32, 33, 35, 37, 37, 38, 38, 38, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 21 * [24, 25, 27, 27, 28, 31, 32, 32, 33, 35, 37, 37, 38, 38, 38, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 24 * [25, 27, 27, 28, 31, 32, 32, 33, 35, 37, 37, 38, 38, 38, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [27, 27, 28, 31, 32, 32, 33, 35, 37, 37, 38, 38, 38, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 27 * [27, 28, 31, 32, 32, 33, 35, 37, 37, 38, 38, 38, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [28, 31, 32, 32, 33, 35, 37, 37, 38, 38, 38, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [31, 32, 32, 33, 35, 37, 37, 38, 38, 38, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 33, 35, 37, 37, 38, 38, 38, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 35, 37, 37, 38, 38, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 35, 37, 37, 38, 38, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [35, 37, 37, 38, 38, 38, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 35 * [37, 37, 38, 38, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 37 * [37, 38, 38, 38, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [38, 38, 38, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST11----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 37 q1;;   (* [37]*)
let q1 = add 15 q1;;   (* [15, 37]*)
let q1 = add 9 q1;;   (* [9, 15, 37]*)
let q1 = add 36 q1;;   (* [9, 15, 36, 37]*)
let q1 = add 1 q1;;   (* [1, 9, 15, 36, 37]*)
assert(is_empty q1 = false);;   (*[1, 9, 15, 36, 37]*)
let q1 = add 3 q1;;   (* [1, 3, 9, 15, 36, 37]*)
let q1 = add 21 q1;;   (* [1, 3, 9, 15, 21, 36, 37]*)
let q1 = add 12 q1;;   (* [1, 3, 9, 12, 15, 21, 36, 37]*)
let q1 = add 13 q1;;   (* [1, 3, 9, 12, 13, 15, 21, 36, 37]*)
let q1 = add 19 q1;;   (* [1, 3, 9, 12, 13, 15, 19, 21, 36, 37]*)
let q1 = add 15 q1;;   (* [1, 3, 9, 12, 13, 15, 15, 19, 21, 36, 37]*)
let (element, q1) = delete_min q1;;   (* 1 * [3, 9, 12, 13, 15, 15, 19, 21, 36, 37]*)
assert(element = 1);;
let q1 = add 37 q1;;   (* [3, 9, 12, 13, 15, 15, 19, 21, 36, 37, 37]*)
let (element, q1) = delete_min q1;;   (* 3 * [9, 12, 13, 15, 15, 19, 21, 36, 37, 37]*)
assert(element = 3);;
let q1 = add 5 q1;;   (* [5, 9, 12, 13, 15, 15, 19, 21, 36, 37, 37]*)
let q1 = add 15 q1;;   (* [5, 9, 12, 13, 15, 15, 15, 19, 21, 36, 37, 37]*)
let q1 = add 12 q1;;   (* [5, 9, 12, 12, 13, 15, 15, 15, 19, 21, 36, 37, 37]*)
let q1 = add 39 q1;;   (* [5, 9, 12, 12, 13, 15, 15, 15, 19, 21, 36, 37, 37, 39]*)
let (element, q1) = delete_min q1;;   (* 5 * [9, 12, 12, 13, 15, 15, 15, 19, 21, 36, 37, 37, 39]*)
assert(element = 5);;

(* -------q2------ *)
let q2 = empty;;
let q2 = add 37 q2;;   (* [37]*)
let (element, q2) = delete_min q2;;   (* 37 * []*)
assert(element = 37);;
let q2 = add 38 q2;;   (* [38]*)
assert(is_empty q2 = false);;   (*[38]*)
let q2 = add 5 q2;;   (* [5, 38]*)
let (element, q2) = delete_min q2;;   (* 5 * [38]*)
assert(element = 5);;
let (element, q2) = delete_min q2;;   (* 38 * []*)
assert(element = 38);;
let q2 = add 27 q2;;   (* [27]*)
let q2 = add 33 q2;;   (* [27, 33]*)
let (element, q2) = delete_min q2;;   (* 27 * [33]*)
assert(element = 27);;
let (element, q2) = delete_min q2;;   (* 33 * []*)
assert(element = 33);;
let q2 = add 28 q2;;   (* [28]*)
let (element, q2) = delete_min q2;;   (* 28 * []*)
assert(element = 28);;
let q2 = add 28 q2;;   (* [28]*)
let q2 = add 32 q2;;   (* [28, 32]*)
let q2 = add 25 q2;;   (* [25, 28, 32]*)
let q2 = add 4 q2;;   (* [4, 25, 28, 32]*)
let q2 = add 19 q2;;   (* [4, 19, 25, 28, 32]*)
let q2 = add 37 q2;;   (* [4, 19, 25, 28, 32, 37]*)
let (element, q2) = delete_min q2;;   (* 4 * [19, 25, 28, 32, 37]*)
assert(element = 4);;

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;   (*[9, 12, 12, 13, 15, 15, 15, 19, 19, 21, 25, 28, 32, 36, 37, 37, 37]*)
let (element, q) = delete_min q;;   (* 9 * [12, 12, 13, 15, 15, 15, 19, 19, 21, 25, 28, 32, 36, 37, 37, 37, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 12 * [12, 13, 15, 15, 15, 19, 19, 21, 25, 28, 32, 36, 37, 37, 37, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 12 * [13, 15, 15, 15, 19, 19, 21, 25, 28, 32, 36, 37, 37, 37, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 13 * [15, 15, 15, 19, 19, 21, 25, 28, 32, 36, 37, 37, 37, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 15 * [15, 15, 19, 19, 21, 25, 28, 32, 36, 37, 37, 37, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [15, 19, 19, 21, 25, 28, 32, 36, 37, 37, 37, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [19, 19, 21, 25, 28, 32, 36, 37, 37, 37, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 19 * [19, 21, 25, 28, 32, 36, 37, 37, 37, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [21, 25, 28, 32, 36, 37, 37, 37, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 21 * [25, 28, 32, 36, 37, 37, 37, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 25 * [28, 32, 36, 37, 37, 37, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 28 * [32, 36, 37, 37, 37, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 32 * [36, 37, 37, 37, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 36 * [37, 37, 37, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [37, 37, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [37, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST12----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 34 q1;;   (* [34]*)
let q1 = add 15 q1;;   (* [15, 34]*)
let (element, q1) = delete_min q1;;   (* 15 * [34]*)
assert(element = 15);;
let q1 = add 29 q1;;   (* [29, 34]*)
let q1 = add 8 q1;;   (* [8, 29, 34]*)
let (element, q1) = delete_min q1;;   (* 8 * [29, 34]*)
assert(element = 8);;
let (element, q1) = delete_min q1;;   (* 29 * [34]*)
assert(element = 29);;
let (element, q1) = delete_min q1;;   (* 34 * []*)
assert(element = 34);;
let q1 = add 19 q1;;   (* [19]*)
let q1 = add 37 q1;;   (* [19, 37]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 23 q2;;   (* [23]*)
let q2 = add 27 q2;;   (* [23, 27]*)
let q2 = add 12 q2;;   (* [12, 23, 27]*)
let q2 = add 30 q2;;   (* [12, 23, 27, 30]*)
let q2 = add 4 q2;;   (* [4, 12, 23, 27, 30]*)
let q2 = add 24 q2;;   (* [4, 12, 23, 24, 27, 30]*)
let q2 = add 36 q2;;   (* [4, 12, 23, 24, 27, 30, 36]*)
let q2 = add 16 q2;;   (* [4, 12, 16, 23, 24, 27, 30, 36]*)
let (element, q2) = delete_min q2;;   (* 4 * [12, 16, 23, 24, 27, 30, 36]*)
assert(element = 4);;
let (element, q2) = delete_min q2;;   (* 12 * [16, 23, 24, 27, 30, 36]*)
assert(element = 12);;

(* -------q3------ *)
let q3 = empty;;
let q3 = add 21 q3;;   (* [21]*)
let (element, q3) = delete_min q3;;   (* 21 * []*)
assert(element = 21);;
let q3 = add 15 q3;;   (* [15]*)
let q3 = add 31 q3;;   (* [15, 31]*)
let q3 = add 36 q3;;   (* [15, 31, 36]*)
let q3 = add 26 q3;;   (* [15, 26, 31, 36]*)
assert(is_empty q3 = false);;   (*[15, 26, 31, 36]*)
let q3 = add 12 q3;;   (* [12, 15, 26, 31, 36]*)
let q3 = add 39 q3;;   (* [12, 15, 26, 31, 36, 39]*)
let (element, q3) = delete_min q3;;   (* 12 * [15, 26, 31, 36, 39]*)
assert(element = 12);;

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;   (*[15, 16, 19, 23, 24, 26, 27, 30, 31, 36, 36, 37]*)
let (element, q) = delete_min q;;   (* 15 * [16, 19, 23, 24, 26, 27, 30, 31, 36, 36, 37, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [19, 23, 24, 26, 27, 30, 31, 36, 36, 37, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 19 * [23, 24, 26, 27, 30, 31, 36, 36, 37, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 23 * [24, 26, 27, 30, 31, 36, 36, 37, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [26, 27, 30, 31, 36, 36, 37, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 26 * [27, 30, 31, 36, 36, 37, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [30, 31, 36, 36, 37, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 30 * [31, 36, 36, 37, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [36, 36, 37, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST13----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 39 q1;;   (* [39]*)
let (element, q1) = delete_min q1;;   (* 39 * []*)
assert(element = 39);;
let q1 = add 9 q1;;   (* [9]*)
let q1 = add 19 q1;;   (* [9, 19]*)
assert(is_empty q1 = false);;   (*[9, 19]*)
let (element, q1) = delete_min q1;;   (* 9 * [19]*)
assert(element = 9);;
let (element, q1) = delete_min q1;;   (* 19 * []*)
assert(element = 19);;
assert(is_empty q1 = true);;   (*[]*)
let q1 = add 5 q1;;   (* [5]*)
let q1 = add 9 q1;;   (* [5, 9]*)
let q1 = add 30 q1;;   (* [5, 9, 30]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 27 q2;;   (* [27]*)
let q2 = add 14 q2;;   (* [14, 27]*)
let q2 = add 21 q2;;   (* [14, 21, 27]*)
let q2 = add 35 q2;;   (* [14, 21, 27, 35]*)
let q2 = add 24 q2;;   (* [14, 21, 24, 27, 35]*)
let q2 = add 18 q2;;   (* [14, 18, 21, 24, 27, 35]*)
let q2 = add 28 q2;;   (* [14, 18, 21, 24, 27, 28, 35]*)
let (element, q2) = delete_min q2;;   (* 14 * [18, 21, 24, 27, 28, 35]*)
assert(element = 14);;
let q2 = add 16 q2;;   (* [16, 18, 21, 24, 27, 28, 35]*)
let q2 = add 13 q2;;   (* [13, 16, 18, 21, 24, 27, 28, 35]*)
let q2 = add 10 q2;;   (* [10, 13, 16, 18, 21, 24, 27, 28, 35]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 39 q3;;   (* [39]*)
let q3 = add 32 q3;;   (* [32, 39]*)
let q3 = add 38 q3;;   (* [32, 38, 39]*)
let q3 = add 8 q3;;   (* [8, 32, 38, 39]*)
let q3 = add 26 q3;;   (* [8, 26, 32, 38, 39]*)
let q3 = add 21 q3;;   (* [8, 21, 26, 32, 38, 39]*)
assert(is_empty q3 = false);;   (*[8, 21, 26, 32, 38, 39]*)
let q3 = add 5 q3;;   (* [5, 8, 21, 26, 32, 38, 39]*)
let q3 = add 4 q3;;   (* [4, 5, 8, 21, 26, 32, 38, 39]*)
let q3 = add 37 q3;;   (* [4, 5, 8, 21, 26, 32, 37, 38, 39]*)
let q3 = add 10 q3;;   (* [4, 5, 8, 10, 21, 26, 32, 37, 38, 39]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;   (*[4, 5, 5, 8, 9, 10, 10, 13, 16, 18, 21, 21, 24, 26, 27, 28, 30, 32, 35, 37, 38]*)
let (element, q) = delete_min q;;   (* 4 * [5, 5, 8, 9, 10, 10, 13, 16, 18, 21, 21, 24, 26, 27, 28, 30, 32, 35, 37, 38, 39]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 5 * [5, 8, 9, 10, 10, 13, 16, 18, 21, 21, 24, 26, 27, 28, 30, 32, 35, 37, 38, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 5 * [8, 9, 10, 10, 13, 16, 18, 21, 21, 24, 26, 27, 28, 30, 32, 35, 37, 38, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 8 * [9, 10, 10, 13, 16, 18, 21, 21, 24, 26, 27, 28, 30, 32, 35, 37, 38, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 9 * [10, 10, 13, 16, 18, 21, 21, 24, 26, 27, 28, 30, 32, 35, 37, 38, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 10 * [10, 13, 16, 18, 21, 21, 24, 26, 27, 28, 30, 32, 35, 37, 38, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 10 * [13, 16, 18, 21, 21, 24, 26, 27, 28, 30, 32, 35, 37, 38, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 13 * [16, 18, 21, 21, 24, 26, 27, 28, 30, 32, 35, 37, 38, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 16 * [18, 21, 21, 24, 26, 27, 28, 30, 32, 35, 37, 38, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 18 * [21, 21, 24, 26, 27, 28, 30, 32, 35, 37, 38, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 21 * [21, 24, 26, 27, 28, 30, 32, 35, 37, 38, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [24, 26, 27, 28, 30, 32, 35, 37, 38, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 24 * [26, 27, 28, 30, 32, 35, 37, 38, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 26 * [27, 28, 30, 32, 35, 37, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [28, 30, 32, 35, 37, 38, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [30, 32, 35, 37, 38, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 30 * [32, 35, 37, 38, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 32 * [35, 37, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 35 * [37, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 37 * [38, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST14----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 31 q1;;   (* [31]*)
let (element, q1) = delete_min q1;;   (* 31 * []*)
assert(element = 31);;
assert(is_empty q1 = true);;   (*[]*)
let q1 = add 24 q1;;   (* [24]*)
let q1 = add 36 q1;;   (* [24, 36]*)
let q1 = add 26 q1;;   (* [24, 26, 36]*)
let q1 = add 0 q1;;   (* [0, 24, 26, 36]*)
let q1 = add 38 q1;;   (* [0, 24, 26, 36, 38]*)
let q1 = add 0 q1;;   (* [0, 0, 24, 26, 36, 38]*)
let q1 = add 3 q1;;   (* [0, 0, 3, 24, 26, 36, 38]*)
let q1 = add 8 q1;;   (* [0, 0, 3, 8, 24, 26, 36, 38]*)
assert(is_empty q1 = false);;   (*[0, 0, 3, 8, 24, 26, 36, 38]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 1 q2;;   (* [1]*)
let (element, q2) = delete_min q2;;   (* 1 * []*)
assert(element = 1);;
let q2 = add 10 q2;;   (* [10]*)
let q2 = add 38 q2;;   (* [10, 38]*)
let q2 = add 19 q2;;   (* [10, 19, 38]*)
let q2 = add 38 q2;;   (* [10, 19, 38, 38]*)
assert(is_empty q2 = false);;   (*[10, 19, 38, 38]*)
let q2 = add 8 q2;;   (* [8, 10, 19, 38, 38]*)
let q2 = add 38 q2;;   (* [8, 10, 19, 38, 38, 38]*)
let q2 = add 31 q2;;   (* [8, 10, 19, 31, 38, 38, 38]*)
let (element, q2) = delete_min q2;;   (* 8 * [10, 19, 31, 38, 38, 38]*)
assert(element = 8);;
let (element, q2) = delete_min q2;;   (* 10 * [19, 31, 38, 38, 38]*)
assert(element = 10);;

(* -------q3------ *)
let q3 = empty;;
let q3 = add 26 q3;;   (* [26]*)
assert(is_empty q3 = false);;   (*[26]*)
let q3 = add 2 q3;;   (* [2, 26]*)
let (element, q3) = delete_min q3;;   (* 2 * [26]*)
assert(element = 2);;
let q3 = add 34 q3;;   (* [26, 34]*)
assert(is_empty q3 = false);;   (*[26, 34]*)
assert(is_empty q3 = false);;   (*[26, 34]*)
let q3 = add 24 q3;;   (* [24, 26, 34]*)
let q3 = add 13 q3;;   (* [13, 24, 26, 34]*)
let q3 = add 5 q3;;   (* [5, 13, 24, 26, 34]*)
let q3 = add 1 q3;;   (* [1, 5, 13, 24, 26, 34]*)
let q3 = add 4 q3;;   (* [1, 4, 5, 13, 24, 26, 34]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;   (*[0, 0, 1, 3, 4, 5, 8, 13, 19, 24, 24, 26, 26, 31, 34, 36, 38, 38, 38]*)
let (element, q) = delete_min q;;   (* 0 * [0, 1, 3, 4, 5, 8, 13, 19, 24, 24, 26, 26, 31, 34, 36, 38, 38, 38, 38]*)
assert(element = 0);;
let (element, q) = delete_min q;;   (* 0 * [1, 3, 4, 5, 8, 13, 19, 24, 24, 26, 26, 31, 34, 36, 38, 38, 38, 38]*)
assert(element = 0);;
let (element, q) = delete_min q;;   (* 1 * [3, 4, 5, 8, 13, 19, 24, 24, 26, 26, 31, 34, 36, 38, 38, 38, 38]*)
assert(element = 1);;
let (element, q) = delete_min q;;   (* 3 * [4, 5, 8, 13, 19, 24, 24, 26, 26, 31, 34, 36, 38, 38, 38, 38]*)
assert(element = 3);;
let (element, q) = delete_min q;;   (* 4 * [5, 8, 13, 19, 24, 24, 26, 26, 31, 34, 36, 38, 38, 38, 38]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 5 * [8, 13, 19, 24, 24, 26, 26, 31, 34, 36, 38, 38, 38, 38]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 8 * [13, 19, 24, 24, 26, 26, 31, 34, 36, 38, 38, 38, 38]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 13 * [19, 24, 24, 26, 26, 31, 34, 36, 38, 38, 38, 38]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 19 * [24, 24, 26, 26, 31, 34, 36, 38, 38, 38, 38]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 24 * [24, 26, 26, 31, 34, 36, 38, 38, 38, 38]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [26, 26, 31, 34, 36, 38, 38, 38, 38]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 26 * [26, 31, 34, 36, 38, 38, 38, 38]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [31, 34, 36, 38, 38, 38, 38]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 31 * [34, 36, 38, 38, 38, 38]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 34 * [36, 38, 38, 38, 38]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 36 * [38, 38, 38, 38]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 38]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 38]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * []*)
assert(element = 38);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST15----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 37 q1;;   (* [37]*)
let q1 = add 25 q1;;   (* [25, 37]*)
let q1 = add 23 q1;;   (* [23, 25, 37]*)
let q1 = add 32 q1;;   (* [23, 25, 32, 37]*)
let (element, q1) = delete_min q1;;   (* 23 * [25, 32, 37]*)
assert(element = 23);;
let q1 = add 27 q1;;   (* [25, 27, 32, 37]*)
let q1 = add 5 q1;;   (* [5, 25, 27, 32, 37]*)
let q1 = add 1 q1;;   (* [1, 5, 25, 27, 32, 37]*)
let q1 = add 8 q1;;   (* [1, 5, 8, 25, 27, 32, 37]*)
let q1 = add 28 q1;;   (* [1, 5, 8, 25, 27, 28, 32, 37]*)
let q1 = add 10 q1;;   (* [1, 5, 8, 10, 25, 27, 28, 32, 37]*)
let q1 = add 18 q1;;   (* [1, 5, 8, 10, 18, 25, 27, 28, 32, 37]*)
let (element, q1) = delete_min q1;;   (* 1 * [5, 8, 10, 18, 25, 27, 28, 32, 37]*)
assert(element = 1);;

(* -------q2------ *)
let q2 = empty;;
let q2 = add 14 q2;;   (* [14]*)
assert(is_empty q2 = false);;   (*[14]*)
let q2 = add 32 q2;;   (* [14, 32]*)
let q2 = add 17 q2;;   (* [14, 17, 32]*)
let (element, q2) = delete_min q2;;   (* 14 * [17, 32]*)
assert(element = 14);;
let q2 = add 24 q2;;   (* [17, 24, 32]*)
let q2 = add 24 q2;;   (* [17, 24, 24, 32]*)
let q2 = add 30 q2;;   (* [17, 24, 24, 30, 32]*)
let (element, q2) = delete_min q2;;   (* 17 * [24, 24, 30, 32]*)
assert(element = 17);;
let (element, q2) = delete_min q2;;   (* 24 * [24, 30, 32]*)
assert(element = 24);;
let q2 = add 24 q2;;   (* [24, 24, 30, 32]*)
assert(is_empty q2 = false);;   (*[24, 24, 30, 32]*)
let (element, q2) = delete_min q2;;   (* 24 * [24, 30, 32]*)
assert(element = 24);;

(* -------q3------ *)
let q3 = empty;;
let q3 = add 5 q3;;   (* [5]*)
let q3 = add 10 q3;;   (* [5, 10]*)
let q3 = add 7 q3;;   (* [5, 7, 10]*)
let q3 = add 5 q3;;   (* [5, 5, 7, 10]*)
let q3 = add 9 q3;;   (* [5, 5, 7, 9, 10]*)
let (element, q3) = delete_min q3;;   (* 5 * [5, 7, 9, 10]*)
assert(element = 5);;
let q3 = add 1 q3;;   (* [1, 5, 7, 9, 10]*)
let q3 = add 6 q3;;   (* [1, 5, 6, 7, 9, 10]*)
let (element, q3) = delete_min q3;;   (* 1 * [5, 6, 7, 9, 10]*)
assert(element = 1);;
let (element, q3) = delete_min q3;;   (* 5 * [6, 7, 9, 10]*)
assert(element = 5);;
let q3 = add 8 q3;;   (* [6, 7, 8, 9, 10]*)
let q3 = add 24 q3;;   (* [6, 7, 8, 9, 10, 24]*)
let q3 = add 9 q3;;   (* [6, 7, 8, 9, 9, 10, 24]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;   (*[5, 6, 7, 8, 8, 9, 9, 10, 10, 18, 24, 24, 25, 27, 28, 30, 32, 32]*)
let (element, q) = delete_min q;;   (* 5 * [6, 7, 8, 8, 9, 9, 10, 10, 18, 24, 24, 25, 27, 28, 30, 32, 32, 37]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 6 * [7, 8, 8, 9, 9, 10, 10, 18, 24, 24, 25, 27, 28, 30, 32, 32, 37]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 7 * [8, 8, 9, 9, 10, 10, 18, 24, 24, 25, 27, 28, 30, 32, 32, 37]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 8 * [8, 9, 9, 10, 10, 18, 24, 24, 25, 27, 28, 30, 32, 32, 37]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 8 * [9, 9, 10, 10, 18, 24, 24, 25, 27, 28, 30, 32, 32, 37]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 9 * [9, 10, 10, 18, 24, 24, 25, 27, 28, 30, 32, 32, 37]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 9 * [10, 10, 18, 24, 24, 25, 27, 28, 30, 32, 32, 37]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 10 * [10, 18, 24, 24, 25, 27, 28, 30, 32, 32, 37]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 10 * [18, 24, 24, 25, 27, 28, 30, 32, 32, 37]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 18 * [24, 24, 25, 27, 28, 30, 32, 32, 37]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 24 * [24, 25, 27, 28, 30, 32, 32, 37]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [25, 27, 28, 30, 32, 32, 37]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [27, 28, 30, 32, 32, 37]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 27 * [28, 30, 32, 32, 37]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [30, 32, 32, 37]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 30 * [32, 32, 37]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 32 * [32, 37]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [37]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 37 * []*)
assert(element = 37);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST16----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 17 q1;;   (* [17]*)
let (element, q1) = delete_min q1;;   (* 17 * []*)
assert(element = 17);;
let q1 = add 23 q1;;   (* [23]*)
let (element, q1) = delete_min q1;;   (* 23 * []*)
assert(element = 23);;
let q1 = add 28 q1;;   (* [28]*)
let (element, q1) = delete_min q1;;   (* 28 * []*)
assert(element = 28);;
let q1 = add 7 q1;;   (* [7]*)
let q1 = add 14 q1;;   (* [7, 14]*)
let q1 = add 28 q1;;   (* [7, 14, 28]*)
let q1 = add 20 q1;;   (* [7, 14, 20, 28]*)
let q1 = add 25 q1;;   (* [7, 14, 20, 25, 28]*)
let q1 = add 4 q1;;   (* [4, 7, 14, 20, 25, 28]*)
let (element, q1) = delete_min q1;;   (* 4 * [7, 14, 20, 25, 28]*)
assert(element = 4);;
assert(is_empty q1 = false);;   (*[7, 14, 20, 25, 28]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 32 q2;;   (* [32]*)
let (element, q2) = delete_min q2;;   (* 32 * []*)
assert(element = 32);;
let q2 = add 34 q2;;   (* [34]*)
let (element, q2) = delete_min q2;;   (* 34 * []*)
assert(element = 34);;
assert(is_empty q2 = true);;   (*[]*)
let q2 = add 16 q2;;   (* [16]*)
let (element, q2) = delete_min q2;;   (* 16 * []*)
assert(element = 16);;
let q2 = add 36 q2;;   (* [36]*)
let (element, q2) = delete_min q2;;   (* 36 * []*)
assert(element = 36);;
let q2 = add 37 q2;;   (* [37]*)
let (element, q2) = delete_min q2;;   (* 37 * []*)
assert(element = 37);;
let q2 = add 38 q2;;   (* [38]*)
let q2 = add 32 q2;;   (* [32, 38]*)
let q2 = add 21 q2;;   (* [21, 32, 38]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 17 q3;;   (* [17]*)
let q3 = add 36 q3;;   (* [17, 36]*)
let q3 = add 36 q3;;   (* [17, 36, 36]*)
let q3 = add 33 q3;;   (* [17, 33, 36, 36]*)
let q3 = add 11 q3;;   (* [11, 17, 33, 36, 36]*)
let (element, q3) = delete_min q3;;   (* 11 * [17, 33, 36, 36]*)
assert(element = 11);;
let q3 = add 37 q3;;   (* [17, 33, 36, 36, 37]*)
let q3 = add 3 q3;;   (* [3, 17, 33, 36, 36, 37]*)
let q3 = add 26 q3;;   (* [3, 17, 26, 33, 36, 36, 37]*)
let (element, q3) = delete_min q3;;   (* 3 * [17, 26, 33, 36, 36, 37]*)
assert(element = 3);;
let q3 = add 19 q3;;   (* [17, 19, 26, 33, 36, 36, 37]*)
let q3 = add 14 q3;;   (* [14, 17, 19, 26, 33, 36, 36, 37]*)
let (element, q3) = delete_min q3;;   (* 14 * [17, 19, 26, 33, 36, 36, 37]*)
assert(element = 14);;
let q3 = add 37 q3;;   (* [17, 19, 26, 33, 36, 36, 37, 37]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;   (*[7, 14, 17, 19, 20, 21, 25, 26, 28, 32, 33, 36, 36, 37, 37]*)
let (element, q) = delete_min q;;   (* 7 * [14, 17, 19, 20, 21, 25, 26, 28, 32, 33, 36, 36, 37, 37, 38]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 14 * [17, 19, 20, 21, 25, 26, 28, 32, 33, 36, 36, 37, 37, 38]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 17 * [19, 20, 21, 25, 26, 28, 32, 33, 36, 36, 37, 37, 38]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 19 * [20, 21, 25, 26, 28, 32, 33, 36, 36, 37, 37, 38]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [21, 25, 26, 28, 32, 33, 36, 36, 37, 37, 38]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [25, 26, 28, 32, 33, 36, 36, 37, 37, 38]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 25 * [26, 28, 32, 33, 36, 36, 37, 37, 38]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [28, 32, 33, 36, 36, 37, 37, 38]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 28 * [32, 33, 36, 36, 37, 37, 38]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 32 * [33, 36, 36, 37, 37, 38]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [36, 36, 37, 37, 38]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 37, 38]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 37, 38]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [37, 38]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [38]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * []*)
assert(element = 38);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST17----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 39 q1;;   (* [39]*)
let (element, q1) = delete_min q1;;   (* 39 * []*)
assert(element = 39);;
let q1 = add 33 q1;;   (* [33]*)
let q1 = add 5 q1;;   (* [5, 33]*)
let (element, q1) = delete_min q1;;   (* 5 * [33]*)
assert(element = 5);;
let (element, q1) = delete_min q1;;   (* 33 * []*)
assert(element = 33);;
let q1 = add 26 q1;;   (* [26]*)
assert(is_empty q1 = false);;   (*[26]*)
let q1 = add 8 q1;;   (* [8, 26]*)
let q1 = add 18 q1;;   (* [8, 18, 26]*)
let q1 = add 16 q1;;   (* [8, 16, 18, 26]*)
let q1 = add 7 q1;;   (* [7, 8, 16, 18, 26]*)
let (element, q1) = delete_min q1;;   (* 7 * [8, 16, 18, 26]*)
assert(element = 7);;
assert(is_empty q1 = false);;   (*[8, 16, 18, 26]*)
let (element, q1) = delete_min q1;;   (* 8 * [16, 18, 26]*)
assert(element = 8);;

(* -------q2------ *)
let q2 = empty;;
let q2 = add 7 q2;;   (* [7]*)
let q2 = add 30 q2;;   (* [7, 30]*)
let q2 = add 35 q2;;   (* [7, 30, 35]*)
let q2 = add 9 q2;;   (* [7, 9, 30, 35]*)
let q2 = add 0 q2;;   (* [0, 7, 9, 30, 35]*)
assert(is_empty q2 = false);;   (*[0, 7, 9, 30, 35]*)
let (element, q2) = delete_min q2;;   (* 0 * [7, 9, 30, 35]*)
assert(element = 0);;
let q2 = add 27 q2;;   (* [7, 9, 27, 30, 35]*)
assert(is_empty q2 = false);;   (*[7, 9, 27, 30, 35]*)
let q2 = add 0 q2;;   (* [0, 7, 9, 27, 30, 35]*)
let q2 = add 3 q2;;   (* [0, 3, 7, 9, 27, 30, 35]*)
let q2 = add 7 q2;;   (* [0, 3, 7, 7, 9, 27, 30, 35]*)
let q2 = add 5 q2;;   (* [0, 3, 5, 7, 7, 9, 27, 30, 35]*)
let (element, q2) = delete_min q2;;   (* 0 * [3, 5, 7, 7, 9, 27, 30, 35]*)
assert(element = 0);;
let q2 = add 20 q2;;   (* [3, 5, 7, 7, 9, 20, 27, 30, 35]*)

(* -------q3------ *)
let q3 = empty;;
assert(is_empty q3 = true);;   (*[]*)
let q3 = add 6 q3;;   (* [6]*)
assert(is_empty q3 = false);;   (*[6]*)
let q3 = add 24 q3;;   (* [6, 24]*)
let q3 = add 25 q3;;   (* [6, 24, 25]*)
let q3 = add 19 q3;;   (* [6, 19, 24, 25]*)
let (element, q3) = delete_min q3;;   (* 6 * [19, 24, 25]*)
assert(element = 6);;
let q3 = add 10 q3;;   (* [10, 19, 24, 25]*)
let q3 = add 5 q3;;   (* [5, 10, 19, 24, 25]*)
let q3 = add 12 q3;;   (* [5, 10, 12, 19, 24, 25]*)
let q3 = add 33 q3;;   (* [5, 10, 12, 19, 24, 25, 33]*)
let q3 = add 5 q3;;   (* [5, 5, 10, 12, 19, 24, 25, 33]*)
let (element, q3) = delete_min q3;;   (* 5 * [5, 10, 12, 19, 24, 25, 33]*)
assert(element = 5);;
let q3 = add 28 q3;;   (* [5, 10, 12, 19, 24, 25, 28, 33]*)
assert(is_empty q3 = false);;   (*[5, 10, 12, 19, 24, 25, 28, 33]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;   (*[3, 5, 5, 7, 7, 9, 10, 12, 16, 18, 19, 20, 24, 25, 26, 27, 28, 30, 33]*)
let (element, q) = delete_min q;;   (* 3 * [5, 5, 7, 7, 9, 10, 12, 16, 18, 19, 20, 24, 25, 26, 27, 28, 30, 33, 35]*)
assert(element = 3);;
let (element, q) = delete_min q;;   (* 5 * [5, 7, 7, 9, 10, 12, 16, 18, 19, 20, 24, 25, 26, 27, 28, 30, 33, 35]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 5 * [7, 7, 9, 10, 12, 16, 18, 19, 20, 24, 25, 26, 27, 28, 30, 33, 35]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 7 * [7, 9, 10, 12, 16, 18, 19, 20, 24, 25, 26, 27, 28, 30, 33, 35]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 7 * [9, 10, 12, 16, 18, 19, 20, 24, 25, 26, 27, 28, 30, 33, 35]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 9 * [10, 12, 16, 18, 19, 20, 24, 25, 26, 27, 28, 30, 33, 35]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 10 * [12, 16, 18, 19, 20, 24, 25, 26, 27, 28, 30, 33, 35]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 12 * [16, 18, 19, 20, 24, 25, 26, 27, 28, 30, 33, 35]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 16 * [18, 19, 20, 24, 25, 26, 27, 28, 30, 33, 35]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 18 * [19, 20, 24, 25, 26, 27, 28, 30, 33, 35]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [20, 24, 25, 26, 27, 28, 30, 33, 35]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [24, 25, 26, 27, 28, 30, 33, 35]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 24 * [25, 26, 27, 28, 30, 33, 35]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [26, 27, 28, 30, 33, 35]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [27, 28, 30, 33, 35]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [28, 30, 33, 35]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [30, 33, 35]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 30 * [33, 35]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 33 * [35]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 35 * []*)
assert(element = 35);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST18----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 15 q1;;   (* [15]*)
let q1 = add 38 q1;;   (* [15, 38]*)
let (element, q1) = delete_min q1;;   (* 15 * [38]*)
assert(element = 15);;
let q1 = add 21 q1;;   (* [21, 38]*)
assert(is_empty q1 = false);;   (*[21, 38]*)
let q1 = add 10 q1;;   (* [10, 21, 38]*)
let q1 = add 4 q1;;   (* [4, 10, 21, 38]*)
let (element, q1) = delete_min q1;;   (* 4 * [10, 21, 38]*)
assert(element = 4);;
let q1 = add 19 q1;;   (* [10, 19, 21, 38]*)
let q1 = add 0 q1;;   (* [0, 10, 19, 21, 38]*)
let q1 = add 31 q1;;   (* [0, 10, 19, 21, 31, 38]*)
let q1 = add 19 q1;;   (* [0, 10, 19, 19, 21, 31, 38]*)
let (element, q1) = delete_min q1;;   (* 0 * [10, 19, 19, 21, 31, 38]*)
assert(element = 0);;
let q1 = add 29 q1;;   (* [10, 19, 19, 21, 29, 31, 38]*)
let q1 = add 39 q1;;   (* [10, 19, 19, 21, 29, 31, 38, 39]*)
assert(is_empty q1 = false);;   (*[10, 19, 19, 21, 29, 31, 38, 39]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 12 q2;;   (* [12]*)
let q2 = add 15 q2;;   (* [12, 15]*)
let (element, q2) = delete_min q2;;   (* 12 * [15]*)
assert(element = 12);;
let q2 = add 21 q2;;   (* [15, 21]*)
let (element, q2) = delete_min q2;;   (* 15 * [21]*)
assert(element = 15);;
let (element, q2) = delete_min q2;;   (* 21 * []*)
assert(element = 21);;
let q2 = add 11 q2;;   (* [11]*)
let (element, q2) = delete_min q2;;   (* 11 * []*)
assert(element = 11);;
let q2 = add 15 q2;;   (* [15]*)
let q2 = add 34 q2;;   (* [15, 34]*)
let q2 = add 34 q2;;   (* [15, 34, 34]*)
let (element, q2) = delete_min q2;;   (* 15 * [34, 34]*)
assert(element = 15);;
let q2 = add 9 q2;;   (* [9, 34, 34]*)
let q2 = add 22 q2;;   (* [9, 22, 34, 34]*)
let q2 = add 31 q2;;   (* [9, 22, 31, 34, 34]*)
let (element, q2) = delete_min q2;;   (* 9 * [22, 31, 34, 34]*)
assert(element = 9);;

(* -------q3------ *)
let q3 = empty;;
let q3 = add 28 q3;;   (* [28]*)
let q3 = add 18 q3;;   (* [18, 28]*)
let (element, q3) = delete_min q3;;   (* 18 * [28]*)
assert(element = 18);;
let q3 = add 25 q3;;   (* [25, 28]*)
let (element, q3) = delete_min q3;;   (* 25 * [28]*)
assert(element = 25);;
let q3 = add 19 q3;;   (* [19, 28]*)
let q3 = add 6 q3;;   (* [6, 19, 28]*)
let q3 = add 12 q3;;   (* [6, 12, 19, 28]*)
let q3 = add 7 q3;;   (* [6, 7, 12, 19, 28]*)
let q3 = add 12 q3;;   (* [6, 7, 12, 12, 19, 28]*)
let q3 = add 32 q3;;   (* [6, 7, 12, 12, 19, 28, 32]*)
let q3 = add 4 q3;;   (* [4, 6, 7, 12, 12, 19, 28, 32]*)
let (element, q3) = delete_min q3;;   (* 4 * [6, 7, 12, 12, 19, 28, 32]*)
assert(element = 4);;
let q3 = add 30 q3;;   (* [6, 7, 12, 12, 19, 28, 30, 32]*)
let q3 = add 4 q3;;   (* [4, 6, 7, 12, 12, 19, 28, 30, 32]*)
let (element, q3) = delete_min q3;;   (* 4 * [6, 7, 12, 12, 19, 28, 30, 32]*)
assert(element = 4);;

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;   (*[6, 7, 10, 12, 12, 19, 19, 19, 21, 22, 28, 29, 30, 31, 31, 32, 34, 34, 38]*)
let (element, q) = delete_min q;;   (* 6 * [7, 10, 12, 12, 19, 19, 19, 21, 22, 28, 29, 30, 31, 31, 32, 34, 34, 38, 39]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 7 * [10, 12, 12, 19, 19, 19, 21, 22, 28, 29, 30, 31, 31, 32, 34, 34, 38, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 10 * [12, 12, 19, 19, 19, 21, 22, 28, 29, 30, 31, 31, 32, 34, 34, 38, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 12 * [12, 19, 19, 19, 21, 22, 28, 29, 30, 31, 31, 32, 34, 34, 38, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 12 * [19, 19, 19, 21, 22, 28, 29, 30, 31, 31, 32, 34, 34, 38, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 19 * [19, 19, 21, 22, 28, 29, 30, 31, 31, 32, 34, 34, 38, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [19, 21, 22, 28, 29, 30, 31, 31, 32, 34, 34, 38, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [21, 22, 28, 29, 30, 31, 31, 32, 34, 34, 38, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 21 * [22, 28, 29, 30, 31, 31, 32, 34, 34, 38, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [28, 29, 30, 31, 31, 32, 34, 34, 38, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 28 * [29, 30, 31, 31, 32, 34, 34, 38, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [30, 31, 31, 32, 34, 34, 38, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 32, 34, 34, 38, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 32, 34, 34, 38, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [32, 34, 34, 38, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [34, 34, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 34 * [34, 38, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [38, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 38 * [39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST19----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 8 q1;;   (* [8]*)
assert(is_empty q1 = false);;   (*[8]*)
let q1 = add 12 q1;;   (* [8, 12]*)
let (element, q1) = delete_min q1;;   (* 8 * [12]*)
assert(element = 8);;
assert(is_empty q1 = false);;   (*[12]*)
let (element, q1) = delete_min q1;;   (* 12 * []*)
assert(element = 12);;
let q1 = add 7 q1;;   (* [7]*)
let q1 = add 2 q1;;   (* [2, 7]*)
let (element, q1) = delete_min q1;;   (* 2 * [7]*)
assert(element = 2);;
let q1 = add 6 q1;;   (* [6, 7]*)
let q1 = add 14 q1;;   (* [6, 7, 14]*)
let q1 = add 22 q1;;   (* [6, 7, 14, 22]*)
let q1 = add 7 q1;;   (* [6, 7, 7, 14, 22]*)
assert(is_empty q1 = false);;   (*[6, 7, 7, 14, 22]*)
let (element, q1) = delete_min q1;;   (* 6 * [7, 7, 14, 22]*)
assert(element = 6);;
let q1 = add 12 q1;;   (* [7, 7, 12, 14, 22]*)
let q1 = add 1 q1;;   (* [1, 7, 7, 12, 14, 22]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 8 q2;;   (* [8]*)
let (element, q2) = delete_min q2;;   (* 8 * []*)
assert(element = 8);;
let q2 = add 36 q2;;   (* [36]*)
assert(is_empty q2 = false);;   (*[36]*)
let q2 = add 21 q2;;   (* [21, 36]*)
let (element, q2) = delete_min q2;;   (* 21 * [36]*)
assert(element = 21);;
let (element, q2) = delete_min q2;;   (* 36 * []*)
assert(element = 36);;
let q2 = add 26 q2;;   (* [26]*)
let q2 = add 23 q2;;   (* [23, 26]*)
let q2 = add 36 q2;;   (* [23, 26, 36]*)
let q2 = add 4 q2;;   (* [4, 23, 26, 36]*)
let q2 = add 23 q2;;   (* [4, 23, 23, 26, 36]*)
let q2 = add 11 q2;;   (* [4, 11, 23, 23, 26, 36]*)
let (element, q2) = delete_min q2;;   (* 4 * [11, 23, 23, 26, 36]*)
assert(element = 4);;
let q2 = add 21 q2;;   (* [11, 21, 23, 23, 26, 36]*)
assert(is_empty q2 = false);;   (*[11, 21, 23, 23, 26, 36]*)
let q2 = add 30 q2;;   (* [11, 21, 23, 23, 26, 30, 36]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 18 q3;;   (* [18]*)
let q3 = add 38 q3;;   (* [18, 38]*)
let (element, q3) = delete_min q3;;   (* 18 * [38]*)
assert(element = 18);;
let q3 = add 18 q3;;   (* [18, 38]*)
let q3 = add 11 q3;;   (* [11, 18, 38]*)
let q3 = add 28 q3;;   (* [11, 18, 28, 38]*)
let q3 = add 18 q3;;   (* [11, 18, 18, 28, 38]*)
let q3 = add 5 q3;;   (* [5, 11, 18, 18, 28, 38]*)
let (element, q3) = delete_min q3;;   (* 5 * [11, 18, 18, 28, 38]*)
assert(element = 5);;
let (element, q3) = delete_min q3;;   (* 11 * [18, 18, 28, 38]*)
assert(element = 11);;
assert(is_empty q3 = false);;   (*[18, 18, 28, 38]*)
let (element, q3) = delete_min q3;;   (* 18 * [18, 28, 38]*)
assert(element = 18);;
let (element, q3) = delete_min q3;;   (* 18 * [28, 38]*)
assert(element = 18);;
let q3 = add 31 q3;;   (* [28, 31, 38]*)
let q3 = add 28 q3;;   (* [28, 28, 31, 38]*)
assert(is_empty q3 = false);;   (*[28, 28, 31, 38]*)
assert(is_empty q3 = false);;   (*[28, 28, 31, 38]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;   (*[1, 7, 7, 11, 12, 14, 21, 22, 23, 23, 26, 28, 28, 30, 31, 36]*)
let (element, q) = delete_min q;;   (* 1 * [7, 7, 11, 12, 14, 21, 22, 23, 23, 26, 28, 28, 30, 31, 36, 38]*)
assert(element = 1);;
let (element, q) = delete_min q;;   (* 7 * [7, 11, 12, 14, 21, 22, 23, 23, 26, 28, 28, 30, 31, 36, 38]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 7 * [11, 12, 14, 21, 22, 23, 23, 26, 28, 28, 30, 31, 36, 38]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 11 * [12, 14, 21, 22, 23, 23, 26, 28, 28, 30, 31, 36, 38]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 12 * [14, 21, 22, 23, 23, 26, 28, 28, 30, 31, 36, 38]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 14 * [21, 22, 23, 23, 26, 28, 28, 30, 31, 36, 38]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 21 * [22, 23, 23, 26, 28, 28, 30, 31, 36, 38]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [23, 23, 26, 28, 28, 30, 31, 36, 38]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [23, 26, 28, 28, 30, 31, 36, 38]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [26, 28, 28, 30, 31, 36, 38]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 26 * [28, 28, 30, 31, 36, 38]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 28 * [28, 30, 31, 36, 38]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [30, 31, 36, 38]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 30 * [31, 36, 38]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [36, 38]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 36 * [38]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 38 * []*)
assert(element = 38);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST20----*)

(* -------q1------ *)
let q1 = empty;;
assert(is_empty q1 = true);;   (*[]*)
assert(is_empty q1 = true);;   (*[]*)
let q1 = add 0 q1;;   (* [0]*)
let q1 = add 4 q1;;   (* [0, 4]*)
let (element, q1) = delete_min q1;;   (* 0 * [4]*)
assert(element = 0);;
let q1 = add 7 q1;;   (* [4, 7]*)
let (element, q1) = delete_min q1;;   (* 4 * [7]*)
assert(element = 4);;
let q1 = add 11 q1;;   (* [7, 11]*)
let (element, q1) = delete_min q1;;   (* 7 * [11]*)
assert(element = 7);;
let q1 = add 4 q1;;   (* [4, 11]*)
let (element, q1) = delete_min q1;;   (* 4 * [11]*)
assert(element = 4);;
let (element, q1) = delete_min q1;;   (* 11 * []*)
assert(element = 11);;
let q1 = add 24 q1;;   (* [24]*)
let q1 = add 14 q1;;   (* [14, 24]*)
let (element, q1) = delete_min q1;;   (* 14 * [24]*)
assert(element = 14);;
let q1 = add 21 q1;;   (* [21, 24]*)
let q1 = add 0 q1;;   (* [0, 21, 24]*)
let q1 = add 33 q1;;   (* [0, 21, 24, 33]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 38 q2;;   (* [38]*)
assert(is_empty q2 = false);;   (*[38]*)
let (element, q2) = delete_min q2;;   (* 38 * []*)
assert(element = 38);;
let q2 = add 17 q2;;   (* [17]*)
let q2 = add 29 q2;;   (* [17, 29]*)
let q2 = add 2 q2;;   (* [2, 17, 29]*)
let q2 = add 15 q2;;   (* [2, 15, 17, 29]*)
assert(is_empty q2 = false);;   (*[2, 15, 17, 29]*)
let (element, q2) = delete_min q2;;   (* 2 * [15, 17, 29]*)
assert(element = 2);;
let (element, q2) = delete_min q2;;   (* 15 * [17, 29]*)
assert(element = 15);;
let q2 = add 1 q2;;   (* [1, 17, 29]*)
let q2 = add 19 q2;;   (* [1, 17, 19, 29]*)
let q2 = add 26 q2;;   (* [1, 17, 19, 26, 29]*)
let q2 = add 7 q2;;   (* [1, 7, 17, 19, 26, 29]*)
let (element, q2) = delete_min q2;;   (* 1 * [7, 17, 19, 26, 29]*)
assert(element = 1);;
let q2 = add 37 q2;;   (* [7, 17, 19, 26, 29, 37]*)
let q2 = add 10 q2;;   (* [7, 10, 17, 19, 26, 29, 37]*)
let q2 = add 23 q2;;   (* [7, 10, 17, 19, 23, 26, 29, 37]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 3 q3;;   (* [3]*)
let q3 = add 15 q3;;   (* [3, 15]*)
let (element, q3) = delete_min q3;;   (* 3 * [15]*)
assert(element = 3);;
let q3 = add 18 q3;;   (* [15, 18]*)
let q3 = add 13 q3;;   (* [13, 15, 18]*)
let q3 = add 7 q3;;   (* [7, 13, 15, 18]*)
let (element, q3) = delete_min q3;;   (* 7 * [13, 15, 18]*)
assert(element = 7);;
let q3 = add 21 q3;;   (* [13, 15, 18, 21]*)
let (element, q3) = delete_min q3;;   (* 13 * [15, 18, 21]*)
assert(element = 13);;
let q3 = add 25 q3;;   (* [15, 18, 21, 25]*)
let (element, q3) = delete_min q3;;   (* 15 * [18, 21, 25]*)
assert(element = 15);;
let (element, q3) = delete_min q3;;   (* 18 * [21, 25]*)
assert(element = 18);;
let q3 = add 3 q3;;   (* [3, 21, 25]*)
let (element, q3) = delete_min q3;;   (* 3 * [21, 25]*)
assert(element = 3);;
let (element, q3) = delete_min q3;;   (* 21 * [25]*)
assert(element = 21);;
let q3 = add 19 q3;;   (* [19, 25]*)
let q3 = add 20 q3;;   (* [19, 20, 25]*)
let q3 = add 15 q3;;   (* [15, 19, 20, 25]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;   (*[0, 7, 10, 15, 17, 19, 19, 20, 21, 23, 24, 25, 26, 29, 33]*)
let (element, q) = delete_min q;;   (* 0 * [7, 10, 15, 17, 19, 19, 20, 21, 23, 24, 25, 26, 29, 33, 37]*)
assert(element = 0);;
let (element, q) = delete_min q;;   (* 7 * [10, 15, 17, 19, 19, 20, 21, 23, 24, 25, 26, 29, 33, 37]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 10 * [15, 17, 19, 19, 20, 21, 23, 24, 25, 26, 29, 33, 37]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 15 * [17, 19, 19, 20, 21, 23, 24, 25, 26, 29, 33, 37]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 17 * [19, 19, 20, 21, 23, 24, 25, 26, 29, 33, 37]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 19 * [19, 20, 21, 23, 24, 25, 26, 29, 33, 37]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [20, 21, 23, 24, 25, 26, 29, 33, 37]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [21, 23, 24, 25, 26, 29, 33, 37]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [23, 24, 25, 26, 29, 33, 37]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 23 * [24, 25, 26, 29, 33, 37]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [25, 26, 29, 33, 37]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [26, 29, 33, 37]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [29, 33, 37]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 29 * [33, 37]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 33 * [37]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 37 * []*)
assert(element = 37);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST21----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 10 q1;;   (* [10]*)
let q1 = add 31 q1;;   (* [10, 31]*)
let q1 = add 31 q1;;   (* [10, 31, 31]*)
let (element, q1) = delete_min q1;;   (* 10 * [31, 31]*)
assert(element = 10);;
assert(is_empty q1 = false);;   (*[31, 31]*)
let (element, q1) = delete_min q1;;   (* 31 * [31]*)
assert(element = 31);;
let q1 = add 19 q1;;   (* [19, 31]*)
let (element, q1) = delete_min q1;;   (* 19 * [31]*)
assert(element = 19);;
let q1 = add 10 q1;;   (* [10, 31]*)
let q1 = add 19 q1;;   (* [10, 19, 31]*)
let (element, q1) = delete_min q1;;   (* 10 * [19, 31]*)
assert(element = 10);;
let q1 = add 10 q1;;   (* [10, 19, 31]*)
let q1 = add 36 q1;;   (* [10, 19, 31, 36]*)
let (element, q1) = delete_min q1;;   (* 10 * [19, 31, 36]*)
assert(element = 10);;
let q1 = add 22 q1;;   (* [19, 22, 31, 36]*)
let q1 = add 20 q1;;   (* [19, 20, 22, 31, 36]*)
let q1 = add 15 q1;;   (* [15, 19, 20, 22, 31, 36]*)
let q1 = add 22 q1;;   (* [15, 19, 20, 22, 22, 31, 36]*)
let q1 = add 26 q1;;   (* [15, 19, 20, 22, 22, 26, 31, 36]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 5 q2;;   (* [5]*)
assert(is_empty q2 = false);;   (*[5]*)
let q2 = add 29 q2;;   (* [5, 29]*)
let q2 = add 22 q2;;   (* [5, 22, 29]*)
let q2 = add 22 q2;;   (* [5, 22, 22, 29]*)
let (element, q2) = delete_min q2;;   (* 5 * [22, 22, 29]*)
assert(element = 5);;
let (element, q2) = delete_min q2;;   (* 22 * [22, 29]*)
assert(element = 22);;
let (element, q2) = delete_min q2;;   (* 22 * [29]*)
assert(element = 22);;
let q2 = add 32 q2;;   (* [29, 32]*)
let (element, q2) = delete_min q2;;   (* 29 * [32]*)
assert(element = 29);;
let q2 = add 33 q2;;   (* [32, 33]*)
let q2 = add 12 q2;;   (* [12, 32, 33]*)
let q2 = add 7 q2;;   (* [7, 12, 32, 33]*)
let q2 = add 9 q2;;   (* [7, 9, 12, 32, 33]*)
let q2 = add 25 q2;;   (* [7, 9, 12, 25, 32, 33]*)
let q2 = add 2 q2;;   (* [2, 7, 9, 12, 25, 32, 33]*)
let q2 = add 14 q2;;   (* [2, 7, 9, 12, 14, 25, 32, 33]*)
let q2 = add 5 q2;;   (* [2, 5, 7, 9, 12, 14, 25, 32, 33]*)
let q2 = add 2 q2;;   (* [2, 2, 5, 7, 9, 12, 14, 25, 32, 33]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 35 q3;;   (* [35]*)
let (element, q3) = delete_min q3;;   (* 35 * []*)
assert(element = 35);;
let q3 = add 18 q3;;   (* [18]*)
let q3 = add 29 q3;;   (* [18, 29]*)
let q3 = add 22 q3;;   (* [18, 22, 29]*)
let (element, q3) = delete_min q3;;   (* 18 * [22, 29]*)
assert(element = 18);;
assert(is_empty q3 = false);;   (*[22, 29]*)
let q3 = add 8 q3;;   (* [8, 22, 29]*)
let q3 = add 16 q3;;   (* [8, 16, 22, 29]*)
let q3 = add 31 q3;;   (* [8, 16, 22, 29, 31]*)
let (element, q3) = delete_min q3;;   (* 8 * [16, 22, 29, 31]*)
assert(element = 8);;
let q3 = add 2 q3;;   (* [2, 16, 22, 29, 31]*)
let q3 = add 29 q3;;   (* [2, 16, 22, 29, 29, 31]*)
let (element, q3) = delete_min q3;;   (* 2 * [16, 22, 29, 29, 31]*)
assert(element = 2);;
assert(is_empty q3 = false);;   (*[16, 22, 29, 29, 31]*)
assert(is_empty q3 = false);;   (*[16, 22, 29, 29, 31]*)
let q3 = add 18 q3;;   (* [16, 18, 22, 29, 29, 31]*)
let q3 = add 16 q3;;   (* [16, 16, 18, 22, 29, 29, 31]*)
let (element, q3) = delete_min q3;;   (* 16 * [16, 18, 22, 29, 29, 31]*)
assert(element = 16);;

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;   (*[2, 2, 5, 7, 9, 12, 14, 15, 16, 18, 19, 20, 22, 22, 22, 25, 26, 29, 29, 31, 31, 32, 33]*)
let (element, q) = delete_min q;;   (* 2 * [2, 5, 7, 9, 12, 14, 15, 16, 18, 19, 20, 22, 22, 22, 25, 26, 29, 29, 31, 31, 32, 33, 36]*)
assert(element = 2);;
let (element, q) = delete_min q;;   (* 2 * [5, 7, 9, 12, 14, 15, 16, 18, 19, 20, 22, 22, 22, 25, 26, 29, 29, 31, 31, 32, 33, 36]*)
assert(element = 2);;
let (element, q) = delete_min q;;   (* 5 * [7, 9, 12, 14, 15, 16, 18, 19, 20, 22, 22, 22, 25, 26, 29, 29, 31, 31, 32, 33, 36]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 7 * [9, 12, 14, 15, 16, 18, 19, 20, 22, 22, 22, 25, 26, 29, 29, 31, 31, 32, 33, 36]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 9 * [12, 14, 15, 16, 18, 19, 20, 22, 22, 22, 25, 26, 29, 29, 31, 31, 32, 33, 36]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 12 * [14, 15, 16, 18, 19, 20, 22, 22, 22, 25, 26, 29, 29, 31, 31, 32, 33, 36]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 14 * [15, 16, 18, 19, 20, 22, 22, 22, 25, 26, 29, 29, 31, 31, 32, 33, 36]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [16, 18, 19, 20, 22, 22, 22, 25, 26, 29, 29, 31, 31, 32, 33, 36]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [18, 19, 20, 22, 22, 22, 25, 26, 29, 29, 31, 31, 32, 33, 36]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 18 * [19, 20, 22, 22, 22, 25, 26, 29, 29, 31, 31, 32, 33, 36]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [20, 22, 22, 22, 25, 26, 29, 29, 31, 31, 32, 33, 36]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [22, 22, 22, 25, 26, 29, 29, 31, 31, 32, 33, 36]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 22 * [22, 22, 25, 26, 29, 29, 31, 31, 32, 33, 36]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [22, 25, 26, 29, 29, 31, 31, 32, 33, 36]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [25, 26, 29, 29, 31, 31, 32, 33, 36]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 25 * [26, 29, 29, 31, 31, 32, 33, 36]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [29, 29, 31, 31, 32, 33, 36]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 29 * [29, 31, 31, 32, 33, 36]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [31, 31, 32, 33, 36]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 31 * [31, 32, 33, 36]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [32, 33, 36]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [33, 36]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [36]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 36 * []*)
assert(element = 36);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST22----*)

(* -------q1------ *)
let q1 = empty;;
assert(is_empty q1 = true);;   (*[]*)
let q1 = add 31 q1;;   (* [31]*)
let q1 = add 7 q1;;   (* [7, 31]*)
let (element, q1) = delete_min q1;;   (* 7 * [31]*)
assert(element = 7);;
let q1 = add 39 q1;;   (* [31, 39]*)
let (element, q1) = delete_min q1;;   (* 31 * [39]*)
assert(element = 31);;
let q1 = add 29 q1;;   (* [29, 39]*)
let q1 = add 20 q1;;   (* [20, 29, 39]*)
let q1 = add 1 q1;;   (* [1, 20, 29, 39]*)
let (element, q1) = delete_min q1;;   (* 1 * [20, 29, 39]*)
assert(element = 1);;
let q1 = add 15 q1;;   (* [15, 20, 29, 39]*)
let (element, q1) = delete_min q1;;   (* 15 * [20, 29, 39]*)
assert(element = 15);;
let q1 = add 37 q1;;   (* [20, 29, 37, 39]*)
let q1 = add 37 q1;;   (* [20, 29, 37, 37, 39]*)
let q1 = add 32 q1;;   (* [20, 29, 32, 37, 37, 39]*)
let q1 = add 36 q1;;   (* [20, 29, 32, 36, 37, 37, 39]*)
let q1 = add 30 q1;;   (* [20, 29, 30, 32, 36, 37, 37, 39]*)
let q1 = add 29 q1;;   (* [20, 29, 29, 30, 32, 36, 37, 37, 39]*)
let q1 = add 36 q1;;   (* [20, 29, 29, 30, 32, 36, 36, 37, 37, 39]*)
let q1 = add 39 q1;;   (* [20, 29, 29, 30, 32, 36, 36, 37, 37, 39, 39]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 4 q2;;   (* [4]*)
let q2 = add 18 q2;;   (* [4, 18]*)
assert(is_empty q2 = false);;   (*[4, 18]*)
let q2 = add 26 q2;;   (* [4, 18, 26]*)
let q2 = add 0 q2;;   (* [0, 4, 18, 26]*)
let q2 = add 33 q2;;   (* [0, 4, 18, 26, 33]*)
let (element, q2) = delete_min q2;;   (* 0 * [4, 18, 26, 33]*)
assert(element = 0);;
let q2 = add 26 q2;;   (* [4, 18, 26, 26, 33]*)
let q2 = add 9 q2;;   (* [4, 9, 18, 26, 26, 33]*)
let q2 = add 11 q2;;   (* [4, 9, 11, 18, 26, 26, 33]*)
let (element, q2) = delete_min q2;;   (* 4 * [9, 11, 18, 26, 26, 33]*)
assert(element = 4);;
let (element, q2) = delete_min q2;;   (* 9 * [11, 18, 26, 26, 33]*)
assert(element = 9);;
let (element, q2) = delete_min q2;;   (* 11 * [18, 26, 26, 33]*)
assert(element = 11);;
let q2 = add 34 q2;;   (* [18, 26, 26, 33, 34]*)
let (element, q2) = delete_min q2;;   (* 18 * [26, 26, 33, 34]*)
assert(element = 18);;
let q2 = add 2 q2;;   (* [2, 26, 26, 33, 34]*)
let q2 = add 4 q2;;   (* [2, 4, 26, 26, 33, 34]*)
let q2 = add 14 q2;;   (* [2, 4, 14, 26, 26, 33, 34]*)
let q2 = add 18 q2;;   (* [2, 4, 14, 18, 26, 26, 33, 34]*)
let q2 = add 11 q2;;   (* [2, 4, 11, 14, 18, 26, 26, 33, 34]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 36 q3;;   (* [36]*)
let (element, q3) = delete_min q3;;   (* 36 * []*)
assert(element = 36);;
let q3 = add 4 q3;;   (* [4]*)
assert(is_empty q3 = false);;   (*[4]*)
assert(is_empty q3 = false);;   (*[4]*)
let q3 = add 14 q3;;   (* [4, 14]*)
let q3 = add 14 q3;;   (* [4, 14, 14]*)
let (element, q3) = delete_min q3;;   (* 4 * [14, 14]*)
assert(element = 4);;
let q3 = add 38 q3;;   (* [14, 14, 38]*)
let q3 = add 0 q3;;   (* [0, 14, 14, 38]*)
let q3 = add 12 q3;;   (* [0, 12, 14, 14, 38]*)
let q3 = add 5 q3;;   (* [0, 5, 12, 14, 14, 38]*)
let (element, q3) = delete_min q3;;   (* 0 * [5, 12, 14, 14, 38]*)
assert(element = 0);;
assert(is_empty q3 = false);;   (*[5, 12, 14, 14, 38]*)
let q3 = add 12 q3;;   (* [5, 12, 12, 14, 14, 38]*)
let q3 = add 36 q3;;   (* [5, 12, 12, 14, 14, 36, 38]*)
let q3 = add 33 q3;;   (* [5, 12, 12, 14, 14, 33, 36, 38]*)
let (element, q3) = delete_min q3;;   (* 5 * [12, 12, 14, 14, 33, 36, 38]*)
assert(element = 5);;
assert(is_empty q3 = false);;   (*[12, 12, 14, 14, 33, 36, 38]*)
let q3 = add 14 q3;;   (* [12, 12, 14, 14, 14, 33, 36, 38]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;   (*[2, 4, 11, 12, 12, 14, 14, 14, 14, 18, 20, 26, 26, 29, 29, 30, 32, 33, 33, 34, 36, 36, 36, 37, 37, 38, 39]*)
let (element, q) = delete_min q;;   (* 2 * [4, 11, 12, 12, 14, 14, 14, 14, 18, 20, 26, 26, 29, 29, 30, 32, 33, 33, 34, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 2);;
let (element, q) = delete_min q;;   (* 4 * [11, 12, 12, 14, 14, 14, 14, 18, 20, 26, 26, 29, 29, 30, 32, 33, 33, 34, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 11 * [12, 12, 14, 14, 14, 14, 18, 20, 26, 26, 29, 29, 30, 32, 33, 33, 34, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 12 * [12, 14, 14, 14, 14, 18, 20, 26, 26, 29, 29, 30, 32, 33, 33, 34, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 12 * [14, 14, 14, 14, 18, 20, 26, 26, 29, 29, 30, 32, 33, 33, 34, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 14 * [14, 14, 14, 18, 20, 26, 26, 29, 29, 30, 32, 33, 33, 34, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [14, 14, 18, 20, 26, 26, 29, 29, 30, 32, 33, 33, 34, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [14, 18, 20, 26, 26, 29, 29, 30, 32, 33, 33, 34, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [18, 20, 26, 26, 29, 29, 30, 32, 33, 33, 34, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 18 * [20, 26, 26, 29, 29, 30, 32, 33, 33, 34, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 20 * [26, 26, 29, 29, 30, 32, 33, 33, 34, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 26 * [26, 29, 29, 30, 32, 33, 33, 34, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [29, 29, 30, 32, 33, 33, 34, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 29 * [29, 30, 32, 33, 33, 34, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [30, 32, 33, 33, 34, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [32, 33, 33, 34, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 32 * [33, 33, 34, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [33, 34, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [34, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 37, 37, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 37, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 37, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [37, 38, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [38, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST23----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 14 q1;;   (* [14]*)
let q1 = add 22 q1;;   (* [14, 22]*)
let q1 = add 15 q1;;   (* [14, 15, 22]*)
assert(is_empty q1 = false);;   (*[14, 15, 22]*)
let q1 = add 19 q1;;   (* [14, 15, 19, 22]*)
let q1 = add 1 q1;;   (* [1, 14, 15, 19, 22]*)
let q1 = add 33 q1;;   (* [1, 14, 15, 19, 22, 33]*)
let (element, q1) = delete_min q1;;   (* 1 * [14, 15, 19, 22, 33]*)
assert(element = 1);;
let (element, q1) = delete_min q1;;   (* 14 * [15, 19, 22, 33]*)
assert(element = 14);;
let q1 = add 19 q1;;   (* [15, 19, 19, 22, 33]*)
let (element, q1) = delete_min q1;;   (* 15 * [19, 19, 22, 33]*)
assert(element = 15);;
let (element, q1) = delete_min q1;;   (* 19 * [19, 22, 33]*)
assert(element = 19);;
let q1 = add 28 q1;;   (* [19, 22, 28, 33]*)
assert(is_empty q1 = false);;   (*[19, 22, 28, 33]*)
let q1 = add 9 q1;;   (* [9, 19, 22, 28, 33]*)
let q1 = add 17 q1;;   (* [9, 17, 19, 22, 28, 33]*)
let q1 = add 32 q1;;   (* [9, 17, 19, 22, 28, 32, 33]*)
let (element, q1) = delete_min q1;;   (* 9 * [17, 19, 22, 28, 32, 33]*)
assert(element = 9);;
assert(is_empty q1 = false);;   (*[17, 19, 22, 28, 32, 33]*)
let (element, q1) = delete_min q1;;   (* 17 * [19, 22, 28, 32, 33]*)
assert(element = 17);;
assert(is_empty q1 = false);;   (*[19, 22, 28, 32, 33]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 6 q2;;   (* [6]*)
assert(is_empty q2 = false);;   (*[6]*)
let q2 = add 12 q2;;   (* [6, 12]*)
let q2 = add 27 q2;;   (* [6, 12, 27]*)
let q2 = add 13 q2;;   (* [6, 12, 13, 27]*)
let q2 = add 8 q2;;   (* [6, 8, 12, 13, 27]*)
let q2 = add 16 q2;;   (* [6, 8, 12, 13, 16, 27]*)
let q2 = add 38 q2;;   (* [6, 8, 12, 13, 16, 27, 38]*)
let (element, q2) = delete_min q2;;   (* 6 * [8, 12, 13, 16, 27, 38]*)
assert(element = 6);;
let (element, q2) = delete_min q2;;   (* 8 * [12, 13, 16, 27, 38]*)
assert(element = 8);;
let q2 = add 34 q2;;   (* [12, 13, 16, 27, 34, 38]*)
let q2 = add 26 q2;;   (* [12, 13, 16, 26, 27, 34, 38]*)
let (element, q2) = delete_min q2;;   (* 12 * [13, 16, 26, 27, 34, 38]*)
assert(element = 12);;
let (element, q2) = delete_min q2;;   (* 13 * [16, 26, 27, 34, 38]*)
assert(element = 13);;
assert(is_empty q2 = false);;   (*[16, 26, 27, 34, 38]*)
let q2 = add 1 q2;;   (* [1, 16, 26, 27, 34, 38]*)
let (element, q2) = delete_min q2;;   (* 1 * [16, 26, 27, 34, 38]*)
assert(element = 1);;
let q2 = add 3 q2;;   (* [3, 16, 26, 27, 34, 38]*)
let (element, q2) = delete_min q2;;   (* 3 * [16, 26, 27, 34, 38]*)
assert(element = 3);;
let (element, q2) = delete_min q2;;   (* 16 * [26, 27, 34, 38]*)
assert(element = 16);;
let q2 = add 21 q2;;   (* [21, 26, 27, 34, 38]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 10 q3;;   (* [10]*)
let (element, q3) = delete_min q3;;   (* 10 * []*)
assert(element = 10);;
let q3 = add 22 q3;;   (* [22]*)
let (element, q3) = delete_min q3;;   (* 22 * []*)
assert(element = 22);;
assert(is_empty q3 = true);;   (*[]*)
let q3 = add 8 q3;;   (* [8]*)
let (element, q3) = delete_min q3;;   (* 8 * []*)
assert(element = 8);;
let q3 = add 13 q3;;   (* [13]*)
let (element, q3) = delete_min q3;;   (* 13 * []*)
assert(element = 13);;
let q3 = add 3 q3;;   (* [3]*)
let (element, q3) = delete_min q3;;   (* 3 * []*)
assert(element = 3);;
let q3 = add 25 q3;;   (* [25]*)
let q3 = add 27 q3;;   (* [25, 27]*)
let (element, q3) = delete_min q3;;   (* 25 * [27]*)
assert(element = 25);;
let q3 = add 18 q3;;   (* [18, 27]*)
let q3 = add 12 q3;;   (* [12, 18, 27]*)
let q3 = add 5 q3;;   (* [5, 12, 18, 27]*)
let (element, q3) = delete_min q3;;   (* 5 * [12, 18, 27]*)
assert(element = 5);;
let q3 = add 14 q3;;   (* [12, 14, 18, 27]*)
let q3 = add 18 q3;;   (* [12, 14, 18, 18, 27]*)
let q3 = add 10 q3;;   (* [10, 12, 14, 18, 18, 27]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;   (*[10, 12, 14, 18, 18, 19, 21, 22, 26, 27, 27, 28, 32, 33, 34]*)
let (element, q) = delete_min q;;   (* 10 * [12, 14, 18, 18, 19, 21, 22, 26, 27, 27, 28, 32, 33, 34, 38]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 12 * [14, 18, 18, 19, 21, 22, 26, 27, 27, 28, 32, 33, 34, 38]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 14 * [18, 18, 19, 21, 22, 26, 27, 27, 28, 32, 33, 34, 38]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 18 * [18, 19, 21, 22, 26, 27, 27, 28, 32, 33, 34, 38]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [19, 21, 22, 26, 27, 27, 28, 32, 33, 34, 38]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [21, 22, 26, 27, 27, 28, 32, 33, 34, 38]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 21 * [22, 26, 27, 27, 28, 32, 33, 34, 38]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [26, 27, 27, 28, 32, 33, 34, 38]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 26 * [27, 27, 28, 32, 33, 34, 38]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [27, 28, 32, 33, 34, 38]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [28, 32, 33, 34, 38]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [32, 33, 34, 38]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 32 * [33, 34, 38]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [34, 38]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [38]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 38 * []*)
assert(element = 38);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST24----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 16 q1;;   (* [16]*)
let (element, q1) = delete_min q1;;   (* 16 * []*)
assert(element = 16);;
let q1 = add 23 q1;;   (* [23]*)
let q1 = add 0 q1;;   (* [0, 23]*)
let q1 = add 32 q1;;   (* [0, 23, 32]*)
let q1 = add 38 q1;;   (* [0, 23, 32, 38]*)
let q1 = add 8 q1;;   (* [0, 8, 23, 32, 38]*)
let q1 = add 3 q1;;   (* [0, 3, 8, 23, 32, 38]*)
let q1 = add 38 q1;;   (* [0, 3, 8, 23, 32, 38, 38]*)
let q1 = add 27 q1;;   (* [0, 3, 8, 23, 27, 32, 38, 38]*)
assert(is_empty q1 = false);;   (*[0, 3, 8, 23, 27, 32, 38, 38]*)
let q1 = add 3 q1;;   (* [0, 3, 3, 8, 23, 27, 32, 38, 38]*)
let q1 = add 26 q1;;   (* [0, 3, 3, 8, 23, 26, 27, 32, 38, 38]*)
let q1 = add 2 q1;;   (* [0, 2, 3, 3, 8, 23, 26, 27, 32, 38, 38]*)
let (element, q1) = delete_min q1;;   (* 0 * [2, 3, 3, 8, 23, 26, 27, 32, 38, 38]*)
assert(element = 0);;
let q1 = add 36 q1;;   (* [2, 3, 3, 8, 23, 26, 27, 32, 36, 38, 38]*)
let (element, q1) = delete_min q1;;   (* 2 * [3, 3, 8, 23, 26, 27, 32, 36, 38, 38]*)
assert(element = 2);;
assert(is_empty q1 = false);;   (*[3, 3, 8, 23, 26, 27, 32, 36, 38, 38]*)
let q1 = add 26 q1;;   (* [3, 3, 8, 23, 26, 26, 27, 32, 36, 38, 38]*)
let q1 = add 17 q1;;   (* [3, 3, 8, 17, 23, 26, 26, 27, 32, 36, 38, 38]*)
assert(is_empty q1 = false);;   (*[3, 3, 8, 17, 23, 26, 26, 27, 32, 36, 38, 38]*)
let q1 = add 16 q1;;   (* [3, 3, 8, 16, 17, 23, 26, 26, 27, 32, 36, 38, 38]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 4 q2;;   (* [4]*)
let q2 = add 10 q2;;   (* [4, 10]*)
let (element, q2) = delete_min q2;;   (* 4 * [10]*)
assert(element = 4);;
assert(is_empty q2 = false);;   (*[10]*)
let q2 = add 28 q2;;   (* [10, 28]*)
let q2 = add 9 q2;;   (* [9, 10, 28]*)
let q2 = add 33 q2;;   (* [9, 10, 28, 33]*)
let q2 = add 27 q2;;   (* [9, 10, 27, 28, 33]*)
let q2 = add 9 q2;;   (* [9, 9, 10, 27, 28, 33]*)
let q2 = add 27 q2;;   (* [9, 9, 10, 27, 27, 28, 33]*)
assert(is_empty q2 = false);;   (*[9, 9, 10, 27, 27, 28, 33]*)
let (element, q2) = delete_min q2;;   (* 9 * [9, 10, 27, 27, 28, 33]*)
assert(element = 9);;
let q2 = add 6 q2;;   (* [6, 9, 10, 27, 27, 28, 33]*)
let (element, q2) = delete_min q2;;   (* 6 * [9, 10, 27, 27, 28, 33]*)
assert(element = 6);;
let q2 = add 3 q2;;   (* [3, 9, 10, 27, 27, 28, 33]*)
let q2 = add 14 q2;;   (* [3, 9, 10, 14, 27, 27, 28, 33]*)
let (element, q2) = delete_min q2;;   (* 3 * [9, 10, 14, 27, 27, 28, 33]*)
assert(element = 3);;
let q2 = add 32 q2;;   (* [9, 10, 14, 27, 27, 28, 32, 33]*)
let (element, q2) = delete_min q2;;   (* 9 * [10, 14, 27, 27, 28, 32, 33]*)
assert(element = 9);;
let q2 = add 21 q2;;   (* [10, 14, 21, 27, 27, 28, 32, 33]*)
let q2 = add 12 q2;;   (* [10, 12, 14, 21, 27, 27, 28, 32, 33]*)
assert(is_empty q2 = false);;   (*[10, 12, 14, 21, 27, 27, 28, 32, 33]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 9 q3;;   (* [9]*)
let q3 = add 8 q3;;   (* [8, 9]*)
let q3 = add 17 q3;;   (* [8, 9, 17]*)
let q3 = add 19 q3;;   (* [8, 9, 17, 19]*)
assert(is_empty q3 = false);;   (*[8, 9, 17, 19]*)
let (element, q3) = delete_min q3;;   (* 8 * [9, 17, 19]*)
assert(element = 8);;
let (element, q3) = delete_min q3;;   (* 9 * [17, 19]*)
assert(element = 9);;
let (element, q3) = delete_min q3;;   (* 17 * [19]*)
assert(element = 17);;
assert(is_empty q3 = false);;   (*[19]*)
let (element, q3) = delete_min q3;;   (* 19 * []*)
assert(element = 19);;
let q3 = add 27 q3;;   (* [27]*)
let q3 = add 24 q3;;   (* [24, 27]*)
let q3 = add 1 q3;;   (* [1, 24, 27]*)
let q3 = add 18 q3;;   (* [1, 18, 24, 27]*)
let q3 = add 37 q3;;   (* [1, 18, 24, 27, 37]*)
let q3 = add 11 q3;;   (* [1, 11, 18, 24, 27, 37]*)
let q3 = add 8 q3;;   (* [1, 8, 11, 18, 24, 27, 37]*)
assert(is_empty q3 = false);;   (*[1, 8, 11, 18, 24, 27, 37]*)
let (element, q3) = delete_min q3;;   (* 1 * [8, 11, 18, 24, 27, 37]*)
assert(element = 1);;
let q3 = add 34 q3;;   (* [8, 11, 18, 24, 27, 34, 37]*)
let q3 = add 28 q3;;   (* [8, 11, 18, 24, 27, 28, 34, 37]*)
let q3 = add 32 q3;;   (* [8, 11, 18, 24, 27, 28, 32, 34, 37]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;   (*[3, 3, 8, 8, 10, 11, 12, 14, 16, 17, 18, 21, 23, 24, 26, 26, 27, 27, 27, 27, 28, 28, 32, 32, 32, 33, 34, 36, 37, 38]*)
let (element, q) = delete_min q;;   (* 3 * [3, 8, 8, 10, 11, 12, 14, 16, 17, 18, 21, 23, 24, 26, 26, 27, 27, 27, 27, 28, 28, 32, 32, 32, 33, 34, 36, 37, 38, 38]*)
assert(element = 3);;
let (element, q) = delete_min q;;   (* 3 * [8, 8, 10, 11, 12, 14, 16, 17, 18, 21, 23, 24, 26, 26, 27, 27, 27, 27, 28, 28, 32, 32, 32, 33, 34, 36, 37, 38, 38]*)
assert(element = 3);;
let (element, q) = delete_min q;;   (* 8 * [8, 10, 11, 12, 14, 16, 17, 18, 21, 23, 24, 26, 26, 27, 27, 27, 27, 28, 28, 32, 32, 32, 33, 34, 36, 37, 38, 38]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 8 * [10, 11, 12, 14, 16, 17, 18, 21, 23, 24, 26, 26, 27, 27, 27, 27, 28, 28, 32, 32, 32, 33, 34, 36, 37, 38, 38]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 10 * [11, 12, 14, 16, 17, 18, 21, 23, 24, 26, 26, 27, 27, 27, 27, 28, 28, 32, 32, 32, 33, 34, 36, 37, 38, 38]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 11 * [12, 14, 16, 17, 18, 21, 23, 24, 26, 26, 27, 27, 27, 27, 28, 28, 32, 32, 32, 33, 34, 36, 37, 38, 38]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 12 * [14, 16, 17, 18, 21, 23, 24, 26, 26, 27, 27, 27, 27, 28, 28, 32, 32, 32, 33, 34, 36, 37, 38, 38]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 14 * [16, 17, 18, 21, 23, 24, 26, 26, 27, 27, 27, 27, 28, 28, 32, 32, 32, 33, 34, 36, 37, 38, 38]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 16 * [17, 18, 21, 23, 24, 26, 26, 27, 27, 27, 27, 28, 28, 32, 32, 32, 33, 34, 36, 37, 38, 38]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 17 * [18, 21, 23, 24, 26, 26, 27, 27, 27, 27, 28, 28, 32, 32, 32, 33, 34, 36, 37, 38, 38]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [21, 23, 24, 26, 26, 27, 27, 27, 27, 28, 28, 32, 32, 32, 33, 34, 36, 37, 38, 38]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 21 * [23, 24, 26, 26, 27, 27, 27, 27, 28, 28, 32, 32, 32, 33, 34, 36, 37, 38, 38]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 23 * [24, 26, 26, 27, 27, 27, 27, 28, 28, 32, 32, 32, 33, 34, 36, 37, 38, 38]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [26, 26, 27, 27, 27, 27, 28, 28, 32, 32, 32, 33, 34, 36, 37, 38, 38]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 26 * [26, 27, 27, 27, 27, 28, 28, 32, 32, 32, 33, 34, 36, 37, 38, 38]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [27, 27, 27, 27, 28, 28, 32, 32, 32, 33, 34, 36, 37, 38, 38]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 27, 28, 28, 32, 32, 32, 33, 34, 36, 37, 38, 38]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 28, 28, 32, 32, 32, 33, 34, 36, 37, 38, 38]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 28, 28, 32, 32, 32, 33, 34, 36, 37, 38, 38]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [28, 28, 32, 32, 32, 33, 34, 36, 37, 38, 38]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [28, 32, 32, 32, 33, 34, 36, 37, 38, 38]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [32, 32, 32, 33, 34, 36, 37, 38, 38]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 33, 34, 36, 37, 38, 38]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 34, 36, 37, 38, 38]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 34, 36, 37, 38, 38]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [34, 36, 37, 38, 38]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [36, 37, 38, 38]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 36 * [37, 38, 38]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [38, 38]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * []*)
assert(element = 38);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST25----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 20 q1;;   (* [20]*)
let (element, q1) = delete_min q1;;   (* 20 * []*)
assert(element = 20);;
let q1 = add 26 q1;;   (* [26]*)
let q1 = add 14 q1;;   (* [14, 26]*)
assert(is_empty q1 = false);;   (*[14, 26]*)
let (element, q1) = delete_min q1;;   (* 14 * [26]*)
assert(element = 14);;
assert(is_empty q1 = false);;   (*[26]*)
let q1 = add 18 q1;;   (* [18, 26]*)
let q1 = add 3 q1;;   (* [3, 18, 26]*)
let q1 = add 33 q1;;   (* [3, 18, 26, 33]*)
let q1 = add 13 q1;;   (* [3, 13, 18, 26, 33]*)
let q1 = add 13 q1;;   (* [3, 13, 13, 18, 26, 33]*)
let q1 = add 37 q1;;   (* [3, 13, 13, 18, 26, 33, 37]*)
let (element, q1) = delete_min q1;;   (* 3 * [13, 13, 18, 26, 33, 37]*)
assert(element = 3);;
assert(is_empty q1 = false);;   (*[13, 13, 18, 26, 33, 37]*)
let q1 = add 16 q1;;   (* [13, 13, 16, 18, 26, 33, 37]*)
let q1 = add 18 q1;;   (* [13, 13, 16, 18, 18, 26, 33, 37]*)
let (element, q1) = delete_min q1;;   (* 13 * [13, 16, 18, 18, 26, 33, 37]*)
assert(element = 13);;
let q1 = add 32 q1;;   (* [13, 16, 18, 18, 26, 32, 33, 37]*)
let q1 = add 38 q1;;   (* [13, 16, 18, 18, 26, 32, 33, 37, 38]*)
let q1 = add 8 q1;;   (* [8, 13, 16, 18, 18, 26, 32, 33, 37, 38]*)
assert(is_empty q1 = false);;   (*[8, 13, 16, 18, 18, 26, 32, 33, 37, 38]*)
let q1 = add 26 q1;;   (* [8, 13, 16, 18, 18, 26, 26, 32, 33, 37, 38]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 17 q2;;   (* [17]*)
let q2 = add 17 q2;;   (* [17, 17]*)
let q2 = add 19 q2;;   (* [17, 17, 19]*)
let q2 = add 10 q2;;   (* [10, 17, 17, 19]*)
let (element, q2) = delete_min q2;;   (* 10 * [17, 17, 19]*)
assert(element = 10);;
let (element, q2) = delete_min q2;;   (* 17 * [17, 19]*)
assert(element = 17);;
let (element, q2) = delete_min q2;;   (* 17 * [19]*)
assert(element = 17);;
let (element, q2) = delete_min q2;;   (* 19 * []*)
assert(element = 19);;
let q2 = add 22 q2;;   (* [22]*)
let q2 = add 14 q2;;   (* [14, 22]*)
let q2 = add 39 q2;;   (* [14, 22, 39]*)
let (element, q2) = delete_min q2;;   (* 14 * [22, 39]*)
assert(element = 14);;
let (element, q2) = delete_min q2;;   (* 22 * [39]*)
assert(element = 22);;
let q2 = add 31 q2;;   (* [31, 39]*)
assert(is_empty q2 = false);;   (*[31, 39]*)
let q2 = add 26 q2;;   (* [26, 31, 39]*)
let q2 = add 36 q2;;   (* [26, 31, 36, 39]*)
assert(is_empty q2 = false);;   (*[26, 31, 36, 39]*)
let (element, q2) = delete_min q2;;   (* 26 * [31, 36, 39]*)
assert(element = 26);;
let (element, q2) = delete_min q2;;   (* 31 * [36, 39]*)
assert(element = 31);;
let q2 = add 24 q2;;   (* [24, 36, 39]*)
assert(is_empty q2 = false);;   (*[24, 36, 39]*)
assert(is_empty q2 = false);;   (*[24, 36, 39]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 13 q3;;   (* [13]*)
let q3 = add 13 q3;;   (* [13, 13]*)
let q3 = add 28 q3;;   (* [13, 13, 28]*)
assert(is_empty q3 = false);;   (*[13, 13, 28]*)
let q3 = add 11 q3;;   (* [11, 13, 13, 28]*)
assert(is_empty q3 = false);;   (*[11, 13, 13, 28]*)
let (element, q3) = delete_min q3;;   (* 11 * [13, 13, 28]*)
assert(element = 11);;
let q3 = add 29 q3;;   (* [13, 13, 28, 29]*)
let (element, q3) = delete_min q3;;   (* 13 * [13, 28, 29]*)
assert(element = 13);;
let q3 = add 7 q3;;   (* [7, 13, 28, 29]*)
let q3 = add 26 q3;;   (* [7, 13, 26, 28, 29]*)
let q3 = add 25 q3;;   (* [7, 13, 25, 26, 28, 29]*)
let q3 = add 33 q3;;   (* [7, 13, 25, 26, 28, 29, 33]*)
let q3 = add 37 q3;;   (* [7, 13, 25, 26, 28, 29, 33, 37]*)
let q3 = add 38 q3;;   (* [7, 13, 25, 26, 28, 29, 33, 37, 38]*)
let (element, q3) = delete_min q3;;   (* 7 * [13, 25, 26, 28, 29, 33, 37, 38]*)
assert(element = 7);;
let (element, q3) = delete_min q3;;   (* 13 * [25, 26, 28, 29, 33, 37, 38]*)
assert(element = 13);;
let (element, q3) = delete_min q3;;   (* 25 * [26, 28, 29, 33, 37, 38]*)
assert(element = 25);;
let (element, q3) = delete_min q3;;   (* 26 * [28, 29, 33, 37, 38]*)
assert(element = 26);;
let q3 = add 35 q3;;   (* [28, 29, 33, 35, 37, 38]*)
let q3 = add 1 q3;;   (* [1, 28, 29, 33, 35, 37, 38]*)
let q3 = add 13 q3;;   (* [1, 13, 28, 29, 33, 35, 37, 38]*)
let q3 = add 4 q3;;   (* [1, 4, 13, 28, 29, 33, 35, 37, 38]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;   (*[1, 4, 8, 13, 13, 16, 18, 18, 24, 26, 26, 28, 29, 32, 33, 33, 35, 36, 37, 37, 38, 38]*)
let (element, q) = delete_min q;;   (* 1 * [4, 8, 13, 13, 16, 18, 18, 24, 26, 26, 28, 29, 32, 33, 33, 35, 36, 37, 37, 38, 38, 39]*)
assert(element = 1);;
let (element, q) = delete_min q;;   (* 4 * [8, 13, 13, 16, 18, 18, 24, 26, 26, 28, 29, 32, 33, 33, 35, 36, 37, 37, 38, 38, 39]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 8 * [13, 13, 16, 18, 18, 24, 26, 26, 28, 29, 32, 33, 33, 35, 36, 37, 37, 38, 38, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 13 * [13, 16, 18, 18, 24, 26, 26, 28, 29, 32, 33, 33, 35, 36, 37, 37, 38, 38, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 13 * [16, 18, 18, 24, 26, 26, 28, 29, 32, 33, 33, 35, 36, 37, 37, 38, 38, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 16 * [18, 18, 24, 26, 26, 28, 29, 32, 33, 33, 35, 36, 37, 37, 38, 38, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 18 * [18, 24, 26, 26, 28, 29, 32, 33, 33, 35, 36, 37, 37, 38, 38, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [24, 26, 26, 28, 29, 32, 33, 33, 35, 36, 37, 37, 38, 38, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 24 * [26, 26, 28, 29, 32, 33, 33, 35, 36, 37, 37, 38, 38, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 26 * [26, 28, 29, 32, 33, 33, 35, 36, 37, 37, 38, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [28, 29, 32, 33, 33, 35, 36, 37, 37, 38, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 28 * [29, 32, 33, 33, 35, 36, 37, 37, 38, 38, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [32, 33, 33, 35, 36, 37, 37, 38, 38, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 32 * [33, 33, 35, 36, 37, 37, 38, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [33, 35, 36, 37, 37, 38, 38, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [35, 36, 37, 37, 38, 38, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 35 * [36, 37, 37, 38, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [37, 37, 38, 38, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [37, 38, 38, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [38, 38, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST26----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 32 q1;;   (* [32]*)
assert(is_empty q1 = false);;   (*[32]*)
let q1 = add 23 q1;;   (* [23, 32]*)
assert(is_empty q1 = false);;   (*[23, 32]*)
let (element, q1) = delete_min q1;;   (* 23 * [32]*)
assert(element = 23);;
let (element, q1) = delete_min q1;;   (* 32 * []*)
assert(element = 32);;
let q1 = add 15 q1;;   (* [15]*)
let (element, q1) = delete_min q1;;   (* 15 * []*)
assert(element = 15);;
let q1 = add 4 q1;;   (* [4]*)
let q1 = add 7 q1;;   (* [4, 7]*)
let (element, q1) = delete_min q1;;   (* 4 * [7]*)
assert(element = 4);;
let q1 = add 0 q1;;   (* [0, 7]*)
let q1 = add 11 q1;;   (* [0, 7, 11]*)
let q1 = add 36 q1;;   (* [0, 7, 11, 36]*)
let q1 = add 18 q1;;   (* [0, 7, 11, 18, 36]*)
let q1 = add 35 q1;;   (* [0, 7, 11, 18, 35, 36]*)
let q1 = add 29 q1;;   (* [0, 7, 11, 18, 29, 35, 36]*)
let q1 = add 23 q1;;   (* [0, 7, 11, 18, 23, 29, 35, 36]*)
let q1 = add 28 q1;;   (* [0, 7, 11, 18, 23, 28, 29, 35, 36]*)
let q1 = add 10 q1;;   (* [0, 7, 10, 11, 18, 23, 28, 29, 35, 36]*)
assert(is_empty q1 = false);;   (*[0, 7, 10, 11, 18, 23, 28, 29, 35, 36]*)
assert(is_empty q1 = false);;   (*[0, 7, 10, 11, 18, 23, 28, 29, 35, 36]*)
let q1 = add 13 q1;;   (* [0, 7, 10, 11, 13, 18, 23, 28, 29, 35, 36]*)
let (element, q1) = delete_min q1;;   (* 0 * [7, 10, 11, 13, 18, 23, 28, 29, 35, 36]*)
assert(element = 0);;

(* -------q2------ *)
let q2 = empty;;
let q2 = add 21 q2;;   (* [21]*)
let q2 = add 27 q2;;   (* [21, 27]*)
let q2 = add 17 q2;;   (* [17, 21, 27]*)
let q2 = add 33 q2;;   (* [17, 21, 27, 33]*)
let q2 = add 24 q2;;   (* [17, 21, 24, 27, 33]*)
let (element, q2) = delete_min q2;;   (* 17 * [21, 24, 27, 33]*)
assert(element = 17);;
let q2 = add 30 q2;;   (* [21, 24, 27, 30, 33]*)
let q2 = add 12 q2;;   (* [12, 21, 24, 27, 30, 33]*)
let q2 = add 39 q2;;   (* [12, 21, 24, 27, 30, 33, 39]*)
let q2 = add 5 q2;;   (* [5, 12, 21, 24, 27, 30, 33, 39]*)
let q2 = add 30 q2;;   (* [5, 12, 21, 24, 27, 30, 30, 33, 39]*)
let (element, q2) = delete_min q2;;   (* 5 * [12, 21, 24, 27, 30, 30, 33, 39]*)
assert(element = 5);;
let (element, q2) = delete_min q2;;   (* 12 * [21, 24, 27, 30, 30, 33, 39]*)
assert(element = 12);;
let q2 = add 20 q2;;   (* [20, 21, 24, 27, 30, 30, 33, 39]*)
let q2 = add 12 q2;;   (* [12, 20, 21, 24, 27, 30, 30, 33, 39]*)
let q2 = add 6 q2;;   (* [6, 12, 20, 21, 24, 27, 30, 30, 33, 39]*)
let q2 = add 17 q2;;   (* [6, 12, 17, 20, 21, 24, 27, 30, 30, 33, 39]*)
let q2 = add 35 q2;;   (* [6, 12, 17, 20, 21, 24, 27, 30, 30, 33, 35, 39]*)
let q2 = add 11 q2;;   (* [6, 11, 12, 17, 20, 21, 24, 27, 30, 30, 33, 35, 39]*)
let q2 = add 38 q2;;   (* [6, 11, 12, 17, 20, 21, 24, 27, 30, 30, 33, 35, 38, 39]*)
let q2 = add 32 q2;;   (* [6, 11, 12, 17, 20, 21, 24, 27, 30, 30, 32, 33, 35, 38, 39]*)
let q2 = add 2 q2;;   (* [2, 6, 11, 12, 17, 20, 21, 24, 27, 30, 30, 32, 33, 35, 38, 39]*)
let q2 = add 23 q2;;   (* [2, 6, 11, 12, 17, 20, 21, 23, 24, 27, 30, 30, 32, 33, 35, 38, 39]*)
let q2 = add 29 q2;;   (* [2, 6, 11, 12, 17, 20, 21, 23, 24, 27, 29, 30, 30, 32, 33, 35, 38, 39]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 3 q3;;   (* [3]*)
let (element, q3) = delete_min q3;;   (* 3 * []*)
assert(element = 3);;
let q3 = add 31 q3;;   (* [31]*)
let q3 = add 30 q3;;   (* [30, 31]*)
let (element, q3) = delete_min q3;;   (* 30 * [31]*)
assert(element = 30);;
assert(is_empty q3 = false);;   (*[31]*)
let q3 = add 34 q3;;   (* [31, 34]*)
let q3 = add 34 q3;;   (* [31, 34, 34]*)
let q3 = add 34 q3;;   (* [31, 34, 34, 34]*)
let q3 = add 37 q3;;   (* [31, 34, 34, 34, 37]*)
let (element, q3) = delete_min q3;;   (* 31 * [34, 34, 34, 37]*)
assert(element = 31);;
let q3 = add 11 q3;;   (* [11, 34, 34, 34, 37]*)
let (element, q3) = delete_min q3;;   (* 11 * [34, 34, 34, 37]*)
assert(element = 11);;
let q3 = add 30 q3;;   (* [30, 34, 34, 34, 37]*)
let q3 = add 19 q3;;   (* [19, 30, 34, 34, 34, 37]*)
assert(is_empty q3 = false);;   (*[19, 30, 34, 34, 34, 37]*)
assert(is_empty q3 = false);;   (*[19, 30, 34, 34, 34, 37]*)
let q3 = add 2 q3;;   (* [2, 19, 30, 34, 34, 34, 37]*)
let q3 = add 31 q3;;   (* [2, 19, 30, 31, 34, 34, 34, 37]*)
let q3 = add 13 q3;;   (* [2, 13, 19, 30, 31, 34, 34, 34, 37]*)
let q3 = add 16 q3;;   (* [2, 13, 16, 19, 30, 31, 34, 34, 34, 37]*)
let (element, q3) = delete_min q3;;   (* 2 * [13, 16, 19, 30, 31, 34, 34, 34, 37]*)
assert(element = 2);;
let q3 = add 36 q3;;   (* [13, 16, 19, 30, 31, 34, 34, 34, 36, 37]*)
let q3 = add 4 q3;;   (* [4, 13, 16, 19, 30, 31, 34, 34, 34, 36, 37]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;   (*[2, 4, 6, 7, 10, 11, 11, 12, 13, 13, 16, 17, 18, 19, 20, 21, 23, 23, 24, 27, 28, 29, 29, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38]*)
let (element, q) = delete_min q;;   (* 2 * [4, 6, 7, 10, 11, 11, 12, 13, 13, 16, 17, 18, 19, 20, 21, 23, 23, 24, 27, 28, 29, 29, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 39]*)
assert(element = 2);;
let (element, q) = delete_min q;;   (* 4 * [6, 7, 10, 11, 11, 12, 13, 13, 16, 17, 18, 19, 20, 21, 23, 23, 24, 27, 28, 29, 29, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 39]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 6 * [7, 10, 11, 11, 12, 13, 13, 16, 17, 18, 19, 20, 21, 23, 23, 24, 27, 28, 29, 29, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 39]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 7 * [10, 11, 11, 12, 13, 13, 16, 17, 18, 19, 20, 21, 23, 23, 24, 27, 28, 29, 29, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 10 * [11, 11, 12, 13, 13, 16, 17, 18, 19, 20, 21, 23, 23, 24, 27, 28, 29, 29, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 11 * [11, 12, 13, 13, 16, 17, 18, 19, 20, 21, 23, 23, 24, 27, 28, 29, 29, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 11 * [12, 13, 13, 16, 17, 18, 19, 20, 21, 23, 23, 24, 27, 28, 29, 29, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 12 * [13, 13, 16, 17, 18, 19, 20, 21, 23, 23, 24, 27, 28, 29, 29, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 13 * [13, 16, 17, 18, 19, 20, 21, 23, 23, 24, 27, 28, 29, 29, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 13 * [16, 17, 18, 19, 20, 21, 23, 23, 24, 27, 28, 29, 29, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 16 * [17, 18, 19, 20, 21, 23, 23, 24, 27, 28, 29, 29, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 17 * [18, 19, 20, 21, 23, 23, 24, 27, 28, 29, 29, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [19, 20, 21, 23, 23, 24, 27, 28, 29, 29, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [20, 21, 23, 23, 24, 27, 28, 29, 29, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [21, 23, 23, 24, 27, 28, 29, 29, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [23, 23, 24, 27, 28, 29, 29, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 23 * [23, 24, 27, 28, 29, 29, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [24, 27, 28, 29, 29, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [27, 28, 29, 29, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 27 * [28, 29, 29, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [29, 29, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [29, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [30, 31, 32, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [31, 32, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [32, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [34, 34, 34, 35, 35, 36, 36, 37, 38, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 35, 35, 36, 36, 37, 38, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 35, 36, 36, 37, 38, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 36, 36, 37, 38, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 36, 37, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 37, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 38, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 38, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [38, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST27----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 12 q1;;   (* [12]*)
assert(is_empty q1 = false);;   (*[12]*)
let q1 = add 2 q1;;   (* [2, 12]*)
let q1 = add 30 q1;;   (* [2, 12, 30]*)
let q1 = add 8 q1;;   (* [2, 8, 12, 30]*)
let q1 = add 28 q1;;   (* [2, 8, 12, 28, 30]*)
let q1 = add 31 q1;;   (* [2, 8, 12, 28, 30, 31]*)
let (element, q1) = delete_min q1;;   (* 2 * [8, 12, 28, 30, 31]*)
assert(element = 2);;
let q1 = add 18 q1;;   (* [8, 12, 18, 28, 30, 31]*)
let (element, q1) = delete_min q1;;   (* 8 * [12, 18, 28, 30, 31]*)
assert(element = 8);;
let q1 = add 8 q1;;   (* [8, 12, 18, 28, 30, 31]*)
let (element, q1) = delete_min q1;;   (* 8 * [12, 18, 28, 30, 31]*)
assert(element = 8);;
let (element, q1) = delete_min q1;;   (* 12 * [18, 28, 30, 31]*)
assert(element = 12);;
let (element, q1) = delete_min q1;;   (* 18 * [28, 30, 31]*)
assert(element = 18);;
let (element, q1) = delete_min q1;;   (* 28 * [30, 31]*)
assert(element = 28);;
let (element, q1) = delete_min q1;;   (* 30 * [31]*)
assert(element = 30);;
let (element, q1) = delete_min q1;;   (* 31 * []*)
assert(element = 31);;
let q1 = add 27 q1;;   (* [27]*)
let q1 = add 27 q1;;   (* [27, 27]*)
let q1 = add 19 q1;;   (* [19, 27, 27]*)
let q1 = add 7 q1;;   (* [7, 19, 27, 27]*)
let q1 = add 20 q1;;   (* [7, 19, 20, 27, 27]*)
let q1 = add 26 q1;;   (* [7, 19, 20, 26, 27, 27]*)
let q1 = add 31 q1;;   (* [7, 19, 20, 26, 27, 27, 31]*)
let q1 = add 15 q1;;   (* [7, 15, 19, 20, 26, 27, 27, 31]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 16 q2;;   (* [16]*)
let (element, q2) = delete_min q2;;   (* 16 * []*)
assert(element = 16);;
let q2 = add 21 q2;;   (* [21]*)
let (element, q2) = delete_min q2;;   (* 21 * []*)
assert(element = 21);;
let q2 = add 21 q2;;   (* [21]*)
let q2 = add 29 q2;;   (* [21, 29]*)
assert(is_empty q2 = false);;   (*[21, 29]*)
let q2 = add 19 q2;;   (* [19, 21, 29]*)
let (element, q2) = delete_min q2;;   (* 19 * [21, 29]*)
assert(element = 19);;
let q2 = add 27 q2;;   (* [21, 27, 29]*)
let q2 = add 33 q2;;   (* [21, 27, 29, 33]*)
assert(is_empty q2 = false);;   (*[21, 27, 29, 33]*)
let q2 = add 22 q2;;   (* [21, 22, 27, 29, 33]*)
let (element, q2) = delete_min q2;;   (* 21 * [22, 27, 29, 33]*)
assert(element = 21);;
let (element, q2) = delete_min q2;;   (* 22 * [27, 29, 33]*)
assert(element = 22);;
let q2 = add 11 q2;;   (* [11, 27, 29, 33]*)
let (element, q2) = delete_min q2;;   (* 11 * [27, 29, 33]*)
assert(element = 11);;
let q2 = add 7 q2;;   (* [7, 27, 29, 33]*)
let q2 = add 27 q2;;   (* [7, 27, 27, 29, 33]*)
assert(is_empty q2 = false);;   (*[7, 27, 27, 29, 33]*)
let q2 = add 2 q2;;   (* [2, 7, 27, 27, 29, 33]*)
assert(is_empty q2 = false);;   (*[2, 7, 27, 27, 29, 33]*)
let q2 = add 27 q2;;   (* [2, 7, 27, 27, 27, 29, 33]*)
let (element, q2) = delete_min q2;;   (* 2 * [7, 27, 27, 27, 29, 33]*)
assert(element = 2);;
assert(is_empty q2 = false);;   (*[7, 27, 27, 27, 29, 33]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 3 q3;;   (* [3]*)
assert(is_empty q3 = false);;   (*[3]*)
let (element, q3) = delete_min q3;;   (* 3 * []*)
assert(element = 3);;
let q3 = add 11 q3;;   (* [11]*)
let q3 = add 16 q3;;   (* [11, 16]*)
let q3 = add 29 q3;;   (* [11, 16, 29]*)
let (element, q3) = delete_min q3;;   (* 11 * [16, 29]*)
assert(element = 11);;
let q3 = add 35 q3;;   (* [16, 29, 35]*)
assert(is_empty q3 = false);;   (*[16, 29, 35]*)
let (element, q3) = delete_min q3;;   (* 16 * [29, 35]*)
assert(element = 16);;
let q3 = add 0 q3;;   (* [0, 29, 35]*)
let q3 = add 27 q3;;   (* [0, 27, 29, 35]*)
assert(is_empty q3 = false);;   (*[0, 27, 29, 35]*)
let (element, q3) = delete_min q3;;   (* 0 * [27, 29, 35]*)
assert(element = 0);;
let q3 = add 20 q3;;   (* [20, 27, 29, 35]*)
let q3 = add 0 q3;;   (* [0, 20, 27, 29, 35]*)
let q3 = add 12 q3;;   (* [0, 12, 20, 27, 29, 35]*)
let (element, q3) = delete_min q3;;   (* 0 * [12, 20, 27, 29, 35]*)
assert(element = 0);;
let q3 = add 34 q3;;   (* [12, 20, 27, 29, 34, 35]*)
let q3 = add 1 q3;;   (* [1, 12, 20, 27, 29, 34, 35]*)
let (element, q3) = delete_min q3;;   (* 1 * [12, 20, 27, 29, 34, 35]*)
assert(element = 1);;
let q3 = add 2 q3;;   (* [2, 12, 20, 27, 29, 34, 35]*)
let q3 = add 14 q3;;   (* [2, 12, 14, 20, 27, 29, 34, 35]*)
let q3 = add 33 q3;;   (* [2, 12, 14, 20, 27, 29, 33, 34, 35]*)
let q3 = add 38 q3;;   (* [2, 12, 14, 20, 27, 29, 33, 34, 35, 38]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;   (*[2, 7, 7, 12, 14, 15, 19, 20, 20, 26, 27, 27, 27, 27, 27, 27, 29, 29, 31, 33, 33, 34, 35]*)
let (element, q) = delete_min q;;   (* 2 * [7, 7, 12, 14, 15, 19, 20, 20, 26, 27, 27, 27, 27, 27, 27, 29, 29, 31, 33, 33, 34, 35, 38]*)
assert(element = 2);;
let (element, q) = delete_min q;;   (* 7 * [7, 12, 14, 15, 19, 20, 20, 26, 27, 27, 27, 27, 27, 27, 29, 29, 31, 33, 33, 34, 35, 38]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 7 * [12, 14, 15, 19, 20, 20, 26, 27, 27, 27, 27, 27, 27, 29, 29, 31, 33, 33, 34, 35, 38]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 12 * [14, 15, 19, 20, 20, 26, 27, 27, 27, 27, 27, 27, 29, 29, 31, 33, 33, 34, 35, 38]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 14 * [15, 19, 20, 20, 26, 27, 27, 27, 27, 27, 27, 29, 29, 31, 33, 33, 34, 35, 38]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [19, 20, 20, 26, 27, 27, 27, 27, 27, 27, 29, 29, 31, 33, 33, 34, 35, 38]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 19 * [20, 20, 26, 27, 27, 27, 27, 27, 27, 29, 29, 31, 33, 33, 34, 35, 38]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [20, 26, 27, 27, 27, 27, 27, 27, 29, 29, 31, 33, 33, 34, 35, 38]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [26, 27, 27, 27, 27, 27, 27, 29, 29, 31, 33, 33, 34, 35, 38]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 26 * [27, 27, 27, 27, 27, 27, 29, 29, 31, 33, 33, 34, 35, 38]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 27, 27, 27, 29, 29, 31, 33, 33, 34, 35, 38]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 27, 27, 29, 29, 31, 33, 33, 34, 35, 38]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 27, 29, 29, 31, 33, 33, 34, 35, 38]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 29, 29, 31, 33, 33, 34, 35, 38]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 29, 29, 31, 33, 33, 34, 35, 38]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [29, 29, 31, 33, 33, 34, 35, 38]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 29 * [29, 31, 33, 33, 34, 35, 38]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [31, 33, 33, 34, 35, 38]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 31 * [33, 33, 34, 35, 38]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 33 * [33, 34, 35, 38]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [34, 35, 38]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [35, 38]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [38]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 38 * []*)
assert(element = 38);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST28----*)

(* -------q1------ *)
let q1 = empty;;
assert(is_empty q1 = true);;   (*[]*)
let q1 = add 37 q1;;   (* [37]*)
let (element, q1) = delete_min q1;;   (* 37 * []*)
assert(element = 37);;
let q1 = add 25 q1;;   (* [25]*)
let (element, q1) = delete_min q1;;   (* 25 * []*)
assert(element = 25);;
let q1 = add 20 q1;;   (* [20]*)
let (element, q1) = delete_min q1;;   (* 20 * []*)
assert(element = 20);;
let q1 = add 5 q1;;   (* [5]*)
let (element, q1) = delete_min q1;;   (* 5 * []*)
assert(element = 5);;
let q1 = add 18 q1;;   (* [18]*)
assert(is_empty q1 = false);;   (*[18]*)
let q1 = add 32 q1;;   (* [18, 32]*)
let q1 = add 9 q1;;   (* [9, 18, 32]*)
let q1 = add 21 q1;;   (* [9, 18, 21, 32]*)
let q1 = add 39 q1;;   (* [9, 18, 21, 32, 39]*)
let q1 = add 39 q1;;   (* [9, 18, 21, 32, 39, 39]*)
let q1 = add 9 q1;;   (* [9, 9, 18, 21, 32, 39, 39]*)
let (element, q1) = delete_min q1;;   (* 9 * [9, 18, 21, 32, 39, 39]*)
assert(element = 9);;
assert(is_empty q1 = false);;   (*[9, 18, 21, 32, 39, 39]*)
let q1 = add 21 q1;;   (* [9, 18, 21, 21, 32, 39, 39]*)
assert(is_empty q1 = false);;   (*[9, 18, 21, 21, 32, 39, 39]*)
let q1 = add 11 q1;;   (* [9, 11, 18, 21, 21, 32, 39, 39]*)
let q1 = add 37 q1;;   (* [9, 11, 18, 21, 21, 32, 37, 39, 39]*)
let (element, q1) = delete_min q1;;   (* 9 * [11, 18, 21, 21, 32, 37, 39, 39]*)
assert(element = 9);;
let q1 = add 29 q1;;   (* [11, 18, 21, 21, 29, 32, 37, 39, 39]*)
let q1 = add 33 q1;;   (* [11, 18, 21, 21, 29, 32, 33, 37, 39, 39]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 9 q2;;   (* [9]*)
let (element, q2) = delete_min q2;;   (* 9 * []*)
assert(element = 9);;
let q2 = add 5 q2;;   (* [5]*)
let (element, q2) = delete_min q2;;   (* 5 * []*)
assert(element = 5);;
let q2 = add 7 q2;;   (* [7]*)
let q2 = add 17 q2;;   (* [7, 17]*)
let (element, q2) = delete_min q2;;   (* 7 * [17]*)
assert(element = 7);;
let q2 = add 13 q2;;   (* [13, 17]*)
let q2 = add 34 q2;;   (* [13, 17, 34]*)
let q2 = add 33 q2;;   (* [13, 17, 33, 34]*)
let q2 = add 14 q2;;   (* [13, 14, 17, 33, 34]*)
let q2 = add 29 q2;;   (* [13, 14, 17, 29, 33, 34]*)
let q2 = add 27 q2;;   (* [13, 14, 17, 27, 29, 33, 34]*)
let q2 = add 11 q2;;   (* [11, 13, 14, 17, 27, 29, 33, 34]*)
assert(is_empty q2 = false);;   (*[11, 13, 14, 17, 27, 29, 33, 34]*)
let q2 = add 2 q2;;   (* [2, 11, 13, 14, 17, 27, 29, 33, 34]*)
let (element, q2) = delete_min q2;;   (* 2 * [11, 13, 14, 17, 27, 29, 33, 34]*)
assert(element = 2);;
let (element, q2) = delete_min q2;;   (* 11 * [13, 14, 17, 27, 29, 33, 34]*)
assert(element = 11);;
let q2 = add 6 q2;;   (* [6, 13, 14, 17, 27, 29, 33, 34]*)
let q2 = add 1 q2;;   (* [1, 6, 13, 14, 17, 27, 29, 33, 34]*)
let q2 = add 17 q2;;   (* [1, 6, 13, 14, 17, 17, 27, 29, 33, 34]*)
let q2 = add 17 q2;;   (* [1, 6, 13, 14, 17, 17, 17, 27, 29, 33, 34]*)
let q2 = add 16 q2;;   (* [1, 6, 13, 14, 16, 17, 17, 17, 27, 29, 33, 34]*)
let q2 = add 2 q2;;   (* [1, 2, 6, 13, 14, 16, 17, 17, 17, 27, 29, 33, 34]*)
let q2 = add 38 q2;;   (* [1, 2, 6, 13, 14, 16, 17, 17, 17, 27, 29, 33, 34, 38]*)
let q2 = add 18 q2;;   (* [1, 2, 6, 13, 14, 16, 17, 17, 17, 18, 27, 29, 33, 34, 38]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 19 q3;;   (* [19]*)
let (element, q3) = delete_min q3;;   (* 19 * []*)
assert(element = 19);;
let q3 = add 18 q3;;   (* [18]*)
let q3 = add 6 q3;;   (* [6, 18]*)
assert(is_empty q3 = false);;   (*[6, 18]*)
let q3 = add 26 q3;;   (* [6, 18, 26]*)
let (element, q3) = delete_min q3;;   (* 6 * [18, 26]*)
assert(element = 6);;
let q3 = add 1 q3;;   (* [1, 18, 26]*)
let q3 = add 26 q3;;   (* [1, 18, 26, 26]*)
let q3 = add 14 q3;;   (* [1, 14, 18, 26, 26]*)
let (element, q3) = delete_min q3;;   (* 1 * [14, 18, 26, 26]*)
assert(element = 1);;
let q3 = add 11 q3;;   (* [11, 14, 18, 26, 26]*)
let q3 = add 6 q3;;   (* [6, 11, 14, 18, 26, 26]*)
assert(is_empty q3 = false);;   (*[6, 11, 14, 18, 26, 26]*)
let q3 = add 39 q3;;   (* [6, 11, 14, 18, 26, 26, 39]*)
let (element, q3) = delete_min q3;;   (* 6 * [11, 14, 18, 26, 26, 39]*)
assert(element = 6);;
let q3 = add 25 q3;;   (* [11, 14, 18, 25, 26, 26, 39]*)
assert(is_empty q3 = false);;   (*[11, 14, 18, 25, 26, 26, 39]*)
let (element, q3) = delete_min q3;;   (* 11 * [14, 18, 25, 26, 26, 39]*)
assert(element = 11);;
let q3 = add 5 q3;;   (* [5, 14, 18, 25, 26, 26, 39]*)
let q3 = add 15 q3;;   (* [5, 14, 15, 18, 25, 26, 26, 39]*)
assert(is_empty q3 = false);;   (*[5, 14, 15, 18, 25, 26, 26, 39]*)
let q3 = add 37 q3;;   (* [5, 14, 15, 18, 25, 26, 26, 37, 39]*)
let q3 = add 18 q3;;   (* [5, 14, 15, 18, 18, 25, 26, 26, 37, 39]*)
let (element, q3) = delete_min q3;;   (* 5 * [14, 15, 18, 18, 25, 26, 26, 37, 39]*)
assert(element = 5);;
let (element, q3) = delete_min q3;;   (* 14 * [15, 18, 18, 25, 26, 26, 37, 39]*)
assert(element = 14);;

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;   (*[1, 2, 6, 11, 13, 14, 15, 16, 17, 17, 17, 18, 18, 18, 18, 21, 21, 25, 26, 26, 27, 29, 29, 32, 33, 33, 34, 37, 37, 38, 39, 39]*)
let (element, q) = delete_min q;;   (* 1 * [2, 6, 11, 13, 14, 15, 16, 17, 17, 17, 18, 18, 18, 18, 21, 21, 25, 26, 26, 27, 29, 29, 32, 33, 33, 34, 37, 37, 38, 39, 39, 39]*)
assert(element = 1);;
let (element, q) = delete_min q;;   (* 2 * [6, 11, 13, 14, 15, 16, 17, 17, 17, 18, 18, 18, 18, 21, 21, 25, 26, 26, 27, 29, 29, 32, 33, 33, 34, 37, 37, 38, 39, 39, 39]*)
assert(element = 2);;
let (element, q) = delete_min q;;   (* 6 * [11, 13, 14, 15, 16, 17, 17, 17, 18, 18, 18, 18, 21, 21, 25, 26, 26, 27, 29, 29, 32, 33, 33, 34, 37, 37, 38, 39, 39, 39]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 11 * [13, 14, 15, 16, 17, 17, 17, 18, 18, 18, 18, 21, 21, 25, 26, 26, 27, 29, 29, 32, 33, 33, 34, 37, 37, 38, 39, 39, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 13 * [14, 15, 16, 17, 17, 17, 18, 18, 18, 18, 21, 21, 25, 26, 26, 27, 29, 29, 32, 33, 33, 34, 37, 37, 38, 39, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 14 * [15, 16, 17, 17, 17, 18, 18, 18, 18, 21, 21, 25, 26, 26, 27, 29, 29, 32, 33, 33, 34, 37, 37, 38, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [16, 17, 17, 17, 18, 18, 18, 18, 21, 21, 25, 26, 26, 27, 29, 29, 32, 33, 33, 34, 37, 37, 38, 39, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [17, 17, 17, 18, 18, 18, 18, 21, 21, 25, 26, 26, 27, 29, 29, 32, 33, 33, 34, 37, 37, 38, 39, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 17 * [17, 17, 18, 18, 18, 18, 21, 21, 25, 26, 26, 27, 29, 29, 32, 33, 33, 34, 37, 37, 38, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [17, 18, 18, 18, 18, 21, 21, 25, 26, 26, 27, 29, 29, 32, 33, 33, 34, 37, 37, 38, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [18, 18, 18, 18, 21, 21, 25, 26, 26, 27, 29, 29, 32, 33, 33, 34, 37, 37, 38, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [18, 18, 18, 21, 21, 25, 26, 26, 27, 29, 29, 32, 33, 33, 34, 37, 37, 38, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [18, 18, 21, 21, 25, 26, 26, 27, 29, 29, 32, 33, 33, 34, 37, 37, 38, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [18, 21, 21, 25, 26, 26, 27, 29, 29, 32, 33, 33, 34, 37, 37, 38, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [21, 21, 25, 26, 26, 27, 29, 29, 32, 33, 33, 34, 37, 37, 38, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 21 * [21, 25, 26, 26, 27, 29, 29, 32, 33, 33, 34, 37, 37, 38, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [25, 26, 26, 27, 29, 29, 32, 33, 33, 34, 37, 37, 38, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 25 * [26, 26, 27, 29, 29, 32, 33, 33, 34, 37, 37, 38, 39, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [26, 27, 29, 29, 32, 33, 33, 34, 37, 37, 38, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [27, 29, 29, 32, 33, 33, 34, 37, 37, 38, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [29, 29, 32, 33, 33, 34, 37, 37, 38, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 29 * [29, 32, 33, 33, 34, 37, 37, 38, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [32, 33, 33, 34, 37, 37, 38, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 32 * [33, 33, 34, 37, 37, 38, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [33, 34, 37, 37, 38, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [34, 37, 37, 38, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [37, 37, 38, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 37 * [37, 38, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [38, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST29----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 4 q1;;   (* [4]*)
let q1 = add 27 q1;;   (* [4, 27]*)
let q1 = add 19 q1;;   (* [4, 19, 27]*)
let q1 = add 31 q1;;   (* [4, 19, 27, 31]*)
let q1 = add 6 q1;;   (* [4, 6, 19, 27, 31]*)
let q1 = add 19 q1;;   (* [4, 6, 19, 19, 27, 31]*)
let q1 = add 32 q1;;   (* [4, 6, 19, 19, 27, 31, 32]*)
let q1 = add 8 q1;;   (* [4, 6, 8, 19, 19, 27, 31, 32]*)
let q1 = add 3 q1;;   (* [3, 4, 6, 8, 19, 19, 27, 31, 32]*)
let q1 = add 0 q1;;   (* [0, 3, 4, 6, 8, 19, 19, 27, 31, 32]*)
let q1 = add 7 q1;;   (* [0, 3, 4, 6, 7, 8, 19, 19, 27, 31, 32]*)
let (element, q1) = delete_min q1;;   (* 0 * [3, 4, 6, 7, 8, 19, 19, 27, 31, 32]*)
assert(element = 0);;
let q1 = add 3 q1;;   (* [3, 3, 4, 6, 7, 8, 19, 19, 27, 31, 32]*)
let q1 = add 3 q1;;   (* [3, 3, 3, 4, 6, 7, 8, 19, 19, 27, 31, 32]*)
let (element, q1) = delete_min q1;;   (* 3 * [3, 3, 4, 6, 7, 8, 19, 19, 27, 31, 32]*)
assert(element = 3);;
let (element, q1) = delete_min q1;;   (* 3 * [3, 4, 6, 7, 8, 19, 19, 27, 31, 32]*)
assert(element = 3);;
let q1 = add 28 q1;;   (* [3, 4, 6, 7, 8, 19, 19, 27, 28, 31, 32]*)
let q1 = add 8 q1;;   (* [3, 4, 6, 7, 8, 8, 19, 19, 27, 28, 31, 32]*)
let q1 = add 10 q1;;   (* [3, 4, 6, 7, 8, 8, 10, 19, 19, 27, 28, 31, 32]*)
let q1 = add 30 q1;;   (* [3, 4, 6, 7, 8, 8, 10, 19, 19, 27, 28, 30, 31, 32]*)
let q1 = add 25 q1;;   (* [3, 4, 6, 7, 8, 8, 10, 19, 19, 25, 27, 28, 30, 31, 32]*)
let q1 = add 18 q1;;   (* [3, 4, 6, 7, 8, 8, 10, 18, 19, 19, 25, 27, 28, 30, 31, 32]*)
let q1 = add 27 q1;;   (* [3, 4, 6, 7, 8, 8, 10, 18, 19, 19, 25, 27, 27, 28, 30, 31, 32]*)
let q1 = add 9 q1;;   (* [3, 4, 6, 7, 8, 8, 9, 10, 18, 19, 19, 25, 27, 27, 28, 30, 31, 32]*)
let q1 = add 35 q1;;   (* [3, 4, 6, 7, 8, 8, 9, 10, 18, 19, 19, 25, 27, 27, 28, 30, 31, 32, 35]*)
assert(is_empty q1 = false);;   (*[3, 4, 6, 7, 8, 8, 9, 10, 18, 19, 19, 25, 27, 27, 28, 30, 31, 32, 35]*)
let q1 = add 27 q1;;   (* [3, 4, 6, 7, 8, 8, 9, 10, 18, 19, 19, 25, 27, 27, 27, 28, 30, 31, 32, 35]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 36 q2;;   (* [36]*)
let (element, q2) = delete_min q2;;   (* 36 * []*)
assert(element = 36);;
let q2 = add 27 q2;;   (* [27]*)
let q2 = add 4 q2;;   (* [4, 27]*)
let (element, q2) = delete_min q2;;   (* 4 * [27]*)
assert(element = 4);;
let q2 = add 32 q2;;   (* [27, 32]*)
assert(is_empty q2 = false);;   (*[27, 32]*)
let (element, q2) = delete_min q2;;   (* 27 * [32]*)
assert(element = 27);;
let q2 = add 25 q2;;   (* [25, 32]*)
let q2 = add 16 q2;;   (* [16, 25, 32]*)
let q2 = add 8 q2;;   (* [8, 16, 25, 32]*)
let q2 = add 33 q2;;   (* [8, 16, 25, 32, 33]*)
let q2 = add 15 q2;;   (* [8, 15, 16, 25, 32, 33]*)
let q2 = add 25 q2;;   (* [8, 15, 16, 25, 25, 32, 33]*)
let (element, q2) = delete_min q2;;   (* 8 * [15, 16, 25, 25, 32, 33]*)
assert(element = 8);;
let q2 = add 30 q2;;   (* [15, 16, 25, 25, 30, 32, 33]*)
let q2 = add 10 q2;;   (* [10, 15, 16, 25, 25, 30, 32, 33]*)
let q2 = add 15 q2;;   (* [10, 15, 15, 16, 25, 25, 30, 32, 33]*)
let (element, q2) = delete_min q2;;   (* 10 * [15, 15, 16, 25, 25, 30, 32, 33]*)
assert(element = 10);;
let q2 = add 19 q2;;   (* [15, 15, 16, 19, 25, 25, 30, 32, 33]*)
let q2 = add 21 q2;;   (* [15, 15, 16, 19, 21, 25, 25, 30, 32, 33]*)
let q2 = add 31 q2;;   (* [15, 15, 16, 19, 21, 25, 25, 30, 31, 32, 33]*)
let q2 = add 29 q2;;   (* [15, 15, 16, 19, 21, 25, 25, 29, 30, 31, 32, 33]*)
assert(is_empty q2 = false);;   (*[15, 15, 16, 19, 21, 25, 25, 29, 30, 31, 32, 33]*)
let q2 = add 12 q2;;   (* [12, 15, 15, 16, 19, 21, 25, 25, 29, 30, 31, 32, 33]*)
let q2 = add 34 q2;;   (* [12, 15, 15, 16, 19, 21, 25, 25, 29, 30, 31, 32, 33, 34]*)
let q2 = add 32 q2;;   (* [12, 15, 15, 16, 19, 21, 25, 25, 29, 30, 31, 32, 32, 33, 34]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 7 q3;;   (* [7]*)
let q3 = add 35 q3;;   (* [7, 35]*)
let q3 = add 26 q3;;   (* [7, 26, 35]*)
let q3 = add 9 q3;;   (* [7, 9, 26, 35]*)
let (element, q3) = delete_min q3;;   (* 7 * [9, 26, 35]*)
assert(element = 7);;
let q3 = add 39 q3;;   (* [9, 26, 35, 39]*)
let q3 = add 1 q3;;   (* [1, 9, 26, 35, 39]*)
let (element, q3) = delete_min q3;;   (* 1 * [9, 26, 35, 39]*)
assert(element = 1);;
let q3 = add 36 q3;;   (* [9, 26, 35, 36, 39]*)
let q3 = add 4 q3;;   (* [4, 9, 26, 35, 36, 39]*)
let (element, q3) = delete_min q3;;   (* 4 * [9, 26, 35, 36, 39]*)
assert(element = 4);;
let q3 = add 19 q3;;   (* [9, 19, 26, 35, 36, 39]*)
let q3 = add 38 q3;;   (* [9, 19, 26, 35, 36, 38, 39]*)
let q3 = add 27 q3;;   (* [9, 19, 26, 27, 35, 36, 38, 39]*)
let (element, q3) = delete_min q3;;   (* 9 * [19, 26, 27, 35, 36, 38, 39]*)
assert(element = 9);;
let q3 = add 26 q3;;   (* [19, 26, 26, 27, 35, 36, 38, 39]*)
let q3 = add 29 q3;;   (* [19, 26, 26, 27, 29, 35, 36, 38, 39]*)
let q3 = add 27 q3;;   (* [19, 26, 26, 27, 27, 29, 35, 36, 38, 39]*)
let (element, q3) = delete_min q3;;   (* 19 * [26, 26, 27, 27, 29, 35, 36, 38, 39]*)
assert(element = 19);;
let (element, q3) = delete_min q3;;   (* 26 * [26, 27, 27, 29, 35, 36, 38, 39]*)
assert(element = 26);;
let (element, q3) = delete_min q3;;   (* 26 * [27, 27, 29, 35, 36, 38, 39]*)
assert(element = 26);;
assert(is_empty q3 = false);;   (*[27, 27, 29, 35, 36, 38, 39]*)
let q3 = add 18 q3;;   (* [18, 27, 27, 29, 35, 36, 38, 39]*)
let q3 = add 24 q3;;   (* [18, 24, 27, 27, 29, 35, 36, 38, 39]*)
let q3 = add 26 q3;;   (* [18, 24, 26, 27, 27, 29, 35, 36, 38, 39]*)
let q3 = add 0 q3;;   (* [0, 18, 24, 26, 27, 27, 29, 35, 36, 38, 39]*)
let q3 = add 31 q3;;   (* [0, 18, 24, 26, 27, 27, 29, 31, 35, 36, 38, 39]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;   (*[0, 3, 4, 6, 7, 8, 8, 9, 10, 12, 15, 15, 16, 18, 18, 19, 19, 19, 21, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 29, 29, 30, 30, 31, 31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38]*)
let (element, q) = delete_min q;;   (* 0 * [3, 4, 6, 7, 8, 8, 9, 10, 12, 15, 15, 16, 18, 18, 19, 19, 19, 21, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 29, 29, 30, 30, 31, 31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 0);;
let (element, q) = delete_min q;;   (* 3 * [4, 6, 7, 8, 8, 9, 10, 12, 15, 15, 16, 18, 18, 19, 19, 19, 21, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 29, 29, 30, 30, 31, 31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 3);;
let (element, q) = delete_min q;;   (* 4 * [6, 7, 8, 8, 9, 10, 12, 15, 15, 16, 18, 18, 19, 19, 19, 21, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 29, 29, 30, 30, 31, 31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 6 * [7, 8, 8, 9, 10, 12, 15, 15, 16, 18, 18, 19, 19, 19, 21, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 29, 29, 30, 30, 31, 31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 7 * [8, 8, 9, 10, 12, 15, 15, 16, 18, 18, 19, 19, 19, 21, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 29, 29, 30, 30, 31, 31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 8 * [8, 9, 10, 12, 15, 15, 16, 18, 18, 19, 19, 19, 21, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 29, 29, 30, 30, 31, 31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 8 * [9, 10, 12, 15, 15, 16, 18, 18, 19, 19, 19, 21, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 29, 29, 30, 30, 31, 31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 9 * [10, 12, 15, 15, 16, 18, 18, 19, 19, 19, 21, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 29, 29, 30, 30, 31, 31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 10 * [12, 15, 15, 16, 18, 18, 19, 19, 19, 21, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 29, 29, 30, 30, 31, 31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 12 * [15, 15, 16, 18, 18, 19, 19, 19, 21, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 29, 29, 30, 30, 31, 31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 15 * [15, 16, 18, 18, 19, 19, 19, 21, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 29, 29, 30, 30, 31, 31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [16, 18, 18, 19, 19, 19, 21, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 29, 29, 30, 30, 31, 31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [18, 18, 19, 19, 19, 21, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 29, 29, 30, 30, 31, 31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 18 * [18, 19, 19, 19, 21, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 29, 29, 30, 30, 31, 31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [19, 19, 19, 21, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 29, 29, 30, 30, 31, 31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [19, 19, 21, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 29, 29, 30, 30, 31, 31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [19, 21, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 29, 29, 30, 30, 31, 31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [21, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 29, 29, 30, 30, 31, 31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 21 * [24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 29, 29, 30, 30, 31, 31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 24 * [25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 29, 29, 30, 30, 31, 31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [25, 25, 26, 27, 27, 27, 27, 27, 28, 29, 29, 30, 30, 31, 31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [25, 26, 27, 27, 27, 27, 27, 28, 29, 29, 30, 30, 31, 31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [26, 27, 27, 27, 27, 27, 28, 29, 29, 30, 30, 31, 31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [27, 27, 27, 27, 27, 28, 29, 29, 30, 30, 31, 31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 27, 27, 28, 29, 29, 30, 30, 31, 31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 27, 28, 29, 29, 30, 30, 31, 31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 28, 29, 29, 30, 30, 31, 31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 28, 29, 29, 30, 30, 31, 31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [28, 29, 29, 30, 30, 31, 31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [29, 29, 30, 30, 31, 31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [29, 30, 30, 31, 31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [30, 30, 31, 31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [30, 31, 31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [31, 32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 34, 35, 35, 36, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 34, 35, 35, 36, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [34, 35, 35, 36, 38, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 36, 38, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [38, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 38 * [39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST30----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 30 q1;;   (* [30]*)
let q1 = add 34 q1;;   (* [30, 34]*)
let q1 = add 2 q1;;   (* [2, 30, 34]*)
let q1 = add 39 q1;;   (* [2, 30, 34, 39]*)
let q1 = add 6 q1;;   (* [2, 6, 30, 34, 39]*)
assert(is_empty q1 = false);;   (*[2, 6, 30, 34, 39]*)
let q1 = add 39 q1;;   (* [2, 6, 30, 34, 39, 39]*)
let (element, q1) = delete_min q1;;   (* 2 * [6, 30, 34, 39, 39]*)
assert(element = 2);;
let (element, q1) = delete_min q1;;   (* 6 * [30, 34, 39, 39]*)
assert(element = 6);;
let q1 = add 24 q1;;   (* [24, 30, 34, 39, 39]*)
let q1 = add 27 q1;;   (* [24, 27, 30, 34, 39, 39]*)
let q1 = add 31 q1;;   (* [24, 27, 30, 31, 34, 39, 39]*)
let q1 = add 23 q1;;   (* [23, 24, 27, 30, 31, 34, 39, 39]*)
let q1 = add 34 q1;;   (* [23, 24, 27, 30, 31, 34, 34, 39, 39]*)
let (element, q1) = delete_min q1;;   (* 23 * [24, 27, 30, 31, 34, 34, 39, 39]*)
assert(element = 23);;
let q1 = add 13 q1;;   (* [13, 24, 27, 30, 31, 34, 34, 39, 39]*)
let q1 = add 0 q1;;   (* [0, 13, 24, 27, 30, 31, 34, 34, 39, 39]*)
let q1 = add 37 q1;;   (* [0, 13, 24, 27, 30, 31, 34, 34, 37, 39, 39]*)
let q1 = add 8 q1;;   (* [0, 8, 13, 24, 27, 30, 31, 34, 34, 37, 39, 39]*)
let (element, q1) = delete_min q1;;   (* 0 * [8, 13, 24, 27, 30, 31, 34, 34, 37, 39, 39]*)
assert(element = 0);;
let q1 = add 0 q1;;   (* [0, 8, 13, 24, 27, 30, 31, 34, 34, 37, 39, 39]*)
assert(is_empty q1 = false);;   (*[0, 8, 13, 24, 27, 30, 31, 34, 34, 37, 39, 39]*)
let q1 = add 17 q1;;   (* [0, 8, 13, 17, 24, 27, 30, 31, 34, 34, 37, 39, 39]*)
let (element, q1) = delete_min q1;;   (* 0 * [8, 13, 17, 24, 27, 30, 31, 34, 34, 37, 39, 39]*)
assert(element = 0);;
let q1 = add 12 q1;;   (* [8, 12, 13, 17, 24, 27, 30, 31, 34, 34, 37, 39, 39]*)
let (element, q1) = delete_min q1;;   (* 8 * [12, 13, 17, 24, 27, 30, 31, 34, 34, 37, 39, 39]*)
assert(element = 8);;
let (element, q1) = delete_min q1;;   (* 12 * [13, 17, 24, 27, 30, 31, 34, 34, 37, 39, 39]*)
assert(element = 12);;
let q1 = add 12 q1;;   (* [12, 13, 17, 24, 27, 30, 31, 34, 34, 37, 39, 39]*)

(* -------q2------ *)
let q2 = empty;;
assert(is_empty q2 = true);;   (*[]*)
assert(is_empty q2 = true);;   (*[]*)
let q2 = add 17 q2;;   (* [17]*)
let q2 = add 19 q2;;   (* [17, 19]*)
let (element, q2) = delete_min q2;;   (* 17 * [19]*)
assert(element = 17);;
let q2 = add 19 q2;;   (* [19, 19]*)
let q2 = add 4 q2;;   (* [4, 19, 19]*)
let q2 = add 5 q2;;   (* [4, 5, 19, 19]*)
let q2 = add 21 q2;;   (* [4, 5, 19, 19, 21]*)
let (element, q2) = delete_min q2;;   (* 4 * [5, 19, 19, 21]*)
assert(element = 4);;
let q2 = add 20 q2;;   (* [5, 19, 19, 20, 21]*)
assert(is_empty q2 = false);;   (*[5, 19, 19, 20, 21]*)
let q2 = add 24 q2;;   (* [5, 19, 19, 20, 21, 24]*)
let q2 = add 0 q2;;   (* [0, 5, 19, 19, 20, 21, 24]*)
let q2 = add 2 q2;;   (* [0, 2, 5, 19, 19, 20, 21, 24]*)
let q2 = add 6 q2;;   (* [0, 2, 5, 6, 19, 19, 20, 21, 24]*)
let q2 = add 5 q2;;   (* [0, 2, 5, 5, 6, 19, 19, 20, 21, 24]*)
let (element, q2) = delete_min q2;;   (* 0 * [2, 5, 5, 6, 19, 19, 20, 21, 24]*)
assert(element = 0);;
let q2 = add 14 q2;;   (* [2, 5, 5, 6, 14, 19, 19, 20, 21, 24]*)
let q2 = add 14 q2;;   (* [2, 5, 5, 6, 14, 14, 19, 19, 20, 21, 24]*)
let q2 = add 25 q2;;   (* [2, 5, 5, 6, 14, 14, 19, 19, 20, 21, 24, 25]*)
assert(is_empty q2 = false);;   (*[2, 5, 5, 6, 14, 14, 19, 19, 20, 21, 24, 25]*)
let q2 = add 4 q2;;   (* [2, 4, 5, 5, 6, 14, 14, 19, 19, 20, 21, 24, 25]*)
let q2 = add 27 q2;;   (* [2, 4, 5, 5, 6, 14, 14, 19, 19, 20, 21, 24, 25, 27]*)
let (element, q2) = delete_min q2;;   (* 2 * [4, 5, 5, 6, 14, 14, 19, 19, 20, 21, 24, 25, 27]*)
assert(element = 2);;
let (element, q2) = delete_min q2;;   (* 4 * [5, 5, 6, 14, 14, 19, 19, 20, 21, 24, 25, 27]*)
assert(element = 4);;
assert(is_empty q2 = false);;   (*[5, 5, 6, 14, 14, 19, 19, 20, 21, 24, 25, 27]*)
let q2 = add 3 q2;;   (* [3, 5, 5, 6, 14, 14, 19, 19, 20, 21, 24, 25, 27]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 22 q3;;   (* [22]*)
let q3 = add 1 q3;;   (* [1, 22]*)
let q3 = add 1 q3;;   (* [1, 1, 22]*)
let (element, q3) = delete_min q3;;   (* 1 * [1, 22]*)
assert(element = 1);;
let q3 = add 3 q3;;   (* [1, 3, 22]*)
let q3 = add 31 q3;;   (* [1, 3, 22, 31]*)
let q3 = add 15 q3;;   (* [1, 3, 15, 22, 31]*)
let q3 = add 10 q3;;   (* [1, 3, 10, 15, 22, 31]*)
let q3 = add 35 q3;;   (* [1, 3, 10, 15, 22, 31, 35]*)
assert(is_empty q3 = false);;   (*[1, 3, 10, 15, 22, 31, 35]*)
assert(is_empty q3 = false);;   (*[1, 3, 10, 15, 22, 31, 35]*)
let q3 = add 15 q3;;   (* [1, 3, 10, 15, 15, 22, 31, 35]*)
let q3 = add 7 q3;;   (* [1, 3, 7, 10, 15, 15, 22, 31, 35]*)
let q3 = add 37 q3;;   (* [1, 3, 7, 10, 15, 15, 22, 31, 35, 37]*)
let (element, q3) = delete_min q3;;   (* 1 * [3, 7, 10, 15, 15, 22, 31, 35, 37]*)
assert(element = 1);;
let q3 = add 4 q3;;   (* [3, 4, 7, 10, 15, 15, 22, 31, 35, 37]*)
let q3 = add 7 q3;;   (* [3, 4, 7, 7, 10, 15, 15, 22, 31, 35, 37]*)
let (element, q3) = delete_min q3;;   (* 3 * [4, 7, 7, 10, 15, 15, 22, 31, 35, 37]*)
assert(element = 3);;
let (element, q3) = delete_min q3;;   (* 4 * [7, 7, 10, 15, 15, 22, 31, 35, 37]*)
assert(element = 4);;
let q3 = add 0 q3;;   (* [0, 7, 7, 10, 15, 15, 22, 31, 35, 37]*)
assert(is_empty q3 = false);;   (*[0, 7, 7, 10, 15, 15, 22, 31, 35, 37]*)
let (element, q3) = delete_min q3;;   (* 0 * [7, 7, 10, 15, 15, 22, 31, 35, 37]*)
assert(element = 0);;
let q3 = add 31 q3;;   (* [7, 7, 10, 15, 15, 22, 31, 31, 35, 37]*)
let q3 = add 22 q3;;   (* [7, 7, 10, 15, 15, 22, 22, 31, 31, 35, 37]*)
let q3 = add 12 q3;;   (* [7, 7, 10, 12, 15, 15, 22, 22, 31, 31, 35, 37]*)
let (element, q3) = delete_min q3;;   (* 7 * [7, 10, 12, 15, 15, 22, 22, 31, 31, 35, 37]*)
assert(element = 7);;
let q3 = add 23 q3;;   (* [7, 10, 12, 15, 15, 22, 22, 23, 31, 31, 35, 37]*)
let q3 = add 12 q3;;   (* [7, 10, 12, 12, 15, 15, 22, 22, 23, 31, 31, 35, 37]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;   (*[3, 5, 5, 6, 7, 10, 12, 12, 12, 13, 14, 14, 15, 15, 17, 19, 19, 20, 21, 22, 22, 23, 24, 24, 25, 27, 27, 30, 31, 31, 31, 34, 34, 35, 37, 37, 39]*)
let (element, q) = delete_min q;;   (* 3 * [5, 5, 6, 7, 10, 12, 12, 12, 13, 14, 14, 15, 15, 17, 19, 19, 20, 21, 22, 22, 23, 24, 24, 25, 27, 27, 30, 31, 31, 31, 34, 34, 35, 37, 37, 39, 39]*)
assert(element = 3);;
let (element, q) = delete_min q;;   (* 5 * [5, 6, 7, 10, 12, 12, 12, 13, 14, 14, 15, 15, 17, 19, 19, 20, 21, 22, 22, 23, 24, 24, 25, 27, 27, 30, 31, 31, 31, 34, 34, 35, 37, 37, 39, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 5 * [6, 7, 10, 12, 12, 12, 13, 14, 14, 15, 15, 17, 19, 19, 20, 21, 22, 22, 23, 24, 24, 25, 27, 27, 30, 31, 31, 31, 34, 34, 35, 37, 37, 39, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 6 * [7, 10, 12, 12, 12, 13, 14, 14, 15, 15, 17, 19, 19, 20, 21, 22, 22, 23, 24, 24, 25, 27, 27, 30, 31, 31, 31, 34, 34, 35, 37, 37, 39, 39]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 7 * [10, 12, 12, 12, 13, 14, 14, 15, 15, 17, 19, 19, 20, 21, 22, 22, 23, 24, 24, 25, 27, 27, 30, 31, 31, 31, 34, 34, 35, 37, 37, 39, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 10 * [12, 12, 12, 13, 14, 14, 15, 15, 17, 19, 19, 20, 21, 22, 22, 23, 24, 24, 25, 27, 27, 30, 31, 31, 31, 34, 34, 35, 37, 37, 39, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 12 * [12, 12, 13, 14, 14, 15, 15, 17, 19, 19, 20, 21, 22, 22, 23, 24, 24, 25, 27, 27, 30, 31, 31, 31, 34, 34, 35, 37, 37, 39, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 12 * [12, 13, 14, 14, 15, 15, 17, 19, 19, 20, 21, 22, 22, 23, 24, 24, 25, 27, 27, 30, 31, 31, 31, 34, 34, 35, 37, 37, 39, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 12 * [13, 14, 14, 15, 15, 17, 19, 19, 20, 21, 22, 22, 23, 24, 24, 25, 27, 27, 30, 31, 31, 31, 34, 34, 35, 37, 37, 39, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 13 * [14, 14, 15, 15, 17, 19, 19, 20, 21, 22, 22, 23, 24, 24, 25, 27, 27, 30, 31, 31, 31, 34, 34, 35, 37, 37, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 14 * [14, 15, 15, 17, 19, 19, 20, 21, 22, 22, 23, 24, 24, 25, 27, 27, 30, 31, 31, 31, 34, 34, 35, 37, 37, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [15, 15, 17, 19, 19, 20, 21, 22, 22, 23, 24, 24, 25, 27, 27, 30, 31, 31, 31, 34, 34, 35, 37, 37, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [15, 17, 19, 19, 20, 21, 22, 22, 23, 24, 24, 25, 27, 27, 30, 31, 31, 31, 34, 34, 35, 37, 37, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [17, 19, 19, 20, 21, 22, 22, 23, 24, 24, 25, 27, 27, 30, 31, 31, 31, 34, 34, 35, 37, 37, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 17 * [19, 19, 20, 21, 22, 22, 23, 24, 24, 25, 27, 27, 30, 31, 31, 31, 34, 34, 35, 37, 37, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 19 * [19, 20, 21, 22, 22, 23, 24, 24, 25, 27, 27, 30, 31, 31, 31, 34, 34, 35, 37, 37, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [20, 21, 22, 22, 23, 24, 24, 25, 27, 27, 30, 31, 31, 31, 34, 34, 35, 37, 37, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [21, 22, 22, 23, 24, 24, 25, 27, 27, 30, 31, 31, 31, 34, 34, 35, 37, 37, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [22, 22, 23, 24, 24, 25, 27, 27, 30, 31, 31, 31, 34, 34, 35, 37, 37, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [22, 23, 24, 24, 25, 27, 27, 30, 31, 31, 31, 34, 34, 35, 37, 37, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [23, 24, 24, 25, 27, 27, 30, 31, 31, 31, 34, 34, 35, 37, 37, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [24, 24, 25, 27, 27, 30, 31, 31, 31, 34, 34, 35, 37, 37, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [24, 25, 27, 27, 30, 31, 31, 31, 34, 34, 35, 37, 37, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [25, 27, 27, 30, 31, 31, 31, 34, 34, 35, 37, 37, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [27, 27, 30, 31, 31, 31, 34, 34, 35, 37, 37, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 27 * [27, 30, 31, 31, 31, 34, 34, 35, 37, 37, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [30, 31, 31, 31, 34, 34, 35, 37, 37, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 31, 34, 34, 35, 37, 37, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 31, 34, 34, 35, 37, 37, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [31, 34, 34, 35, 37, 37, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [34, 34, 35, 37, 37, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 37, 37, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 37, 37, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [37, 37, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 37 * [37, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST31----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 35 q1;;   (* [35]*)
let (element, q1) = delete_min q1;;   (* 35 * []*)
assert(element = 35);;
let q1 = add 19 q1;;   (* [19]*)
let (element, q1) = delete_min q1;;   (* 19 * []*)
assert(element = 19);;
let q1 = add 5 q1;;   (* [5]*)
let (element, q1) = delete_min q1;;   (* 5 * []*)
assert(element = 5);;
let q1 = add 37 q1;;   (* [37]*)
assert(is_empty q1 = false);;   (*[37]*)
let (element, q1) = delete_min q1;;   (* 37 * []*)
assert(element = 37);;
let q1 = add 10 q1;;   (* [10]*)
let q1 = add 8 q1;;   (* [8, 10]*)
let q1 = add 32 q1;;   (* [8, 10, 32]*)
let q1 = add 20 q1;;   (* [8, 10, 20, 32]*)
let q1 = add 38 q1;;   (* [8, 10, 20, 32, 38]*)
let (element, q1) = delete_min q1;;   (* 8 * [10, 20, 32, 38]*)
assert(element = 8);;
let (element, q1) = delete_min q1;;   (* 10 * [20, 32, 38]*)
assert(element = 10);;
let q1 = add 17 q1;;   (* [17, 20, 32, 38]*)
let q1 = add 36 q1;;   (* [17, 20, 32, 36, 38]*)
let (element, q1) = delete_min q1;;   (* 17 * [20, 32, 36, 38]*)
assert(element = 17);;
let q1 = add 32 q1;;   (* [20, 32, 32, 36, 38]*)
let q1 = add 13 q1;;   (* [13, 20, 32, 32, 36, 38]*)
let (element, q1) = delete_min q1;;   (* 13 * [20, 32, 32, 36, 38]*)
assert(element = 13);;
let q1 = add 39 q1;;   (* [20, 32, 32, 36, 38, 39]*)
let (element, q1) = delete_min q1;;   (* 20 * [32, 32, 36, 38, 39]*)
assert(element = 20);;
let q1 = add 38 q1;;   (* [32, 32, 36, 38, 38, 39]*)
let q1 = add 2 q1;;   (* [2, 32, 32, 36, 38, 38, 39]*)
let (element, q1) = delete_min q1;;   (* 2 * [32, 32, 36, 38, 38, 39]*)
assert(element = 2);;
let (element, q1) = delete_min q1;;   (* 32 * [32, 36, 38, 38, 39]*)
assert(element = 32);;
let (element, q1) = delete_min q1;;   (* 32 * [36, 38, 38, 39]*)
assert(element = 32);;

(* -------q2------ *)
let q2 = empty;;
let q2 = add 26 q2;;   (* [26]*)
let q2 = add 8 q2;;   (* [8, 26]*)
let q2 = add 9 q2;;   (* [8, 9, 26]*)
let q2 = add 19 q2;;   (* [8, 9, 19, 26]*)
let q2 = add 33 q2;;   (* [8, 9, 19, 26, 33]*)
let q2 = add 4 q2;;   (* [4, 8, 9, 19, 26, 33]*)
let (element, q2) = delete_min q2;;   (* 4 * [8, 9, 19, 26, 33]*)
assert(element = 4);;
let q2 = add 38 q2;;   (* [8, 9, 19, 26, 33, 38]*)
let q2 = add 39 q2;;   (* [8, 9, 19, 26, 33, 38, 39]*)
let q2 = add 27 q2;;   (* [8, 9, 19, 26, 27, 33, 38, 39]*)
let (element, q2) = delete_min q2;;   (* 8 * [9, 19, 26, 27, 33, 38, 39]*)
assert(element = 8);;
let q2 = add 24 q2;;   (* [9, 19, 24, 26, 27, 33, 38, 39]*)
let q2 = add 36 q2;;   (* [9, 19, 24, 26, 27, 33, 36, 38, 39]*)
let q2 = add 17 q2;;   (* [9, 17, 19, 24, 26, 27, 33, 36, 38, 39]*)
let q2 = add 27 q2;;   (* [9, 17, 19, 24, 26, 27, 27, 33, 36, 38, 39]*)
let q2 = add 25 q2;;   (* [9, 17, 19, 24, 25, 26, 27, 27, 33, 36, 38, 39]*)
let q2 = add 6 q2;;   (* [6, 9, 17, 19, 24, 25, 26, 27, 27, 33, 36, 38, 39]*)
let q2 = add 22 q2;;   (* [6, 9, 17, 19, 22, 24, 25, 26, 27, 27, 33, 36, 38, 39]*)
let q2 = add 4 q2;;   (* [4, 6, 9, 17, 19, 22, 24, 25, 26, 27, 27, 33, 36, 38, 39]*)
let q2 = add 18 q2;;   (* [4, 6, 9, 17, 18, 19, 22, 24, 25, 26, 27, 27, 33, 36, 38, 39]*)
let q2 = add 5 q2;;   (* [4, 5, 6, 9, 17, 18, 19, 22, 24, 25, 26, 27, 27, 33, 36, 38, 39]*)
let q2 = add 29 q2;;   (* [4, 5, 6, 9, 17, 18, 19, 22, 24, 25, 26, 27, 27, 29, 33, 36, 38, 39]*)
assert(is_empty q2 = false);;   (*[4, 5, 6, 9, 17, 18, 19, 22, 24, 25, 26, 27, 27, 29, 33, 36, 38, 39]*)
let q2 = add 30 q2;;   (* [4, 5, 6, 9, 17, 18, 19, 22, 24, 25, 26, 27, 27, 29, 30, 33, 36, 38, 39]*)
let (element, q2) = delete_min q2;;   (* 4 * [5, 6, 9, 17, 18, 19, 22, 24, 25, 26, 27, 27, 29, 30, 33, 36, 38, 39]*)
assert(element = 4);;
assert(is_empty q2 = false);;   (*[5, 6, 9, 17, 18, 19, 22, 24, 25, 26, 27, 27, 29, 30, 33, 36, 38, 39]*)
let (element, q2) = delete_min q2;;   (* 5 * [6, 9, 17, 18, 19, 22, 24, 25, 26, 27, 27, 29, 30, 33, 36, 38, 39]*)
assert(element = 5);;
let (element, q2) = delete_min q2;;   (* 6 * [9, 17, 18, 19, 22, 24, 25, 26, 27, 27, 29, 30, 33, 36, 38, 39]*)
assert(element = 6);;
assert(is_empty q2 = false);;   (*[9, 17, 18, 19, 22, 24, 25, 26, 27, 27, 29, 30, 33, 36, 38, 39]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 4 q3;;   (* [4]*)
let q3 = add 38 q3;;   (* [4, 38]*)
let q3 = add 1 q3;;   (* [1, 4, 38]*)
let (element, q3) = delete_min q3;;   (* 1 * [4, 38]*)
assert(element = 1);;
let q3 = add 13 q3;;   (* [4, 13, 38]*)
let q3 = add 3 q3;;   (* [3, 4, 13, 38]*)
let (element, q3) = delete_min q3;;   (* 3 * [4, 13, 38]*)
assert(element = 3);;
let q3 = add 35 q3;;   (* [4, 13, 35, 38]*)
let q3 = add 36 q3;;   (* [4, 13, 35, 36, 38]*)
let q3 = add 10 q3;;   (* [4, 10, 13, 35, 36, 38]*)
assert(is_empty q3 = false);;   (*[4, 10, 13, 35, 36, 38]*)
assert(is_empty q3 = false);;   (*[4, 10, 13, 35, 36, 38]*)
let q3 = add 27 q3;;   (* [4, 10, 13, 27, 35, 36, 38]*)
let q3 = add 5 q3;;   (* [4, 5, 10, 13, 27, 35, 36, 38]*)
let q3 = add 17 q3;;   (* [4, 5, 10, 13, 17, 27, 35, 36, 38]*)
let (element, q3) = delete_min q3;;   (* 4 * [5, 10, 13, 17, 27, 35, 36, 38]*)
assert(element = 4);;
let q3 = add 6 q3;;   (* [5, 6, 10, 13, 17, 27, 35, 36, 38]*)
let (element, q3) = delete_min q3;;   (* 5 * [6, 10, 13, 17, 27, 35, 36, 38]*)
assert(element = 5);;
let q3 = add 13 q3;;   (* [6, 10, 13, 13, 17, 27, 35, 36, 38]*)
assert(is_empty q3 = false);;   (*[6, 10, 13, 13, 17, 27, 35, 36, 38]*)
let (element, q3) = delete_min q3;;   (* 6 * [10, 13, 13, 17, 27, 35, 36, 38]*)
assert(element = 6);;
let q3 = add 27 q3;;   (* [10, 13, 13, 17, 27, 27, 35, 36, 38]*)
let (element, q3) = delete_min q3;;   (* 10 * [13, 13, 17, 27, 27, 35, 36, 38]*)
assert(element = 10);;
let q3 = add 2 q3;;   (* [2, 13, 13, 17, 27, 27, 35, 36, 38]*)
let q3 = add 11 q3;;   (* [2, 11, 13, 13, 17, 27, 27, 35, 36, 38]*)
let q3 = add 14 q3;;   (* [2, 11, 13, 13, 14, 17, 27, 27, 35, 36, 38]*)
assert(is_empty q3 = false);;   (*[2, 11, 13, 13, 14, 17, 27, 27, 35, 36, 38]*)
let (element, q3) = delete_min q3;;   (* 2 * [11, 13, 13, 14, 17, 27, 27, 35, 36, 38]*)
assert(element = 2);;
let q3 = add 6 q3;;   (* [6, 11, 13, 13, 14, 17, 27, 27, 35, 36, 38]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;   (*[6, 9, 11, 13, 13, 14, 17, 17, 18, 19, 22, 24, 25, 26, 27, 27, 27, 27, 29, 30, 33, 35, 36, 36, 36, 38, 38, 38, 38, 39]*)
let (element, q) = delete_min q;;   (* 6 * [9, 11, 13, 13, 14, 17, 17, 18, 19, 22, 24, 25, 26, 27, 27, 27, 27, 29, 30, 33, 35, 36, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 9 * [11, 13, 13, 14, 17, 17, 18, 19, 22, 24, 25, 26, 27, 27, 27, 27, 29, 30, 33, 35, 36, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 11 * [13, 13, 14, 17, 17, 18, 19, 22, 24, 25, 26, 27, 27, 27, 27, 29, 30, 33, 35, 36, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 13 * [13, 14, 17, 17, 18, 19, 22, 24, 25, 26, 27, 27, 27, 27, 29, 30, 33, 35, 36, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 13 * [14, 17, 17, 18, 19, 22, 24, 25, 26, 27, 27, 27, 27, 29, 30, 33, 35, 36, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 14 * [17, 17, 18, 19, 22, 24, 25, 26, 27, 27, 27, 27, 29, 30, 33, 35, 36, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 17 * [17, 18, 19, 22, 24, 25, 26, 27, 27, 27, 27, 29, 30, 33, 35, 36, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [18, 19, 22, 24, 25, 26, 27, 27, 27, 27, 29, 30, 33, 35, 36, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [19, 22, 24, 25, 26, 27, 27, 27, 27, 29, 30, 33, 35, 36, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [22, 24, 25, 26, 27, 27, 27, 27, 29, 30, 33, 35, 36, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 22 * [24, 25, 26, 27, 27, 27, 27, 29, 30, 33, 35, 36, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 24 * [25, 26, 27, 27, 27, 27, 29, 30, 33, 35, 36, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [26, 27, 27, 27, 27, 29, 30, 33, 35, 36, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [27, 27, 27, 27, 29, 30, 33, 35, 36, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 27, 29, 30, 33, 35, 36, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 29, 30, 33, 35, 36, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 29, 30, 33, 35, 36, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [29, 30, 33, 35, 36, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 29 * [30, 33, 35, 36, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [33, 35, 36, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 33 * [35, 36, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 38, 38, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [38, 38, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 38, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST32----*)

(* -------q1------ *)
let q1 = empty;;
assert(is_empty q1 = true);;   (*[]*)
let q1 = add 31 q1;;   (* [31]*)
let (element, q1) = delete_min q1;;   (* 31 * []*)
assert(element = 31);;
let q1 = add 34 q1;;   (* [34]*)
assert(is_empty q1 = false);;   (*[34]*)
let (element, q1) = delete_min q1;;   (* 34 * []*)
assert(element = 34);;
let q1 = add 5 q1;;   (* [5]*)
let q1 = add 8 q1;;   (* [5, 8]*)
let (element, q1) = delete_min q1;;   (* 5 * [8]*)
assert(element = 5);;
let (element, q1) = delete_min q1;;   (* 8 * []*)
assert(element = 8);;
let q1 = add 7 q1;;   (* [7]*)
let (element, q1) = delete_min q1;;   (* 7 * []*)
assert(element = 7);;
let q1 = add 2 q1;;   (* [2]*)
let q1 = add 11 q1;;   (* [2, 11]*)
let (element, q1) = delete_min q1;;   (* 2 * [11]*)
assert(element = 2);;
let q1 = add 3 q1;;   (* [3, 11]*)
let q1 = add 17 q1;;   (* [3, 11, 17]*)
let q1 = add 1 q1;;   (* [1, 3, 11, 17]*)
let q1 = add 19 q1;;   (* [1, 3, 11, 17, 19]*)
let q1 = add 26 q1;;   (* [1, 3, 11, 17, 19, 26]*)
let (element, q1) = delete_min q1;;   (* 1 * [3, 11, 17, 19, 26]*)
assert(element = 1);;
let q1 = add 13 q1;;   (* [3, 11, 13, 17, 19, 26]*)
let q1 = add 16 q1;;   (* [3, 11, 13, 16, 17, 19, 26]*)
let (element, q1) = delete_min q1;;   (* 3 * [11, 13, 16, 17, 19, 26]*)
assert(element = 3);;
let (element, q1) = delete_min q1;;   (* 11 * [13, 16, 17, 19, 26]*)
assert(element = 11);;
let q1 = add 11 q1;;   (* [11, 13, 16, 17, 19, 26]*)
let (element, q1) = delete_min q1;;   (* 11 * [13, 16, 17, 19, 26]*)
assert(element = 11);;
let q1 = add 20 q1;;   (* [13, 16, 17, 19, 20, 26]*)
assert(is_empty q1 = false);;   (*[13, 16, 17, 19, 20, 26]*)
let (element, q1) = delete_min q1;;   (* 13 * [16, 17, 19, 20, 26]*)
assert(element = 13);;

(* -------q2------ *)
let q2 = empty;;
let q2 = add 7 q2;;   (* [7]*)
let q2 = add 21 q2;;   (* [7, 21]*)
let q2 = add 14 q2;;   (* [7, 14, 21]*)
let q2 = add 16 q2;;   (* [7, 14, 16, 21]*)
let (element, q2) = delete_min q2;;   (* 7 * [14, 16, 21]*)
assert(element = 7);;
let q2 = add 25 q2;;   (* [14, 16, 21, 25]*)
let q2 = add 19 q2;;   (* [14, 16, 19, 21, 25]*)
let q2 = add 16 q2;;   (* [14, 16, 16, 19, 21, 25]*)
let q2 = add 31 q2;;   (* [14, 16, 16, 19, 21, 25, 31]*)
let (element, q2) = delete_min q2;;   (* 14 * [16, 16, 19, 21, 25, 31]*)
assert(element = 14);;
let q2 = add 18 q2;;   (* [16, 16, 18, 19, 21, 25, 31]*)
let q2 = add 11 q2;;   (* [11, 16, 16, 18, 19, 21, 25, 31]*)
assert(is_empty q2 = false);;   (*[11, 16, 16, 18, 19, 21, 25, 31]*)
let q2 = add 3 q2;;   (* [3, 11, 16, 16, 18, 19, 21, 25, 31]*)
let (element, q2) = delete_min q2;;   (* 3 * [11, 16, 16, 18, 19, 21, 25, 31]*)
assert(element = 3);;
let q2 = add 22 q2;;   (* [11, 16, 16, 18, 19, 21, 22, 25, 31]*)
assert(is_empty q2 = false);;   (*[11, 16, 16, 18, 19, 21, 22, 25, 31]*)
assert(is_empty q2 = false);;   (*[11, 16, 16, 18, 19, 21, 22, 25, 31]*)
assert(is_empty q2 = false);;   (*[11, 16, 16, 18, 19, 21, 22, 25, 31]*)
let q2 = add 27 q2;;   (* [11, 16, 16, 18, 19, 21, 22, 25, 27, 31]*)
let (element, q2) = delete_min q2;;   (* 11 * [16, 16, 18, 19, 21, 22, 25, 27, 31]*)
assert(element = 11);;
let (element, q2) = delete_min q2;;   (* 16 * [16, 18, 19, 21, 22, 25, 27, 31]*)
assert(element = 16);;
let q2 = add 17 q2;;   (* [16, 17, 18, 19, 21, 22, 25, 27, 31]*)
let (element, q2) = delete_min q2;;   (* 16 * [17, 18, 19, 21, 22, 25, 27, 31]*)
assert(element = 16);;
let q2 = add 31 q2;;   (* [17, 18, 19, 21, 22, 25, 27, 31, 31]*)
let q2 = add 0 q2;;   (* [0, 17, 18, 19, 21, 22, 25, 27, 31, 31]*)
let q2 = add 2 q2;;   (* [0, 2, 17, 18, 19, 21, 22, 25, 27, 31, 31]*)
let q2 = add 3 q2;;   (* [0, 2, 3, 17, 18, 19, 21, 22, 25, 27, 31, 31]*)
let (element, q2) = delete_min q2;;   (* 0 * [2, 3, 17, 18, 19, 21, 22, 25, 27, 31, 31]*)
assert(element = 0);;
let q2 = add 9 q2;;   (* [2, 3, 9, 17, 18, 19, 21, 22, 25, 27, 31, 31]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 10 q3;;   (* [10]*)
let q3 = add 25 q3;;   (* [10, 25]*)
let q3 = add 1 q3;;   (* [1, 10, 25]*)
let (element, q3) = delete_min q3;;   (* 1 * [10, 25]*)
assert(element = 1);;
let q3 = add 36 q3;;   (* [10, 25, 36]*)
let (element, q3) = delete_min q3;;   (* 10 * [25, 36]*)
assert(element = 10);;
let (element, q3) = delete_min q3;;   (* 25 * [36]*)
assert(element = 25);;
let (element, q3) = delete_min q3;;   (* 36 * []*)
assert(element = 36);;
assert(is_empty q3 = true);;   (*[]*)
let q3 = add 11 q3;;   (* [11]*)
let q3 = add 8 q3;;   (* [8, 11]*)
assert(is_empty q3 = false);;   (*[8, 11]*)
let q3 = add 30 q3;;   (* [8, 11, 30]*)
let q3 = add 29 q3;;   (* [8, 11, 29, 30]*)
let (element, q3) = delete_min q3;;   (* 8 * [11, 29, 30]*)
assert(element = 8);;
let q3 = add 22 q3;;   (* [11, 22, 29, 30]*)
let q3 = add 28 q3;;   (* [11, 22, 28, 29, 30]*)
let q3 = add 30 q3;;   (* [11, 22, 28, 29, 30, 30]*)
let (element, q3) = delete_min q3;;   (* 11 * [22, 28, 29, 30, 30]*)
assert(element = 11);;
let q3 = add 21 q3;;   (* [21, 22, 28, 29, 30, 30]*)
let q3 = add 11 q3;;   (* [11, 21, 22, 28, 29, 30, 30]*)
let q3 = add 32 q3;;   (* [11, 21, 22, 28, 29, 30, 30, 32]*)
assert(is_empty q3 = false);;   (*[11, 21, 22, 28, 29, 30, 30, 32]*)
let (element, q3) = delete_min q3;;   (* 11 * [21, 22, 28, 29, 30, 30, 32]*)
assert(element = 11);;
let q3 = add 27 q3;;   (* [21, 22, 27, 28, 29, 30, 30, 32]*)
let q3 = add 25 q3;;   (* [21, 22, 25, 27, 28, 29, 30, 30, 32]*)
let q3 = add 15 q3;;   (* [15, 21, 22, 25, 27, 28, 29, 30, 30, 32]*)
assert(is_empty q3 = false);;   (*[15, 21, 22, 25, 27, 28, 29, 30, 30, 32]*)
let q3 = add 14 q3;;   (* [14, 15, 21, 22, 25, 27, 28, 29, 30, 30, 32]*)
let (element, q3) = delete_min q3;;   (* 14 * [15, 21, 22, 25, 27, 28, 29, 30, 30, 32]*)
assert(element = 14);;

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;   (*[2, 3, 9, 15, 16, 17, 17, 18, 19, 19, 20, 21, 21, 22, 22, 25, 25, 26, 27, 27, 28, 29, 30, 30, 31, 31]*)
let (element, q) = delete_min q;;   (* 2 * [3, 9, 15, 16, 17, 17, 18, 19, 19, 20, 21, 21, 22, 22, 25, 25, 26, 27, 27, 28, 29, 30, 30, 31, 31, 32]*)
assert(element = 2);;
let (element, q) = delete_min q;;   (* 3 * [9, 15, 16, 17, 17, 18, 19, 19, 20, 21, 21, 22, 22, 25, 25, 26, 27, 27, 28, 29, 30, 30, 31, 31, 32]*)
assert(element = 3);;
let (element, q) = delete_min q;;   (* 9 * [15, 16, 17, 17, 18, 19, 19, 20, 21, 21, 22, 22, 25, 25, 26, 27, 27, 28, 29, 30, 30, 31, 31, 32]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 15 * [16, 17, 17, 18, 19, 19, 20, 21, 21, 22, 22, 25, 25, 26, 27, 27, 28, 29, 30, 30, 31, 31, 32]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [17, 17, 18, 19, 19, 20, 21, 21, 22, 22, 25, 25, 26, 27, 27, 28, 29, 30, 30, 31, 31, 32]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 17 * [17, 18, 19, 19, 20, 21, 21, 22, 22, 25, 25, 26, 27, 27, 28, 29, 30, 30, 31, 31, 32]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [18, 19, 19, 20, 21, 21, 22, 22, 25, 25, 26, 27, 27, 28, 29, 30, 30, 31, 31, 32]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [19, 19, 20, 21, 21, 22, 22, 25, 25, 26, 27, 27, 28, 29, 30, 30, 31, 31, 32]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [19, 20, 21, 21, 22, 22, 25, 25, 26, 27, 27, 28, 29, 30, 30, 31, 31, 32]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [20, 21, 21, 22, 22, 25, 25, 26, 27, 27, 28, 29, 30, 30, 31, 31, 32]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [21, 21, 22, 22, 25, 25, 26, 27, 27, 28, 29, 30, 30, 31, 31, 32]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [21, 22, 22, 25, 25, 26, 27, 27, 28, 29, 30, 30, 31, 31, 32]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [22, 22, 25, 25, 26, 27, 27, 28, 29, 30, 30, 31, 31, 32]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [22, 25, 25, 26, 27, 27, 28, 29, 30, 30, 31, 31, 32]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [25, 25, 26, 27, 27, 28, 29, 30, 30, 31, 31, 32]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 25 * [25, 26, 27, 27, 28, 29, 30, 30, 31, 31, 32]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [26, 27, 27, 28, 29, 30, 30, 31, 31, 32]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [27, 27, 28, 29, 30, 30, 31, 31, 32]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [27, 28, 29, 30, 30, 31, 31, 32]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [28, 29, 30, 30, 31, 31, 32]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [29, 30, 30, 31, 31, 32]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [30, 30, 31, 31, 32]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [30, 31, 31, 32]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 32]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 32]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [32]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * []*)
assert(element = 32);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST33----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 8 q1;;   (* [8]*)
let (element, q1) = delete_min q1;;   (* 8 * []*)
assert(element = 8);;
let q1 = add 4 q1;;   (* [4]*)
let (element, q1) = delete_min q1;;   (* 4 * []*)
assert(element = 4);;
let q1 = add 0 q1;;   (* [0]*)
let q1 = add 28 q1;;   (* [0, 28]*)
let q1 = add 31 q1;;   (* [0, 28, 31]*)
let q1 = add 14 q1;;   (* [0, 14, 28, 31]*)
let q1 = add 1 q1;;   (* [0, 1, 14, 28, 31]*)
let q1 = add 38 q1;;   (* [0, 1, 14, 28, 31, 38]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 35 q2;;   (* [35]*)
let q2 = add 5 q2;;   (* [5, 35]*)
let q2 = add 30 q2;;   (* [5, 30, 35]*)
let (element, q2) = delete_min q2;;   (* 5 * [30, 35]*)
assert(element = 5);;
let q2 = add 26 q2;;   (* [26, 30, 35]*)
let (element, q2) = delete_min q2;;   (* 26 * [30, 35]*)
assert(element = 26);;
let q2 = add 30 q2;;   (* [30, 30, 35]*)
let (element, q2) = delete_min q2;;   (* 30 * [30, 35]*)
assert(element = 30);;
assert(is_empty q2 = false);;   (*[30, 35]*)
let q2 = add 13 q2;;   (* [13, 30, 35]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 0 q3;;   (* [0]*)
let (element, q3) = delete_min q3;;   (* 0 * []*)
assert(element = 0);;
let q3 = add 34 q3;;   (* [34]*)
let (element, q3) = delete_min q3;;   (* 34 * []*)
assert(element = 34);;
let q3 = add 3 q3;;   (* [3]*)
let q3 = add 37 q3;;   (* [3, 37]*)
let q3 = add 23 q3;;   (* [3, 23, 37]*)
assert(is_empty q3 = false);;   (*[3, 23, 37]*)
let (element, q3) = delete_min q3;;   (* 3 * [23, 37]*)
assert(element = 3);;
let q3 = add 24 q3;;   (* [23, 24, 37]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 1 q4;;   (* [1]*)
assert(is_empty q4 = false);;   (*[1]*)
let (element, q4) = delete_min q4;;   (* 1 * []*)
assert(element = 1);;
let q4 = add 18 q4;;   (* [18]*)
let q4 = add 32 q4;;   (* [18, 32]*)
let q4 = add 18 q4;;   (* [18, 18, 32]*)
assert(is_empty q4 = false);;   (*[18, 18, 32]*)
let q4 = add 35 q4;;   (* [18, 18, 32, 35]*)
let q4 = add 22 q4;;   (* [18, 18, 22, 32, 35]*)
let q4 = add 10 q4;;   (* [10, 18, 18, 22, 32, 35]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;   (*[0, 1, 10, 13, 14, 18, 18, 22, 23, 24, 28, 30, 31, 32, 35, 35, 37]*)
let (element, q) = delete_min q;;   (* 0 * [1, 10, 13, 14, 18, 18, 22, 23, 24, 28, 30, 31, 32, 35, 35, 37, 38]*)
assert(element = 0);;
let (element, q) = delete_min q;;   (* 1 * [10, 13, 14, 18, 18, 22, 23, 24, 28, 30, 31, 32, 35, 35, 37, 38]*)
assert(element = 1);;
let (element, q) = delete_min q;;   (* 10 * [13, 14, 18, 18, 22, 23, 24, 28, 30, 31, 32, 35, 35, 37, 38]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 13 * [14, 18, 18, 22, 23, 24, 28, 30, 31, 32, 35, 35, 37, 38]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 14 * [18, 18, 22, 23, 24, 28, 30, 31, 32, 35, 35, 37, 38]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 18 * [18, 22, 23, 24, 28, 30, 31, 32, 35, 35, 37, 38]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [22, 23, 24, 28, 30, 31, 32, 35, 35, 37, 38]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 22 * [23, 24, 28, 30, 31, 32, 35, 35, 37, 38]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [24, 28, 30, 31, 32, 35, 35, 37, 38]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [28, 30, 31, 32, 35, 35, 37, 38]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 28 * [30, 31, 32, 35, 35, 37, 38]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 30 * [31, 32, 35, 35, 37, 38]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [32, 35, 35, 37, 38]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [35, 35, 37, 38]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 35 * [35, 37, 38]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [37, 38]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 37 * [38]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * []*)
assert(element = 38);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST34----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 14 q1;;   (* [14]*)
let (element, q1) = delete_min q1;;   (* 14 * []*)
assert(element = 14);;
assert(is_empty q1 = true);;   (*[]*)
let q1 = add 18 q1;;   (* [18]*)
let q1 = add 29 q1;;   (* [18, 29]*)
let q1 = add 38 q1;;   (* [18, 29, 38]*)
let (element, q1) = delete_min q1;;   (* 18 * [29, 38]*)
assert(element = 18);;
let q1 = add 35 q1;;   (* [29, 35, 38]*)
let (element, q1) = delete_min q1;;   (* 29 * [35, 38]*)
assert(element = 29);;
let q1 = add 18 q1;;   (* [18, 35, 38]*)
let q1 = add 26 q1;;   (* [18, 26, 35, 38]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 4 q2;;   (* [4]*)
let q2 = add 37 q2;;   (* [4, 37]*)
let q2 = add 12 q2;;   (* [4, 12, 37]*)
let q2 = add 16 q2;;   (* [4, 12, 16, 37]*)
let q2 = add 24 q2;;   (* [4, 12, 16, 24, 37]*)
let (element, q2) = delete_min q2;;   (* 4 * [12, 16, 24, 37]*)
assert(element = 4);;
let q2 = add 8 q2;;   (* [8, 12, 16, 24, 37]*)
let (element, q2) = delete_min q2;;   (* 8 * [12, 16, 24, 37]*)
assert(element = 8);;
let q2 = add 4 q2;;   (* [4, 12, 16, 24, 37]*)
let q2 = add 36 q2;;   (* [4, 12, 16, 24, 36, 37]*)
let (element, q2) = delete_min q2;;   (* 4 * [12, 16, 24, 36, 37]*)
assert(element = 4);;

(* -------q3------ *)
let q3 = empty;;
let q3 = add 38 q3;;   (* [38]*)
let q3 = add 0 q3;;   (* [0, 38]*)
let q3 = add 4 q3;;   (* [0, 4, 38]*)
let q3 = add 38 q3;;   (* [0, 4, 38, 38]*)
let q3 = add 26 q3;;   (* [0, 4, 26, 38, 38]*)
let q3 = add 30 q3;;   (* [0, 4, 26, 30, 38, 38]*)
let q3 = add 9 q3;;   (* [0, 4, 9, 26, 30, 38, 38]*)
let q3 = add 30 q3;;   (* [0, 4, 9, 26, 30, 30, 38, 38]*)
let q3 = add 0 q3;;   (* [0, 0, 4, 9, 26, 30, 30, 38, 38]*)
let q3 = add 12 q3;;   (* [0, 0, 4, 9, 12, 26, 30, 30, 38, 38]*)
let (element, q3) = delete_min q3;;   (* 0 * [0, 4, 9, 12, 26, 30, 30, 38, 38]*)
assert(element = 0);;

(* -------q4------ *)
let q4 = empty;;
let q4 = add 17 q4;;   (* [17]*)
let (element, q4) = delete_min q4;;   (* 17 * []*)
assert(element = 17);;
let q4 = add 36 q4;;   (* [36]*)
let q4 = add 15 q4;;   (* [15, 36]*)
let q4 = add 26 q4;;   (* [15, 26, 36]*)
let q4 = add 22 q4;;   (* [15, 22, 26, 36]*)
let q4 = add 25 q4;;   (* [15, 22, 25, 26, 36]*)
let q4 = add 3 q4;;   (* [3, 15, 22, 25, 26, 36]*)
let q4 = add 24 q4;;   (* [3, 15, 22, 24, 25, 26, 36]*)
let q4 = add 3 q4;;   (* [3, 3, 15, 22, 24, 25, 26, 36]*)
let q4 = add 9 q4;;   (* [3, 3, 9, 15, 22, 24, 25, 26, 36]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;   (*[0, 3, 3, 4, 9, 9, 12, 12, 15, 16, 18, 22, 24, 24, 25, 26, 26, 26, 30, 30, 35, 36, 36, 37, 38, 38]*)
let (element, q) = delete_min q;;   (* 0 * [3, 3, 4, 9, 9, 12, 12, 15, 16, 18, 22, 24, 24, 25, 26, 26, 26, 30, 30, 35, 36, 36, 37, 38, 38, 38]*)
assert(element = 0);;
let (element, q) = delete_min q;;   (* 3 * [3, 4, 9, 9, 12, 12, 15, 16, 18, 22, 24, 24, 25, 26, 26, 26, 30, 30, 35, 36, 36, 37, 38, 38, 38]*)
assert(element = 3);;
let (element, q) = delete_min q;;   (* 3 * [4, 9, 9, 12, 12, 15, 16, 18, 22, 24, 24, 25, 26, 26, 26, 30, 30, 35, 36, 36, 37, 38, 38, 38]*)
assert(element = 3);;
let (element, q) = delete_min q;;   (* 4 * [9, 9, 12, 12, 15, 16, 18, 22, 24, 24, 25, 26, 26, 26, 30, 30, 35, 36, 36, 37, 38, 38, 38]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 9 * [9, 12, 12, 15, 16, 18, 22, 24, 24, 25, 26, 26, 26, 30, 30, 35, 36, 36, 37, 38, 38, 38]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 9 * [12, 12, 15, 16, 18, 22, 24, 24, 25, 26, 26, 26, 30, 30, 35, 36, 36, 37, 38, 38, 38]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 12 * [12, 15, 16, 18, 22, 24, 24, 25, 26, 26, 26, 30, 30, 35, 36, 36, 37, 38, 38, 38]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 12 * [15, 16, 18, 22, 24, 24, 25, 26, 26, 26, 30, 30, 35, 36, 36, 37, 38, 38, 38]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 15 * [16, 18, 22, 24, 24, 25, 26, 26, 26, 30, 30, 35, 36, 36, 37, 38, 38, 38]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [18, 22, 24, 24, 25, 26, 26, 26, 30, 30, 35, 36, 36, 37, 38, 38, 38]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 18 * [22, 24, 24, 25, 26, 26, 26, 30, 30, 35, 36, 36, 37, 38, 38, 38]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 22 * [24, 24, 25, 26, 26, 26, 30, 30, 35, 36, 36, 37, 38, 38, 38]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 24 * [24, 25, 26, 26, 26, 30, 30, 35, 36, 36, 37, 38, 38, 38]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [25, 26, 26, 26, 30, 30, 35, 36, 36, 37, 38, 38, 38]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [26, 26, 26, 30, 30, 35, 36, 36, 37, 38, 38, 38]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [26, 26, 30, 30, 35, 36, 36, 37, 38, 38, 38]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [26, 30, 30, 35, 36, 36, 37, 38, 38, 38]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [30, 30, 35, 36, 36, 37, 38, 38, 38]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 30 * [30, 35, 36, 36, 37, 38, 38, 38]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [35, 36, 36, 37, 38, 38, 38]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 37, 38, 38, 38]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 38, 38, 38]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 38, 38, 38]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [38, 38, 38]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38, 38]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * []*)
assert(element = 38);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST35----*)

(* -------q1------ *)
let q1 = empty;;
assert(is_empty q1 = true);;   (*[]*)
let q1 = add 9 q1;;   (* [9]*)
let q1 = add 25 q1;;   (* [9, 25]*)
let q1 = add 39 q1;;   (* [9, 25, 39]*)
let q1 = add 22 q1;;   (* [9, 22, 25, 39]*)
let q1 = add 11 q1;;   (* [9, 11, 22, 25, 39]*)
let q1 = add 20 q1;;   (* [9, 11, 20, 22, 25, 39]*)
let q1 = add 38 q1;;   (* [9, 11, 20, 22, 25, 38, 39]*)
let q1 = add 27 q1;;   (* [9, 11, 20, 22, 25, 27, 38, 39]*)
let (element, q1) = delete_min q1;;   (* 9 * [11, 20, 22, 25, 27, 38, 39]*)
assert(element = 9);;
let q1 = add 30 q1;;   (* [11, 20, 22, 25, 27, 30, 38, 39]*)
let (element, q1) = delete_min q1;;   (* 11 * [20, 22, 25, 27, 30, 38, 39]*)
assert(element = 11);;

(* -------q2------ *)
let q2 = empty;;
let q2 = add 1 q2;;   (* [1]*)
let (element, q2) = delete_min q2;;   (* 1 * []*)
assert(element = 1);;
let q2 = add 15 q2;;   (* [15]*)
let (element, q2) = delete_min q2;;   (* 15 * []*)
assert(element = 15);;
let q2 = add 12 q2;;   (* [12]*)
let q2 = add 21 q2;;   (* [12, 21]*)
let q2 = add 4 q2;;   (* [4, 12, 21]*)
let q2 = add 4 q2;;   (* [4, 4, 12, 21]*)
let q2 = add 27 q2;;   (* [4, 4, 12, 21, 27]*)
assert(is_empty q2 = false);;   (*[4, 4, 12, 21, 27]*)
let q2 = add 9 q2;;   (* [4, 4, 9, 12, 21, 27]*)
let q2 = add 12 q2;;   (* [4, 4, 9, 12, 12, 21, 27]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 38 q3;;   (* [38]*)
let q3 = add 21 q3;;   (* [21, 38]*)
let q3 = add 24 q3;;   (* [21, 24, 38]*)
let q3 = add 4 q3;;   (* [4, 21, 24, 38]*)
let q3 = add 14 q3;;   (* [4, 14, 21, 24, 38]*)
let q3 = add 28 q3;;   (* [4, 14, 21, 24, 28, 38]*)
let q3 = add 12 q3;;   (* [4, 12, 14, 21, 24, 28, 38]*)
let q3 = add 39 q3;;   (* [4, 12, 14, 21, 24, 28, 38, 39]*)
let (element, q3) = delete_min q3;;   (* 4 * [12, 14, 21, 24, 28, 38, 39]*)
assert(element = 4);;
let q3 = add 18 q3;;   (* [12, 14, 18, 21, 24, 28, 38, 39]*)
let q3 = add 34 q3;;   (* [12, 14, 18, 21, 24, 28, 34, 38, 39]*)
let (element, q3) = delete_min q3;;   (* 12 * [14, 18, 21, 24, 28, 34, 38, 39]*)
assert(element = 12);;

(* -------q4------ *)
let q4 = empty;;
let q4 = add 20 q4;;   (* [20]*)
let q4 = add 13 q4;;   (* [13, 20]*)
assert(is_empty q4 = false);;   (*[13, 20]*)
let (element, q4) = delete_min q4;;   (* 13 * [20]*)
assert(element = 13);;
let q4 = add 25 q4;;   (* [20, 25]*)
let q4 = add 9 q4;;   (* [9, 20, 25]*)
let q4 = add 28 q4;;   (* [9, 20, 25, 28]*)
let (element, q4) = delete_min q4;;   (* 9 * [20, 25, 28]*)
assert(element = 9);;
let q4 = add 10 q4;;   (* [10, 20, 25, 28]*)
let (element, q4) = delete_min q4;;   (* 10 * [20, 25, 28]*)
assert(element = 10);;
let (element, q4) = delete_min q4;;   (* 20 * [25, 28]*)
assert(element = 20);;
let q4 = add 24 q4;;   (* [24, 25, 28]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;   (*[4, 4, 9, 12, 12, 14, 18, 20, 21, 21, 22, 24, 24, 25, 25, 27, 27, 28, 28, 30, 34, 38, 38, 39]*)
let (element, q) = delete_min q;;   (* 4 * [4, 9, 12, 12, 14, 18, 20, 21, 21, 22, 24, 24, 25, 25, 27, 27, 28, 28, 30, 34, 38, 38, 39, 39]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 4 * [9, 12, 12, 14, 18, 20, 21, 21, 22, 24, 24, 25, 25, 27, 27, 28, 28, 30, 34, 38, 38, 39, 39]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 9 * [12, 12, 14, 18, 20, 21, 21, 22, 24, 24, 25, 25, 27, 27, 28, 28, 30, 34, 38, 38, 39, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 12 * [12, 14, 18, 20, 21, 21, 22, 24, 24, 25, 25, 27, 27, 28, 28, 30, 34, 38, 38, 39, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 12 * [14, 18, 20, 21, 21, 22, 24, 24, 25, 25, 27, 27, 28, 28, 30, 34, 38, 38, 39, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 14 * [18, 20, 21, 21, 22, 24, 24, 25, 25, 27, 27, 28, 28, 30, 34, 38, 38, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 18 * [20, 21, 21, 22, 24, 24, 25, 25, 27, 27, 28, 28, 30, 34, 38, 38, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 20 * [21, 21, 22, 24, 24, 25, 25, 27, 27, 28, 28, 30, 34, 38, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [21, 22, 24, 24, 25, 25, 27, 27, 28, 28, 30, 34, 38, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [22, 24, 24, 25, 25, 27, 27, 28, 28, 30, 34, 38, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [24, 24, 25, 25, 27, 27, 28, 28, 30, 34, 38, 38, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 24 * [24, 25, 25, 27, 27, 28, 28, 30, 34, 38, 38, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [25, 25, 27, 27, 28, 28, 30, 34, 38, 38, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [25, 27, 27, 28, 28, 30, 34, 38, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [27, 27, 28, 28, 30, 34, 38, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 27 * [27, 28, 28, 30, 34, 38, 38, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [28, 28, 30, 34, 38, 38, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [28, 30, 34, 38, 38, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [30, 34, 38, 38, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 30 * [34, 38, 38, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 34 * [38, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 38 * [38, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST36----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 27 q1;;   (* [27]*)
let q1 = add 3 q1;;   (* [3, 27]*)
let (element, q1) = delete_min q1;;   (* 3 * [27]*)
assert(element = 3);;
let q1 = add 17 q1;;   (* [17, 27]*)
let (element, q1) = delete_min q1;;   (* 17 * [27]*)
assert(element = 17);;
let q1 = add 31 q1;;   (* [27, 31]*)
let (element, q1) = delete_min q1;;   (* 27 * [31]*)
assert(element = 27);;
let q1 = add 35 q1;;   (* [31, 35]*)
assert(is_empty q1 = false);;   (*[31, 35]*)
let q1 = add 31 q1;;   (* [31, 31, 35]*)
let (element, q1) = delete_min q1;;   (* 31 * [31, 35]*)
assert(element = 31);;
let (element, q1) = delete_min q1;;   (* 31 * [35]*)
assert(element = 31);;
let (element, q1) = delete_min q1;;   (* 35 * []*)
assert(element = 35);;

(* -------q2------ *)
let q2 = empty;;
let q2 = add 22 q2;;   (* [22]*)
let (element, q2) = delete_min q2;;   (* 22 * []*)
assert(element = 22);;
let q2 = add 26 q2;;   (* [26]*)
let q2 = add 37 q2;;   (* [26, 37]*)
let q2 = add 22 q2;;   (* [22, 26, 37]*)
let q2 = add 1 q2;;   (* [1, 22, 26, 37]*)
let q2 = add 27 q2;;   (* [1, 22, 26, 27, 37]*)
let q2 = add 2 q2;;   (* [1, 2, 22, 26, 27, 37]*)
let q2 = add 25 q2;;   (* [1, 2, 22, 25, 26, 27, 37]*)
assert(is_empty q2 = false);;   (*[1, 2, 22, 25, 26, 27, 37]*)
let q2 = add 26 q2;;   (* [1, 2, 22, 25, 26, 26, 27, 37]*)
let q2 = add 35 q2;;   (* [1, 2, 22, 25, 26, 26, 27, 35, 37]*)
assert(is_empty q2 = false);;   (*[1, 2, 22, 25, 26, 26, 27, 35, 37]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 1 q3;;   (* [1]*)
let (element, q3) = delete_min q3;;   (* 1 * []*)
assert(element = 1);;
let q3 = add 29 q3;;   (* [29]*)
let q3 = add 20 q3;;   (* [20, 29]*)
let q3 = add 29 q3;;   (* [20, 29, 29]*)
let q3 = add 36 q3;;   (* [20, 29, 29, 36]*)
let q3 = add 28 q3;;   (* [20, 28, 29, 29, 36]*)
let q3 = add 39 q3;;   (* [20, 28, 29, 29, 36, 39]*)
let q3 = add 8 q3;;   (* [8, 20, 28, 29, 29, 36, 39]*)
let q3 = add 19 q3;;   (* [8, 19, 20, 28, 29, 29, 36, 39]*)
let (element, q3) = delete_min q3;;   (* 8 * [19, 20, 28, 29, 29, 36, 39]*)
assert(element = 8);;
assert(is_empty q3 = false);;   (*[19, 20, 28, 29, 29, 36, 39]*)
assert(is_empty q3 = false);;   (*[19, 20, 28, 29, 29, 36, 39]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 18 q4;;   (* [18]*)
let q4 = add 33 q4;;   (* [18, 33]*)
let q4 = add 27 q4;;   (* [18, 27, 33]*)
let q4 = add 11 q4;;   (* [11, 18, 27, 33]*)
let q4 = add 36 q4;;   (* [11, 18, 27, 33, 36]*)
let q4 = add 4 q4;;   (* [4, 11, 18, 27, 33, 36]*)
let q4 = add 30 q4;;   (* [4, 11, 18, 27, 30, 33, 36]*)
let (element, q4) = delete_min q4;;   (* 4 * [11, 18, 27, 30, 33, 36]*)
assert(element = 4);;
let (element, q4) = delete_min q4;;   (* 11 * [18, 27, 30, 33, 36]*)
assert(element = 11);;
let q4 = add 14 q4;;   (* [14, 18, 27, 30, 33, 36]*)
let q4 = add 1 q4;;   (* [1, 14, 18, 27, 30, 33, 36]*)
let (element, q4) = delete_min q4;;   (* 1 * [14, 18, 27, 30, 33, 36]*)
assert(element = 1);;
let q4 = add 33 q4;;   (* [14, 18, 27, 30, 33, 33, 36]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;   (*[1, 2, 14, 18, 19, 20, 22, 25, 26, 26, 27, 27, 28, 29, 29, 30, 33, 33, 35, 36, 36, 37]*)
let (element, q) = delete_min q;;   (* 1 * [2, 14, 18, 19, 20, 22, 25, 26, 26, 27, 27, 28, 29, 29, 30, 33, 33, 35, 36, 36, 37, 39]*)
assert(element = 1);;
let (element, q) = delete_min q;;   (* 2 * [14, 18, 19, 20, 22, 25, 26, 26, 27, 27, 28, 29, 29, 30, 33, 33, 35, 36, 36, 37, 39]*)
assert(element = 2);;
let (element, q) = delete_min q;;   (* 14 * [18, 19, 20, 22, 25, 26, 26, 27, 27, 28, 29, 29, 30, 33, 33, 35, 36, 36, 37, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 18 * [19, 20, 22, 25, 26, 26, 27, 27, 28, 29, 29, 30, 33, 33, 35, 36, 36, 37, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [20, 22, 25, 26, 26, 27, 27, 28, 29, 29, 30, 33, 33, 35, 36, 36, 37, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [22, 25, 26, 26, 27, 27, 28, 29, 29, 30, 33, 33, 35, 36, 36, 37, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 22 * [25, 26, 26, 27, 27, 28, 29, 29, 30, 33, 33, 35, 36, 36, 37, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 25 * [26, 26, 27, 27, 28, 29, 29, 30, 33, 33, 35, 36, 36, 37, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [26, 27, 27, 28, 29, 29, 30, 33, 33, 35, 36, 36, 37, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [27, 27, 28, 29, 29, 30, 33, 33, 35, 36, 36, 37, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [27, 28, 29, 29, 30, 33, 33, 35, 36, 36, 37, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [28, 29, 29, 30, 33, 33, 35, 36, 36, 37, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [29, 29, 30, 33, 33, 35, 36, 36, 37, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [29, 30, 33, 33, 35, 36, 36, 37, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [30, 33, 33, 35, 36, 36, 37, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [33, 33, 35, 36, 36, 37, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 33 * [33, 35, 36, 36, 37, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [35, 36, 36, 37, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 37, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST37----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 15 q1;;   (* [15]*)
let (element, q1) = delete_min q1;;   (* 15 * []*)
assert(element = 15);;
let q1 = add 4 q1;;   (* [4]*)
let q1 = add 19 q1;;   (* [4, 19]*)
let q1 = add 27 q1;;   (* [4, 19, 27]*)
let q1 = add 39 q1;;   (* [4, 19, 27, 39]*)
let q1 = add 25 q1;;   (* [4, 19, 25, 27, 39]*)
let q1 = add 17 q1;;   (* [4, 17, 19, 25, 27, 39]*)
let q1 = add 29 q1;;   (* [4, 17, 19, 25, 27, 29, 39]*)
let q1 = add 6 q1;;   (* [4, 6, 17, 19, 25, 27, 29, 39]*)
let q1 = add 23 q1;;   (* [4, 6, 17, 19, 23, 25, 27, 29, 39]*)
let q1 = add 35 q1;;   (* [4, 6, 17, 19, 23, 25, 27, 29, 35, 39]*)
let (element, q1) = delete_min q1;;   (* 4 * [6, 17, 19, 23, 25, 27, 29, 35, 39]*)
assert(element = 4);;
let q1 = add 13 q1;;   (* [6, 13, 17, 19, 23, 25, 27, 29, 35, 39]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 20 q2;;   (* [20]*)
assert(is_empty q2 = false);;   (*[20]*)
let q2 = add 4 q2;;   (* [4, 20]*)
let q2 = add 13 q2;;   (* [4, 13, 20]*)
let q2 = add 36 q2;;   (* [4, 13, 20, 36]*)
let q2 = add 28 q2;;   (* [4, 13, 20, 28, 36]*)
let (element, q2) = delete_min q2;;   (* 4 * [13, 20, 28, 36]*)
assert(element = 4);;
let q2 = add 19 q2;;   (* [13, 19, 20, 28, 36]*)
let (element, q2) = delete_min q2;;   (* 13 * [19, 20, 28, 36]*)
assert(element = 13);;
let q2 = add 4 q2;;   (* [4, 19, 20, 28, 36]*)
let q2 = add 12 q2;;   (* [4, 12, 19, 20, 28, 36]*)
assert(is_empty q2 = false);;   (*[4, 12, 19, 20, 28, 36]*)
let q2 = add 34 q2;;   (* [4, 12, 19, 20, 28, 34, 36]*)
let q2 = add 33 q2;;   (* [4, 12, 19, 20, 28, 33, 34, 36]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 30 q3;;   (* [30]*)
let q3 = add 5 q3;;   (* [5, 30]*)
let (element, q3) = delete_min q3;;   (* 5 * [30]*)
assert(element = 5);;
let q3 = add 25 q3;;   (* [25, 30]*)
let q3 = add 10 q3;;   (* [10, 25, 30]*)
let (element, q3) = delete_min q3;;   (* 10 * [25, 30]*)
assert(element = 10);;
let q3 = add 10 q3;;   (* [10, 25, 30]*)
let q3 = add 16 q3;;   (* [10, 16, 25, 30]*)
let q3 = add 39 q3;;   (* [10, 16, 25, 30, 39]*)
let q3 = add 9 q3;;   (* [9, 10, 16, 25, 30, 39]*)
let q3 = add 23 q3;;   (* [9, 10, 16, 23, 25, 30, 39]*)
let (element, q3) = delete_min q3;;   (* 9 * [10, 16, 23, 25, 30, 39]*)
assert(element = 9);;
let q3 = add 30 q3;;   (* [10, 16, 23, 25, 30, 30, 39]*)
let q3 = add 3 q3;;   (* [3, 10, 16, 23, 25, 30, 30, 39]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 3 q4;;   (* [3]*)
let q4 = add 17 q4;;   (* [3, 17]*)
let q4 = add 36 q4;;   (* [3, 17, 36]*)
let q4 = add 8 q4;;   (* [3, 8, 17, 36]*)
assert(is_empty q4 = false);;   (*[3, 8, 17, 36]*)
let q4 = add 34 q4;;   (* [3, 8, 17, 34, 36]*)
assert(is_empty q4 = false);;   (*[3, 8, 17, 34, 36]*)
let q4 = add 2 q4;;   (* [2, 3, 8, 17, 34, 36]*)
let q4 = add 13 q4;;   (* [2, 3, 8, 13, 17, 34, 36]*)
assert(is_empty q4 = false);;   (*[2, 3, 8, 13, 17, 34, 36]*)
assert(is_empty q4 = false);;   (*[2, 3, 8, 13, 17, 34, 36]*)
let (element, q4) = delete_min q4;;   (* 2 * [3, 8, 13, 17, 34, 36]*)
assert(element = 2);;
let q4 = add 8 q4;;   (* [3, 8, 8, 13, 17, 34, 36]*)
let (element, q4) = delete_min q4;;   (* 3 * [8, 8, 13, 17, 34, 36]*)
assert(element = 3);;

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;   (*[3, 4, 6, 8, 8, 10, 12, 13, 13, 16, 17, 17, 19, 19, 20, 23, 23, 25, 25, 27, 28, 29, 30, 30, 33, 34, 34, 35, 36, 36, 39]*)
let (element, q) = delete_min q;;   (* 3 * [4, 6, 8, 8, 10, 12, 13, 13, 16, 17, 17, 19, 19, 20, 23, 23, 25, 25, 27, 28, 29, 30, 30, 33, 34, 34, 35, 36, 36, 39, 39]*)
assert(element = 3);;
let (element, q) = delete_min q;;   (* 4 * [6, 8, 8, 10, 12, 13, 13, 16, 17, 17, 19, 19, 20, 23, 23, 25, 25, 27, 28, 29, 30, 30, 33, 34, 34, 35, 36, 36, 39, 39]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 6 * [8, 8, 10, 12, 13, 13, 16, 17, 17, 19, 19, 20, 23, 23, 25, 25, 27, 28, 29, 30, 30, 33, 34, 34, 35, 36, 36, 39, 39]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 8 * [8, 10, 12, 13, 13, 16, 17, 17, 19, 19, 20, 23, 23, 25, 25, 27, 28, 29, 30, 30, 33, 34, 34, 35, 36, 36, 39, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 8 * [10, 12, 13, 13, 16, 17, 17, 19, 19, 20, 23, 23, 25, 25, 27, 28, 29, 30, 30, 33, 34, 34, 35, 36, 36, 39, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 10 * [12, 13, 13, 16, 17, 17, 19, 19, 20, 23, 23, 25, 25, 27, 28, 29, 30, 30, 33, 34, 34, 35, 36, 36, 39, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 12 * [13, 13, 16, 17, 17, 19, 19, 20, 23, 23, 25, 25, 27, 28, 29, 30, 30, 33, 34, 34, 35, 36, 36, 39, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 13 * [13, 16, 17, 17, 19, 19, 20, 23, 23, 25, 25, 27, 28, 29, 30, 30, 33, 34, 34, 35, 36, 36, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 13 * [16, 17, 17, 19, 19, 20, 23, 23, 25, 25, 27, 28, 29, 30, 30, 33, 34, 34, 35, 36, 36, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 16 * [17, 17, 19, 19, 20, 23, 23, 25, 25, 27, 28, 29, 30, 30, 33, 34, 34, 35, 36, 36, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 17 * [17, 19, 19, 20, 23, 23, 25, 25, 27, 28, 29, 30, 30, 33, 34, 34, 35, 36, 36, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [19, 19, 20, 23, 23, 25, 25, 27, 28, 29, 30, 30, 33, 34, 34, 35, 36, 36, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 19 * [19, 20, 23, 23, 25, 25, 27, 28, 29, 30, 30, 33, 34, 34, 35, 36, 36, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [20, 23, 23, 25, 25, 27, 28, 29, 30, 30, 33, 34, 34, 35, 36, 36, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [23, 23, 25, 25, 27, 28, 29, 30, 30, 33, 34, 34, 35, 36, 36, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 23 * [23, 25, 25, 27, 28, 29, 30, 30, 33, 34, 34, 35, 36, 36, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [25, 25, 27, 28, 29, 30, 30, 33, 34, 34, 35, 36, 36, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 25 * [25, 27, 28, 29, 30, 30, 33, 34, 34, 35, 36, 36, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [27, 28, 29, 30, 30, 33, 34, 34, 35, 36, 36, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 27 * [28, 29, 30, 30, 33, 34, 34, 35, 36, 36, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [29, 30, 30, 33, 34, 34, 35, 36, 36, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [30, 30, 33, 34, 34, 35, 36, 36, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [30, 33, 34, 34, 35, 36, 36, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [33, 34, 34, 35, 36, 36, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 33 * [34, 34, 35, 36, 36, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 36, 36, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 36, 36, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST38----*)

(* -------q1------ *)
let q1 = empty;;
assert(is_empty q1 = true);;   (*[]*)
let q1 = add 21 q1;;   (* [21]*)
let q1 = add 4 q1;;   (* [4, 21]*)
let q1 = add 9 q1;;   (* [4, 9, 21]*)
let (element, q1) = delete_min q1;;   (* 4 * [9, 21]*)
assert(element = 4);;
let q1 = add 38 q1;;   (* [9, 21, 38]*)
let q1 = add 25 q1;;   (* [9, 21, 25, 38]*)
let (element, q1) = delete_min q1;;   (* 9 * [21, 25, 38]*)
assert(element = 9);;
let (element, q1) = delete_min q1;;   (* 21 * [25, 38]*)
assert(element = 21);;
let q1 = add 13 q1;;   (* [13, 25, 38]*)
let q1 = add 26 q1;;   (* [13, 25, 26, 38]*)
let q1 = add 14 q1;;   (* [13, 14, 25, 26, 38]*)
let q1 = add 0 q1;;   (* [0, 13, 14, 25, 26, 38]*)
let q1 = add 29 q1;;   (* [0, 13, 14, 25, 26, 29, 38]*)
let q1 = add 24 q1;;   (* [0, 13, 14, 24, 25, 26, 29, 38]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 37 q2;;   (* [37]*)
let q2 = add 7 q2;;   (* [7, 37]*)
let q2 = add 25 q2;;   (* [7, 25, 37]*)
let q2 = add 17 q2;;   (* [7, 17, 25, 37]*)
assert(is_empty q2 = false);;   (*[7, 17, 25, 37]*)
let q2 = add 36 q2;;   (* [7, 17, 25, 36, 37]*)
let q2 = add 15 q2;;   (* [7, 15, 17, 25, 36, 37]*)
let q2 = add 31 q2;;   (* [7, 15, 17, 25, 31, 36, 37]*)
let q2 = add 24 q2;;   (* [7, 15, 17, 24, 25, 31, 36, 37]*)
let (element, q2) = delete_min q2;;   (* 7 * [15, 17, 24, 25, 31, 36, 37]*)
assert(element = 7);;
let q2 = add 31 q2;;   (* [15, 17, 24, 25, 31, 31, 36, 37]*)
assert(is_empty q2 = false);;   (*[15, 17, 24, 25, 31, 31, 36, 37]*)
let (element, q2) = delete_min q2;;   (* 15 * [17, 24, 25, 31, 31, 36, 37]*)
assert(element = 15);;
assert(is_empty q2 = false);;   (*[17, 24, 25, 31, 31, 36, 37]*)
let q2 = add 39 q2;;   (* [17, 24, 25, 31, 31, 36, 37, 39]*)

(* -------q3------ *)
let q3 = empty;;
assert(is_empty q3 = true);;   (*[]*)
let q3 = add 11 q3;;   (* [11]*)
let q3 = add 25 q3;;   (* [11, 25]*)
let (element, q3) = delete_min q3;;   (* 11 * [25]*)
assert(element = 11);;
let q3 = add 38 q3;;   (* [25, 38]*)
let q3 = add 11 q3;;   (* [11, 25, 38]*)
let q3 = add 1 q3;;   (* [1, 11, 25, 38]*)
let q3 = add 19 q3;;   (* [1, 11, 19, 25, 38]*)
let q3 = add 30 q3;;   (* [1, 11, 19, 25, 30, 38]*)
let (element, q3) = delete_min q3;;   (* 1 * [11, 19, 25, 30, 38]*)
assert(element = 1);;
let q3 = add 4 q3;;   (* [4, 11, 19, 25, 30, 38]*)
assert(is_empty q3 = false);;   (*[4, 11, 19, 25, 30, 38]*)
let (element, q3) = delete_min q3;;   (* 4 * [11, 19, 25, 30, 38]*)
assert(element = 4);;
let q3 = add 25 q3;;   (* [11, 19, 25, 25, 30, 38]*)
let (element, q3) = delete_min q3;;   (* 11 * [19, 25, 25, 30, 38]*)
assert(element = 11);;

(* -------q4------ *)
let q4 = empty;;
let q4 = add 12 q4;;   (* [12]*)
let q4 = add 28 q4;;   (* [12, 28]*)
let q4 = add 21 q4;;   (* [12, 21, 28]*)
let q4 = add 32 q4;;   (* [12, 21, 28, 32]*)
let (element, q4) = delete_min q4;;   (* 12 * [21, 28, 32]*)
assert(element = 12);;
let q4 = add 39 q4;;   (* [21, 28, 32, 39]*)
let q4 = add 10 q4;;   (* [10, 21, 28, 32, 39]*)
let q4 = add 13 q4;;   (* [10, 13, 21, 28, 32, 39]*)
let q4 = add 0 q4;;   (* [0, 10, 13, 21, 28, 32, 39]*)
let q4 = add 27 q4;;   (* [0, 10, 13, 21, 27, 28, 32, 39]*)
let (element, q4) = delete_min q4;;   (* 0 * [10, 13, 21, 27, 28, 32, 39]*)
assert(element = 0);;
let (element, q4) = delete_min q4;;   (* 10 * [13, 21, 27, 28, 32, 39]*)
assert(element = 10);;
let q4 = add 5 q4;;   (* [5, 13, 21, 27, 28, 32, 39]*)
let q4 = add 1 q4;;   (* [1, 5, 13, 21, 27, 28, 32, 39]*)
let (element, q4) = delete_min q4;;   (* 1 * [5, 13, 21, 27, 28, 32, 39]*)
assert(element = 1);;

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;   (*[0, 5, 13, 13, 14, 17, 19, 21, 24, 24, 25, 25, 25, 25, 26, 27, 28, 29, 30, 31, 31, 32, 36, 37, 38, 38, 39]*)
let (element, q) = delete_min q;;   (* 0 * [5, 13, 13, 14, 17, 19, 21, 24, 24, 25, 25, 25, 25, 26, 27, 28, 29, 30, 31, 31, 32, 36, 37, 38, 38, 39, 39]*)
assert(element = 0);;
let (element, q) = delete_min q;;   (* 5 * [13, 13, 14, 17, 19, 21, 24, 24, 25, 25, 25, 25, 26, 27, 28, 29, 30, 31, 31, 32, 36, 37, 38, 38, 39, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 13 * [13, 14, 17, 19, 21, 24, 24, 25, 25, 25, 25, 26, 27, 28, 29, 30, 31, 31, 32, 36, 37, 38, 38, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 13 * [14, 17, 19, 21, 24, 24, 25, 25, 25, 25, 26, 27, 28, 29, 30, 31, 31, 32, 36, 37, 38, 38, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 14 * [17, 19, 21, 24, 24, 25, 25, 25, 25, 26, 27, 28, 29, 30, 31, 31, 32, 36, 37, 38, 38, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 17 * [19, 21, 24, 24, 25, 25, 25, 25, 26, 27, 28, 29, 30, 31, 31, 32, 36, 37, 38, 38, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 19 * [21, 24, 24, 25, 25, 25, 25, 26, 27, 28, 29, 30, 31, 31, 32, 36, 37, 38, 38, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 21 * [24, 24, 25, 25, 25, 25, 26, 27, 28, 29, 30, 31, 31, 32, 36, 37, 38, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 24 * [24, 25, 25, 25, 25, 26, 27, 28, 29, 30, 31, 31, 32, 36, 37, 38, 38, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [25, 25, 25, 25, 26, 27, 28, 29, 30, 31, 31, 32, 36, 37, 38, 38, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [25, 25, 25, 26, 27, 28, 29, 30, 31, 31, 32, 36, 37, 38, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [25, 25, 26, 27, 28, 29, 30, 31, 31, 32, 36, 37, 38, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [25, 26, 27, 28, 29, 30, 31, 31, 32, 36, 37, 38, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [26, 27, 28, 29, 30, 31, 31, 32, 36, 37, 38, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [27, 28, 29, 30, 31, 31, 32, 36, 37, 38, 38, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [28, 29, 30, 31, 31, 32, 36, 37, 38, 38, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [29, 30, 31, 31, 32, 36, 37, 38, 38, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [30, 31, 31, 32, 36, 37, 38, 38, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 32, 36, 37, 38, 38, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 32, 36, 37, 38, 38, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [32, 36, 37, 38, 38, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [36, 37, 38, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 36 * [37, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [38, 38, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST39----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 27 q1;;   (* [27]*)
let q1 = add 0 q1;;   (* [0, 27]*)
assert(is_empty q1 = false);;   (*[0, 27]*)
let (element, q1) = delete_min q1;;   (* 0 * [27]*)
assert(element = 0);;
let q1 = add 31 q1;;   (* [27, 31]*)
let (element, q1) = delete_min q1;;   (* 27 * [31]*)
assert(element = 27);;
let q1 = add 5 q1;;   (* [5, 31]*)
let (element, q1) = delete_min q1;;   (* 5 * [31]*)
assert(element = 5);;
let q1 = add 23 q1;;   (* [23, 31]*)
let q1 = add 15 q1;;   (* [15, 23, 31]*)
let q1 = add 15 q1;;   (* [15, 15, 23, 31]*)
let q1 = add 16 q1;;   (* [15, 15, 16, 23, 31]*)
let q1 = add 27 q1;;   (* [15, 15, 16, 23, 27, 31]*)
let q1 = add 2 q1;;   (* [2, 15, 15, 16, 23, 27, 31]*)
let (element, q1) = delete_min q1;;   (* 2 * [15, 15, 16, 23, 27, 31]*)
assert(element = 2);;
let q1 = add 6 q1;;   (* [6, 15, 15, 16, 23, 27, 31]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 11 q2;;   (* [11]*)
let q2 = add 21 q2;;   (* [11, 21]*)
let (element, q2) = delete_min q2;;   (* 11 * [21]*)
assert(element = 11);;
let q2 = add 0 q2;;   (* [0, 21]*)
let (element, q2) = delete_min q2;;   (* 0 * [21]*)
assert(element = 0);;
let (element, q2) = delete_min q2;;   (* 21 * []*)
assert(element = 21);;
let q2 = add 18 q2;;   (* [18]*)
let q2 = add 38 q2;;   (* [18, 38]*)
let q2 = add 6 q2;;   (* [6, 18, 38]*)
let q2 = add 13 q2;;   (* [6, 13, 18, 38]*)
let q2 = add 22 q2;;   (* [6, 13, 18, 22, 38]*)
let q2 = add 23 q2;;   (* [6, 13, 18, 22, 23, 38]*)
let q2 = add 5 q2;;   (* [5, 6, 13, 18, 22, 23, 38]*)
let q2 = add 25 q2;;   (* [5, 6, 13, 18, 22, 23, 25, 38]*)
let q2 = add 6 q2;;   (* [5, 6, 6, 13, 18, 22, 23, 25, 38]*)
let q2 = add 8 q2;;   (* [5, 6, 6, 8, 13, 18, 22, 23, 25, 38]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 39 q3;;   (* [39]*)
assert(is_empty q3 = false);;   (*[39]*)
let (element, q3) = delete_min q3;;   (* 39 * []*)
assert(element = 39);;
let q3 = add 34 q3;;   (* [34]*)
let q3 = add 13 q3;;   (* [13, 34]*)
let q3 = add 28 q3;;   (* [13, 28, 34]*)
let q3 = add 10 q3;;   (* [10, 13, 28, 34]*)
let (element, q3) = delete_min q3;;   (* 10 * [13, 28, 34]*)
assert(element = 10);;
let q3 = add 24 q3;;   (* [13, 24, 28, 34]*)
let q3 = add 6 q3;;   (* [6, 13, 24, 28, 34]*)
let q3 = add 2 q3;;   (* [2, 6, 13, 24, 28, 34]*)
let (element, q3) = delete_min q3;;   (* 2 * [6, 13, 24, 28, 34]*)
assert(element = 2);;
let q3 = add 7 q3;;   (* [6, 7, 13, 24, 28, 34]*)
let q3 = add 0 q3;;   (* [0, 6, 7, 13, 24, 28, 34]*)
let q3 = add 17 q3;;   (* [0, 6, 7, 13, 17, 24, 28, 34]*)
let (element, q3) = delete_min q3;;   (* 0 * [6, 7, 13, 17, 24, 28, 34]*)
assert(element = 0);;

(* -------q4------ *)
let q4 = empty;;
let q4 = add 15 q4;;   (* [15]*)
let q4 = add 10 q4;;   (* [10, 15]*)
assert(is_empty q4 = false);;   (*[10, 15]*)
assert(is_empty q4 = false);;   (*[10, 15]*)
let q4 = add 10 q4;;   (* [10, 10, 15]*)
let (element, q4) = delete_min q4;;   (* 10 * [10, 15]*)
assert(element = 10);;
let q4 = add 21 q4;;   (* [10, 15, 21]*)
let q4 = add 27 q4;;   (* [10, 15, 21, 27]*)
let q4 = add 27 q4;;   (* [10, 15, 21, 27, 27]*)
let (element, q4) = delete_min q4;;   (* 10 * [15, 21, 27, 27]*)
assert(element = 10);;
let (element, q4) = delete_min q4;;   (* 15 * [21, 27, 27]*)
assert(element = 15);;
let q4 = add 6 q4;;   (* [6, 21, 27, 27]*)
assert(is_empty q4 = false);;   (*[6, 21, 27, 27]*)
let q4 = add 31 q4;;   (* [6, 21, 27, 27, 31]*)
let q4 = add 32 q4;;   (* [6, 21, 27, 27, 31, 32]*)
let q4 = add 21 q4;;   (* [6, 21, 21, 27, 27, 31, 32]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;   (*[5, 6, 6, 6, 6, 6, 7, 8, 13, 13, 15, 15, 16, 17, 18, 21, 21, 22, 23, 23, 24, 25, 27, 27, 27, 28, 31, 31, 32, 34]*)
let (element, q) = delete_min q;;   (* 5 * [6, 6, 6, 6, 6, 7, 8, 13, 13, 15, 15, 16, 17, 18, 21, 21, 22, 23, 23, 24, 25, 27, 27, 27, 28, 31, 31, 32, 34, 38]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 6 * [6, 6, 6, 6, 7, 8, 13, 13, 15, 15, 16, 17, 18, 21, 21, 22, 23, 23, 24, 25, 27, 27, 27, 28, 31, 31, 32, 34, 38]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 6 * [6, 6, 6, 7, 8, 13, 13, 15, 15, 16, 17, 18, 21, 21, 22, 23, 23, 24, 25, 27, 27, 27, 28, 31, 31, 32, 34, 38]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 6 * [6, 6, 7, 8, 13, 13, 15, 15, 16, 17, 18, 21, 21, 22, 23, 23, 24, 25, 27, 27, 27, 28, 31, 31, 32, 34, 38]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 6 * [6, 7, 8, 13, 13, 15, 15, 16, 17, 18, 21, 21, 22, 23, 23, 24, 25, 27, 27, 27, 28, 31, 31, 32, 34, 38]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 6 * [7, 8, 13, 13, 15, 15, 16, 17, 18, 21, 21, 22, 23, 23, 24, 25, 27, 27, 27, 28, 31, 31, 32, 34, 38]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 7 * [8, 13, 13, 15, 15, 16, 17, 18, 21, 21, 22, 23, 23, 24, 25, 27, 27, 27, 28, 31, 31, 32, 34, 38]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 8 * [13, 13, 15, 15, 16, 17, 18, 21, 21, 22, 23, 23, 24, 25, 27, 27, 27, 28, 31, 31, 32, 34, 38]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 13 * [13, 15, 15, 16, 17, 18, 21, 21, 22, 23, 23, 24, 25, 27, 27, 27, 28, 31, 31, 32, 34, 38]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 13 * [15, 15, 16, 17, 18, 21, 21, 22, 23, 23, 24, 25, 27, 27, 27, 28, 31, 31, 32, 34, 38]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 15 * [15, 16, 17, 18, 21, 21, 22, 23, 23, 24, 25, 27, 27, 27, 28, 31, 31, 32, 34, 38]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [16, 17, 18, 21, 21, 22, 23, 23, 24, 25, 27, 27, 27, 28, 31, 31, 32, 34, 38]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [17, 18, 21, 21, 22, 23, 23, 24, 25, 27, 27, 27, 28, 31, 31, 32, 34, 38]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 17 * [18, 21, 21, 22, 23, 23, 24, 25, 27, 27, 27, 28, 31, 31, 32, 34, 38]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [21, 21, 22, 23, 23, 24, 25, 27, 27, 27, 28, 31, 31, 32, 34, 38]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 21 * [21, 22, 23, 23, 24, 25, 27, 27, 27, 28, 31, 31, 32, 34, 38]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [22, 23, 23, 24, 25, 27, 27, 27, 28, 31, 31, 32, 34, 38]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [23, 23, 24, 25, 27, 27, 27, 28, 31, 31, 32, 34, 38]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [23, 24, 25, 27, 27, 27, 28, 31, 31, 32, 34, 38]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [24, 25, 27, 27, 27, 28, 31, 31, 32, 34, 38]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [25, 27, 27, 27, 28, 31, 31, 32, 34, 38]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [27, 27, 27, 28, 31, 31, 32, 34, 38]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 28, 31, 31, 32, 34, 38]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 28, 31, 31, 32, 34, 38]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [28, 31, 31, 32, 34, 38]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [31, 31, 32, 34, 38]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 31 * [31, 32, 34, 38]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [32, 34, 38]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [34, 38]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 34 * [38]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 38 * []*)
assert(element = 38);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST40----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 37 q1;;   (* [37]*)
let (element, q1) = delete_min q1;;   (* 37 * []*)
assert(element = 37);;
let q1 = add 8 q1;;   (* [8]*)
assert(is_empty q1 = false);;   (*[8]*)
let q1 = add 10 q1;;   (* [8, 10]*)
let q1 = add 13 q1;;   (* [8, 10, 13]*)
let q1 = add 25 q1;;   (* [8, 10, 13, 25]*)
let q1 = add 23 q1;;   (* [8, 10, 13, 23, 25]*)
let q1 = add 13 q1;;   (* [8, 10, 13, 13, 23, 25]*)
let q1 = add 6 q1;;   (* [6, 8, 10, 13, 13, 23, 25]*)
let (element, q1) = delete_min q1;;   (* 6 * [8, 10, 13, 13, 23, 25]*)
assert(element = 6);;
let q1 = add 2 q1;;   (* [2, 8, 10, 13, 13, 23, 25]*)
assert(is_empty q1 = false);;   (*[2, 8, 10, 13, 13, 23, 25]*)
let q1 = add 11 q1;;   (* [2, 8, 10, 11, 13, 13, 23, 25]*)
let q1 = add 0 q1;;   (* [0, 2, 8, 10, 11, 13, 13, 23, 25]*)
let (element, q1) = delete_min q1;;   (* 0 * [2, 8, 10, 11, 13, 13, 23, 25]*)
assert(element = 0);;
let q1 = add 18 q1;;   (* [2, 8, 10, 11, 13, 13, 18, 23, 25]*)

(* -------q2------ *)
let q2 = empty;;
assert(is_empty q2 = true);;   (*[]*)
let q2 = add 7 q2;;   (* [7]*)
let q2 = add 19 q2;;   (* [7, 19]*)
let q2 = add 18 q2;;   (* [7, 18, 19]*)
let q2 = add 34 q2;;   (* [7, 18, 19, 34]*)
let (element, q2) = delete_min q2;;   (* 7 * [18, 19, 34]*)
assert(element = 7);;
let q2 = add 30 q2;;   (* [18, 19, 30, 34]*)
let q2 = add 22 q2;;   (* [18, 19, 22, 30, 34]*)
let q2 = add 11 q2;;   (* [11, 18, 19, 22, 30, 34]*)
let q2 = add 34 q2;;   (* [11, 18, 19, 22, 30, 34, 34]*)
let q2 = add 20 q2;;   (* [11, 18, 19, 20, 22, 30, 34, 34]*)
let (element, q2) = delete_min q2;;   (* 11 * [18, 19, 20, 22, 30, 34, 34]*)
assert(element = 11);;
let q2 = add 7 q2;;   (* [7, 18, 19, 20, 22, 30, 34, 34]*)
let (element, q2) = delete_min q2;;   (* 7 * [18, 19, 20, 22, 30, 34, 34]*)
assert(element = 7);;
let (element, q2) = delete_min q2;;   (* 18 * [19, 20, 22, 30, 34, 34]*)
assert(element = 18);;
let (element, q2) = delete_min q2;;   (* 19 * [20, 22, 30, 34, 34]*)
assert(element = 19);;
let q2 = add 6 q2;;   (* [6, 20, 22, 30, 34, 34]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 12 q3;;   (* [12]*)
let q3 = add 10 q3;;   (* [10, 12]*)
let q3 = add 3 q3;;   (* [3, 10, 12]*)
assert(is_empty q3 = false);;   (*[3, 10, 12]*)
assert(is_empty q3 = false);;   (*[3, 10, 12]*)
let (element, q3) = delete_min q3;;   (* 3 * [10, 12]*)
assert(element = 3);;
let q3 = add 38 q3;;   (* [10, 12, 38]*)
let (element, q3) = delete_min q3;;   (* 10 * [12, 38]*)
assert(element = 10);;
let (element, q3) = delete_min q3;;   (* 12 * [38]*)
assert(element = 12);;
let q3 = add 38 q3;;   (* [38, 38]*)
let (element, q3) = delete_min q3;;   (* 38 * [38]*)
assert(element = 38);;
let q3 = add 27 q3;;   (* [27, 38]*)
assert(is_empty q3 = false);;   (*[27, 38]*)
let q3 = add 4 q3;;   (* [4, 27, 38]*)
assert(is_empty q3 = false);;   (*[4, 27, 38]*)
let q3 = add 6 q3;;   (* [4, 6, 27, 38]*)
let q3 = add 32 q3;;   (* [4, 6, 27, 32, 38]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 9 q4;;   (* [9]*)
let (element, q4) = delete_min q4;;   (* 9 * []*)
assert(element = 9);;
let q4 = add 7 q4;;   (* [7]*)
let (element, q4) = delete_min q4;;   (* 7 * []*)
assert(element = 7);;
let q4 = add 28 q4;;   (* [28]*)
let q4 = add 30 q4;;   (* [28, 30]*)
let q4 = add 29 q4;;   (* [28, 29, 30]*)
let (element, q4) = delete_min q4;;   (* 28 * [29, 30]*)
assert(element = 28);;
let (element, q4) = delete_min q4;;   (* 29 * [30]*)
assert(element = 29);;
let q4 = add 4 q4;;   (* [4, 30]*)
let (element, q4) = delete_min q4;;   (* 4 * [30]*)
assert(element = 4);;
let q4 = add 31 q4;;   (* [30, 31]*)
let (element, q4) = delete_min q4;;   (* 30 * [31]*)
assert(element = 30);;
let q4 = add 31 q4;;   (* [31, 31]*)
let q4 = add 18 q4;;   (* [18, 31, 31]*)
let q4 = add 0 q4;;   (* [0, 18, 31, 31]*)
let (element, q4) = delete_min q4;;   (* 0 * [18, 31, 31]*)
assert(element = 0);;

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;   (*[2, 4, 6, 6, 8, 10, 11, 13, 13, 18, 18, 20, 22, 23, 25, 27, 30, 31, 31, 32, 34, 34]*)
let (element, q) = delete_min q;;   (* 2 * [4, 6, 6, 8, 10, 11, 13, 13, 18, 18, 20, 22, 23, 25, 27, 30, 31, 31, 32, 34, 34, 38]*)
assert(element = 2);;
let (element, q) = delete_min q;;   (* 4 * [6, 6, 8, 10, 11, 13, 13, 18, 18, 20, 22, 23, 25, 27, 30, 31, 31, 32, 34, 34, 38]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 6 * [6, 8, 10, 11, 13, 13, 18, 18, 20, 22, 23, 25, 27, 30, 31, 31, 32, 34, 34, 38]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 6 * [8, 10, 11, 13, 13, 18, 18, 20, 22, 23, 25, 27, 30, 31, 31, 32, 34, 34, 38]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 8 * [10, 11, 13, 13, 18, 18, 20, 22, 23, 25, 27, 30, 31, 31, 32, 34, 34, 38]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 10 * [11, 13, 13, 18, 18, 20, 22, 23, 25, 27, 30, 31, 31, 32, 34, 34, 38]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 11 * [13, 13, 18, 18, 20, 22, 23, 25, 27, 30, 31, 31, 32, 34, 34, 38]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 13 * [13, 18, 18, 20, 22, 23, 25, 27, 30, 31, 31, 32, 34, 34, 38]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 13 * [18, 18, 20, 22, 23, 25, 27, 30, 31, 31, 32, 34, 34, 38]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 18 * [18, 20, 22, 23, 25, 27, 30, 31, 31, 32, 34, 34, 38]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [20, 22, 23, 25, 27, 30, 31, 31, 32, 34, 34, 38]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 20 * [22, 23, 25, 27, 30, 31, 31, 32, 34, 34, 38]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 22 * [23, 25, 27, 30, 31, 31, 32, 34, 34, 38]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [25, 27, 30, 31, 31, 32, 34, 34, 38]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 25 * [27, 30, 31, 31, 32, 34, 34, 38]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 27 * [30, 31, 31, 32, 34, 34, 38]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 32, 34, 34, 38]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 32, 34, 34, 38]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [32, 34, 34, 38]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [34, 34, 38]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 34 * [34, 38]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [38]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 38 * []*)
assert(element = 38);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST41----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 36 q1;;   (* [36]*)
let q1 = add 11 q1;;   (* [11, 36]*)
let q1 = add 28 q1;;   (* [11, 28, 36]*)
let q1 = add 15 q1;;   (* [11, 15, 28, 36]*)
let (element, q1) = delete_min q1;;   (* 11 * [15, 28, 36]*)
assert(element = 11);;
let q1 = add 31 q1;;   (* [15, 28, 31, 36]*)
let (element, q1) = delete_min q1;;   (* 15 * [28, 31, 36]*)
assert(element = 15);;
let q1 = add 2 q1;;   (* [2, 28, 31, 36]*)
let q1 = add 4 q1;;   (* [2, 4, 28, 31, 36]*)
assert(is_empty q1 = false);;   (*[2, 4, 28, 31, 36]*)
let q1 = add 23 q1;;   (* [2, 4, 23, 28, 31, 36]*)
let q1 = add 17 q1;;   (* [2, 4, 17, 23, 28, 31, 36]*)
let (element, q1) = delete_min q1;;   (* 2 * [4, 17, 23, 28, 31, 36]*)
assert(element = 2);;
let (element, q1) = delete_min q1;;   (* 4 * [17, 23, 28, 31, 36]*)
assert(element = 4);;
let (element, q1) = delete_min q1;;   (* 17 * [23, 28, 31, 36]*)
assert(element = 17);;
let (element, q1) = delete_min q1;;   (* 23 * [28, 31, 36]*)
assert(element = 23);;
let q1 = add 12 q1;;   (* [12, 28, 31, 36]*)
let (element, q1) = delete_min q1;;   (* 12 * [28, 31, 36]*)
assert(element = 12);;

(* -------q2------ *)
let q2 = empty;;
let q2 = add 1 q2;;   (* [1]*)
let q2 = add 38 q2;;   (* [1, 38]*)
let (element, q2) = delete_min q2;;   (* 1 * [38]*)
assert(element = 1);;
let (element, q2) = delete_min q2;;   (* 38 * []*)
assert(element = 38);;
let q2 = add 13 q2;;   (* [13]*)
let q2 = add 0 q2;;   (* [0, 13]*)
let q2 = add 29 q2;;   (* [0, 13, 29]*)
assert(is_empty q2 = false);;   (*[0, 13, 29]*)
let q2 = add 0 q2;;   (* [0, 0, 13, 29]*)
let q2 = add 22 q2;;   (* [0, 0, 13, 22, 29]*)
let q2 = add 39 q2;;   (* [0, 0, 13, 22, 29, 39]*)
let q2 = add 19 q2;;   (* [0, 0, 13, 19, 22, 29, 39]*)
assert(is_empty q2 = false);;   (*[0, 0, 13, 19, 22, 29, 39]*)
let q2 = add 14 q2;;   (* [0, 0, 13, 14, 19, 22, 29, 39]*)
let (element, q2) = delete_min q2;;   (* 0 * [0, 13, 14, 19, 22, 29, 39]*)
assert(element = 0);;
let q2 = add 6 q2;;   (* [0, 6, 13, 14, 19, 22, 29, 39]*)
let q2 = add 2 q2;;   (* [0, 2, 6, 13, 14, 19, 22, 29, 39]*)
let q2 = add 10 q2;;   (* [0, 2, 6, 10, 13, 14, 19, 22, 29, 39]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 13 q3;;   (* [13]*)
let q3 = add 21 q3;;   (* [13, 21]*)
let q3 = add 34 q3;;   (* [13, 21, 34]*)
let q3 = add 18 q3;;   (* [13, 18, 21, 34]*)
let q3 = add 33 q3;;   (* [13, 18, 21, 33, 34]*)
let q3 = add 30 q3;;   (* [13, 18, 21, 30, 33, 34]*)
let q3 = add 18 q3;;   (* [13, 18, 18, 21, 30, 33, 34]*)
let q3 = add 36 q3;;   (* [13, 18, 18, 21, 30, 33, 34, 36]*)
assert(is_empty q3 = false);;   (*[13, 18, 18, 21, 30, 33, 34, 36]*)
let q3 = add 12 q3;;   (* [12, 13, 18, 18, 21, 30, 33, 34, 36]*)
let q3 = add 6 q3;;   (* [6, 12, 13, 18, 18, 21, 30, 33, 34, 36]*)
let (element, q3) = delete_min q3;;   (* 6 * [12, 13, 18, 18, 21, 30, 33, 34, 36]*)
assert(element = 6);;
assert(is_empty q3 = false);;   (*[12, 13, 18, 18, 21, 30, 33, 34, 36]*)
let q3 = add 18 q3;;   (* [12, 13, 18, 18, 18, 21, 30, 33, 34, 36]*)
let q3 = add 1 q3;;   (* [1, 12, 13, 18, 18, 18, 21, 30, 33, 34, 36]*)
let q3 = add 0 q3;;   (* [0, 1, 12, 13, 18, 18, 18, 21, 30, 33, 34, 36]*)
let (element, q3) = delete_min q3;;   (* 0 * [1, 12, 13, 18, 18, 18, 21, 30, 33, 34, 36]*)
assert(element = 0);;
let q3 = add 12 q3;;   (* [1, 12, 12, 13, 18, 18, 18, 21, 30, 33, 34, 36]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 30 q4;;   (* [30]*)
let q4 = add 36 q4;;   (* [30, 36]*)
let q4 = add 29 q4;;   (* [29, 30, 36]*)
let q4 = add 9 q4;;   (* [9, 29, 30, 36]*)
let q4 = add 0 q4;;   (* [0, 9, 29, 30, 36]*)
let q4 = add 31 q4;;   (* [0, 9, 29, 30, 31, 36]*)
let q4 = add 35 q4;;   (* [0, 9, 29, 30, 31, 35, 36]*)
let q4 = add 33 q4;;   (* [0, 9, 29, 30, 31, 33, 35, 36]*)
let q4 = add 31 q4;;   (* [0, 9, 29, 30, 31, 31, 33, 35, 36]*)
let (element, q4) = delete_min q4;;   (* 0 * [9, 29, 30, 31, 31, 33, 35, 36]*)
assert(element = 0);;
let q4 = add 33 q4;;   (* [9, 29, 30, 31, 31, 33, 33, 35, 36]*)
let q4 = add 37 q4;;   (* [9, 29, 30, 31, 31, 33, 33, 35, 36, 37]*)
let q4 = add 7 q4;;   (* [7, 9, 29, 30, 31, 31, 33, 33, 35, 36, 37]*)
let q4 = add 30 q4;;   (* [7, 9, 29, 30, 30, 31, 31, 33, 33, 35, 36, 37]*)
let q4 = add 7 q4;;   (* [7, 7, 9, 29, 30, 30, 31, 31, 33, 33, 35, 36, 37]*)
let q4 = add 11 q4;;   (* [7, 7, 9, 11, 29, 30, 30, 31, 31, 33, 33, 35, 36, 37]*)
let q4 = add 6 q4;;   (* [6, 7, 7, 9, 11, 29, 30, 30, 31, 31, 33, 33, 35, 36, 37]*)
let q4 = add 25 q4;;   (* [6, 7, 7, 9, 11, 25, 29, 30, 30, 31, 31, 33, 33, 35, 36, 37]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;   (*[0, 1, 2, 6, 6, 7, 7, 9, 10, 11, 12, 12, 13, 13, 14, 18, 18, 18, 19, 21, 22, 25, 28, 29, 29, 30, 30, 30, 31, 31, 31, 33, 33, 33, 34, 35, 36, 36, 36, 37]*)
let (element, q) = delete_min q;;   (* 0 * [1, 2, 6, 6, 7, 7, 9, 10, 11, 12, 12, 13, 13, 14, 18, 18, 18, 19, 21, 22, 25, 28, 29, 29, 30, 30, 30, 31, 31, 31, 33, 33, 33, 34, 35, 36, 36, 36, 37, 39]*)
assert(element = 0);;
let (element, q) = delete_min q;;   (* 1 * [2, 6, 6, 7, 7, 9, 10, 11, 12, 12, 13, 13, 14, 18, 18, 18, 19, 21, 22, 25, 28, 29, 29, 30, 30, 30, 31, 31, 31, 33, 33, 33, 34, 35, 36, 36, 36, 37, 39]*)
assert(element = 1);;
let (element, q) = delete_min q;;   (* 2 * [6, 6, 7, 7, 9, 10, 11, 12, 12, 13, 13, 14, 18, 18, 18, 19, 21, 22, 25, 28, 29, 29, 30, 30, 30, 31, 31, 31, 33, 33, 33, 34, 35, 36, 36, 36, 37, 39]*)
assert(element = 2);;
let (element, q) = delete_min q;;   (* 6 * [6, 7, 7, 9, 10, 11, 12, 12, 13, 13, 14, 18, 18, 18, 19, 21, 22, 25, 28, 29, 29, 30, 30, 30, 31, 31, 31, 33, 33, 33, 34, 35, 36, 36, 36, 37, 39]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 6 * [7, 7, 9, 10, 11, 12, 12, 13, 13, 14, 18, 18, 18, 19, 21, 22, 25, 28, 29, 29, 30, 30, 30, 31, 31, 31, 33, 33, 33, 34, 35, 36, 36, 36, 37, 39]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 7 * [7, 9, 10, 11, 12, 12, 13, 13, 14, 18, 18, 18, 19, 21, 22, 25, 28, 29, 29, 30, 30, 30, 31, 31, 31, 33, 33, 33, 34, 35, 36, 36, 36, 37, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 7 * [9, 10, 11, 12, 12, 13, 13, 14, 18, 18, 18, 19, 21, 22, 25, 28, 29, 29, 30, 30, 30, 31, 31, 31, 33, 33, 33, 34, 35, 36, 36, 36, 37, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 9 * [10, 11, 12, 12, 13, 13, 14, 18, 18, 18, 19, 21, 22, 25, 28, 29, 29, 30, 30, 30, 31, 31, 31, 33, 33, 33, 34, 35, 36, 36, 36, 37, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 10 * [11, 12, 12, 13, 13, 14, 18, 18, 18, 19, 21, 22, 25, 28, 29, 29, 30, 30, 30, 31, 31, 31, 33, 33, 33, 34, 35, 36, 36, 36, 37, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 11 * [12, 12, 13, 13, 14, 18, 18, 18, 19, 21, 22, 25, 28, 29, 29, 30, 30, 30, 31, 31, 31, 33, 33, 33, 34, 35, 36, 36, 36, 37, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 12 * [12, 13, 13, 14, 18, 18, 18, 19, 21, 22, 25, 28, 29, 29, 30, 30, 30, 31, 31, 31, 33, 33, 33, 34, 35, 36, 36, 36, 37, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 12 * [13, 13, 14, 18, 18, 18, 19, 21, 22, 25, 28, 29, 29, 30, 30, 30, 31, 31, 31, 33, 33, 33, 34, 35, 36, 36, 36, 37, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 13 * [13, 14, 18, 18, 18, 19, 21, 22, 25, 28, 29, 29, 30, 30, 30, 31, 31, 31, 33, 33, 33, 34, 35, 36, 36, 36, 37, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 13 * [14, 18, 18, 18, 19, 21, 22, 25, 28, 29, 29, 30, 30, 30, 31, 31, 31, 33, 33, 33, 34, 35, 36, 36, 36, 37, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 14 * [18, 18, 18, 19, 21, 22, 25, 28, 29, 29, 30, 30, 30, 31, 31, 31, 33, 33, 33, 34, 35, 36, 36, 36, 37, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 18 * [18, 18, 19, 21, 22, 25, 28, 29, 29, 30, 30, 30, 31, 31, 31, 33, 33, 33, 34, 35, 36, 36, 36, 37, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [18, 19, 21, 22, 25, 28, 29, 29, 30, 30, 30, 31, 31, 31, 33, 33, 33, 34, 35, 36, 36, 36, 37, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [19, 21, 22, 25, 28, 29, 29, 30, 30, 30, 31, 31, 31, 33, 33, 33, 34, 35, 36, 36, 36, 37, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [21, 22, 25, 28, 29, 29, 30, 30, 30, 31, 31, 31, 33, 33, 33, 34, 35, 36, 36, 36, 37, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 21 * [22, 25, 28, 29, 29, 30, 30, 30, 31, 31, 31, 33, 33, 33, 34, 35, 36, 36, 36, 37, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [25, 28, 29, 29, 30, 30, 30, 31, 31, 31, 33, 33, 33, 34, 35, 36, 36, 36, 37, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 25 * [28, 29, 29, 30, 30, 30, 31, 31, 31, 33, 33, 33, 34, 35, 36, 36, 36, 37, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 28 * [29, 29, 30, 30, 30, 31, 31, 31, 33, 33, 33, 34, 35, 36, 36, 36, 37, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [29, 30, 30, 30, 31, 31, 31, 33, 33, 33, 34, 35, 36, 36, 36, 37, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [30, 30, 30, 31, 31, 31, 33, 33, 33, 34, 35, 36, 36, 36, 37, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [30, 30, 31, 31, 31, 33, 33, 33, 34, 35, 36, 36, 36, 37, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [30, 31, 31, 31, 33, 33, 33, 34, 35, 36, 36, 36, 37, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 31, 33, 33, 33, 34, 35, 36, 36, 36, 37, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 31, 33, 33, 33, 34, 35, 36, 36, 36, 37, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [31, 33, 33, 33, 34, 35, 36, 36, 36, 37, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [33, 33, 33, 34, 35, 36, 36, 36, 37, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 34, 35, 36, 36, 36, 37, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 34, 35, 36, 36, 36, 37, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [34, 35, 36, 36, 36, 37, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [35, 36, 36, 36, 37, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 36, 37, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 37, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST42----*)

(* -------q1------ *)
let q1 = empty;;
assert(is_empty q1 = true);;   (*[]*)
let q1 = add 38 q1;;   (* [38]*)
let q1 = add 15 q1;;   (* [15, 38]*)
let q1 = add 23 q1;;   (* [15, 23, 38]*)
let q1 = add 16 q1;;   (* [15, 16, 23, 38]*)
let q1 = add 8 q1;;   (* [8, 15, 16, 23, 38]*)
assert(is_empty q1 = false);;   (*[8, 15, 16, 23, 38]*)
assert(is_empty q1 = false);;   (*[8, 15, 16, 23, 38]*)
let q1 = add 9 q1;;   (* [8, 9, 15, 16, 23, 38]*)
let q1 = add 16 q1;;   (* [8, 9, 15, 16, 16, 23, 38]*)
assert(is_empty q1 = false);;   (*[8, 9, 15, 16, 16, 23, 38]*)
let (element, q1) = delete_min q1;;   (* 8 * [9, 15, 16, 16, 23, 38]*)
assert(element = 8);;
let q1 = add 21 q1;;   (* [9, 15, 16, 16, 21, 23, 38]*)
let q1 = add 7 q1;;   (* [7, 9, 15, 16, 16, 21, 23, 38]*)
let (element, q1) = delete_min q1;;   (* 7 * [9, 15, 16, 16, 21, 23, 38]*)
assert(element = 7);;
assert(is_empty q1 = false);;   (*[9, 15, 16, 16, 21, 23, 38]*)
assert(is_empty q1 = false);;   (*[9, 15, 16, 16, 21, 23, 38]*)
let q1 = add 23 q1;;   (* [9, 15, 16, 16, 21, 23, 23, 38]*)
assert(is_empty q1 = false);;   (*[9, 15, 16, 16, 21, 23, 23, 38]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 8 q2;;   (* [8]*)
let q2 = add 35 q2;;   (* [8, 35]*)
let (element, q2) = delete_min q2;;   (* 8 * [35]*)
assert(element = 8);;
let (element, q2) = delete_min q2;;   (* 35 * []*)
assert(element = 35);;
let q2 = add 25 q2;;   (* [25]*)
assert(is_empty q2 = false);;   (*[25]*)
let q2 = add 1 q2;;   (* [1, 25]*)
let q2 = add 28 q2;;   (* [1, 25, 28]*)
let q2 = add 0 q2;;   (* [0, 1, 25, 28]*)
let q2 = add 19 q2;;   (* [0, 1, 19, 25, 28]*)
let (element, q2) = delete_min q2;;   (* 0 * [1, 19, 25, 28]*)
assert(element = 0);;
let q2 = add 36 q2;;   (* [1, 19, 25, 28, 36]*)
let q2 = add 11 q2;;   (* [1, 11, 19, 25, 28, 36]*)
let (element, q2) = delete_min q2;;   (* 1 * [11, 19, 25, 28, 36]*)
assert(element = 1);;
let (element, q2) = delete_min q2;;   (* 11 * [19, 25, 28, 36]*)
assert(element = 11);;
let q2 = add 10 q2;;   (* [10, 19, 25, 28, 36]*)
let q2 = add 1 q2;;   (* [1, 10, 19, 25, 28, 36]*)
assert(is_empty q2 = false);;   (*[1, 10, 19, 25, 28, 36]*)
assert(is_empty q2 = false);;   (*[1, 10, 19, 25, 28, 36]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 22 q3;;   (* [22]*)
let (element, q3) = delete_min q3;;   (* 22 * []*)
assert(element = 22);;
let q3 = add 1 q3;;   (* [1]*)
let q3 = add 19 q3;;   (* [1, 19]*)
let q3 = add 7 q3;;   (* [1, 7, 19]*)
let (element, q3) = delete_min q3;;   (* 1 * [7, 19]*)
assert(element = 1);;
let q3 = add 38 q3;;   (* [7, 19, 38]*)
let q3 = add 30 q3;;   (* [7, 19, 30, 38]*)
let q3 = add 31 q3;;   (* [7, 19, 30, 31, 38]*)
assert(is_empty q3 = false);;   (*[7, 19, 30, 31, 38]*)
let q3 = add 31 q3;;   (* [7, 19, 30, 31, 31, 38]*)
let (element, q3) = delete_min q3;;   (* 7 * [19, 30, 31, 31, 38]*)
assert(element = 7);;
let (element, q3) = delete_min q3;;   (* 19 * [30, 31, 31, 38]*)
assert(element = 19);;
let q3 = add 28 q3;;   (* [28, 30, 31, 31, 38]*)
let q3 = add 9 q3;;   (* [9, 28, 30, 31, 31, 38]*)
let q3 = add 18 q3;;   (* [9, 18, 28, 30, 31, 31, 38]*)
let q3 = add 33 q3;;   (* [9, 18, 28, 30, 31, 31, 33, 38]*)
let q3 = add 38 q3;;   (* [9, 18, 28, 30, 31, 31, 33, 38, 38]*)
let (element, q3) = delete_min q3;;   (* 9 * [18, 28, 30, 31, 31, 33, 38, 38]*)
assert(element = 9);;

(* -------q4------ *)
let q4 = empty;;
let q4 = add 33 q4;;   (* [33]*)
let q4 = add 29 q4;;   (* [29, 33]*)
let (element, q4) = delete_min q4;;   (* 29 * [33]*)
assert(element = 29);;
let q4 = add 1 q4;;   (* [1, 33]*)
let (element, q4) = delete_min q4;;   (* 1 * [33]*)
assert(element = 1);;
let q4 = add 23 q4;;   (* [23, 33]*)
let (element, q4) = delete_min q4;;   (* 23 * [33]*)
assert(element = 23);;
let q4 = add 3 q4;;   (* [3, 33]*)
let q4 = add 27 q4;;   (* [3, 27, 33]*)
let (element, q4) = delete_min q4;;   (* 3 * [27, 33]*)
assert(element = 3);;
let q4 = add 4 q4;;   (* [4, 27, 33]*)
let (element, q4) = delete_min q4;;   (* 4 * [27, 33]*)
assert(element = 4);;
let q4 = add 23 q4;;   (* [23, 27, 33]*)
let (element, q4) = delete_min q4;;   (* 23 * [27, 33]*)
assert(element = 23);;
let (element, q4) = delete_min q4;;   (* 27 * [33]*)
assert(element = 27);;
let q4 = add 19 q4;;   (* [19, 33]*)
let q4 = add 30 q4;;   (* [19, 30, 33]*)
let (element, q4) = delete_min q4;;   (* 19 * [30, 33]*)
assert(element = 19);;
let q4 = add 18 q4;;   (* [18, 30, 33]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;   (*[1, 9, 10, 15, 16, 16, 18, 18, 19, 21, 23, 23, 25, 28, 28, 30, 30, 31, 31, 33, 33, 36, 38, 38]*)
let (element, q) = delete_min q;;   (* 1 * [9, 10, 15, 16, 16, 18, 18, 19, 21, 23, 23, 25, 28, 28, 30, 30, 31, 31, 33, 33, 36, 38, 38, 38]*)
assert(element = 1);;
let (element, q) = delete_min q;;   (* 9 * [10, 15, 16, 16, 18, 18, 19, 21, 23, 23, 25, 28, 28, 30, 30, 31, 31, 33, 33, 36, 38, 38, 38]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 10 * [15, 16, 16, 18, 18, 19, 21, 23, 23, 25, 28, 28, 30, 30, 31, 31, 33, 33, 36, 38, 38, 38]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 15 * [16, 16, 18, 18, 19, 21, 23, 23, 25, 28, 28, 30, 30, 31, 31, 33, 33, 36, 38, 38, 38]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [16, 18, 18, 19, 21, 23, 23, 25, 28, 28, 30, 30, 31, 31, 33, 33, 36, 38, 38, 38]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [18, 18, 19, 21, 23, 23, 25, 28, 28, 30, 30, 31, 31, 33, 33, 36, 38, 38, 38]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 18 * [18, 19, 21, 23, 23, 25, 28, 28, 30, 30, 31, 31, 33, 33, 36, 38, 38, 38]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [19, 21, 23, 23, 25, 28, 28, 30, 30, 31, 31, 33, 33, 36, 38, 38, 38]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [21, 23, 23, 25, 28, 28, 30, 30, 31, 31, 33, 33, 36, 38, 38, 38]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 21 * [23, 23, 25, 28, 28, 30, 30, 31, 31, 33, 33, 36, 38, 38, 38]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 23 * [23, 25, 28, 28, 30, 30, 31, 31, 33, 33, 36, 38, 38, 38]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [25, 28, 28, 30, 30, 31, 31, 33, 33, 36, 38, 38, 38]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 25 * [28, 28, 30, 30, 31, 31, 33, 33, 36, 38, 38, 38]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 28 * [28, 30, 30, 31, 31, 33, 33, 36, 38, 38, 38]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [30, 30, 31, 31, 33, 33, 36, 38, 38, 38]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 30 * [30, 31, 31, 33, 33, 36, 38, 38, 38]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 33, 33, 36, 38, 38, 38]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 33, 33, 36, 38, 38, 38]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [33, 33, 36, 38, 38, 38]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 33 * [33, 36, 38, 38, 38]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [36, 38, 38, 38]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 36 * [38, 38, 38]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 38 * [38, 38]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * []*)
assert(element = 38);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST43----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 25 q1;;   (* [25]*)
let q1 = add 13 q1;;   (* [13, 25]*)
let (element, q1) = delete_min q1;;   (* 13 * [25]*)
assert(element = 13);;
assert(is_empty q1 = false);;   (*[25]*)
let q1 = add 25 q1;;   (* [25, 25]*)
let q1 = add 32 q1;;   (* [25, 25, 32]*)
assert(is_empty q1 = false);;   (*[25, 25, 32]*)
let (element, q1) = delete_min q1;;   (* 25 * [25, 32]*)
assert(element = 25);;
let q1 = add 33 q1;;   (* [25, 32, 33]*)
let q1 = add 22 q1;;   (* [22, 25, 32, 33]*)
let q1 = add 5 q1;;   (* [5, 22, 25, 32, 33]*)
assert(is_empty q1 = false);;   (*[5, 22, 25, 32, 33]*)
let q1 = add 22 q1;;   (* [5, 22, 22, 25, 32, 33]*)
let q1 = add 1 q1;;   (* [1, 5, 22, 22, 25, 32, 33]*)
let q1 = add 9 q1;;   (* [1, 5, 9, 22, 22, 25, 32, 33]*)
assert(is_empty q1 = false);;   (*[1, 5, 9, 22, 22, 25, 32, 33]*)
let q1 = add 24 q1;;   (* [1, 5, 9, 22, 22, 24, 25, 32, 33]*)
let q1 = add 14 q1;;   (* [1, 5, 9, 14, 22, 22, 24, 25, 32, 33]*)
let (element, q1) = delete_min q1;;   (* 1 * [5, 9, 14, 22, 22, 24, 25, 32, 33]*)
assert(element = 1);;
let (element, q1) = delete_min q1;;   (* 5 * [9, 14, 22, 22, 24, 25, 32, 33]*)
assert(element = 5);;

(* -------q2------ *)
let q2 = empty;;
let q2 = add 26 q2;;   (* [26]*)
let (element, q2) = delete_min q2;;   (* 26 * []*)
assert(element = 26);;
let q2 = add 36 q2;;   (* [36]*)
let q2 = add 1 q2;;   (* [1, 36]*)
let q2 = add 26 q2;;   (* [1, 26, 36]*)
let q2 = add 25 q2;;   (* [1, 25, 26, 36]*)
let (element, q2) = delete_min q2;;   (* 1 * [25, 26, 36]*)
assert(element = 1);;
let (element, q2) = delete_min q2;;   (* 25 * [26, 36]*)
assert(element = 25);;
let (element, q2) = delete_min q2;;   (* 26 * [36]*)
assert(element = 26);;
let q2 = add 29 q2;;   (* [29, 36]*)
let q2 = add 16 q2;;   (* [16, 29, 36]*)
let (element, q2) = delete_min q2;;   (* 16 * [29, 36]*)
assert(element = 16);;
let q2 = add 17 q2;;   (* [17, 29, 36]*)
let q2 = add 26 q2;;   (* [17, 26, 29, 36]*)
let q2 = add 6 q2;;   (* [6, 17, 26, 29, 36]*)
let q2 = add 30 q2;;   (* [6, 17, 26, 29, 30, 36]*)
let q2 = add 27 q2;;   (* [6, 17, 26, 27, 29, 30, 36]*)
let (element, q2) = delete_min q2;;   (* 6 * [17, 26, 27, 29, 30, 36]*)
assert(element = 6);;
let (element, q2) = delete_min q2;;   (* 17 * [26, 27, 29, 30, 36]*)
assert(element = 17);;
let q2 = add 12 q2;;   (* [12, 26, 27, 29, 30, 36]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 23 q3;;   (* [23]*)
let q3 = add 37 q3;;   (* [23, 37]*)
let (element, q3) = delete_min q3;;   (* 23 * [37]*)
assert(element = 23);;
let q3 = add 39 q3;;   (* [37, 39]*)
let (element, q3) = delete_min q3;;   (* 37 * [39]*)
assert(element = 37);;
assert(is_empty q3 = false);;   (*[39]*)
let q3 = add 20 q3;;   (* [20, 39]*)
let (element, q3) = delete_min q3;;   (* 20 * [39]*)
assert(element = 20);;
let (element, q3) = delete_min q3;;   (* 39 * []*)
assert(element = 39);;
let q3 = add 33 q3;;   (* [33]*)
let q3 = add 12 q3;;   (* [12, 33]*)
let (element, q3) = delete_min q3;;   (* 12 * [33]*)
assert(element = 12);;
let q3 = add 31 q3;;   (* [31, 33]*)
let (element, q3) = delete_min q3;;   (* 31 * [33]*)
assert(element = 31);;
let q3 = add 38 q3;;   (* [33, 38]*)
let q3 = add 39 q3;;   (* [33, 38, 39]*)
assert(is_empty q3 = false);;   (*[33, 38, 39]*)
let q3 = add 28 q3;;   (* [28, 33, 38, 39]*)
let q3 = add 21 q3;;   (* [21, 28, 33, 38, 39]*)
let (element, q3) = delete_min q3;;   (* 21 * [28, 33, 38, 39]*)
assert(element = 21);;

(* -------q4------ *)
let q4 = empty;;
assert(is_empty q4 = true);;   (*[]*)
let q4 = add 9 q4;;   (* [9]*)
let q4 = add 22 q4;;   (* [9, 22]*)
let q4 = add 19 q4;;   (* [9, 19, 22]*)
let (element, q4) = delete_min q4;;   (* 9 * [19, 22]*)
assert(element = 9);;
let q4 = add 0 q4;;   (* [0, 19, 22]*)
let q4 = add 12 q4;;   (* [0, 12, 19, 22]*)
let q4 = add 1 q4;;   (* [0, 1, 12, 19, 22]*)
let q4 = add 26 q4;;   (* [0, 1, 12, 19, 22, 26]*)
let q4 = add 38 q4;;   (* [0, 1, 12, 19, 22, 26, 38]*)
let q4 = add 8 q4;;   (* [0, 1, 8, 12, 19, 22, 26, 38]*)
assert(is_empty q4 = false);;   (*[0, 1, 8, 12, 19, 22, 26, 38]*)
let q4 = add 17 q4;;   (* [0, 1, 8, 12, 17, 19, 22, 26, 38]*)
let q4 = add 1 q4;;   (* [0, 1, 1, 8, 12, 17, 19, 22, 26, 38]*)
let q4 = add 5 q4;;   (* [0, 1, 1, 5, 8, 12, 17, 19, 22, 26, 38]*)
let (element, q4) = delete_min q4;;   (* 0 * [1, 1, 5, 8, 12, 17, 19, 22, 26, 38]*)
assert(element = 0);;
let (element, q4) = delete_min q4;;   (* 1 * [1, 5, 8, 12, 17, 19, 22, 26, 38]*)
assert(element = 1);;
let (element, q4) = delete_min q4;;   (* 1 * [5, 8, 12, 17, 19, 22, 26, 38]*)
assert(element = 1);;
let q4 = add 26 q4;;   (* [5, 8, 12, 17, 19, 22, 26, 26, 38]*)
let (element, q4) = delete_min q4;;   (* 5 * [8, 12, 17, 19, 22, 26, 26, 38]*)
assert(element = 5);;

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;   (*[8, 9, 12, 12, 14, 17, 19, 22, 22, 22, 24, 25, 26, 26, 26, 27, 28, 29, 30, 32, 33, 33, 36, 38, 38]*)
let (element, q) = delete_min q;;   (* 8 * [9, 12, 12, 14, 17, 19, 22, 22, 22, 24, 25, 26, 26, 26, 27, 28, 29, 30, 32, 33, 33, 36, 38, 38, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 9 * [12, 12, 14, 17, 19, 22, 22, 22, 24, 25, 26, 26, 26, 27, 28, 29, 30, 32, 33, 33, 36, 38, 38, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 12 * [12, 14, 17, 19, 22, 22, 22, 24, 25, 26, 26, 26, 27, 28, 29, 30, 32, 33, 33, 36, 38, 38, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 12 * [14, 17, 19, 22, 22, 22, 24, 25, 26, 26, 26, 27, 28, 29, 30, 32, 33, 33, 36, 38, 38, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 14 * [17, 19, 22, 22, 22, 24, 25, 26, 26, 26, 27, 28, 29, 30, 32, 33, 33, 36, 38, 38, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 17 * [19, 22, 22, 22, 24, 25, 26, 26, 26, 27, 28, 29, 30, 32, 33, 33, 36, 38, 38, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 19 * [22, 22, 22, 24, 25, 26, 26, 26, 27, 28, 29, 30, 32, 33, 33, 36, 38, 38, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 22 * [22, 22, 24, 25, 26, 26, 26, 27, 28, 29, 30, 32, 33, 33, 36, 38, 38, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [22, 24, 25, 26, 26, 26, 27, 28, 29, 30, 32, 33, 33, 36, 38, 38, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [24, 25, 26, 26, 26, 27, 28, 29, 30, 32, 33, 33, 36, 38, 38, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 24 * [25, 26, 26, 26, 27, 28, 29, 30, 32, 33, 33, 36, 38, 38, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [26, 26, 26, 27, 28, 29, 30, 32, 33, 33, 36, 38, 38, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [26, 26, 27, 28, 29, 30, 32, 33, 33, 36, 38, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [26, 27, 28, 29, 30, 32, 33, 33, 36, 38, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [27, 28, 29, 30, 32, 33, 33, 36, 38, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [28, 29, 30, 32, 33, 33, 36, 38, 38, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [29, 30, 32, 33, 33, 36, 38, 38, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [30, 32, 33, 33, 36, 38, 38, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [32, 33, 33, 36, 38, 38, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 32 * [33, 33, 36, 38, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [33, 36, 38, 38, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [36, 38, 38, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 36 * [38, 38, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 38 * [38, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST44----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 17 q1;;   (* [17]*)
let q1 = add 15 q1;;   (* [15, 17]*)
assert(is_empty q1 = false);;   (*[15, 17]*)
let q1 = add 37 q1;;   (* [15, 17, 37]*)
let q1 = add 32 q1;;   (* [15, 17, 32, 37]*)
let q1 = add 6 q1;;   (* [6, 15, 17, 32, 37]*)
let q1 = add 18 q1;;   (* [6, 15, 17, 18, 32, 37]*)
let (element, q1) = delete_min q1;;   (* 6 * [15, 17, 18, 32, 37]*)
assert(element = 6);;
let (element, q1) = delete_min q1;;   (* 15 * [17, 18, 32, 37]*)
assert(element = 15);;
let q1 = add 19 q1;;   (* [17, 18, 19, 32, 37]*)
let q1 = add 8 q1;;   (* [8, 17, 18, 19, 32, 37]*)
assert(is_empty q1 = false);;   (*[8, 17, 18, 19, 32, 37]*)
let (element, q1) = delete_min q1;;   (* 8 * [17, 18, 19, 32, 37]*)
assert(element = 8);;
let (element, q1) = delete_min q1;;   (* 17 * [18, 19, 32, 37]*)
assert(element = 17);;
assert(is_empty q1 = false);;   (*[18, 19, 32, 37]*)
let q1 = add 4 q1;;   (* [4, 18, 19, 32, 37]*)
assert(is_empty q1 = false);;   (*[4, 18, 19, 32, 37]*)
let q1 = add 34 q1;;   (* [4, 18, 19, 32, 34, 37]*)
let q1 = add 20 q1;;   (* [4, 18, 19, 20, 32, 34, 37]*)
let q1 = add 35 q1;;   (* [4, 18, 19, 20, 32, 34, 35, 37]*)
let q1 = add 11 q1;;   (* [4, 11, 18, 19, 20, 32, 34, 35, 37]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 15 q2;;   (* [15]*)
let q2 = add 35 q2;;   (* [15, 35]*)
let (element, q2) = delete_min q2;;   (* 15 * [35]*)
assert(element = 15);;
let q2 = add 34 q2;;   (* [34, 35]*)
let q2 = add 38 q2;;   (* [34, 35, 38]*)
let q2 = add 2 q2;;   (* [2, 34, 35, 38]*)
let (element, q2) = delete_min q2;;   (* 2 * [34, 35, 38]*)
assert(element = 2);;
assert(is_empty q2 = false);;   (*[34, 35, 38]*)
let q2 = add 26 q2;;   (* [26, 34, 35, 38]*)
let q2 = add 36 q2;;   (* [26, 34, 35, 36, 38]*)
let q2 = add 15 q2;;   (* [15, 26, 34, 35, 36, 38]*)
let q2 = add 12 q2;;   (* [12, 15, 26, 34, 35, 36, 38]*)
let (element, q2) = delete_min q2;;   (* 12 * [15, 26, 34, 35, 36, 38]*)
assert(element = 12);;
assert(is_empty q2 = false);;   (*[15, 26, 34, 35, 36, 38]*)
let q2 = add 22 q2;;   (* [15, 22, 26, 34, 35, 36, 38]*)
let q2 = add 17 q2;;   (* [15, 17, 22, 26, 34, 35, 36, 38]*)
let q2 = add 3 q2;;   (* [3, 15, 17, 22, 26, 34, 35, 36, 38]*)
let q2 = add 28 q2;;   (* [3, 15, 17, 22, 26, 28, 34, 35, 36, 38]*)
let q2 = add 33 q2;;   (* [3, 15, 17, 22, 26, 28, 33, 34, 35, 36, 38]*)
let q2 = add 7 q2;;   (* [3, 7, 15, 17, 22, 26, 28, 33, 34, 35, 36, 38]*)
let (element, q2) = delete_min q2;;   (* 3 * [7, 15, 17, 22, 26, 28, 33, 34, 35, 36, 38]*)
assert(element = 3);;

(* -------q3------ *)
let q3 = empty;;
let q3 = add 18 q3;;   (* [18]*)
let q3 = add 15 q3;;   (* [15, 18]*)
assert(is_empty q3 = false);;   (*[15, 18]*)
let (element, q3) = delete_min q3;;   (* 15 * [18]*)
assert(element = 15);;
let q3 = add 0 q3;;   (* [0, 18]*)
let q3 = add 14 q3;;   (* [0, 14, 18]*)
assert(is_empty q3 = false);;   (*[0, 14, 18]*)
assert(is_empty q3 = false);;   (*[0, 14, 18]*)
let q3 = add 13 q3;;   (* [0, 13, 14, 18]*)
let q3 = add 3 q3;;   (* [0, 3, 13, 14, 18]*)
assert(is_empty q3 = false);;   (*[0, 3, 13, 14, 18]*)
let q3 = add 10 q3;;   (* [0, 3, 10, 13, 14, 18]*)
let (element, q3) = delete_min q3;;   (* 0 * [3, 10, 13, 14, 18]*)
assert(element = 0);;
let (element, q3) = delete_min q3;;   (* 3 * [10, 13, 14, 18]*)
assert(element = 3);;
let q3 = add 23 q3;;   (* [10, 13, 14, 18, 23]*)
let q3 = add 17 q3;;   (* [10, 13, 14, 17, 18, 23]*)
let q3 = add 33 q3;;   (* [10, 13, 14, 17, 18, 23, 33]*)
let q3 = add 15 q3;;   (* [10, 13, 14, 15, 17, 18, 23, 33]*)
let (element, q3) = delete_min q3;;   (* 10 * [13, 14, 15, 17, 18, 23, 33]*)
assert(element = 10);;
let q3 = add 34 q3;;   (* [13, 14, 15, 17, 18, 23, 33, 34]*)
let (element, q3) = delete_min q3;;   (* 13 * [14, 15, 17, 18, 23, 33, 34]*)
assert(element = 13);;

(* -------q4------ *)
let q4 = empty;;
assert(is_empty q4 = true);;   (*[]*)
let q4 = add 35 q4;;   (* [35]*)
let q4 = add 0 q4;;   (* [0, 35]*)
let q4 = add 22 q4;;   (* [0, 22, 35]*)
let q4 = add 14 q4;;   (* [0, 14, 22, 35]*)
let (element, q4) = delete_min q4;;   (* 0 * [14, 22, 35]*)
assert(element = 0);;
let (element, q4) = delete_min q4;;   (* 14 * [22, 35]*)
assert(element = 14);;
let q4 = add 12 q4;;   (* [12, 22, 35]*)
let q4 = add 9 q4;;   (* [9, 12, 22, 35]*)
let q4 = add 38 q4;;   (* [9, 12, 22, 35, 38]*)
let (element, q4) = delete_min q4;;   (* 9 * [12, 22, 35, 38]*)
assert(element = 9);;
let q4 = add 7 q4;;   (* [7, 12, 22, 35, 38]*)
let (element, q4) = delete_min q4;;   (* 7 * [12, 22, 35, 38]*)
assert(element = 7);;
let q4 = add 29 q4;;   (* [12, 22, 29, 35, 38]*)
let q4 = add 36 q4;;   (* [12, 22, 29, 35, 36, 38]*)
let q4 = add 19 q4;;   (* [12, 19, 22, 29, 35, 36, 38]*)
let (element, q4) = delete_min q4;;   (* 12 * [19, 22, 29, 35, 36, 38]*)
assert(element = 12);;
let (element, q4) = delete_min q4;;   (* 19 * [22, 29, 35, 36, 38]*)
assert(element = 19);;
let q4 = add 4 q4;;   (* [4, 22, 29, 35, 36, 38]*)
let q4 = add 14 q4;;   (* [4, 14, 22, 29, 35, 36, 38]*)
let q4 = add 26 q4;;   (* [4, 14, 22, 26, 29, 35, 36, 38]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;   (*[4, 4, 7, 11, 14, 14, 15, 15, 17, 17, 18, 18, 19, 20, 22, 22, 23, 26, 26, 28, 29, 32, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 38]*)
let (element, q) = delete_min q;;   (* 4 * [4, 7, 11, 14, 14, 15, 15, 17, 17, 18, 18, 19, 20, 22, 22, 23, 26, 26, 28, 29, 32, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 38, 38]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 4 * [7, 11, 14, 14, 15, 15, 17, 17, 18, 18, 19, 20, 22, 22, 23, 26, 26, 28, 29, 32, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 38, 38]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 7 * [11, 14, 14, 15, 15, 17, 17, 18, 18, 19, 20, 22, 22, 23, 26, 26, 28, 29, 32, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 38, 38]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 11 * [14, 14, 15, 15, 17, 17, 18, 18, 19, 20, 22, 22, 23, 26, 26, 28, 29, 32, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 38, 38]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 14 * [14, 15, 15, 17, 17, 18, 18, 19, 20, 22, 22, 23, 26, 26, 28, 29, 32, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 38, 38]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [15, 15, 17, 17, 18, 18, 19, 20, 22, 22, 23, 26, 26, 28, 29, 32, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 38, 38]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [15, 17, 17, 18, 18, 19, 20, 22, 22, 23, 26, 26, 28, 29, 32, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 38, 38]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [17, 17, 18, 18, 19, 20, 22, 22, 23, 26, 26, 28, 29, 32, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 38, 38]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 17 * [17, 18, 18, 19, 20, 22, 22, 23, 26, 26, 28, 29, 32, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 38, 38]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [18, 18, 19, 20, 22, 22, 23, 26, 26, 28, 29, 32, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 38, 38]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [18, 19, 20, 22, 22, 23, 26, 26, 28, 29, 32, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 38, 38]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [19, 20, 22, 22, 23, 26, 26, 28, 29, 32, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 38, 38]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [20, 22, 22, 23, 26, 26, 28, 29, 32, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 38, 38]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [22, 22, 23, 26, 26, 28, 29, 32, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 38, 38]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 22 * [22, 23, 26, 26, 28, 29, 32, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 38, 38]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [23, 26, 26, 28, 29, 32, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 38, 38]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [26, 26, 28, 29, 32, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 38, 38]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 26 * [26, 28, 29, 32, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 38, 38]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [28, 29, 32, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 38, 38]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 28 * [29, 32, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 38, 38]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [32, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 38, 38]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 32 * [33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 38, 38]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 38, 38]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [34, 34, 34, 35, 35, 35, 36, 36, 37, 38, 38]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 35, 35, 35, 36, 36, 37, 38, 38]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 35, 35, 36, 36, 37, 38, 38]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 35, 36, 36, 37, 38, 38]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 36, 36, 37, 38, 38]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 36, 37, 38, 38]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 37, 38, 38]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 38, 38]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 38, 38]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [38, 38]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * []*)
assert(element = 38);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST45----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 11 q1;;   (* [11]*)
let q1 = add 11 q1;;   (* [11, 11]*)
let q1 = add 28 q1;;   (* [11, 11, 28]*)
let q1 = add 20 q1;;   (* [11, 11, 20, 28]*)
let (element, q1) = delete_min q1;;   (* 11 * [11, 20, 28]*)
assert(element = 11);;
let q1 = add 20 q1;;   (* [11, 20, 20, 28]*)
let q1 = add 24 q1;;   (* [11, 20, 20, 24, 28]*)
let q1 = add 30 q1;;   (* [11, 20, 20, 24, 28, 30]*)
let (element, q1) = delete_min q1;;   (* 11 * [20, 20, 24, 28, 30]*)
assert(element = 11);;
let (element, q1) = delete_min q1;;   (* 20 * [20, 24, 28, 30]*)
assert(element = 20);;
let q1 = add 38 q1;;   (* [20, 24, 28, 30, 38]*)
let q1 = add 13 q1;;   (* [13, 20, 24, 28, 30, 38]*)
let q1 = add 38 q1;;   (* [13, 20, 24, 28, 30, 38, 38]*)
let q1 = add 1 q1;;   (* [1, 13, 20, 24, 28, 30, 38, 38]*)
let q1 = add 4 q1;;   (* [1, 4, 13, 20, 24, 28, 30, 38, 38]*)
let q1 = add 30 q1;;   (* [1, 4, 13, 20, 24, 28, 30, 30, 38, 38]*)
let q1 = add 20 q1;;   (* [1, 4, 13, 20, 20, 24, 28, 30, 30, 38, 38]*)
assert(is_empty q1 = false);;   (*[1, 4, 13, 20, 20, 24, 28, 30, 30, 38, 38]*)
let q1 = add 10 q1;;   (* [1, 4, 10, 13, 20, 20, 24, 28, 30, 30, 38, 38]*)
let (element, q1) = delete_min q1;;   (* 1 * [4, 10, 13, 20, 20, 24, 28, 30, 30, 38, 38]*)
assert(element = 1);;
let q1 = add 11 q1;;   (* [4, 10, 11, 13, 20, 20, 24, 28, 30, 30, 38, 38]*)
let q1 = add 4 q1;;   (* [4, 4, 10, 11, 13, 20, 20, 24, 28, 30, 30, 38, 38]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 20 q2;;   (* [20]*)
assert(is_empty q2 = false);;   (*[20]*)
let q2 = add 0 q2;;   (* [0, 20]*)
let q2 = add 34 q2;;   (* [0, 20, 34]*)
let q2 = add 20 q2;;   (* [0, 20, 20, 34]*)
let (element, q2) = delete_min q2;;   (* 0 * [20, 20, 34]*)
assert(element = 0);;
let q2 = add 14 q2;;   (* [14, 20, 20, 34]*)
let q2 = add 23 q2;;   (* [14, 20, 20, 23, 34]*)
assert(is_empty q2 = false);;   (*[14, 20, 20, 23, 34]*)
let q2 = add 4 q2;;   (* [4, 14, 20, 20, 23, 34]*)
let q2 = add 22 q2;;   (* [4, 14, 20, 20, 22, 23, 34]*)
let q2 = add 14 q2;;   (* [4, 14, 14, 20, 20, 22, 23, 34]*)
let q2 = add 8 q2;;   (* [4, 8, 14, 14, 20, 20, 22, 23, 34]*)
let q2 = add 28 q2;;   (* [4, 8, 14, 14, 20, 20, 22, 23, 28, 34]*)
let q2 = add 6 q2;;   (* [4, 6, 8, 14, 14, 20, 20, 22, 23, 28, 34]*)
let (element, q2) = delete_min q2;;   (* 4 * [6, 8, 14, 14, 20, 20, 22, 23, 28, 34]*)
assert(element = 4);;
let q2 = add 35 q2;;   (* [6, 8, 14, 14, 20, 20, 22, 23, 28, 34, 35]*)
let q2 = add 24 q2;;   (* [6, 8, 14, 14, 20, 20, 22, 23, 24, 28, 34, 35]*)
let (element, q2) = delete_min q2;;   (* 6 * [8, 14, 14, 20, 20, 22, 23, 24, 28, 34, 35]*)
assert(element = 6);;
let (element, q2) = delete_min q2;;   (* 8 * [14, 14, 20, 20, 22, 23, 24, 28, 34, 35]*)
assert(element = 8);;
let (element, q2) = delete_min q2;;   (* 14 * [14, 20, 20, 22, 23, 24, 28, 34, 35]*)
assert(element = 14);;
let (element, q2) = delete_min q2;;   (* 14 * [20, 20, 22, 23, 24, 28, 34, 35]*)
assert(element = 14);;

(* -------q3------ *)
let q3 = empty;;
let q3 = add 38 q3;;   (* [38]*)
let q3 = add 14 q3;;   (* [14, 38]*)
let (element, q3) = delete_min q3;;   (* 14 * [38]*)
assert(element = 14);;
let (element, q3) = delete_min q3;;   (* 38 * []*)
assert(element = 38);;
let q3 = add 10 q3;;   (* [10]*)
let q3 = add 11 q3;;   (* [10, 11]*)
let (element, q3) = delete_min q3;;   (* 10 * [11]*)
assert(element = 10);;
let q3 = add 4 q3;;   (* [4, 11]*)
let q3 = add 4 q3;;   (* [4, 4, 11]*)
let q3 = add 23 q3;;   (* [4, 4, 11, 23]*)
let (element, q3) = delete_min q3;;   (* 4 * [4, 11, 23]*)
assert(element = 4);;
let (element, q3) = delete_min q3;;   (* 4 * [11, 23]*)
assert(element = 4);;
assert(is_empty q3 = false);;   (*[11, 23]*)
let q3 = add 11 q3;;   (* [11, 11, 23]*)
let q3 = add 17 q3;;   (* [11, 11, 17, 23]*)
let (element, q3) = delete_min q3;;   (* 11 * [11, 17, 23]*)
assert(element = 11);;
let (element, q3) = delete_min q3;;   (* 11 * [17, 23]*)
assert(element = 11);;
let (element, q3) = delete_min q3;;   (* 17 * [23]*)
assert(element = 17);;
let (element, q3) = delete_min q3;;   (* 23 * []*)
assert(element = 23);;
let q3 = add 1 q3;;   (* [1]*)
let (element, q3) = delete_min q3;;   (* 1 * []*)
assert(element = 1);;
let q3 = add 18 q3;;   (* [18]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 23 q4;;   (* [23]*)
let q4 = add 23 q4;;   (* [23, 23]*)
let q4 = add 25 q4;;   (* [23, 23, 25]*)
let q4 = add 7 q4;;   (* [7, 23, 23, 25]*)
let q4 = add 10 q4;;   (* [7, 10, 23, 23, 25]*)
let q4 = add 12 q4;;   (* [7, 10, 12, 23, 23, 25]*)
let q4 = add 14 q4;;   (* [7, 10, 12, 14, 23, 23, 25]*)
let q4 = add 35 q4;;   (* [7, 10, 12, 14, 23, 23, 25, 35]*)
let q4 = add 30 q4;;   (* [7, 10, 12, 14, 23, 23, 25, 30, 35]*)
let (element, q4) = delete_min q4;;   (* 7 * [10, 12, 14, 23, 23, 25, 30, 35]*)
assert(element = 7);;
let (element, q4) = delete_min q4;;   (* 10 * [12, 14, 23, 23, 25, 30, 35]*)
assert(element = 10);;
let q4 = add 17 q4;;   (* [12, 14, 17, 23, 23, 25, 30, 35]*)
let q4 = add 25 q4;;   (* [12, 14, 17, 23, 23, 25, 25, 30, 35]*)
let q4 = add 17 q4;;   (* [12, 14, 17, 17, 23, 23, 25, 25, 30, 35]*)
let q4 = add 18 q4;;   (* [12, 14, 17, 17, 18, 23, 23, 25, 25, 30, 35]*)
let q4 = add 16 q4;;   (* [12, 14, 16, 17, 17, 18, 23, 23, 25, 25, 30, 35]*)
let q4 = add 23 q4;;   (* [12, 14, 16, 17, 17, 18, 23, 23, 23, 25, 25, 30, 35]*)
let (element, q4) = delete_min q4;;   (* 12 * [14, 16, 17, 17, 18, 23, 23, 23, 25, 25, 30, 35]*)
assert(element = 12);;
let q4 = add 24 q4;;   (* [14, 16, 17, 17, 18, 23, 23, 23, 24, 25, 25, 30, 35]*)
let q4 = add 7 q4;;   (* [7, 14, 16, 17, 17, 18, 23, 23, 23, 24, 25, 25, 30, 35]*)
let q4 = add 37 q4;;   (* [7, 14, 16, 17, 17, 18, 23, 23, 23, 24, 25, 25, 30, 35, 37]*)
let q4 = add 5 q4;;   (* [5, 7, 14, 16, 17, 17, 18, 23, 23, 23, 24, 25, 25, 30, 35, 37]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;   (*[4, 4, 5, 7, 10, 11, 13, 14, 16, 17, 17, 18, 18, 20, 20, 20, 20, 22, 23, 23, 23, 23, 24, 24, 24, 25, 25, 28, 28, 30, 30, 30, 34, 35, 35, 37, 38]*)
let (element, q) = delete_min q;;   (* 4 * [4, 5, 7, 10, 11, 13, 14, 16, 17, 17, 18, 18, 20, 20, 20, 20, 22, 23, 23, 23, 23, 24, 24, 24, 25, 25, 28, 28, 30, 30, 30, 34, 35, 35, 37, 38, 38]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 4 * [5, 7, 10, 11, 13, 14, 16, 17, 17, 18, 18, 20, 20, 20, 20, 22, 23, 23, 23, 23, 24, 24, 24, 25, 25, 28, 28, 30, 30, 30, 34, 35, 35, 37, 38, 38]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 5 * [7, 10, 11, 13, 14, 16, 17, 17, 18, 18, 20, 20, 20, 20, 22, 23, 23, 23, 23, 24, 24, 24, 25, 25, 28, 28, 30, 30, 30, 34, 35, 35, 37, 38, 38]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 7 * [10, 11, 13, 14, 16, 17, 17, 18, 18, 20, 20, 20, 20, 22, 23, 23, 23, 23, 24, 24, 24, 25, 25, 28, 28, 30, 30, 30, 34, 35, 35, 37, 38, 38]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 10 * [11, 13, 14, 16, 17, 17, 18, 18, 20, 20, 20, 20, 22, 23, 23, 23, 23, 24, 24, 24, 25, 25, 28, 28, 30, 30, 30, 34, 35, 35, 37, 38, 38]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 11 * [13, 14, 16, 17, 17, 18, 18, 20, 20, 20, 20, 22, 23, 23, 23, 23, 24, 24, 24, 25, 25, 28, 28, 30, 30, 30, 34, 35, 35, 37, 38, 38]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 13 * [14, 16, 17, 17, 18, 18, 20, 20, 20, 20, 22, 23, 23, 23, 23, 24, 24, 24, 25, 25, 28, 28, 30, 30, 30, 34, 35, 35, 37, 38, 38]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 14 * [16, 17, 17, 18, 18, 20, 20, 20, 20, 22, 23, 23, 23, 23, 24, 24, 24, 25, 25, 28, 28, 30, 30, 30, 34, 35, 35, 37, 38, 38]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 16 * [17, 17, 18, 18, 20, 20, 20, 20, 22, 23, 23, 23, 23, 24, 24, 24, 25, 25, 28, 28, 30, 30, 30, 34, 35, 35, 37, 38, 38]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 17 * [17, 18, 18, 20, 20, 20, 20, 22, 23, 23, 23, 23, 24, 24, 24, 25, 25, 28, 28, 30, 30, 30, 34, 35, 35, 37, 38, 38]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [18, 18, 20, 20, 20, 20, 22, 23, 23, 23, 23, 24, 24, 24, 25, 25, 28, 28, 30, 30, 30, 34, 35, 35, 37, 38, 38]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [18, 20, 20, 20, 20, 22, 23, 23, 23, 23, 24, 24, 24, 25, 25, 28, 28, 30, 30, 30, 34, 35, 35, 37, 38, 38]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [20, 20, 20, 20, 22, 23, 23, 23, 23, 24, 24, 24, 25, 25, 28, 28, 30, 30, 30, 34, 35, 35, 37, 38, 38]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 20, 22, 23, 23, 23, 23, 24, 24, 24, 25, 25, 28, 28, 30, 30, 30, 34, 35, 35, 37, 38, 38]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 22, 23, 23, 23, 23, 24, 24, 24, 25, 25, 28, 28, 30, 30, 30, 34, 35, 35, 37, 38, 38]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 22, 23, 23, 23, 23, 24, 24, 24, 25, 25, 28, 28, 30, 30, 30, 34, 35, 35, 37, 38, 38]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [22, 23, 23, 23, 23, 24, 24, 24, 25, 25, 28, 28, 30, 30, 30, 34, 35, 35, 37, 38, 38]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 22 * [23, 23, 23, 23, 24, 24, 24, 25, 25, 28, 28, 30, 30, 30, 34, 35, 35, 37, 38, 38]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [23, 23, 23, 24, 24, 24, 25, 25, 28, 28, 30, 30, 30, 34, 35, 35, 37, 38, 38]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [23, 23, 24, 24, 24, 25, 25, 28, 28, 30, 30, 30, 34, 35, 35, 37, 38, 38]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [23, 24, 24, 24, 25, 25, 28, 28, 30, 30, 30, 34, 35, 35, 37, 38, 38]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [24, 24, 24, 25, 25, 28, 28, 30, 30, 30, 34, 35, 35, 37, 38, 38]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [24, 24, 25, 25, 28, 28, 30, 30, 30, 34, 35, 35, 37, 38, 38]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [24, 25, 25, 28, 28, 30, 30, 30, 34, 35, 35, 37, 38, 38]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [25, 25, 28, 28, 30, 30, 30, 34, 35, 35, 37, 38, 38]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [25, 28, 28, 30, 30, 30, 34, 35, 35, 37, 38, 38]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [28, 28, 30, 30, 30, 34, 35, 35, 37, 38, 38]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 28 * [28, 30, 30, 30, 34, 35, 35, 37, 38, 38]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [30, 30, 30, 34, 35, 35, 37, 38, 38]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 30 * [30, 30, 34, 35, 35, 37, 38, 38]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [30, 34, 35, 35, 37, 38, 38]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [34, 35, 35, 37, 38, 38]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 37, 38, 38]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 37, 38, 38]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [37, 38, 38]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 37 * [38, 38]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * []*)
assert(element = 38);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST46----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 8 q1;;   (* [8]*)
assert(is_empty q1 = false);;   (*[8]*)
let q1 = add 26 q1;;   (* [8, 26]*)
let (element, q1) = delete_min q1;;   (* 8 * [26]*)
assert(element = 8);;
assert(is_empty q1 = false);;   (*[26]*)
let q1 = add 19 q1;;   (* [19, 26]*)
assert(is_empty q1 = false);;   (*[19, 26]*)
let q1 = add 20 q1;;   (* [19, 20, 26]*)
let q1 = add 25 q1;;   (* [19, 20, 25, 26]*)
let q1 = add 19 q1;;   (* [19, 19, 20, 25, 26]*)
let q1 = add 32 q1;;   (* [19, 19, 20, 25, 26, 32]*)
let (element, q1) = delete_min q1;;   (* 19 * [19, 20, 25, 26, 32]*)
assert(element = 19);;
let q1 = add 9 q1;;   (* [9, 19, 20, 25, 26, 32]*)
let q1 = add 33 q1;;   (* [9, 19, 20, 25, 26, 32, 33]*)
assert(is_empty q1 = false);;   (*[9, 19, 20, 25, 26, 32, 33]*)
let q1 = add 19 q1;;   (* [9, 19, 19, 20, 25, 26, 32, 33]*)
let (element, q1) = delete_min q1;;   (* 9 * [19, 19, 20, 25, 26, 32, 33]*)
assert(element = 9);;
let q1 = add 7 q1;;   (* [7, 19, 19, 20, 25, 26, 32, 33]*)
let (element, q1) = delete_min q1;;   (* 7 * [19, 19, 20, 25, 26, 32, 33]*)
assert(element = 7);;
let q1 = add 11 q1;;   (* [11, 19, 19, 20, 25, 26, 32, 33]*)
let q1 = add 15 q1;;   (* [11, 15, 19, 19, 20, 25, 26, 32, 33]*)
let q1 = add 8 q1;;   (* [8, 11, 15, 19, 19, 20, 25, 26, 32, 33]*)
let q1 = add 19 q1;;   (* [8, 11, 15, 19, 19, 19, 20, 25, 26, 32, 33]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 37 q2;;   (* [37]*)
let q2 = add 9 q2;;   (* [9, 37]*)
let q2 = add 3 q2;;   (* [3, 9, 37]*)
let q2 = add 24 q2;;   (* [3, 9, 24, 37]*)
let (element, q2) = delete_min q2;;   (* 3 * [9, 24, 37]*)
assert(element = 3);;
let q2 = add 10 q2;;   (* [9, 10, 24, 37]*)
let q2 = add 36 q2;;   (* [9, 10, 24, 36, 37]*)
let q2 = add 34 q2;;   (* [9, 10, 24, 34, 36, 37]*)
let q2 = add 36 q2;;   (* [9, 10, 24, 34, 36, 36, 37]*)
let (element, q2) = delete_min q2;;   (* 9 * [10, 24, 34, 36, 36, 37]*)
assert(element = 9);;
let q2 = add 12 q2;;   (* [10, 12, 24, 34, 36, 36, 37]*)
assert(is_empty q2 = false);;   (*[10, 12, 24, 34, 36, 36, 37]*)
let (element, q2) = delete_min q2;;   (* 10 * [12, 24, 34, 36, 36, 37]*)
assert(element = 10);;
assert(is_empty q2 = false);;   (*[12, 24, 34, 36, 36, 37]*)
let q2 = add 8 q2;;   (* [8, 12, 24, 34, 36, 36, 37]*)
let q2 = add 35 q2;;   (* [8, 12, 24, 34, 35, 36, 36, 37]*)
let (element, q2) = delete_min q2;;   (* 8 * [12, 24, 34, 35, 36, 36, 37]*)
assert(element = 8);;
let q2 = add 12 q2;;   (* [12, 12, 24, 34, 35, 36, 36, 37]*)
let (element, q2) = delete_min q2;;   (* 12 * [12, 24, 34, 35, 36, 36, 37]*)
assert(element = 12);;
assert(is_empty q2 = false);;   (*[12, 24, 34, 35, 36, 36, 37]*)
let q2 = add 3 q2;;   (* [3, 12, 24, 34, 35, 36, 36, 37]*)
let (element, q2) = delete_min q2;;   (* 3 * [12, 24, 34, 35, 36, 36, 37]*)
assert(element = 3);;
assert(is_empty q2 = false);;   (*[12, 24, 34, 35, 36, 36, 37]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 23 q3;;   (* [23]*)
let q3 = add 31 q3;;   (* [23, 31]*)
let q3 = add 13 q3;;   (* [13, 23, 31]*)
let q3 = add 19 q3;;   (* [13, 19, 23, 31]*)
let (element, q3) = delete_min q3;;   (* 13 * [19, 23, 31]*)
assert(element = 13);;
let (element, q3) = delete_min q3;;   (* 19 * [23, 31]*)
assert(element = 19);;
let (element, q3) = delete_min q3;;   (* 23 * [31]*)
assert(element = 23);;
let (element, q3) = delete_min q3;;   (* 31 * []*)
assert(element = 31);;
let q3 = add 29 q3;;   (* [29]*)
let (element, q3) = delete_min q3;;   (* 29 * []*)
assert(element = 29);;
let q3 = add 4 q3;;   (* [4]*)
let (element, q3) = delete_min q3;;   (* 4 * []*)
assert(element = 4);;
let q3 = add 20 q3;;   (* [20]*)
let q3 = add 5 q3;;   (* [5, 20]*)
let (element, q3) = delete_min q3;;   (* 5 * [20]*)
assert(element = 5);;
let (element, q3) = delete_min q3;;   (* 20 * []*)
assert(element = 20);;
let q3 = add 0 q3;;   (* [0]*)
let q3 = add 30 q3;;   (* [0, 30]*)
let (element, q3) = delete_min q3;;   (* 0 * [30]*)
assert(element = 0);;
let q3 = add 36 q3;;   (* [30, 36]*)
let q3 = add 16 q3;;   (* [16, 30, 36]*)
assert(is_empty q3 = false);;   (*[16, 30, 36]*)
let (element, q3) = delete_min q3;;   (* 16 * [30, 36]*)
assert(element = 16);;

(* -------q4------ *)
let q4 = empty;;
let q4 = add 23 q4;;   (* [23]*)
let (element, q4) = delete_min q4;;   (* 23 * []*)
assert(element = 23);;
let q4 = add 29 q4;;   (* [29]*)
let q4 = add 23 q4;;   (* [23, 29]*)
let q4 = add 27 q4;;   (* [23, 27, 29]*)
let q4 = add 5 q4;;   (* [5, 23, 27, 29]*)
let (element, q4) = delete_min q4;;   (* 5 * [23, 27, 29]*)
assert(element = 5);;
let q4 = add 19 q4;;   (* [19, 23, 27, 29]*)
let (element, q4) = delete_min q4;;   (* 19 * [23, 27, 29]*)
assert(element = 19);;
let (element, q4) = delete_min q4;;   (* 23 * [27, 29]*)
assert(element = 23);;
let q4 = add 5 q4;;   (* [5, 27, 29]*)
let (element, q4) = delete_min q4;;   (* 5 * [27, 29]*)
assert(element = 5);;
let (element, q4) = delete_min q4;;   (* 27 * [29]*)
assert(element = 27);;
let (element, q4) = delete_min q4;;   (* 29 * []*)
assert(element = 29);;
let q4 = add 6 q4;;   (* [6]*)
let q4 = add 31 q4;;   (* [6, 31]*)
let q4 = add 6 q4;;   (* [6, 6, 31]*)
let q4 = add 16 q4;;   (* [6, 6, 16, 31]*)
let q4 = add 17 q4;;   (* [6, 6, 16, 17, 31]*)
let q4 = add 23 q4;;   (* [6, 6, 16, 17, 23, 31]*)
let q4 = add 4 q4;;   (* [4, 6, 6, 16, 17, 23, 31]*)
let q4 = add 15 q4;;   (* [4, 6, 6, 15, 16, 17, 23, 31]*)
let q4 = add 2 q4;;   (* [2, 4, 6, 6, 15, 16, 17, 23, 31]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;   (*[2, 4, 6, 6, 8, 11, 12, 15, 15, 16, 17, 19, 19, 19, 20, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 36, 36]*)
let (element, q) = delete_min q;;   (* 2 * [4, 6, 6, 8, 11, 12, 15, 15, 16, 17, 19, 19, 19, 20, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 36, 36, 37]*)
assert(element = 2);;
let (element, q) = delete_min q;;   (* 4 * [6, 6, 8, 11, 12, 15, 15, 16, 17, 19, 19, 19, 20, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 36, 36, 37]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 6 * [6, 8, 11, 12, 15, 15, 16, 17, 19, 19, 19, 20, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 36, 36, 37]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 6 * [8, 11, 12, 15, 15, 16, 17, 19, 19, 19, 20, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 36, 36, 37]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 8 * [11, 12, 15, 15, 16, 17, 19, 19, 19, 20, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 36, 36, 37]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 11 * [12, 15, 15, 16, 17, 19, 19, 19, 20, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 36, 36, 37]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 12 * [15, 15, 16, 17, 19, 19, 19, 20, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 36, 36, 37]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 15 * [15, 16, 17, 19, 19, 19, 20, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 36, 36, 37]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [16, 17, 19, 19, 19, 20, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 36, 36, 37]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [17, 19, 19, 19, 20, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 36, 36, 37]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 17 * [19, 19, 19, 20, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 36, 36, 37]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 19 * [19, 19, 20, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 36, 36, 37]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [19, 20, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 36, 36, 37]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [20, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 36, 36, 37]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 36, 36, 37]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 23 * [24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 36, 36, 37]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [25, 26, 30, 31, 32, 33, 34, 35, 36, 36, 36, 37]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [26, 30, 31, 32, 33, 34, 35, 36, 36, 36, 37]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [30, 31, 32, 33, 34, 35, 36, 36, 36, 37]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 30 * [31, 32, 33, 34, 35, 36, 36, 36, 37]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [32, 33, 34, 35, 36, 36, 36, 37]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [33, 34, 35, 36, 36, 36, 37]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [34, 35, 36, 36, 36, 37]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [35, 36, 36, 36, 37]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 36, 37]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 37]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 37]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * []*)
assert(element = 37);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST47----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 3 q1;;   (* [3]*)
let q1 = add 24 q1;;   (* [3, 24]*)
let q1 = add 35 q1;;   (* [3, 24, 35]*)
let q1 = add 1 q1;;   (* [1, 3, 24, 35]*)
let (element, q1) = delete_min q1;;   (* 1 * [3, 24, 35]*)
assert(element = 1);;
let q1 = add 2 q1;;   (* [2, 3, 24, 35]*)
let q1 = add 6 q1;;   (* [2, 3, 6, 24, 35]*)
let (element, q1) = delete_min q1;;   (* 2 * [3, 6, 24, 35]*)
assert(element = 2);;
let q1 = add 16 q1;;   (* [3, 6, 16, 24, 35]*)
let (element, q1) = delete_min q1;;   (* 3 * [6, 16, 24, 35]*)
assert(element = 3);;
let (element, q1) = delete_min q1;;   (* 6 * [16, 24, 35]*)
assert(element = 6);;
let (element, q1) = delete_min q1;;   (* 16 * [24, 35]*)
assert(element = 16);;
let q1 = add 34 q1;;   (* [24, 34, 35]*)
let q1 = add 1 q1;;   (* [1, 24, 34, 35]*)
let (element, q1) = delete_min q1;;   (* 1 * [24, 34, 35]*)
assert(element = 1);;
let q1 = add 9 q1;;   (* [9, 24, 34, 35]*)
let (element, q1) = delete_min q1;;   (* 9 * [24, 34, 35]*)
assert(element = 9);;
let q1 = add 0 q1;;   (* [0, 24, 34, 35]*)
let q1 = add 39 q1;;   (* [0, 24, 34, 35, 39]*)
let (element, q1) = delete_min q1;;   (* 0 * [24, 34, 35, 39]*)
assert(element = 0);;
let (element, q1) = delete_min q1;;   (* 24 * [34, 35, 39]*)
assert(element = 24);;
let (element, q1) = delete_min q1;;   (* 34 * [35, 39]*)
assert(element = 34);;
let (element, q1) = delete_min q1;;   (* 35 * [39]*)
assert(element = 35);;
assert(is_empty q1 = false);;   (*[39]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 22 q2;;   (* [22]*)
let (element, q2) = delete_min q2;;   (* 22 * []*)
assert(element = 22);;
let q2 = add 30 q2;;   (* [30]*)
let q2 = add 18 q2;;   (* [18, 30]*)
let q2 = add 17 q2;;   (* [17, 18, 30]*)
let (element, q2) = delete_min q2;;   (* 17 * [18, 30]*)
assert(element = 17);;
let q2 = add 17 q2;;   (* [17, 18, 30]*)
let (element, q2) = delete_min q2;;   (* 17 * [18, 30]*)
assert(element = 17);;
assert(is_empty q2 = false);;   (*[18, 30]*)
let q2 = add 9 q2;;   (* [9, 18, 30]*)
let q2 = add 34 q2;;   (* [9, 18, 30, 34]*)
let (element, q2) = delete_min q2;;   (* 9 * [18, 30, 34]*)
assert(element = 9);;
let (element, q2) = delete_min q2;;   (* 18 * [30, 34]*)
assert(element = 18);;
let q2 = add 30 q2;;   (* [30, 30, 34]*)
let q2 = add 30 q2;;   (* [30, 30, 30, 34]*)
let (element, q2) = delete_min q2;;   (* 30 * [30, 30, 34]*)
assert(element = 30);;
let q2 = add 10 q2;;   (* [10, 30, 30, 34]*)
let q2 = add 34 q2;;   (* [10, 30, 30, 34, 34]*)
let q2 = add 22 q2;;   (* [10, 22, 30, 30, 34, 34]*)
let q2 = add 32 q2;;   (* [10, 22, 30, 30, 32, 34, 34]*)
let q2 = add 32 q2;;   (* [10, 22, 30, 30, 32, 32, 34, 34]*)
let (element, q2) = delete_min q2;;   (* 10 * [22, 30, 30, 32, 32, 34, 34]*)
assert(element = 10);;
let q2 = add 15 q2;;   (* [15, 22, 30, 30, 32, 32, 34, 34]*)
let q2 = add 29 q2;;   (* [15, 22, 29, 30, 30, 32, 32, 34, 34]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 4 q3;;   (* [4]*)
let (element, q3) = delete_min q3;;   (* 4 * []*)
assert(element = 4);;
let q3 = add 28 q3;;   (* [28]*)
let q3 = add 35 q3;;   (* [28, 35]*)
let q3 = add 3 q3;;   (* [3, 28, 35]*)
let q3 = add 14 q3;;   (* [3, 14, 28, 35]*)
let (element, q3) = delete_min q3;;   (* 3 * [14, 28, 35]*)
assert(element = 3);;
let q3 = add 11 q3;;   (* [11, 14, 28, 35]*)
let q3 = add 22 q3;;   (* [11, 14, 22, 28, 35]*)
let (element, q3) = delete_min q3;;   (* 11 * [14, 22, 28, 35]*)
assert(element = 11);;
let (element, q3) = delete_min q3;;   (* 14 * [22, 28, 35]*)
assert(element = 14);;
let q3 = add 34 q3;;   (* [22, 28, 34, 35]*)
let q3 = add 15 q3;;   (* [15, 22, 28, 34, 35]*)
let q3 = add 35 q3;;   (* [15, 22, 28, 34, 35, 35]*)
let (element, q3) = delete_min q3;;   (* 15 * [22, 28, 34, 35, 35]*)
assert(element = 15);;
assert(is_empty q3 = false);;   (*[22, 28, 34, 35, 35]*)
let q3 = add 38 q3;;   (* [22, 28, 34, 35, 35, 38]*)
let q3 = add 8 q3;;   (* [8, 22, 28, 34, 35, 35, 38]*)
let (element, q3) = delete_min q3;;   (* 8 * [22, 28, 34, 35, 35, 38]*)
assert(element = 8);;
let q3 = add 34 q3;;   (* [22, 28, 34, 34, 35, 35, 38]*)
let q3 = add 22 q3;;   (* [22, 22, 28, 34, 34, 35, 35, 38]*)
let q3 = add 8 q3;;   (* [8, 22, 22, 28, 34, 34, 35, 35, 38]*)
let (element, q3) = delete_min q3;;   (* 8 * [22, 22, 28, 34, 34, 35, 35, 38]*)
assert(element = 8);;
let (element, q3) = delete_min q3;;   (* 22 * [22, 28, 34, 34, 35, 35, 38]*)
assert(element = 22);;

(* -------q4------ *)
let q4 = empty;;
let q4 = add 28 q4;;   (* [28]*)
let q4 = add 0 q4;;   (* [0, 28]*)
let (element, q4) = delete_min q4;;   (* 0 * [28]*)
assert(element = 0);;
let q4 = add 24 q4;;   (* [24, 28]*)
let q4 = add 14 q4;;   (* [14, 24, 28]*)
let (element, q4) = delete_min q4;;   (* 14 * [24, 28]*)
assert(element = 14);;
let q4 = add 7 q4;;   (* [7, 24, 28]*)
let (element, q4) = delete_min q4;;   (* 7 * [24, 28]*)
assert(element = 7);;
let q4 = add 38 q4;;   (* [24, 28, 38]*)
let q4 = add 9 q4;;   (* [9, 24, 28, 38]*)
let q4 = add 17 q4;;   (* [9, 17, 24, 28, 38]*)
let q4 = add 17 q4;;   (* [9, 17, 17, 24, 28, 38]*)
let (element, q4) = delete_min q4;;   (* 9 * [17, 17, 24, 28, 38]*)
assert(element = 9);;
let (element, q4) = delete_min q4;;   (* 17 * [17, 24, 28, 38]*)
assert(element = 17);;
let q4 = add 33 q4;;   (* [17, 24, 28, 33, 38]*)
let (element, q4) = delete_min q4;;   (* 17 * [24, 28, 33, 38]*)
assert(element = 17);;
let q4 = add 12 q4;;   (* [12, 24, 28, 33, 38]*)
let q4 = add 38 q4;;   (* [12, 24, 28, 33, 38, 38]*)
let q4 = add 0 q4;;   (* [0, 12, 24, 28, 33, 38, 38]*)
let q4 = add 33 q4;;   (* [0, 12, 24, 28, 33, 33, 38, 38]*)
let q4 = add 3 q4;;   (* [0, 3, 12, 24, 28, 33, 33, 38, 38]*)
let q4 = add 16 q4;;   (* [0, 3, 12, 16, 24, 28, 33, 33, 38, 38]*)
assert(is_empty q4 = false);;   (*[0, 3, 12, 16, 24, 28, 33, 33, 38, 38]*)
let q4 = add 15 q4;;   (* [0, 3, 12, 15, 16, 24, 28, 33, 33, 38, 38]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;   (*[0, 3, 12, 15, 15, 16, 22, 22, 24, 28, 28, 29, 30, 30, 32, 32, 33, 33, 34, 34, 34, 34, 35, 35, 38, 38, 38]*)
let (element, q) = delete_min q;;   (* 0 * [3, 12, 15, 15, 16, 22, 22, 24, 28, 28, 29, 30, 30, 32, 32, 33, 33, 34, 34, 34, 34, 35, 35, 38, 38, 38, 39]*)
assert(element = 0);;
let (element, q) = delete_min q;;   (* 3 * [12, 15, 15, 16, 22, 22, 24, 28, 28, 29, 30, 30, 32, 32, 33, 33, 34, 34, 34, 34, 35, 35, 38, 38, 38, 39]*)
assert(element = 3);;
let (element, q) = delete_min q;;   (* 12 * [15, 15, 16, 22, 22, 24, 28, 28, 29, 30, 30, 32, 32, 33, 33, 34, 34, 34, 34, 35, 35, 38, 38, 38, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 15 * [15, 16, 22, 22, 24, 28, 28, 29, 30, 30, 32, 32, 33, 33, 34, 34, 34, 34, 35, 35, 38, 38, 38, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [16, 22, 22, 24, 28, 28, 29, 30, 30, 32, 32, 33, 33, 34, 34, 34, 34, 35, 35, 38, 38, 38, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [22, 22, 24, 28, 28, 29, 30, 30, 32, 32, 33, 33, 34, 34, 34, 34, 35, 35, 38, 38, 38, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 22 * [22, 24, 28, 28, 29, 30, 30, 32, 32, 33, 33, 34, 34, 34, 34, 35, 35, 38, 38, 38, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [24, 28, 28, 29, 30, 30, 32, 32, 33, 33, 34, 34, 34, 34, 35, 35, 38, 38, 38, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 24 * [28, 28, 29, 30, 30, 32, 32, 33, 33, 34, 34, 34, 34, 35, 35, 38, 38, 38, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 28 * [28, 29, 30, 30, 32, 32, 33, 33, 34, 34, 34, 34, 35, 35, 38, 38, 38, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [29, 30, 30, 32, 32, 33, 33, 34, 34, 34, 34, 35, 35, 38, 38, 38, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [30, 30, 32, 32, 33, 33, 34, 34, 34, 34, 35, 35, 38, 38, 38, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [30, 32, 32, 33, 33, 34, 34, 34, 34, 35, 35, 38, 38, 38, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [32, 32, 33, 33, 34, 34, 34, 34, 35, 35, 38, 38, 38, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 33, 34, 34, 34, 34, 35, 35, 38, 38, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 33, 34, 34, 34, 34, 35, 35, 38, 38, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [33, 34, 34, 34, 34, 35, 35, 38, 38, 38, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [34, 34, 34, 34, 35, 35, 38, 38, 38, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 34, 35, 35, 38, 38, 38, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 35, 35, 38, 38, 38, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 35, 38, 38, 38, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 38, 38, 38, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 38, 38, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [38, 38, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST48----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 34 q1;;   (* [34]*)
let q1 = add 34 q1;;   (* [34, 34]*)
assert(is_empty q1 = false);;   (*[34, 34]*)
let q1 = add 19 q1;;   (* [19, 34, 34]*)
assert(is_empty q1 = false);;   (*[19, 34, 34]*)
let q1 = add 16 q1;;   (* [16, 19, 34, 34]*)
let (element, q1) = delete_min q1;;   (* 16 * [19, 34, 34]*)
assert(element = 16);;
let q1 = add 4 q1;;   (* [4, 19, 34, 34]*)
let q1 = add 5 q1;;   (* [4, 5, 19, 34, 34]*)
let (element, q1) = delete_min q1;;   (* 4 * [5, 19, 34, 34]*)
assert(element = 4);;
let q1 = add 10 q1;;   (* [5, 10, 19, 34, 34]*)
let (element, q1) = delete_min q1;;   (* 5 * [10, 19, 34, 34]*)
assert(element = 5);;
let q1 = add 1 q1;;   (* [1, 10, 19, 34, 34]*)
let (element, q1) = delete_min q1;;   (* 1 * [10, 19, 34, 34]*)
assert(element = 1);;
let q1 = add 14 q1;;   (* [10, 14, 19, 34, 34]*)
let q1 = add 21 q1;;   (* [10, 14, 19, 21, 34, 34]*)
let q1 = add 11 q1;;   (* [10, 11, 14, 19, 21, 34, 34]*)
let q1 = add 21 q1;;   (* [10, 11, 14, 19, 21, 21, 34, 34]*)
let q1 = add 39 q1;;   (* [10, 11, 14, 19, 21, 21, 34, 34, 39]*)
let (element, q1) = delete_min q1;;   (* 10 * [11, 14, 19, 21, 21, 34, 34, 39]*)
assert(element = 10);;
let q1 = add 38 q1;;   (* [11, 14, 19, 21, 21, 34, 34, 38, 39]*)
let (element, q1) = delete_min q1;;   (* 11 * [14, 19, 21, 21, 34, 34, 38, 39]*)
assert(element = 11);;
let q1 = add 11 q1;;   (* [11, 14, 19, 21, 21, 34, 34, 38, 39]*)
let q1 = add 2 q1;;   (* [2, 11, 14, 19, 21, 21, 34, 34, 38, 39]*)
let q1 = add 29 q1;;   (* [2, 11, 14, 19, 21, 21, 29, 34, 34, 38, 39]*)

(* -------q2------ *)
let q2 = empty;;
assert(is_empty q2 = true);;   (*[]*)
let q2 = add 34 q2;;   (* [34]*)
assert(is_empty q2 = false);;   (*[34]*)
let (element, q2) = delete_min q2;;   (* 34 * []*)
assert(element = 34);;
let q2 = add 25 q2;;   (* [25]*)
let (element, q2) = delete_min q2;;   (* 25 * []*)
assert(element = 25);;
let q2 = add 14 q2;;   (* [14]*)
let q2 = add 9 q2;;   (* [9, 14]*)
let (element, q2) = delete_min q2;;   (* 9 * [14]*)
assert(element = 9);;
let q2 = add 20 q2;;   (* [14, 20]*)
let (element, q2) = delete_min q2;;   (* 14 * [20]*)
assert(element = 14);;
let q2 = add 12 q2;;   (* [12, 20]*)
let q2 = add 39 q2;;   (* [12, 20, 39]*)
let q2 = add 19 q2;;   (* [12, 19, 20, 39]*)
assert(is_empty q2 = false);;   (*[12, 19, 20, 39]*)
let (element, q2) = delete_min q2;;   (* 12 * [19, 20, 39]*)
assert(element = 12);;
let q2 = add 25 q2;;   (* [19, 20, 25, 39]*)
let (element, q2) = delete_min q2;;   (* 19 * [20, 25, 39]*)
assert(element = 19);;
let q2 = add 28 q2;;   (* [20, 25, 28, 39]*)
assert(is_empty q2 = false);;   (*[20, 25, 28, 39]*)
let q2 = add 24 q2;;   (* [20, 24, 25, 28, 39]*)
let q2 = add 19 q2;;   (* [19, 20, 24, 25, 28, 39]*)
let (element, q2) = delete_min q2;;   (* 19 * [20, 24, 25, 28, 39]*)
assert(element = 19);;
assert(is_empty q2 = false);;   (*[20, 24, 25, 28, 39]*)
assert(is_empty q2 = false);;   (*[20, 24, 25, 28, 39]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 15 q3;;   (* [15]*)
let q3 = add 27 q3;;   (* [15, 27]*)
let q3 = add 38 q3;;   (* [15, 27, 38]*)
let q3 = add 13 q3;;   (* [13, 15, 27, 38]*)
let (element, q3) = delete_min q3;;   (* 13 * [15, 27, 38]*)
assert(element = 13);;
let (element, q3) = delete_min q3;;   (* 15 * [27, 38]*)
assert(element = 15);;
let q3 = add 34 q3;;   (* [27, 34, 38]*)
let q3 = add 5 q3;;   (* [5, 27, 34, 38]*)
let (element, q3) = delete_min q3;;   (* 5 * [27, 34, 38]*)
assert(element = 5);;
let q3 = add 19 q3;;   (* [19, 27, 34, 38]*)
assert(is_empty q3 = false);;   (*[19, 27, 34, 38]*)
assert(is_empty q3 = false);;   (*[19, 27, 34, 38]*)
let q3 = add 19 q3;;   (* [19, 19, 27, 34, 38]*)
let (element, q3) = delete_min q3;;   (* 19 * [19, 27, 34, 38]*)
assert(element = 19);;
let q3 = add 35 q3;;   (* [19, 27, 34, 35, 38]*)
let (element, q3) = delete_min q3;;   (* 19 * [27, 34, 35, 38]*)
assert(element = 19);;
assert(is_empty q3 = false);;   (*[27, 34, 35, 38]*)
let q3 = add 24 q3;;   (* [24, 27, 34, 35, 38]*)
let q3 = add 17 q3;;   (* [17, 24, 27, 34, 35, 38]*)
let q3 = add 10 q3;;   (* [10, 17, 24, 27, 34, 35, 38]*)
let (element, q3) = delete_min q3;;   (* 10 * [17, 24, 27, 34, 35, 38]*)
assert(element = 10);;
let q3 = add 2 q3;;   (* [2, 17, 24, 27, 34, 35, 38]*)
assert(is_empty q3 = false);;   (*[2, 17, 24, 27, 34, 35, 38]*)
assert(is_empty q3 = false);;   (*[2, 17, 24, 27, 34, 35, 38]*)
let q3 = add 18 q3;;   (* [2, 17, 18, 24, 27, 34, 35, 38]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 30 q4;;   (* [30]*)
let q4 = add 12 q4;;   (* [12, 30]*)
let q4 = add 7 q4;;   (* [7, 12, 30]*)
let q4 = add 31 q4;;   (* [7, 12, 30, 31]*)
let (element, q4) = delete_min q4;;   (* 7 * [12, 30, 31]*)
assert(element = 7);;
let (element, q4) = delete_min q4;;   (* 12 * [30, 31]*)
assert(element = 12);;
let q4 = add 3 q4;;   (* [3, 30, 31]*)
let q4 = add 26 q4;;   (* [3, 26, 30, 31]*)
let q4 = add 25 q4;;   (* [3, 25, 26, 30, 31]*)
let q4 = add 37 q4;;   (* [3, 25, 26, 30, 31, 37]*)
let q4 = add 7 q4;;   (* [3, 7, 25, 26, 30, 31, 37]*)
let (element, q4) = delete_min q4;;   (* 3 * [7, 25, 26, 30, 31, 37]*)
assert(element = 3);;
let q4 = add 32 q4;;   (* [7, 25, 26, 30, 31, 32, 37]*)
let q4 = add 39 q4;;   (* [7, 25, 26, 30, 31, 32, 37, 39]*)
let (element, q4) = delete_min q4;;   (* 7 * [25, 26, 30, 31, 32, 37, 39]*)
assert(element = 7);;
assert(is_empty q4 = false);;   (*[25, 26, 30, 31, 32, 37, 39]*)
assert(is_empty q4 = false);;   (*[25, 26, 30, 31, 32, 37, 39]*)
assert(is_empty q4 = false);;   (*[25, 26, 30, 31, 32, 37, 39]*)
assert(is_empty q4 = false);;   (*[25, 26, 30, 31, 32, 37, 39]*)
let q4 = add 33 q4;;   (* [25, 26, 30, 31, 32, 33, 37, 39]*)
let q4 = add 18 q4;;   (* [18, 25, 26, 30, 31, 32, 33, 37, 39]*)
let q4 = add 25 q4;;   (* [18, 25, 25, 26, 30, 31, 32, 33, 37, 39]*)
let q4 = add 35 q4;;   (* [18, 25, 25, 26, 30, 31, 32, 33, 35, 37, 39]*)
let q4 = add 31 q4;;   (* [18, 25, 25, 26, 30, 31, 31, 32, 33, 35, 37, 39]*)
let q4 = add 32 q4;;   (* [18, 25, 25, 26, 30, 31, 31, 32, 32, 33, 35, 37, 39]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;   (*[2, 2, 11, 14, 17, 18, 18, 19, 20, 21, 21, 24, 24, 25, 25, 25, 26, 27, 28, 29, 30, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 37, 38, 38, 39, 39]*)
let (element, q) = delete_min q;;   (* 2 * [2, 11, 14, 17, 18, 18, 19, 20, 21, 21, 24, 24, 25, 25, 25, 26, 27, 28, 29, 30, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 37, 38, 38, 39, 39, 39]*)
assert(element = 2);;
let (element, q) = delete_min q;;   (* 2 * [11, 14, 17, 18, 18, 19, 20, 21, 21, 24, 24, 25, 25, 25, 26, 27, 28, 29, 30, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 37, 38, 38, 39, 39, 39]*)
assert(element = 2);;
let (element, q) = delete_min q;;   (* 11 * [14, 17, 18, 18, 19, 20, 21, 21, 24, 24, 25, 25, 25, 26, 27, 28, 29, 30, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 37, 38, 38, 39, 39, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 14 * [17, 18, 18, 19, 20, 21, 21, 24, 24, 25, 25, 25, 26, 27, 28, 29, 30, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 37, 38, 38, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 17 * [18, 18, 19, 20, 21, 21, 24, 24, 25, 25, 25, 26, 27, 28, 29, 30, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 37, 38, 38, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [18, 19, 20, 21, 21, 24, 24, 25, 25, 25, 26, 27, 28, 29, 30, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 37, 38, 38, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [19, 20, 21, 21, 24, 24, 25, 25, 25, 26, 27, 28, 29, 30, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 37, 38, 38, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [20, 21, 21, 24, 24, 25, 25, 25, 26, 27, 28, 29, 30, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 37, 38, 38, 39, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [21, 21, 24, 24, 25, 25, 25, 26, 27, 28, 29, 30, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 37, 38, 38, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [21, 24, 24, 25, 25, 25, 26, 27, 28, 29, 30, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 37, 38, 38, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [24, 24, 25, 25, 25, 26, 27, 28, 29, 30, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 37, 38, 38, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 24 * [24, 25, 25, 25, 26, 27, 28, 29, 30, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 37, 38, 38, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [25, 25, 25, 26, 27, 28, 29, 30, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 37, 38, 38, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [25, 25, 26, 27, 28, 29, 30, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 37, 38, 38, 39, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [25, 26, 27, 28, 29, 30, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 37, 38, 38, 39, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [26, 27, 28, 29, 30, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 37, 38, 38, 39, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [27, 28, 29, 30, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 37, 38, 38, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [28, 29, 30, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 37, 38, 38, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [29, 30, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 37, 38, 38, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [30, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 37, 38, 38, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 37, 38, 38, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 32, 32, 33, 34, 34, 34, 35, 35, 37, 38, 38, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 33, 34, 34, 34, 35, 35, 37, 38, 38, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 34, 34, 34, 35, 35, 37, 38, 38, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 34, 34, 34, 35, 35, 37, 38, 38, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [34, 34, 34, 35, 35, 37, 38, 38, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 35, 35, 37, 38, 38, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 35, 37, 38, 38, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 37, 38, 38, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 37, 38, 38, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [37, 38, 38, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 37 * [38, 38, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST49----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 3 q1;;   (* [3]*)
let q1 = add 30 q1;;   (* [3, 30]*)
assert(is_empty q1 = false);;   (*[3, 30]*)
let q1 = add 31 q1;;   (* [3, 30, 31]*)
let (element, q1) = delete_min q1;;   (* 3 * [30, 31]*)
assert(element = 3);;
assert(is_empty q1 = false);;   (*[30, 31]*)
let q1 = add 13 q1;;   (* [13, 30, 31]*)
assert(is_empty q1 = false);;   (*[13, 30, 31]*)
let (element, q1) = delete_min q1;;   (* 13 * [30, 31]*)
assert(element = 13);;
let q1 = add 12 q1;;   (* [12, 30, 31]*)
let q1 = add 1 q1;;   (* [1, 12, 30, 31]*)
let q1 = add 6 q1;;   (* [1, 6, 12, 30, 31]*)
let q1 = add 14 q1;;   (* [1, 6, 12, 14, 30, 31]*)
let q1 = add 8 q1;;   (* [1, 6, 8, 12, 14, 30, 31]*)
let q1 = add 16 q1;;   (* [1, 6, 8, 12, 14, 16, 30, 31]*)
let q1 = add 0 q1;;   (* [0, 1, 6, 8, 12, 14, 16, 30, 31]*)
let q1 = add 3 q1;;   (* [0, 1, 3, 6, 8, 12, 14, 16, 30, 31]*)
let q1 = add 28 q1;;   (* [0, 1, 3, 6, 8, 12, 14, 16, 28, 30, 31]*)
let q1 = add 11 q1;;   (* [0, 1, 3, 6, 8, 11, 12, 14, 16, 28, 30, 31]*)
let (element, q1) = delete_min q1;;   (* 0 * [1, 3, 6, 8, 11, 12, 14, 16, 28, 30, 31]*)
assert(element = 0);;
let (element, q1) = delete_min q1;;   (* 1 * [3, 6, 8, 11, 12, 14, 16, 28, 30, 31]*)
assert(element = 1);;
let (element, q1) = delete_min q1;;   (* 3 * [6, 8, 11, 12, 14, 16, 28, 30, 31]*)
assert(element = 3);;
assert(is_empty q1 = false);;   (*[6, 8, 11, 12, 14, 16, 28, 30, 31]*)
assert(is_empty q1 = false);;   (*[6, 8, 11, 12, 14, 16, 28, 30, 31]*)
let q1 = add 10 q1;;   (* [6, 8, 10, 11, 12, 14, 16, 28, 30, 31]*)
let q1 = add 6 q1;;   (* [6, 6, 8, 10, 11, 12, 14, 16, 28, 30, 31]*)

(* -------q2------ *)
let q2 = empty;;
assert(is_empty q2 = true);;   (*[]*)
let q2 = add 9 q2;;   (* [9]*)
let q2 = add 10 q2;;   (* [9, 10]*)
assert(is_empty q2 = false);;   (*[9, 10]*)
let (element, q2) = delete_min q2;;   (* 9 * [10]*)
assert(element = 9);;
let q2 = add 5 q2;;   (* [5, 10]*)
let q2 = add 0 q2;;   (* [0, 5, 10]*)
let q2 = add 8 q2;;   (* [0, 5, 8, 10]*)
let (element, q2) = delete_min q2;;   (* 0 * [5, 8, 10]*)
assert(element = 0);;
let q2 = add 1 q2;;   (* [1, 5, 8, 10]*)
let q2 = add 37 q2;;   (* [1, 5, 8, 10, 37]*)
let q2 = add 11 q2;;   (* [1, 5, 8, 10, 11, 37]*)
let q2 = add 11 q2;;   (* [1, 5, 8, 10, 11, 11, 37]*)
assert(is_empty q2 = false);;   (*[1, 5, 8, 10, 11, 11, 37]*)
let q2 = add 37 q2;;   (* [1, 5, 8, 10, 11, 11, 37, 37]*)
let q2 = add 28 q2;;   (* [1, 5, 8, 10, 11, 11, 28, 37, 37]*)
assert(is_empty q2 = false);;   (*[1, 5, 8, 10, 11, 11, 28, 37, 37]*)
let q2 = add 4 q2;;   (* [1, 4, 5, 8, 10, 11, 11, 28, 37, 37]*)
let q2 = add 3 q2;;   (* [1, 3, 4, 5, 8, 10, 11, 11, 28, 37, 37]*)
let q2 = add 23 q2;;   (* [1, 3, 4, 5, 8, 10, 11, 11, 23, 28, 37, 37]*)
let q2 = add 16 q2;;   (* [1, 3, 4, 5, 8, 10, 11, 11, 16, 23, 28, 37, 37]*)
let q2 = add 26 q2;;   (* [1, 3, 4, 5, 8, 10, 11, 11, 16, 23, 26, 28, 37, 37]*)
let (element, q2) = delete_min q2;;   (* 1 * [3, 4, 5, 8, 10, 11, 11, 16, 23, 26, 28, 37, 37]*)
assert(element = 1);;
let q2 = add 7 q2;;   (* [3, 4, 5, 7, 8, 10, 11, 11, 16, 23, 26, 28, 37, 37]*)
let (element, q2) = delete_min q2;;   (* 3 * [4, 5, 7, 8, 10, 11, 11, 16, 23, 26, 28, 37, 37]*)
assert(element = 3);;
let q2 = add 3 q2;;   (* [3, 4, 5, 7, 8, 10, 11, 11, 16, 23, 26, 28, 37, 37]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 14 q3;;   (* [14]*)
let q3 = add 29 q3;;   (* [14, 29]*)
let q3 = add 1 q3;;   (* [1, 14, 29]*)
let q3 = add 20 q3;;   (* [1, 14, 20, 29]*)
let q3 = add 5 q3;;   (* [1, 5, 14, 20, 29]*)
let q3 = add 36 q3;;   (* [1, 5, 14, 20, 29, 36]*)
let q3 = add 25 q3;;   (* [1, 5, 14, 20, 25, 29, 36]*)
let q3 = add 30 q3;;   (* [1, 5, 14, 20, 25, 29, 30, 36]*)
let (element, q3) = delete_min q3;;   (* 1 * [5, 14, 20, 25, 29, 30, 36]*)
assert(element = 1);;
assert(is_empty q3 = false);;   (*[5, 14, 20, 25, 29, 30, 36]*)
let q3 = add 23 q3;;   (* [5, 14, 20, 23, 25, 29, 30, 36]*)
let q3 = add 27 q3;;   (* [5, 14, 20, 23, 25, 27, 29, 30, 36]*)
let q3 = add 34 q3;;   (* [5, 14, 20, 23, 25, 27, 29, 30, 34, 36]*)
let (element, q3) = delete_min q3;;   (* 5 * [14, 20, 23, 25, 27, 29, 30, 34, 36]*)
assert(element = 5);;
let q3 = add 17 q3;;   (* [14, 17, 20, 23, 25, 27, 29, 30, 34, 36]*)
let q3 = add 32 q3;;   (* [14, 17, 20, 23, 25, 27, 29, 30, 32, 34, 36]*)
assert(is_empty q3 = false);;   (*[14, 17, 20, 23, 25, 27, 29, 30, 32, 34, 36]*)
let (element, q3) = delete_min q3;;   (* 14 * [17, 20, 23, 25, 27, 29, 30, 32, 34, 36]*)
assert(element = 14);;
assert(is_empty q3 = false);;   (*[17, 20, 23, 25, 27, 29, 30, 32, 34, 36]*)
let q3 = add 24 q3;;   (* [17, 20, 23, 24, 25, 27, 29, 30, 32, 34, 36]*)
let q3 = add 11 q3;;   (* [11, 17, 20, 23, 24, 25, 27, 29, 30, 32, 34, 36]*)
let (element, q3) = delete_min q3;;   (* 11 * [17, 20, 23, 24, 25, 27, 29, 30, 32, 34, 36]*)
assert(element = 11);;
assert(is_empty q3 = false);;   (*[17, 20, 23, 24, 25, 27, 29, 30, 32, 34, 36]*)
let q3 = add 28 q3;;   (* [17, 20, 23, 24, 25, 27, 28, 29, 30, 32, 34, 36]*)
let q3 = add 26 q3;;   (* [17, 20, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 36]*)
let q3 = add 34 q3;;   (* [17, 20, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 34, 36]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 29 q4;;   (* [29]*)
let q4 = add 4 q4;;   (* [4, 29]*)
let (element, q4) = delete_min q4;;   (* 4 * [29]*)
assert(element = 4);;
let q4 = add 11 q4;;   (* [11, 29]*)
let (element, q4) = delete_min q4;;   (* 11 * [29]*)
assert(element = 11);;
let q4 = add 19 q4;;   (* [19, 29]*)
let (element, q4) = delete_min q4;;   (* 19 * [29]*)
assert(element = 19);;
let (element, q4) = delete_min q4;;   (* 29 * []*)
assert(element = 29);;
let q4 = add 27 q4;;   (* [27]*)
let q4 = add 7 q4;;   (* [7, 27]*)
let q4 = add 0 q4;;   (* [0, 7, 27]*)
assert(is_empty q4 = false);;   (*[0, 7, 27]*)
let q4 = add 5 q4;;   (* [0, 5, 7, 27]*)
let q4 = add 35 q4;;   (* [0, 5, 7, 27, 35]*)
let q4 = add 5 q4;;   (* [0, 5, 5, 7, 27, 35]*)
assert(is_empty q4 = false);;   (*[0, 5, 5, 7, 27, 35]*)
let q4 = add 26 q4;;   (* [0, 5, 5, 7, 26, 27, 35]*)
let q4 = add 25 q4;;   (* [0, 5, 5, 7, 25, 26, 27, 35]*)
let q4 = add 32 q4;;   (* [0, 5, 5, 7, 25, 26, 27, 32, 35]*)
let q4 = add 24 q4;;   (* [0, 5, 5, 7, 24, 25, 26, 27, 32, 35]*)
let (element, q4) = delete_min q4;;   (* 0 * [5, 5, 7, 24, 25, 26, 27, 32, 35]*)
assert(element = 0);;
let (element, q4) = delete_min q4;;   (* 5 * [5, 7, 24, 25, 26, 27, 32, 35]*)
assert(element = 5);;
let q4 = add 9 q4;;   (* [5, 7, 9, 24, 25, 26, 27, 32, 35]*)
let q4 = add 14 q4;;   (* [5, 7, 9, 14, 24, 25, 26, 27, 32, 35]*)
let q4 = add 28 q4;;   (* [5, 7, 9, 14, 24, 25, 26, 27, 28, 32, 35]*)
assert(is_empty q4 = false);;   (*[5, 7, 9, 14, 24, 25, 26, 27, 28, 32, 35]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;   (*[3, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 10, 10, 11, 11, 11, 12, 14, 14, 16, 16, 17, 20, 23, 23, 24, 24, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37]*)
let (element, q) = delete_min q;;   (* 3 * [4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 10, 10, 11, 11, 11, 12, 14, 14, 16, 16, 17, 20, 23, 23, 24, 24, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 3);;
let (element, q) = delete_min q;;   (* 4 * [5, 5, 6, 6, 7, 7, 8, 8, 9, 10, 10, 11, 11, 11, 12, 14, 14, 16, 16, 17, 20, 23, 23, 24, 24, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 5 * [5, 6, 6, 7, 7, 8, 8, 9, 10, 10, 11, 11, 11, 12, 14, 14, 16, 16, 17, 20, 23, 23, 24, 24, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 5 * [6, 6, 7, 7, 8, 8, 9, 10, 10, 11, 11, 11, 12, 14, 14, 16, 16, 17, 20, 23, 23, 24, 24, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 6 * [6, 7, 7, 8, 8, 9, 10, 10, 11, 11, 11, 12, 14, 14, 16, 16, 17, 20, 23, 23, 24, 24, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 6 * [7, 7, 8, 8, 9, 10, 10, 11, 11, 11, 12, 14, 14, 16, 16, 17, 20, 23, 23, 24, 24, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 7 * [7, 8, 8, 9, 10, 10, 11, 11, 11, 12, 14, 14, 16, 16, 17, 20, 23, 23, 24, 24, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 7 * [8, 8, 9, 10, 10, 11, 11, 11, 12, 14, 14, 16, 16, 17, 20, 23, 23, 24, 24, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 8 * [8, 9, 10, 10, 11, 11, 11, 12, 14, 14, 16, 16, 17, 20, 23, 23, 24, 24, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 8 * [9, 10, 10, 11, 11, 11, 12, 14, 14, 16, 16, 17, 20, 23, 23, 24, 24, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 9 * [10, 10, 11, 11, 11, 12, 14, 14, 16, 16, 17, 20, 23, 23, 24, 24, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 10 * [10, 11, 11, 11, 12, 14, 14, 16, 16, 17, 20, 23, 23, 24, 24, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 10 * [11, 11, 11, 12, 14, 14, 16, 16, 17, 20, 23, 23, 24, 24, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 11 * [11, 11, 12, 14, 14, 16, 16, 17, 20, 23, 23, 24, 24, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 11 * [11, 12, 14, 14, 16, 16, 17, 20, 23, 23, 24, 24, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 11 * [12, 14, 14, 16, 16, 17, 20, 23, 23, 24, 24, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 12 * [14, 14, 16, 16, 17, 20, 23, 23, 24, 24, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 14 * [14, 16, 16, 17, 20, 23, 23, 24, 24, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [16, 16, 17, 20, 23, 23, 24, 24, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 16 * [16, 17, 20, 23, 23, 24, 24, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [17, 20, 23, 23, 24, 24, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 17 * [20, 23, 23, 24, 24, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 20 * [23, 23, 24, 24, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 23 * [23, 24, 24, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [24, 24, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [24, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [25, 26, 26, 26, 27, 27, 28, 28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [26, 26, 26, 27, 27, 28, 28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [26, 26, 27, 27, 28, 28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [26, 27, 27, 28, 28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [27, 27, 28, 28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [27, 28, 28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [28, 28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [29, 30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [30, 30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [30, 31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [31, 32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 34, 34, 35, 36, 37, 37]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 34, 34, 35, 36, 37, 37]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [34, 34, 35, 36, 37, 37]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 36, 37, 37]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 36, 37, 37]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [36, 37, 37]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [37, 37]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [37]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * []*)
assert(element = 37);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST50----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 38 q1;;   (* [38]*)
let q1 = add 3 q1;;   (* [3, 38]*)
let q1 = add 9 q1;;   (* [3, 9, 38]*)
let q1 = add 3 q1;;   (* [3, 3, 9, 38]*)
let q1 = add 14 q1;;   (* [3, 3, 9, 14, 38]*)
let q1 = add 9 q1;;   (* [3, 3, 9, 9, 14, 38]*)
assert(is_empty q1 = false);;   (*[3, 3, 9, 9, 14, 38]*)
let (element, q1) = delete_min q1;;   (* 3 * [3, 9, 9, 14, 38]*)
assert(element = 3);;
let (element, q1) = delete_min q1;;   (* 3 * [9, 9, 14, 38]*)
assert(element = 3);;
let q1 = add 0 q1;;   (* [0, 9, 9, 14, 38]*)
let q1 = add 22 q1;;   (* [0, 9, 9, 14, 22, 38]*)
let q1 = add 5 q1;;   (* [0, 5, 9, 9, 14, 22, 38]*)
let q1 = add 10 q1;;   (* [0, 5, 9, 9, 10, 14, 22, 38]*)
assert(is_empty q1 = false);;   (*[0, 5, 9, 9, 10, 14, 22, 38]*)
let q1 = add 17 q1;;   (* [0, 5, 9, 9, 10, 14, 17, 22, 38]*)
let q1 = add 2 q1;;   (* [0, 2, 5, 9, 9, 10, 14, 17, 22, 38]*)
assert(is_empty q1 = false);;   (*[0, 2, 5, 9, 9, 10, 14, 17, 22, 38]*)
let q1 = add 11 q1;;   (* [0, 2, 5, 9, 9, 10, 11, 14, 17, 22, 38]*)
let q1 = add 11 q1;;   (* [0, 2, 5, 9, 9, 10, 11, 11, 14, 17, 22, 38]*)
let q1 = add 39 q1;;   (* [0, 2, 5, 9, 9, 10, 11, 11, 14, 17, 22, 38, 39]*)
let (element, q1) = delete_min q1;;   (* 0 * [2, 5, 9, 9, 10, 11, 11, 14, 17, 22, 38, 39]*)
assert(element = 0);;
let q1 = add 16 q1;;   (* [2, 5, 9, 9, 10, 11, 11, 14, 16, 17, 22, 38, 39]*)
let q1 = add 26 q1;;   (* [2, 5, 9, 9, 10, 11, 11, 14, 16, 17, 22, 26, 38, 39]*)
let (element, q1) = delete_min q1;;   (* 2 * [5, 9, 9, 10, 11, 11, 14, 16, 17, 22, 26, 38, 39]*)
assert(element = 2);;
let (element, q1) = delete_min q1;;   (* 5 * [9, 9, 10, 11, 11, 14, 16, 17, 22, 26, 38, 39]*)
assert(element = 5);;
let q1 = add 38 q1;;   (* [9, 9, 10, 11, 11, 14, 16, 17, 22, 26, 38, 38, 39]*)
let (element, q1) = delete_min q1;;   (* 9 * [9, 10, 11, 11, 14, 16, 17, 22, 26, 38, 38, 39]*)
assert(element = 9);;

(* -------q2------ *)
let q2 = empty;;
let q2 = add 23 q2;;   (* [23]*)
let (element, q2) = delete_min q2;;   (* 23 * []*)
assert(element = 23);;
let q2 = add 1 q2;;   (* [1]*)
let q2 = add 26 q2;;   (* [1, 26]*)
let q2 = add 21 q2;;   (* [1, 21, 26]*)
assert(is_empty q2 = false);;   (*[1, 21, 26]*)
let q2 = add 0 q2;;   (* [0, 1, 21, 26]*)
let q2 = add 38 q2;;   (* [0, 1, 21, 26, 38]*)
let q2 = add 27 q2;;   (* [0, 1, 21, 26, 27, 38]*)
let q2 = add 9 q2;;   (* [0, 1, 9, 21, 26, 27, 38]*)
let q2 = add 20 q2;;   (* [0, 1, 9, 20, 21, 26, 27, 38]*)
let (element, q2) = delete_min q2;;   (* 0 * [1, 9, 20, 21, 26, 27, 38]*)
assert(element = 0);;
let q2 = add 9 q2;;   (* [1, 9, 9, 20, 21, 26, 27, 38]*)
let (element, q2) = delete_min q2;;   (* 1 * [9, 9, 20, 21, 26, 27, 38]*)
assert(element = 1);;
let (element, q2) = delete_min q2;;   (* 9 * [9, 20, 21, 26, 27, 38]*)
assert(element = 9);;
let q2 = add 19 q2;;   (* [9, 19, 20, 21, 26, 27, 38]*)
let q2 = add 32 q2;;   (* [9, 19, 20, 21, 26, 27, 32, 38]*)
let (element, q2) = delete_min q2;;   (* 9 * [19, 20, 21, 26, 27, 32, 38]*)
assert(element = 9);;
let q2 = add 36 q2;;   (* [19, 20, 21, 26, 27, 32, 36, 38]*)
let q2 = add 0 q2;;   (* [0, 19, 20, 21, 26, 27, 32, 36, 38]*)
let (element, q2) = delete_min q2;;   (* 0 * [19, 20, 21, 26, 27, 32, 36, 38]*)
assert(element = 0);;
let q2 = add 27 q2;;   (* [19, 20, 21, 26, 27, 27, 32, 36, 38]*)
let q2 = add 24 q2;;   (* [19, 20, 21, 24, 26, 27, 27, 32, 36, 38]*)
let q2 = add 30 q2;;   (* [19, 20, 21, 24, 26, 27, 27, 30, 32, 36, 38]*)
let q2 = add 0 q2;;   (* [0, 19, 20, 21, 24, 26, 27, 27, 30, 32, 36, 38]*)
let q2 = add 16 q2;;   (* [0, 16, 19, 20, 21, 24, 26, 27, 27, 30, 32, 36, 38]*)
let q2 = add 30 q2;;   (* [0, 16, 19, 20, 21, 24, 26, 27, 27, 30, 30, 32, 36, 38]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 34 q3;;   (* [34]*)
let q3 = add 9 q3;;   (* [9, 34]*)
let q3 = add 35 q3;;   (* [9, 34, 35]*)
let q3 = add 15 q3;;   (* [9, 15, 34, 35]*)
let q3 = add 12 q3;;   (* [9, 12, 15, 34, 35]*)
let q3 = add 6 q3;;   (* [6, 9, 12, 15, 34, 35]*)
let (element, q3) = delete_min q3;;   (* 6 * [9, 12, 15, 34, 35]*)
assert(element = 6);;
let q3 = add 2 q3;;   (* [2, 9, 12, 15, 34, 35]*)
let (element, q3) = delete_min q3;;   (* 2 * [9, 12, 15, 34, 35]*)
assert(element = 2);;
let (element, q3) = delete_min q3;;   (* 9 * [12, 15, 34, 35]*)
assert(element = 9);;
let q3 = add 36 q3;;   (* [12, 15, 34, 35, 36]*)
assert(is_empty q3 = false);;   (*[12, 15, 34, 35, 36]*)
let (element, q3) = delete_min q3;;   (* 12 * [15, 34, 35, 36]*)
assert(element = 12);;
assert(is_empty q3 = false);;   (*[15, 34, 35, 36]*)
let (element, q3) = delete_min q3;;   (* 15 * [34, 35, 36]*)
assert(element = 15);;
let q3 = add 14 q3;;   (* [14, 34, 35, 36]*)
let q3 = add 32 q3;;   (* [14, 32, 34, 35, 36]*)
let q3 = add 7 q3;;   (* [7, 14, 32, 34, 35, 36]*)
assert(is_empty q3 = false);;   (*[7, 14, 32, 34, 35, 36]*)
let q3 = add 9 q3;;   (* [7, 9, 14, 32, 34, 35, 36]*)
let (element, q3) = delete_min q3;;   (* 7 * [9, 14, 32, 34, 35, 36]*)
assert(element = 7);;
let q3 = add 36 q3;;   (* [9, 14, 32, 34, 35, 36, 36]*)
let q3 = add 15 q3;;   (* [9, 14, 15, 32, 34, 35, 36, 36]*)
let q3 = add 7 q3;;   (* [7, 9, 14, 15, 32, 34, 35, 36, 36]*)
let (element, q3) = delete_min q3;;   (* 7 * [9, 14, 15, 32, 34, 35, 36, 36]*)
assert(element = 7);;
let (element, q3) = delete_min q3;;   (* 9 * [14, 15, 32, 34, 35, 36, 36]*)
assert(element = 9);;
let (element, q3) = delete_min q3;;   (* 14 * [15, 32, 34, 35, 36, 36]*)
assert(element = 14);;

(* -------q4------ *)
let q4 = empty;;
assert(is_empty q4 = true);;   (*[]*)
let q4 = add 31 q4;;   (* [31]*)
let (element, q4) = delete_min q4;;   (* 31 * []*)
assert(element = 31);;
let q4 = add 29 q4;;   (* [29]*)
let q4 = add 16 q4;;   (* [16, 29]*)
let (element, q4) = delete_min q4;;   (* 16 * [29]*)
assert(element = 16);;
assert(is_empty q4 = false);;   (*[29]*)
let (element, q4) = delete_min q4;;   (* 29 * []*)
assert(element = 29);;
let q4 = add 3 q4;;   (* [3]*)
assert(is_empty q4 = false);;   (*[3]*)
let q4 = add 28 q4;;   (* [3, 28]*)
assert(is_empty q4 = false);;   (*[3, 28]*)
let (element, q4) = delete_min q4;;   (* 3 * [28]*)
assert(element = 3);;
let q4 = add 32 q4;;   (* [28, 32]*)
let q4 = add 0 q4;;   (* [0, 28, 32]*)
let q4 = add 35 q4;;   (* [0, 28, 32, 35]*)
let q4 = add 21 q4;;   (* [0, 21, 28, 32, 35]*)
let (element, q4) = delete_min q4;;   (* 0 * [21, 28, 32, 35]*)
assert(element = 0);;
let q4 = add 5 q4;;   (* [5, 21, 28, 32, 35]*)
let q4 = add 13 q4;;   (* [5, 13, 21, 28, 32, 35]*)
let q4 = add 33 q4;;   (* [5, 13, 21, 28, 32, 33, 35]*)
let (element, q4) = delete_min q4;;   (* 5 * [13, 21, 28, 32, 33, 35]*)
assert(element = 5);;
let q4 = add 25 q4;;   (* [13, 21, 25, 28, 32, 33, 35]*)
let (element, q4) = delete_min q4;;   (* 13 * [21, 25, 28, 32, 33, 35]*)
assert(element = 13);;
let q4 = add 18 q4;;   (* [18, 21, 25, 28, 32, 33, 35]*)
let q4 = add 7 q4;;   (* [7, 18, 21, 25, 28, 32, 33, 35]*)
let q4 = add 7 q4;;   (* [7, 7, 18, 21, 25, 28, 32, 33, 35]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;   (*[0, 7, 7, 9, 10, 11, 11, 14, 15, 16, 16, 17, 18, 19, 20, 21, 21, 22, 24, 25, 26, 26, 27, 27, 28, 30, 30, 32, 32, 32, 33, 34, 35, 35, 36, 36, 36, 38, 38, 38]*)
let (element, q) = delete_min q;;   (* 0 * [7, 7, 9, 10, 11, 11, 14, 15, 16, 16, 17, 18, 19, 20, 21, 21, 22, 24, 25, 26, 26, 27, 27, 28, 30, 30, 32, 32, 32, 33, 34, 35, 35, 36, 36, 36, 38, 38, 38, 39]*)
assert(element = 0);;
let (element, q) = delete_min q;;   (* 7 * [7, 9, 10, 11, 11, 14, 15, 16, 16, 17, 18, 19, 20, 21, 21, 22, 24, 25, 26, 26, 27, 27, 28, 30, 30, 32, 32, 32, 33, 34, 35, 35, 36, 36, 36, 38, 38, 38, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 7 * [9, 10, 11, 11, 14, 15, 16, 16, 17, 18, 19, 20, 21, 21, 22, 24, 25, 26, 26, 27, 27, 28, 30, 30, 32, 32, 32, 33, 34, 35, 35, 36, 36, 36, 38, 38, 38, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 9 * [10, 11, 11, 14, 15, 16, 16, 17, 18, 19, 20, 21, 21, 22, 24, 25, 26, 26, 27, 27, 28, 30, 30, 32, 32, 32, 33, 34, 35, 35, 36, 36, 36, 38, 38, 38, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 10 * [11, 11, 14, 15, 16, 16, 17, 18, 19, 20, 21, 21, 22, 24, 25, 26, 26, 27, 27, 28, 30, 30, 32, 32, 32, 33, 34, 35, 35, 36, 36, 36, 38, 38, 38, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 11 * [11, 14, 15, 16, 16, 17, 18, 19, 20, 21, 21, 22, 24, 25, 26, 26, 27, 27, 28, 30, 30, 32, 32, 32, 33, 34, 35, 35, 36, 36, 36, 38, 38, 38, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 11 * [14, 15, 16, 16, 17, 18, 19, 20, 21, 21, 22, 24, 25, 26, 26, 27, 27, 28, 30, 30, 32, 32, 32, 33, 34, 35, 35, 36, 36, 36, 38, 38, 38, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 14 * [15, 16, 16, 17, 18, 19, 20, 21, 21, 22, 24, 25, 26, 26, 27, 27, 28, 30, 30, 32, 32, 32, 33, 34, 35, 35, 36, 36, 36, 38, 38, 38, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [16, 16, 17, 18, 19, 20, 21, 21, 22, 24, 25, 26, 26, 27, 27, 28, 30, 30, 32, 32, 32, 33, 34, 35, 35, 36, 36, 36, 38, 38, 38, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [16, 17, 18, 19, 20, 21, 21, 22, 24, 25, 26, 26, 27, 27, 28, 30, 30, 32, 32, 32, 33, 34, 35, 35, 36, 36, 36, 38, 38, 38, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [17, 18, 19, 20, 21, 21, 22, 24, 25, 26, 26, 27, 27, 28, 30, 30, 32, 32, 32, 33, 34, 35, 35, 36, 36, 36, 38, 38, 38, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 17 * [18, 19, 20, 21, 21, 22, 24, 25, 26, 26, 27, 27, 28, 30, 30, 32, 32, 32, 33, 34, 35, 35, 36, 36, 36, 38, 38, 38, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [19, 20, 21, 21, 22, 24, 25, 26, 26, 27, 27, 28, 30, 30, 32, 32, 32, 33, 34, 35, 35, 36, 36, 36, 38, 38, 38, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [20, 21, 21, 22, 24, 25, 26, 26, 27, 27, 28, 30, 30, 32, 32, 32, 33, 34, 35, 35, 36, 36, 36, 38, 38, 38, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [21, 21, 22, 24, 25, 26, 26, 27, 27, 28, 30, 30, 32, 32, 32, 33, 34, 35, 35, 36, 36, 36, 38, 38, 38, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [21, 22, 24, 25, 26, 26, 27, 27, 28, 30, 30, 32, 32, 32, 33, 34, 35, 35, 36, 36, 36, 38, 38, 38, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [22, 24, 25, 26, 26, 27, 27, 28, 30, 30, 32, 32, 32, 33, 34, 35, 35, 36, 36, 36, 38, 38, 38, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [24, 25, 26, 26, 27, 27, 28, 30, 30, 32, 32, 32, 33, 34, 35, 35, 36, 36, 36, 38, 38, 38, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 24 * [25, 26, 26, 27, 27, 28, 30, 30, 32, 32, 32, 33, 34, 35, 35, 36, 36, 36, 38, 38, 38, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [26, 26, 27, 27, 28, 30, 30, 32, 32, 32, 33, 34, 35, 35, 36, 36, 36, 38, 38, 38, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [26, 27, 27, 28, 30, 30, 32, 32, 32, 33, 34, 35, 35, 36, 36, 36, 38, 38, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [27, 27, 28, 30, 30, 32, 32, 32, 33, 34, 35, 35, 36, 36, 36, 38, 38, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [27, 28, 30, 30, 32, 32, 32, 33, 34, 35, 35, 36, 36, 36, 38, 38, 38, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [28, 30, 30, 32, 32, 32, 33, 34, 35, 35, 36, 36, 36, 38, 38, 38, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [30, 30, 32, 32, 32, 33, 34, 35, 35, 36, 36, 36, 38, 38, 38, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 30 * [30, 32, 32, 32, 33, 34, 35, 35, 36, 36, 36, 38, 38, 38, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [32, 32, 32, 33, 34, 35, 35, 36, 36, 36, 38, 38, 38, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 33, 34, 35, 35, 36, 36, 36, 38, 38, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 34, 35, 35, 36, 36, 36, 38, 38, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 34, 35, 35, 36, 36, 36, 38, 38, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [34, 35, 35, 36, 36, 36, 38, 38, 38, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 36, 36, 36, 38, 38, 38, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 36, 36, 38, 38, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 36, 38, 38, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 38, 38, 38, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 38, 38, 38, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [38, 38, 38, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST51----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 7 q1;;   (* [7]*)
let q1 = add 34 q1;;   (* [7, 34]*)
let (element, q1) = delete_min q1;;   (* 7 * [34]*)
assert(element = 7);;
let q1 = add 13 q1;;   (* [13, 34]*)
let q1 = add 8 q1;;   (* [8, 13, 34]*)
let (element, q1) = delete_min q1;;   (* 8 * [13, 34]*)
assert(element = 8);;
let (element, q1) = delete_min q1;;   (* 13 * [34]*)
assert(element = 13);;
let (element, q1) = delete_min q1;;   (* 34 * []*)
assert(element = 34);;
let q1 = add 2 q1;;   (* [2]*)
let (element, q1) = delete_min q1;;   (* 2 * []*)
assert(element = 2);;
assert(is_empty q1 = true);;   (*[]*)
let q1 = add 7 q1;;   (* [7]*)
let (element, q1) = delete_min q1;;   (* 7 * []*)
assert(element = 7);;
let q1 = add 9 q1;;   (* [9]*)
let q1 = add 2 q1;;   (* [2, 9]*)
let q1 = add 25 q1;;   (* [2, 9, 25]*)
let q1 = add 24 q1;;   (* [2, 9, 24, 25]*)
let q1 = add 12 q1;;   (* [2, 9, 12, 24, 25]*)
let q1 = add 5 q1;;   (* [2, 5, 9, 12, 24, 25]*)
let q1 = add 29 q1;;   (* [2, 5, 9, 12, 24, 25, 29]*)
let q1 = add 39 q1;;   (* [2, 5, 9, 12, 24, 25, 29, 39]*)
let q1 = add 34 q1;;   (* [2, 5, 9, 12, 24, 25, 29, 34, 39]*)
let q1 = add 4 q1;;   (* [2, 4, 5, 9, 12, 24, 25, 29, 34, 39]*)
let q1 = add 19 q1;;   (* [2, 4, 5, 9, 12, 19, 24, 25, 29, 34, 39]*)
let q1 = add 34 q1;;   (* [2, 4, 5, 9, 12, 19, 24, 25, 29, 34, 34, 39]*)
assert(is_empty q1 = false);;   (*[2, 4, 5, 9, 12, 19, 24, 25, 29, 34, 34, 39]*)
let q1 = add 17 q1;;   (* [2, 4, 5, 9, 12, 17, 19, 24, 25, 29, 34, 34, 39]*)
assert(is_empty q1 = false);;   (*[2, 4, 5, 9, 12, 17, 19, 24, 25, 29, 34, 34, 39]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 0 q2;;   (* [0]*)
let (element, q2) = delete_min q2;;   (* 0 * []*)
assert(element = 0);;
let q2 = add 37 q2;;   (* [37]*)
let q2 = add 5 q2;;   (* [5, 37]*)
let q2 = add 8 q2;;   (* [5, 8, 37]*)
let (element, q2) = delete_min q2;;   (* 5 * [8, 37]*)
assert(element = 5);;
let q2 = add 4 q2;;   (* [4, 8, 37]*)
let q2 = add 19 q2;;   (* [4, 8, 19, 37]*)
let q2 = add 32 q2;;   (* [4, 8, 19, 32, 37]*)
let q2 = add 10 q2;;   (* [4, 8, 10, 19, 32, 37]*)
let q2 = add 21 q2;;   (* [4, 8, 10, 19, 21, 32, 37]*)
let (element, q2) = delete_min q2;;   (* 4 * [8, 10, 19, 21, 32, 37]*)
assert(element = 4);;
let q2 = add 30 q2;;   (* [8, 10, 19, 21, 30, 32, 37]*)
let q2 = add 2 q2;;   (* [2, 8, 10, 19, 21, 30, 32, 37]*)
assert(is_empty q2 = false);;   (*[2, 8, 10, 19, 21, 30, 32, 37]*)
let q2 = add 2 q2;;   (* [2, 2, 8, 10, 19, 21, 30, 32, 37]*)
assert(is_empty q2 = false);;   (*[2, 2, 8, 10, 19, 21, 30, 32, 37]*)
let q2 = add 36 q2;;   (* [2, 2, 8, 10, 19, 21, 30, 32, 36, 37]*)
let (element, q2) = delete_min q2;;   (* 2 * [2, 8, 10, 19, 21, 30, 32, 36, 37]*)
assert(element = 2);;
let q2 = add 36 q2;;   (* [2, 8, 10, 19, 21, 30, 32, 36, 36, 37]*)
let q2 = add 21 q2;;   (* [2, 8, 10, 19, 21, 21, 30, 32, 36, 36, 37]*)
let q2 = add 13 q2;;   (* [2, 8, 10, 13, 19, 21, 21, 30, 32, 36, 36, 37]*)
let q2 = add 1 q2;;   (* [1, 2, 8, 10, 13, 19, 21, 21, 30, 32, 36, 36, 37]*)
let (element, q2) = delete_min q2;;   (* 1 * [2, 8, 10, 13, 19, 21, 21, 30, 32, 36, 36, 37]*)
assert(element = 1);;
let (element, q2) = delete_min q2;;   (* 2 * [8, 10, 13, 19, 21, 21, 30, 32, 36, 36, 37]*)
assert(element = 2);;
let q2 = add 11 q2;;   (* [8, 10, 11, 13, 19, 21, 21, 30, 32, 36, 36, 37]*)
let q2 = add 35 q2;;   (* [8, 10, 11, 13, 19, 21, 21, 30, 32, 35, 36, 36, 37]*)
let q2 = add 11 q2;;   (* [8, 10, 11, 11, 13, 19, 21, 21, 30, 32, 35, 36, 36, 37]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 25 q3;;   (* [25]*)
assert(is_empty q3 = false);;   (*[25]*)
let q3 = add 16 q3;;   (* [16, 25]*)
let q3 = add 26 q3;;   (* [16, 25, 26]*)
let q3 = add 9 q3;;   (* [9, 16, 25, 26]*)
let (element, q3) = delete_min q3;;   (* 9 * [16, 25, 26]*)
assert(element = 9);;
let q3 = add 12 q3;;   (* [12, 16, 25, 26]*)
let (element, q3) = delete_min q3;;   (* 12 * [16, 25, 26]*)
assert(element = 12);;
assert(is_empty q3 = false);;   (*[16, 25, 26]*)
let (element, q3) = delete_min q3;;   (* 16 * [25, 26]*)
assert(element = 16);;
let q3 = add 14 q3;;   (* [14, 25, 26]*)
let (element, q3) = delete_min q3;;   (* 14 * [25, 26]*)
assert(element = 14);;
let q3 = add 12 q3;;   (* [12, 25, 26]*)
let (element, q3) = delete_min q3;;   (* 12 * [25, 26]*)
assert(element = 12);;
let q3 = add 17 q3;;   (* [17, 25, 26]*)
let q3 = add 15 q3;;   (* [15, 17, 25, 26]*)
let q3 = add 12 q3;;   (* [12, 15, 17, 25, 26]*)
let q3 = add 13 q3;;   (* [12, 13, 15, 17, 25, 26]*)
let (element, q3) = delete_min q3;;   (* 12 * [13, 15, 17, 25, 26]*)
assert(element = 12);;
let q3 = add 29 q3;;   (* [13, 15, 17, 25, 26, 29]*)
let q3 = add 25 q3;;   (* [13, 15, 17, 25, 25, 26, 29]*)
let q3 = add 6 q3;;   (* [6, 13, 15, 17, 25, 25, 26, 29]*)
let (element, q3) = delete_min q3;;   (* 6 * [13, 15, 17, 25, 25, 26, 29]*)
assert(element = 6);;
let (element, q3) = delete_min q3;;   (* 13 * [15, 17, 25, 25, 26, 29]*)
assert(element = 13);;
let q3 = add 7 q3;;   (* [7, 15, 17, 25, 25, 26, 29]*)
let q3 = add 34 q3;;   (* [7, 15, 17, 25, 25, 26, 29, 34]*)
let q3 = add 0 q3;;   (* [0, 7, 15, 17, 25, 25, 26, 29, 34]*)
let (element, q3) = delete_min q3;;   (* 0 * [7, 15, 17, 25, 25, 26, 29, 34]*)
assert(element = 0);;

(* -------q4------ *)
let q4 = empty;;
let q4 = add 26 q4;;   (* [26]*)
let q4 = add 3 q4;;   (* [3, 26]*)
let q4 = add 18 q4;;   (* [3, 18, 26]*)
let (element, q4) = delete_min q4;;   (* 3 * [18, 26]*)
assert(element = 3);;
assert(is_empty q4 = false);;   (*[18, 26]*)
let q4 = add 16 q4;;   (* [16, 18, 26]*)
let q4 = add 0 q4;;   (* [0, 16, 18, 26]*)
let (element, q4) = delete_min q4;;   (* 0 * [16, 18, 26]*)
assert(element = 0);;
let q4 = add 35 q4;;   (* [16, 18, 26, 35]*)
let (element, q4) = delete_min q4;;   (* 16 * [18, 26, 35]*)
assert(element = 16);;
assert(is_empty q4 = false);;   (*[18, 26, 35]*)
let (element, q4) = delete_min q4;;   (* 18 * [26, 35]*)
assert(element = 18);;
let q4 = add 20 q4;;   (* [20, 26, 35]*)
let q4 = add 17 q4;;   (* [17, 20, 26, 35]*)
assert(is_empty q4 = false);;   (*[17, 20, 26, 35]*)
let q4 = add 7 q4;;   (* [7, 17, 20, 26, 35]*)
assert(is_empty q4 = false);;   (*[7, 17, 20, 26, 35]*)
let q4 = add 25 q4;;   (* [7, 17, 20, 25, 26, 35]*)
let q4 = add 19 q4;;   (* [7, 17, 19, 20, 25, 26, 35]*)
let (element, q4) = delete_min q4;;   (* 7 * [17, 19, 20, 25, 26, 35]*)
assert(element = 7);;
let q4 = add 31 q4;;   (* [17, 19, 20, 25, 26, 31, 35]*)
let (element, q4) = delete_min q4;;   (* 17 * [19, 20, 25, 26, 31, 35]*)
assert(element = 17);;
let q4 = add 18 q4;;   (* [18, 19, 20, 25, 26, 31, 35]*)
let (element, q4) = delete_min q4;;   (* 18 * [19, 20, 25, 26, 31, 35]*)
assert(element = 18);;
let q4 = add 23 q4;;   (* [19, 20, 23, 25, 26, 31, 35]*)
let q4 = add 37 q4;;   (* [19, 20, 23, 25, 26, 31, 35, 37]*)
let (element, q4) = delete_min q4;;   (* 19 * [20, 23, 25, 26, 31, 35, 37]*)
assert(element = 19);;
assert(is_empty q4 = false);;   (*[20, 23, 25, 26, 31, 35, 37]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;   (*[2, 4, 5, 7, 8, 9, 10, 11, 11, 12, 13, 15, 17, 17, 19, 19, 20, 21, 21, 23, 24, 25, 25, 25, 25, 26, 26, 29, 29, 30, 31, 32, 34, 34, 34, 35, 35, 36, 36, 37, 37]*)
let (element, q) = delete_min q;;   (* 2 * [4, 5, 7, 8, 9, 10, 11, 11, 12, 13, 15, 17, 17, 19, 19, 20, 21, 21, 23, 24, 25, 25, 25, 25, 26, 26, 29, 29, 30, 31, 32, 34, 34, 34, 35, 35, 36, 36, 37, 37, 39]*)
assert(element = 2);;
let (element, q) = delete_min q;;   (* 4 * [5, 7, 8, 9, 10, 11, 11, 12, 13, 15, 17, 17, 19, 19, 20, 21, 21, 23, 24, 25, 25, 25, 25, 26, 26, 29, 29, 30, 31, 32, 34, 34, 34, 35, 35, 36, 36, 37, 37, 39]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 5 * [7, 8, 9, 10, 11, 11, 12, 13, 15, 17, 17, 19, 19, 20, 21, 21, 23, 24, 25, 25, 25, 25, 26, 26, 29, 29, 30, 31, 32, 34, 34, 34, 35, 35, 36, 36, 37, 37, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 7 * [8, 9, 10, 11, 11, 12, 13, 15, 17, 17, 19, 19, 20, 21, 21, 23, 24, 25, 25, 25, 25, 26, 26, 29, 29, 30, 31, 32, 34, 34, 34, 35, 35, 36, 36, 37, 37, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 8 * [9, 10, 11, 11, 12, 13, 15, 17, 17, 19, 19, 20, 21, 21, 23, 24, 25, 25, 25, 25, 26, 26, 29, 29, 30, 31, 32, 34, 34, 34, 35, 35, 36, 36, 37, 37, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 9 * [10, 11, 11, 12, 13, 15, 17, 17, 19, 19, 20, 21, 21, 23, 24, 25, 25, 25, 25, 26, 26, 29, 29, 30, 31, 32, 34, 34, 34, 35, 35, 36, 36, 37, 37, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 10 * [11, 11, 12, 13, 15, 17, 17, 19, 19, 20, 21, 21, 23, 24, 25, 25, 25, 25, 26, 26, 29, 29, 30, 31, 32, 34, 34, 34, 35, 35, 36, 36, 37, 37, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 11 * [11, 12, 13, 15, 17, 17, 19, 19, 20, 21, 21, 23, 24, 25, 25, 25, 25, 26, 26, 29, 29, 30, 31, 32, 34, 34, 34, 35, 35, 36, 36, 37, 37, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 11 * [12, 13, 15, 17, 17, 19, 19, 20, 21, 21, 23, 24, 25, 25, 25, 25, 26, 26, 29, 29, 30, 31, 32, 34, 34, 34, 35, 35, 36, 36, 37, 37, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 12 * [13, 15, 17, 17, 19, 19, 20, 21, 21, 23, 24, 25, 25, 25, 25, 26, 26, 29, 29, 30, 31, 32, 34, 34, 34, 35, 35, 36, 36, 37, 37, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 13 * [15, 17, 17, 19, 19, 20, 21, 21, 23, 24, 25, 25, 25, 25, 26, 26, 29, 29, 30, 31, 32, 34, 34, 34, 35, 35, 36, 36, 37, 37, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 15 * [17, 17, 19, 19, 20, 21, 21, 23, 24, 25, 25, 25, 25, 26, 26, 29, 29, 30, 31, 32, 34, 34, 34, 35, 35, 36, 36, 37, 37, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 17 * [17, 19, 19, 20, 21, 21, 23, 24, 25, 25, 25, 25, 26, 26, 29, 29, 30, 31, 32, 34, 34, 34, 35, 35, 36, 36, 37, 37, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [19, 19, 20, 21, 21, 23, 24, 25, 25, 25, 25, 26, 26, 29, 29, 30, 31, 32, 34, 34, 34, 35, 35, 36, 36, 37, 37, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 19 * [19, 20, 21, 21, 23, 24, 25, 25, 25, 25, 26, 26, 29, 29, 30, 31, 32, 34, 34, 34, 35, 35, 36, 36, 37, 37, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [20, 21, 21, 23, 24, 25, 25, 25, 25, 26, 26, 29, 29, 30, 31, 32, 34, 34, 34, 35, 35, 36, 36, 37, 37, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [21, 21, 23, 24, 25, 25, 25, 25, 26, 26, 29, 29, 30, 31, 32, 34, 34, 34, 35, 35, 36, 36, 37, 37, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [21, 23, 24, 25, 25, 25, 25, 26, 26, 29, 29, 30, 31, 32, 34, 34, 34, 35, 35, 36, 36, 37, 37, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [23, 24, 25, 25, 25, 25, 26, 26, 29, 29, 30, 31, 32, 34, 34, 34, 35, 35, 36, 36, 37, 37, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 23 * [24, 25, 25, 25, 25, 26, 26, 29, 29, 30, 31, 32, 34, 34, 34, 35, 35, 36, 36, 37, 37, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [25, 25, 25, 25, 26, 26, 29, 29, 30, 31, 32, 34, 34, 34, 35, 35, 36, 36, 37, 37, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [25, 25, 25, 26, 26, 29, 29, 30, 31, 32, 34, 34, 34, 35, 35, 36, 36, 37, 37, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [25, 25, 26, 26, 29, 29, 30, 31, 32, 34, 34, 34, 35, 35, 36, 36, 37, 37, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [25, 26, 26, 29, 29, 30, 31, 32, 34, 34, 34, 35, 35, 36, 36, 37, 37, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [26, 26, 29, 29, 30, 31, 32, 34, 34, 34, 35, 35, 36, 36, 37, 37, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [26, 29, 29, 30, 31, 32, 34, 34, 34, 35, 35, 36, 36, 37, 37, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [29, 29, 30, 31, 32, 34, 34, 34, 35, 35, 36, 36, 37, 37, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 29 * [29, 30, 31, 32, 34, 34, 34, 35, 35, 36, 36, 37, 37, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [30, 31, 32, 34, 34, 34, 35, 35, 36, 36, 37, 37, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [31, 32, 34, 34, 34, 35, 35, 36, 36, 37, 37, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [32, 34, 34, 34, 35, 35, 36, 36, 37, 37, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [34, 34, 34, 35, 35, 36, 36, 37, 37, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 35, 35, 36, 36, 37, 37, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 35, 36, 36, 37, 37, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 36, 36, 37, 37, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 36, 37, 37, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 37, 37, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 37, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 37, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [37, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST52----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 0 q1;;   (* [0]*)
let q1 = add 13 q1;;   (* [0, 13]*)
let q1 = add 14 q1;;   (* [0, 13, 14]*)
let (element, q1) = delete_min q1;;   (* 0 * [13, 14]*)
assert(element = 0);;
let q1 = add 17 q1;;   (* [13, 14, 17]*)
let q1 = add 8 q1;;   (* [8, 13, 14, 17]*)
let (element, q1) = delete_min q1;;   (* 8 * [13, 14, 17]*)
assert(element = 8);;
let q1 = add 21 q1;;   (* [13, 14, 17, 21]*)
let (element, q1) = delete_min q1;;   (* 13 * [14, 17, 21]*)
assert(element = 13);;
assert(is_empty q1 = false);;   (*[14, 17, 21]*)
let (element, q1) = delete_min q1;;   (* 14 * [17, 21]*)
assert(element = 14);;
let q1 = add 11 q1;;   (* [11, 17, 21]*)
let q1 = add 28 q1;;   (* [11, 17, 21, 28]*)
let (element, q1) = delete_min q1;;   (* 11 * [17, 21, 28]*)
assert(element = 11);;
let q1 = add 10 q1;;   (* [10, 17, 21, 28]*)
let q1 = add 12 q1;;   (* [10, 12, 17, 21, 28]*)
let (element, q1) = delete_min q1;;   (* 10 * [12, 17, 21, 28]*)
assert(element = 10);;
let q1 = add 10 q1;;   (* [10, 12, 17, 21, 28]*)
let q1 = add 16 q1;;   (* [10, 12, 16, 17, 21, 28]*)
let q1 = add 19 q1;;   (* [10, 12, 16, 17, 19, 21, 28]*)
let q1 = add 31 q1;;   (* [10, 12, 16, 17, 19, 21, 28, 31]*)
let (element, q1) = delete_min q1;;   (* 10 * [12, 16, 17, 19, 21, 28, 31]*)
assert(element = 10);;
let (element, q1) = delete_min q1;;   (* 12 * [16, 17, 19, 21, 28, 31]*)
assert(element = 12);;
let (element, q1) = delete_min q1;;   (* 16 * [17, 19, 21, 28, 31]*)
assert(element = 16);;
let q1 = add 21 q1;;   (* [17, 19, 21, 21, 28, 31]*)
let (element, q1) = delete_min q1;;   (* 17 * [19, 21, 21, 28, 31]*)
assert(element = 17);;
let q1 = add 27 q1;;   (* [19, 21, 21, 27, 28, 31]*)
let q1 = add 38 q1;;   (* [19, 21, 21, 27, 28, 31, 38]*)
let (element, q1) = delete_min q1;;   (* 19 * [21, 21, 27, 28, 31, 38]*)
assert(element = 19);;

(* -------q2------ *)
let q2 = empty;;
let q2 = add 8 q2;;   (* [8]*)
let (element, q2) = delete_min q2;;   (* 8 * []*)
assert(element = 8);;
let q2 = add 11 q2;;   (* [11]*)
let q2 = add 30 q2;;   (* [11, 30]*)
let q2 = add 13 q2;;   (* [11, 13, 30]*)
let q2 = add 3 q2;;   (* [3, 11, 13, 30]*)
let q2 = add 19 q2;;   (* [3, 11, 13, 19, 30]*)
let q2 = add 21 q2;;   (* [3, 11, 13, 19, 21, 30]*)
let q2 = add 25 q2;;   (* [3, 11, 13, 19, 21, 25, 30]*)
assert(is_empty q2 = false);;   (*[3, 11, 13, 19, 21, 25, 30]*)
let q2 = add 4 q2;;   (* [3, 4, 11, 13, 19, 21, 25, 30]*)
let (element, q2) = delete_min q2;;   (* 3 * [4, 11, 13, 19, 21, 25, 30]*)
assert(element = 3);;
let (element, q2) = delete_min q2;;   (* 4 * [11, 13, 19, 21, 25, 30]*)
assert(element = 4);;
let q2 = add 39 q2;;   (* [11, 13, 19, 21, 25, 30, 39]*)
let q2 = add 25 q2;;   (* [11, 13, 19, 21, 25, 25, 30, 39]*)
let (element, q2) = delete_min q2;;   (* 11 * [13, 19, 21, 25, 25, 30, 39]*)
assert(element = 11);;
let q2 = add 26 q2;;   (* [13, 19, 21, 25, 25, 26, 30, 39]*)
let q2 = add 7 q2;;   (* [7, 13, 19, 21, 25, 25, 26, 30, 39]*)
let (element, q2) = delete_min q2;;   (* 7 * [13, 19, 21, 25, 25, 26, 30, 39]*)
assert(element = 7);;
let q2 = add 18 q2;;   (* [13, 18, 19, 21, 25, 25, 26, 30, 39]*)
let (element, q2) = delete_min q2;;   (* 13 * [18, 19, 21, 25, 25, 26, 30, 39]*)
assert(element = 13);;
let q2 = add 25 q2;;   (* [18, 19, 21, 25, 25, 25, 26, 30, 39]*)
let q2 = add 13 q2;;   (* [13, 18, 19, 21, 25, 25, 25, 26, 30, 39]*)
let q2 = add 4 q2;;   (* [4, 13, 18, 19, 21, 25, 25, 25, 26, 30, 39]*)
let (element, q2) = delete_min q2;;   (* 4 * [13, 18, 19, 21, 25, 25, 25, 26, 30, 39]*)
assert(element = 4);;
let q2 = add 19 q2;;   (* [13, 18, 19, 19, 21, 25, 25, 25, 26, 30, 39]*)
let q2 = add 7 q2;;   (* [7, 13, 18, 19, 19, 21, 25, 25, 25, 26, 30, 39]*)
let q2 = add 26 q2;;   (* [7, 13, 18, 19, 19, 21, 25, 25, 25, 26, 26, 30, 39]*)
let (element, q2) = delete_min q2;;   (* 7 * [13, 18, 19, 19, 21, 25, 25, 25, 26, 26, 30, 39]*)
assert(element = 7);;

(* -------q3------ *)
let q3 = empty;;
let q3 = add 10 q3;;   (* [10]*)
let q3 = add 16 q3;;   (* [10, 16]*)
let q3 = add 26 q3;;   (* [10, 16, 26]*)
let q3 = add 20 q3;;   (* [10, 16, 20, 26]*)
let q3 = add 35 q3;;   (* [10, 16, 20, 26, 35]*)
let q3 = add 21 q3;;   (* [10, 16, 20, 21, 26, 35]*)
let q3 = add 31 q3;;   (* [10, 16, 20, 21, 26, 31, 35]*)
let q3 = add 13 q3;;   (* [10, 13, 16, 20, 21, 26, 31, 35]*)
let q3 = add 33 q3;;   (* [10, 13, 16, 20, 21, 26, 31, 33, 35]*)
let q3 = add 18 q3;;   (* [10, 13, 16, 18, 20, 21, 26, 31, 33, 35]*)
let q3 = add 9 q3;;   (* [9, 10, 13, 16, 18, 20, 21, 26, 31, 33, 35]*)
let (element, q3) = delete_min q3;;   (* 9 * [10, 13, 16, 18, 20, 21, 26, 31, 33, 35]*)
assert(element = 9);;
let q3 = add 19 q3;;   (* [10, 13, 16, 18, 19, 20, 21, 26, 31, 33, 35]*)
let q3 = add 19 q3;;   (* [10, 13, 16, 18, 19, 19, 20, 21, 26, 31, 33, 35]*)
assert(is_empty q3 = false);;   (*[10, 13, 16, 18, 19, 19, 20, 21, 26, 31, 33, 35]*)
let q3 = add 13 q3;;   (* [10, 13, 13, 16, 18, 19, 19, 20, 21, 26, 31, 33, 35]*)
let q3 = add 33 q3;;   (* [10, 13, 13, 16, 18, 19, 19, 20, 21, 26, 31, 33, 33, 35]*)
let q3 = add 32 q3;;   (* [10, 13, 13, 16, 18, 19, 19, 20, 21, 26, 31, 32, 33, 33, 35]*)
let (element, q3) = delete_min q3;;   (* 10 * [13, 13, 16, 18, 19, 19, 20, 21, 26, 31, 32, 33, 33, 35]*)
assert(element = 10);;
let q3 = add 34 q3;;   (* [13, 13, 16, 18, 19, 19, 20, 21, 26, 31, 32, 33, 33, 34, 35]*)
let (element, q3) = delete_min q3;;   (* 13 * [13, 16, 18, 19, 19, 20, 21, 26, 31, 32, 33, 33, 34, 35]*)
assert(element = 13);;
let (element, q3) = delete_min q3;;   (* 13 * [16, 18, 19, 19, 20, 21, 26, 31, 32, 33, 33, 34, 35]*)
assert(element = 13);;
let (element, q3) = delete_min q3;;   (* 16 * [18, 19, 19, 20, 21, 26, 31, 32, 33, 33, 34, 35]*)
assert(element = 16);;
let q3 = add 24 q3;;   (* [18, 19, 19, 20, 21, 24, 26, 31, 32, 33, 33, 34, 35]*)
assert(is_empty q3 = false);;   (*[18, 19, 19, 20, 21, 24, 26, 31, 32, 33, 33, 34, 35]*)
let (element, q3) = delete_min q3;;   (* 18 * [19, 19, 20, 21, 24, 26, 31, 32, 33, 33, 34, 35]*)
assert(element = 18);;
let q3 = add 15 q3;;   (* [15, 19, 19, 20, 21, 24, 26, 31, 32, 33, 33, 34, 35]*)
let q3 = add 23 q3;;   (* [15, 19, 19, 20, 21, 23, 24, 26, 31, 32, 33, 33, 34, 35]*)
assert(is_empty q3 = false);;   (*[15, 19, 19, 20, 21, 23, 24, 26, 31, 32, 33, 33, 34, 35]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 29 q4;;   (* [29]*)
let (element, q4) = delete_min q4;;   (* 29 * []*)
assert(element = 29);;
assert(is_empty q4 = true);;   (*[]*)
let q4 = add 10 q4;;   (* [10]*)
let (element, q4) = delete_min q4;;   (* 10 * []*)
assert(element = 10);;
let q4 = add 37 q4;;   (* [37]*)
let q4 = add 13 q4;;   (* [13, 37]*)
let (element, q4) = delete_min q4;;   (* 13 * [37]*)
assert(element = 13);;
assert(is_empty q4 = false);;   (*[37]*)
let (element, q4) = delete_min q4;;   (* 37 * []*)
assert(element = 37);;
let q4 = add 25 q4;;   (* [25]*)
let (element, q4) = delete_min q4;;   (* 25 * []*)
assert(element = 25);;
let q4 = add 3 q4;;   (* [3]*)
let (element, q4) = delete_min q4;;   (* 3 * []*)
assert(element = 3);;
let q4 = add 25 q4;;   (* [25]*)
let q4 = add 29 q4;;   (* [25, 29]*)
let (element, q4) = delete_min q4;;   (* 25 * [29]*)
assert(element = 25);;
let q4 = add 19 q4;;   (* [19, 29]*)
let (element, q4) = delete_min q4;;   (* 19 * [29]*)
assert(element = 19);;
let q4 = add 9 q4;;   (* [9, 29]*)
let (element, q4) = delete_min q4;;   (* 9 * [29]*)
assert(element = 9);;
let q4 = add 6 q4;;   (* [6, 29]*)
let q4 = add 22 q4;;   (* [6, 22, 29]*)
let q4 = add 32 q4;;   (* [6, 22, 29, 32]*)
let (element, q4) = delete_min q4;;   (* 6 * [22, 29, 32]*)
assert(element = 6);;
let q4 = add 28 q4;;   (* [22, 28, 29, 32]*)
let q4 = add 8 q4;;   (* [8, 22, 28, 29, 32]*)
let q4 = add 15 q4;;   (* [8, 15, 22, 28, 29, 32]*)
let q4 = add 34 q4;;   (* [8, 15, 22, 28, 29, 32, 34]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;   (*[8, 13, 15, 15, 18, 19, 19, 19, 19, 20, 21, 21, 21, 21, 22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 38]*)
let (element, q) = delete_min q;;   (* 8 * [13, 15, 15, 18, 19, 19, 19, 19, 20, 21, 21, 21, 21, 22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 38, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 13 * [15, 15, 18, 19, 19, 19, 19, 20, 21, 21, 21, 21, 22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 38, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 15 * [15, 18, 19, 19, 19, 19, 20, 21, 21, 21, 21, 22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 38, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [18, 19, 19, 19, 19, 20, 21, 21, 21, 21, 22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 38, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 18 * [19, 19, 19, 19, 20, 21, 21, 21, 21, 22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 38, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [19, 19, 19, 20, 21, 21, 21, 21, 22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 38, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [19, 19, 20, 21, 21, 21, 21, 22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 38, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [19, 20, 21, 21, 21, 21, 22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 38, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [20, 21, 21, 21, 21, 22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 38, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [21, 21, 21, 21, 22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 38, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [21, 21, 21, 22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 38, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [21, 21, 22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 38, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [21, 22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 38, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 38, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 38, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 38, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 38, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [25, 25, 26, 26, 26, 27, 28, 28, 29, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 38, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [25, 26, 26, 26, 27, 28, 28, 29, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 38, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [26, 26, 26, 27, 28, 28, 29, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 38, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [26, 26, 27, 28, 28, 29, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [26, 27, 28, 28, 29, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [27, 28, 28, 29, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [28, 28, 29, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 38, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [28, 29, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 38, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [29, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 38, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 38, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 32, 32, 33, 33, 34, 34, 35, 38, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 32, 32, 33, 33, 34, 34, 35, 38, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 33, 33, 34, 34, 35, 38, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 33, 34, 34, 35, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 33, 34, 34, 35, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [33, 34, 34, 35, 38, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [34, 34, 35, 38, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 38, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 38, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 38 * [39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST53----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 6 q1;;   (* [6]*)
let (element, q1) = delete_min q1;;   (* 6 * []*)
assert(element = 6);;
let q1 = add 37 q1;;   (* [37]*)
assert(is_empty q1 = false);;   (*[37]*)
let q1 = add 7 q1;;   (* [7, 37]*)
let q1 = add 38 q1;;   (* [7, 37, 38]*)
let (element, q1) = delete_min q1;;   (* 7 * [37, 38]*)
assert(element = 7);;
let (element, q1) = delete_min q1;;   (* 37 * [38]*)
assert(element = 37);;
let q1 = add 27 q1;;   (* [27, 38]*)
let q1 = add 1 q1;;   (* [1, 27, 38]*)
let (element, q1) = delete_min q1;;   (* 1 * [27, 38]*)
assert(element = 1);;
let q1 = add 22 q1;;   (* [22, 27, 38]*)
let q1 = add 33 q1;;   (* [22, 27, 33, 38]*)
let (element, q1) = delete_min q1;;   (* 22 * [27, 33, 38]*)
assert(element = 22);;
let q1 = add 9 q1;;   (* [9, 27, 33, 38]*)
let q1 = add 8 q1;;   (* [8, 9, 27, 33, 38]*)
let q1 = add 34 q1;;   (* [8, 9, 27, 33, 34, 38]*)
let q1 = add 26 q1;;   (* [8, 9, 26, 27, 33, 34, 38]*)
let q1 = add 38 q1;;   (* [8, 9, 26, 27, 33, 34, 38, 38]*)
let q1 = add 34 q1;;   (* [8, 9, 26, 27, 33, 34, 34, 38, 38]*)
let q1 = add 29 q1;;   (* [8, 9, 26, 27, 29, 33, 34, 34, 38, 38]*)
let q1 = add 6 q1;;   (* [6, 8, 9, 26, 27, 29, 33, 34, 34, 38, 38]*)
let q1 = add 33 q1;;   (* [6, 8, 9, 26, 27, 29, 33, 33, 34, 34, 38, 38]*)
assert(is_empty q1 = false);;   (*[6, 8, 9, 26, 27, 29, 33, 33, 34, 34, 38, 38]*)
let q1 = add 37 q1;;   (* [6, 8, 9, 26, 27, 29, 33, 33, 34, 34, 37, 38, 38]*)
let (element, q1) = delete_min q1;;   (* 6 * [8, 9, 26, 27, 29, 33, 33, 34, 34, 37, 38, 38]*)
assert(element = 6);;
let (element, q1) = delete_min q1;;   (* 8 * [9, 26, 27, 29, 33, 33, 34, 34, 37, 38, 38]*)
assert(element = 8);;
let q1 = add 27 q1;;   (* [9, 26, 27, 27, 29, 33, 33, 34, 34, 37, 38, 38]*)
let (element, q1) = delete_min q1;;   (* 9 * [26, 27, 27, 29, 33, 33, 34, 34, 37, 38, 38]*)
assert(element = 9);;
let q1 = add 17 q1;;   (* [17, 26, 27, 27, 29, 33, 33, 34, 34, 37, 38, 38]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 1 q2;;   (* [1]*)
let q2 = add 8 q2;;   (* [1, 8]*)
let q2 = add 4 q2;;   (* [1, 4, 8]*)
let (element, q2) = delete_min q2;;   (* 1 * [4, 8]*)
assert(element = 1);;
let (element, q2) = delete_min q2;;   (* 4 * [8]*)
assert(element = 4);;
let q2 = add 34 q2;;   (* [8, 34]*)
let q2 = add 22 q2;;   (* [8, 22, 34]*)
let (element, q2) = delete_min q2;;   (* 8 * [22, 34]*)
assert(element = 8);;
let q2 = add 31 q2;;   (* [22, 31, 34]*)
let q2 = add 18 q2;;   (* [18, 22, 31, 34]*)
let (element, q2) = delete_min q2;;   (* 18 * [22, 31, 34]*)
assert(element = 18);;
let (element, q2) = delete_min q2;;   (* 22 * [31, 34]*)
assert(element = 22);;
assert(is_empty q2 = false);;   (*[31, 34]*)
let q2 = add 13 q2;;   (* [13, 31, 34]*)
let q2 = add 11 q2;;   (* [11, 13, 31, 34]*)
let (element, q2) = delete_min q2;;   (* 11 * [13, 31, 34]*)
assert(element = 11);;
let q2 = add 24 q2;;   (* [13, 24, 31, 34]*)
let (element, q2) = delete_min q2;;   (* 13 * [24, 31, 34]*)
assert(element = 13);;
let q2 = add 35 q2;;   (* [24, 31, 34, 35]*)
let q2 = add 7 q2;;   (* [7, 24, 31, 34, 35]*)
let q2 = add 26 q2;;   (* [7, 24, 26, 31, 34, 35]*)
let q2 = add 1 q2;;   (* [1, 7, 24, 26, 31, 34, 35]*)
let (element, q2) = delete_min q2;;   (* 1 * [7, 24, 26, 31, 34, 35]*)
assert(element = 1);;
let q2 = add 13 q2;;   (* [7, 13, 24, 26, 31, 34, 35]*)
let (element, q2) = delete_min q2;;   (* 7 * [13, 24, 26, 31, 34, 35]*)
assert(element = 7);;
let q2 = add 29 q2;;   (* [13, 24, 26, 29, 31, 34, 35]*)
let (element, q2) = delete_min q2;;   (* 13 * [24, 26, 29, 31, 34, 35]*)
assert(element = 13);;
let (element, q2) = delete_min q2;;   (* 24 * [26, 29, 31, 34, 35]*)
assert(element = 24);;
let q2 = add 25 q2;;   (* [25, 26, 29, 31, 34, 35]*)
let q2 = add 2 q2;;   (* [2, 25, 26, 29, 31, 34, 35]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 34 q3;;   (* [34]*)
let q3 = add 2 q3;;   (* [2, 34]*)
let q3 = add 35 q3;;   (* [2, 34, 35]*)
let q3 = add 1 q3;;   (* [1, 2, 34, 35]*)
let q3 = add 1 q3;;   (* [1, 1, 2, 34, 35]*)
let q3 = add 30 q3;;   (* [1, 1, 2, 30, 34, 35]*)
let q3 = add 3 q3;;   (* [1, 1, 2, 3, 30, 34, 35]*)
let q3 = add 6 q3;;   (* [1, 1, 2, 3, 6, 30, 34, 35]*)
let q3 = add 35 q3;;   (* [1, 1, 2, 3, 6, 30, 34, 35, 35]*)
let q3 = add 35 q3;;   (* [1, 1, 2, 3, 6, 30, 34, 35, 35, 35]*)
let q3 = add 30 q3;;   (* [1, 1, 2, 3, 6, 30, 30, 34, 35, 35, 35]*)
let q3 = add 35 q3;;   (* [1, 1, 2, 3, 6, 30, 30, 34, 35, 35, 35, 35]*)
let q3 = add 2 q3;;   (* [1, 1, 2, 2, 3, 6, 30, 30, 34, 35, 35, 35, 35]*)
let q3 = add 4 q3;;   (* [1, 1, 2, 2, 3, 4, 6, 30, 30, 34, 35, 35, 35, 35]*)
let q3 = add 37 q3;;   (* [1, 1, 2, 2, 3, 4, 6, 30, 30, 34, 35, 35, 35, 35, 37]*)
let q3 = add 32 q3;;   (* [1, 1, 2, 2, 3, 4, 6, 30, 30, 32, 34, 35, 35, 35, 35, 37]*)
let q3 = add 39 q3;;   (* [1, 1, 2, 2, 3, 4, 6, 30, 30, 32, 34, 35, 35, 35, 35, 37, 39]*)
let q3 = add 34 q3;;   (* [1, 1, 2, 2, 3, 4, 6, 30, 30, 32, 34, 34, 35, 35, 35, 35, 37, 39]*)
let q3 = add 10 q3;;   (* [1, 1, 2, 2, 3, 4, 6, 10, 30, 30, 32, 34, 34, 35, 35, 35, 35, 37, 39]*)
let q3 = add 12 q3;;   (* [1, 1, 2, 2, 3, 4, 6, 10, 12, 30, 30, 32, 34, 34, 35, 35, 35, 35, 37, 39]*)
let q3 = add 30 q3;;   (* [1, 1, 2, 2, 3, 4, 6, 10, 12, 30, 30, 30, 32, 34, 34, 35, 35, 35, 35, 37, 39]*)
let q3 = add 19 q3;;   (* [1, 1, 2, 2, 3, 4, 6, 10, 12, 19, 30, 30, 30, 32, 34, 34, 35, 35, 35, 35, 37, 39]*)
let (element, q3) = delete_min q3;;   (* 1 * [1, 2, 2, 3, 4, 6, 10, 12, 19, 30, 30, 30, 32, 34, 34, 35, 35, 35, 35, 37, 39]*)
assert(element = 1);;
let q3 = add 34 q3;;   (* [1, 2, 2, 3, 4, 6, 10, 12, 19, 30, 30, 30, 32, 34, 34, 34, 35, 35, 35, 35, 37, 39]*)
let q3 = add 35 q3;;   (* [1, 2, 2, 3, 4, 6, 10, 12, 19, 30, 30, 30, 32, 34, 34, 34, 35, 35, 35, 35, 35, 37, 39]*)
assert(is_empty q3 = false);;   (*[1, 2, 2, 3, 4, 6, 10, 12, 19, 30, 30, 30, 32, 34, 34, 34, 35, 35, 35, 35, 35, 37, 39]*)
let (element, q3) = delete_min q3;;   (* 1 * [2, 2, 3, 4, 6, 10, 12, 19, 30, 30, 30, 32, 34, 34, 34, 35, 35, 35, 35, 35, 37, 39]*)
assert(element = 1);;
assert(is_empty q3 = false);;   (*[2, 2, 3, 4, 6, 10, 12, 19, 30, 30, 30, 32, 34, 34, 34, 35, 35, 35, 35, 35, 37, 39]*)
let q3 = add 20 q3;;   (* [2, 2, 3, 4, 6, 10, 12, 19, 20, 30, 30, 30, 32, 34, 34, 34, 35, 35, 35, 35, 35, 37, 39]*)
let (element, q3) = delete_min q3;;   (* 2 * [2, 3, 4, 6, 10, 12, 19, 20, 30, 30, 30, 32, 34, 34, 34, 35, 35, 35, 35, 35, 37, 39]*)
assert(element = 2);;

(* -------q4------ *)
let q4 = empty;;
let q4 = add 12 q4;;   (* [12]*)
let q4 = add 25 q4;;   (* [12, 25]*)
let q4 = add 6 q4;;   (* [6, 12, 25]*)
let (element, q4) = delete_min q4;;   (* 6 * [12, 25]*)
assert(element = 6);;
assert(is_empty q4 = false);;   (*[12, 25]*)
let q4 = add 32 q4;;   (* [12, 25, 32]*)
let q4 = add 35 q4;;   (* [12, 25, 32, 35]*)
let q4 = add 4 q4;;   (* [4, 12, 25, 32, 35]*)
let q4 = add 25 q4;;   (* [4, 12, 25, 25, 32, 35]*)
let (element, q4) = delete_min q4;;   (* 4 * [12, 25, 25, 32, 35]*)
assert(element = 4);;
let (element, q4) = delete_min q4;;   (* 12 * [25, 25, 32, 35]*)
assert(element = 12);;
let q4 = add 20 q4;;   (* [20, 25, 25, 32, 35]*)
let q4 = add 24 q4;;   (* [20, 24, 25, 25, 32, 35]*)
assert(is_empty q4 = false);;   (*[20, 24, 25, 25, 32, 35]*)
let (element, q4) = delete_min q4;;   (* 20 * [24, 25, 25, 32, 35]*)
assert(element = 20);;
let q4 = add 36 q4;;   (* [24, 25, 25, 32, 35, 36]*)
let (element, q4) = delete_min q4;;   (* 24 * [25, 25, 32, 35, 36]*)
assert(element = 24);;
let (element, q4) = delete_min q4;;   (* 25 * [25, 32, 35, 36]*)
assert(element = 25);;
let q4 = add 2 q4;;   (* [2, 25, 32, 35, 36]*)
let q4 = add 36 q4;;   (* [2, 25, 32, 35, 36, 36]*)
let q4 = add 5 q4;;   (* [2, 5, 25, 32, 35, 36, 36]*)
let (element, q4) = delete_min q4;;   (* 2 * [5, 25, 32, 35, 36, 36]*)
assert(element = 2);;
let q4 = add 37 q4;;   (* [5, 25, 32, 35, 36, 36, 37]*)
let q4 = add 11 q4;;   (* [5, 11, 25, 32, 35, 36, 36, 37]*)
let (element, q4) = delete_min q4;;   (* 5 * [11, 25, 32, 35, 36, 36, 37]*)
assert(element = 5);;
assert(is_empty q4 = false);;   (*[11, 25, 32, 35, 36, 36, 37]*)
let q4 = add 14 q4;;   (* [11, 14, 25, 32, 35, 36, 36, 37]*)
let q4 = add 19 q4;;   (* [11, 14, 19, 25, 32, 35, 36, 36, 37]*)
assert(is_empty q4 = false);;   (*[11, 14, 19, 25, 32, 35, 36, 36, 37]*)
let q4 = add 17 q4;;   (* [11, 14, 17, 19, 25, 32, 35, 36, 36, 37]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;   (*[2, 2, 3, 4, 6, 10, 11, 12, 14, 17, 17, 19, 19, 20, 25, 25, 26, 26, 27, 27, 29, 29, 30, 30, 30, 31, 32, 32, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38]*)
let (element, q) = delete_min q;;   (* 2 * [2, 3, 4, 6, 10, 11, 12, 14, 17, 17, 19, 19, 20, 25, 25, 26, 26, 27, 27, 29, 29, 30, 30, 30, 31, 32, 32, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 2);;
let (element, q) = delete_min q;;   (* 2 * [3, 4, 6, 10, 11, 12, 14, 17, 17, 19, 19, 20, 25, 25, 26, 26, 27, 27, 29, 29, 30, 30, 30, 31, 32, 32, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 2);;
let (element, q) = delete_min q;;   (* 3 * [4, 6, 10, 11, 12, 14, 17, 17, 19, 19, 20, 25, 25, 26, 26, 27, 27, 29, 29, 30, 30, 30, 31, 32, 32, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 3);;
let (element, q) = delete_min q;;   (* 4 * [6, 10, 11, 12, 14, 17, 17, 19, 19, 20, 25, 25, 26, 26, 27, 27, 29, 29, 30, 30, 30, 31, 32, 32, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 6 * [10, 11, 12, 14, 17, 17, 19, 19, 20, 25, 25, 26, 26, 27, 27, 29, 29, 30, 30, 30, 31, 32, 32, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 10 * [11, 12, 14, 17, 17, 19, 19, 20, 25, 25, 26, 26, 27, 27, 29, 29, 30, 30, 30, 31, 32, 32, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 11 * [12, 14, 17, 17, 19, 19, 20, 25, 25, 26, 26, 27, 27, 29, 29, 30, 30, 30, 31, 32, 32, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 12 * [14, 17, 17, 19, 19, 20, 25, 25, 26, 26, 27, 27, 29, 29, 30, 30, 30, 31, 32, 32, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 14 * [17, 17, 19, 19, 20, 25, 25, 26, 26, 27, 27, 29, 29, 30, 30, 30, 31, 32, 32, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 17 * [17, 19, 19, 20, 25, 25, 26, 26, 27, 27, 29, 29, 30, 30, 30, 31, 32, 32, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [19, 19, 20, 25, 25, 26, 26, 27, 27, 29, 29, 30, 30, 30, 31, 32, 32, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 19 * [19, 20, 25, 25, 26, 26, 27, 27, 29, 29, 30, 30, 30, 31, 32, 32, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [20, 25, 25, 26, 26, 27, 27, 29, 29, 30, 30, 30, 31, 32, 32, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [25, 25, 26, 26, 27, 27, 29, 29, 30, 30, 30, 31, 32, 32, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 25 * [25, 26, 26, 27, 27, 29, 29, 30, 30, 30, 31, 32, 32, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [26, 26, 27, 27, 29, 29, 30, 30, 30, 31, 32, 32, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [26, 27, 27, 29, 29, 30, 30, 30, 31, 32, 32, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [27, 27, 29, 29, 30, 30, 30, 31, 32, 32, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [27, 29, 29, 30, 30, 30, 31, 32, 32, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [29, 29, 30, 30, 30, 31, 32, 32, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 29 * [29, 30, 30, 30, 31, 32, 32, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [30, 30, 30, 31, 32, 32, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [30, 30, 31, 32, 32, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [30, 31, 32, 32, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [31, 32, 32, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 37, 37, 37, 38, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 37, 37, 38, 38, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 37, 37, 38, 38, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [37, 37, 38, 38, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [37, 38, 38, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [38, 38, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST54----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 8 q1;;   (* [8]*)
let (element, q1) = delete_min q1;;   (* 8 * []*)
assert(element = 8);;
let q1 = add 39 q1;;   (* [39]*)
let q1 = add 11 q1;;   (* [11, 39]*)
let q1 = add 18 q1;;   (* [11, 18, 39]*)
let q1 = add 12 q1;;   (* [11, 12, 18, 39]*)
let q1 = add 12 q1;;   (* [11, 12, 12, 18, 39]*)
let q1 = add 37 q1;;   (* [11, 12, 12, 18, 37, 39]*)
let q1 = add 28 q1;;   (* [11, 12, 12, 18, 28, 37, 39]*)
assert(is_empty q1 = false);;   (*[11, 12, 12, 18, 28, 37, 39]*)
let q1 = add 12 q1;;   (* [11, 12, 12, 12, 18, 28, 37, 39]*)
assert(is_empty q1 = false);;   (*[11, 12, 12, 12, 18, 28, 37, 39]*)
let (element, q1) = delete_min q1;;   (* 11 * [12, 12, 12, 18, 28, 37, 39]*)
assert(element = 11);;
let q1 = add 39 q1;;   (* [12, 12, 12, 18, 28, 37, 39, 39]*)
let q1 = add 1 q1;;   (* [1, 12, 12, 12, 18, 28, 37, 39, 39]*)
let (element, q1) = delete_min q1;;   (* 1 * [12, 12, 12, 18, 28, 37, 39, 39]*)
assert(element = 1);;
assert(is_empty q1 = false);;   (*[12, 12, 12, 18, 28, 37, 39, 39]*)
let q1 = add 13 q1;;   (* [12, 12, 12, 13, 18, 28, 37, 39, 39]*)
let q1 = add 24 q1;;   (* [12, 12, 12, 13, 18, 24, 28, 37, 39, 39]*)
let q1 = add 3 q1;;   (* [3, 12, 12, 12, 13, 18, 24, 28, 37, 39, 39]*)
assert(is_empty q1 = false);;   (*[3, 12, 12, 12, 13, 18, 24, 28, 37, 39, 39]*)
let q1 = add 10 q1;;   (* [3, 10, 12, 12, 12, 13, 18, 24, 28, 37, 39, 39]*)
let q1 = add 21 q1;;   (* [3, 10, 12, 12, 12, 13, 18, 21, 24, 28, 37, 39, 39]*)
let q1 = add 26 q1;;   (* [3, 10, 12, 12, 12, 13, 18, 21, 24, 26, 28, 37, 39, 39]*)
let q1 = add 28 q1;;   (* [3, 10, 12, 12, 12, 13, 18, 21, 24, 26, 28, 28, 37, 39, 39]*)
let (element, q1) = delete_min q1;;   (* 3 * [10, 12, 12, 12, 13, 18, 21, 24, 26, 28, 28, 37, 39, 39]*)
assert(element = 3);;
let q1 = add 2 q1;;   (* [2, 10, 12, 12, 12, 13, 18, 21, 24, 26, 28, 28, 37, 39, 39]*)
let (element, q1) = delete_min q1;;   (* 2 * [10, 12, 12, 12, 13, 18, 21, 24, 26, 28, 28, 37, 39, 39]*)
assert(element = 2);;
let (element, q1) = delete_min q1;;   (* 10 * [12, 12, 12, 13, 18, 21, 24, 26, 28, 28, 37, 39, 39]*)
assert(element = 10);;
let (element, q1) = delete_min q1;;   (* 12 * [12, 12, 13, 18, 21, 24, 26, 28, 28, 37, 39, 39]*)
assert(element = 12);;
let (element, q1) = delete_min q1;;   (* 12 * [12, 13, 18, 21, 24, 26, 28, 28, 37, 39, 39]*)
assert(element = 12);;

(* -------q2------ *)
let q2 = empty;;
let q2 = add 32 q2;;   (* [32]*)
let q2 = add 27 q2;;   (* [27, 32]*)
let q2 = add 18 q2;;   (* [18, 27, 32]*)
let q2 = add 8 q2;;   (* [8, 18, 27, 32]*)
let (element, q2) = delete_min q2;;   (* 8 * [18, 27, 32]*)
assert(element = 8);;
let q2 = add 24 q2;;   (* [18, 24, 27, 32]*)
let (element, q2) = delete_min q2;;   (* 18 * [24, 27, 32]*)
assert(element = 18);;
let q2 = add 4 q2;;   (* [4, 24, 27, 32]*)
let q2 = add 26 q2;;   (* [4, 24, 26, 27, 32]*)
assert(is_empty q2 = false);;   (*[4, 24, 26, 27, 32]*)
assert(is_empty q2 = false);;   (*[4, 24, 26, 27, 32]*)
let q2 = add 18 q2;;   (* [4, 18, 24, 26, 27, 32]*)
let q2 = add 25 q2;;   (* [4, 18, 24, 25, 26, 27, 32]*)
assert(is_empty q2 = false);;   (*[4, 18, 24, 25, 26, 27, 32]*)
let (element, q2) = delete_min q2;;   (* 4 * [18, 24, 25, 26, 27, 32]*)
assert(element = 4);;
assert(is_empty q2 = false);;   (*[18, 24, 25, 26, 27, 32]*)
let q2 = add 35 q2;;   (* [18, 24, 25, 26, 27, 32, 35]*)
let q2 = add 13 q2;;   (* [13, 18, 24, 25, 26, 27, 32, 35]*)
let q2 = add 32 q2;;   (* [13, 18, 24, 25, 26, 27, 32, 32, 35]*)
let q2 = add 31 q2;;   (* [13, 18, 24, 25, 26, 27, 31, 32, 32, 35]*)
let (element, q2) = delete_min q2;;   (* 13 * [18, 24, 25, 26, 27, 31, 32, 32, 35]*)
assert(element = 13);;
let q2 = add 21 q2;;   (* [18, 21, 24, 25, 26, 27, 31, 32, 32, 35]*)
let q2 = add 37 q2;;   (* [18, 21, 24, 25, 26, 27, 31, 32, 32, 35, 37]*)
let q2 = add 1 q2;;   (* [1, 18, 21, 24, 25, 26, 27, 31, 32, 32, 35, 37]*)
let (element, q2) = delete_min q2;;   (* 1 * [18, 21, 24, 25, 26, 27, 31, 32, 32, 35, 37]*)
assert(element = 1);;
let q2 = add 9 q2;;   (* [9, 18, 21, 24, 25, 26, 27, 31, 32, 32, 35, 37]*)
let q2 = add 37 q2;;   (* [9, 18, 21, 24, 25, 26, 27, 31, 32, 32, 35, 37, 37]*)
let q2 = add 24 q2;;   (* [9, 18, 21, 24, 24, 25, 26, 27, 31, 32, 32, 35, 37, 37]*)
let q2 = add 2 q2;;   (* [2, 9, 18, 21, 24, 24, 25, 26, 27, 31, 32, 32, 35, 37, 37]*)
let q2 = add 33 q2;;   (* [2, 9, 18, 21, 24, 24, 25, 26, 27, 31, 32, 32, 33, 35, 37, 37]*)
let q2 = add 33 q2;;   (* [2, 9, 18, 21, 24, 24, 25, 26, 27, 31, 32, 32, 33, 33, 35, 37, 37]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 2 q3;;   (* [2]*)
let (element, q3) = delete_min q3;;   (* 2 * []*)
assert(element = 2);;
let q3 = add 2 q3;;   (* [2]*)
let q3 = add 20 q3;;   (* [2, 20]*)
let q3 = add 37 q3;;   (* [2, 20, 37]*)
let (element, q3) = delete_min q3;;   (* 2 * [20, 37]*)
assert(element = 2);;
let q3 = add 39 q3;;   (* [20, 37, 39]*)
let q3 = add 39 q3;;   (* [20, 37, 39, 39]*)
let q3 = add 22 q3;;   (* [20, 22, 37, 39, 39]*)
let (element, q3) = delete_min q3;;   (* 20 * [22, 37, 39, 39]*)
assert(element = 20);;
let q3 = add 13 q3;;   (* [13, 22, 37, 39, 39]*)
let q3 = add 2 q3;;   (* [2, 13, 22, 37, 39, 39]*)
let q3 = add 10 q3;;   (* [2, 10, 13, 22, 37, 39, 39]*)
let q3 = add 11 q3;;   (* [2, 10, 11, 13, 22, 37, 39, 39]*)
let q3 = add 18 q3;;   (* [2, 10, 11, 13, 18, 22, 37, 39, 39]*)
let q3 = add 18 q3;;   (* [2, 10, 11, 13, 18, 18, 22, 37, 39, 39]*)
let (element, q3) = delete_min q3;;   (* 2 * [10, 11, 13, 18, 18, 22, 37, 39, 39]*)
assert(element = 2);;
let q3 = add 2 q3;;   (* [2, 10, 11, 13, 18, 18, 22, 37, 39, 39]*)
let (element, q3) = delete_min q3;;   (* 2 * [10, 11, 13, 18, 18, 22, 37, 39, 39]*)
assert(element = 2);;
let q3 = add 26 q3;;   (* [10, 11, 13, 18, 18, 22, 26, 37, 39, 39]*)
let q3 = add 6 q3;;   (* [6, 10, 11, 13, 18, 18, 22, 26, 37, 39, 39]*)
assert(is_empty q3 = false);;   (*[6, 10, 11, 13, 18, 18, 22, 26, 37, 39, 39]*)
let q3 = add 33 q3;;   (* [6, 10, 11, 13, 18, 18, 22, 26, 33, 37, 39, 39]*)
assert(is_empty q3 = false);;   (*[6, 10, 11, 13, 18, 18, 22, 26, 33, 37, 39, 39]*)
let q3 = add 29 q3;;   (* [6, 10, 11, 13, 18, 18, 22, 26, 29, 33, 37, 39, 39]*)
let q3 = add 6 q3;;   (* [6, 6, 10, 11, 13, 18, 18, 22, 26, 29, 33, 37, 39, 39]*)
let q3 = add 7 q3;;   (* [6, 6, 7, 10, 11, 13, 18, 18, 22, 26, 29, 33, 37, 39, 39]*)
let q3 = add 16 q3;;   (* [6, 6, 7, 10, 11, 13, 16, 18, 18, 22, 26, 29, 33, 37, 39, 39]*)
let (element, q3) = delete_min q3;;   (* 6 * [6, 7, 10, 11, 13, 16, 18, 18, 22, 26, 29, 33, 37, 39, 39]*)
assert(element = 6);;
let q3 = add 9 q3;;   (* [6, 7, 9, 10, 11, 13, 16, 18, 18, 22, 26, 29, 33, 37, 39, 39]*)
let (element, q3) = delete_min q3;;   (* 6 * [7, 9, 10, 11, 13, 16, 18, 18, 22, 26, 29, 33, 37, 39, 39]*)
assert(element = 6);;

(* -------q4------ *)
let q4 = empty;;
let q4 = add 8 q4;;   (* [8]*)
let (element, q4) = delete_min q4;;   (* 8 * []*)
assert(element = 8);;
let q4 = add 37 q4;;   (* [37]*)
let q4 = add 14 q4;;   (* [14, 37]*)
let q4 = add 10 q4;;   (* [10, 14, 37]*)
let q4 = add 5 q4;;   (* [5, 10, 14, 37]*)
let (element, q4) = delete_min q4;;   (* 5 * [10, 14, 37]*)
assert(element = 5);;
let (element, q4) = delete_min q4;;   (* 10 * [14, 37]*)
assert(element = 10);;
let (element, q4) = delete_min q4;;   (* 14 * [37]*)
assert(element = 14);;
let q4 = add 28 q4;;   (* [28, 37]*)
assert(is_empty q4 = false);;   (*[28, 37]*)
assert(is_empty q4 = false);;   (*[28, 37]*)
let (element, q4) = delete_min q4;;   (* 28 * [37]*)
assert(element = 28);;
let q4 = add 14 q4;;   (* [14, 37]*)
let (element, q4) = delete_min q4;;   (* 14 * [37]*)
assert(element = 14);;
let q4 = add 9 q4;;   (* [9, 37]*)
let q4 = add 9 q4;;   (* [9, 9, 37]*)
let q4 = add 1 q4;;   (* [1, 9, 9, 37]*)
let q4 = add 1 q4;;   (* [1, 1, 9, 9, 37]*)
let q4 = add 34 q4;;   (* [1, 1, 9, 9, 34, 37]*)
let (element, q4) = delete_min q4;;   (* 1 * [1, 9, 9, 34, 37]*)
assert(element = 1);;
let q4 = add 25 q4;;   (* [1, 9, 9, 25, 34, 37]*)
let q4 = add 14 q4;;   (* [1, 9, 9, 14, 25, 34, 37]*)
let q4 = add 17 q4;;   (* [1, 9, 9, 14, 17, 25, 34, 37]*)
let q4 = add 7 q4;;   (* [1, 7, 9, 9, 14, 17, 25, 34, 37]*)
assert(is_empty q4 = false);;   (*[1, 7, 9, 9, 14, 17, 25, 34, 37]*)
let q4 = add 34 q4;;   (* [1, 7, 9, 9, 14, 17, 25, 34, 34, 37]*)
let (element, q4) = delete_min q4;;   (* 1 * [7, 9, 9, 14, 17, 25, 34, 34, 37]*)
assert(element = 1);;
assert(is_empty q4 = false);;   (*[7, 9, 9, 14, 17, 25, 34, 34, 37]*)
let (element, q4) = delete_min q4;;   (* 7 * [9, 9, 14, 17, 25, 34, 34, 37]*)
assert(element = 7);;
let q4 = add 31 q4;;   (* [9, 9, 14, 17, 25, 31, 34, 34, 37]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;   (*[2, 7, 9, 9, 9, 9, 10, 11, 12, 13, 13, 14, 16, 17, 18, 18, 18, 18, 21, 21, 22, 24, 24, 24, 25, 25, 26, 26, 26, 27, 28, 28, 29, 31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39]*)
let (element, q) = delete_min q;;   (* 2 * [7, 9, 9, 9, 9, 10, 11, 12, 13, 13, 14, 16, 17, 18, 18, 18, 18, 21, 21, 22, 24, 24, 24, 25, 25, 26, 26, 26, 27, 28, 28, 29, 31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 2);;
let (element, q) = delete_min q;;   (* 7 * [9, 9, 9, 9, 10, 11, 12, 13, 13, 14, 16, 17, 18, 18, 18, 18, 21, 21, 22, 24, 24, 24, 25, 25, 26, 26, 26, 27, 28, 28, 29, 31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 9 * [9, 9, 9, 10, 11, 12, 13, 13, 14, 16, 17, 18, 18, 18, 18, 21, 21, 22, 24, 24, 24, 25, 25, 26, 26, 26, 27, 28, 28, 29, 31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 9 * [9, 9, 10, 11, 12, 13, 13, 14, 16, 17, 18, 18, 18, 18, 21, 21, 22, 24, 24, 24, 25, 25, 26, 26, 26, 27, 28, 28, 29, 31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 9 * [9, 10, 11, 12, 13, 13, 14, 16, 17, 18, 18, 18, 18, 21, 21, 22, 24, 24, 24, 25, 25, 26, 26, 26, 27, 28, 28, 29, 31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 9 * [10, 11, 12, 13, 13, 14, 16, 17, 18, 18, 18, 18, 21, 21, 22, 24, 24, 24, 25, 25, 26, 26, 26, 27, 28, 28, 29, 31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 10 * [11, 12, 13, 13, 14, 16, 17, 18, 18, 18, 18, 21, 21, 22, 24, 24, 24, 25, 25, 26, 26, 26, 27, 28, 28, 29, 31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 11 * [12, 13, 13, 14, 16, 17, 18, 18, 18, 18, 21, 21, 22, 24, 24, 24, 25, 25, 26, 26, 26, 27, 28, 28, 29, 31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 12 * [13, 13, 14, 16, 17, 18, 18, 18, 18, 21, 21, 22, 24, 24, 24, 25, 25, 26, 26, 26, 27, 28, 28, 29, 31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 13 * [13, 14, 16, 17, 18, 18, 18, 18, 21, 21, 22, 24, 24, 24, 25, 25, 26, 26, 26, 27, 28, 28, 29, 31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 13 * [14, 16, 17, 18, 18, 18, 18, 21, 21, 22, 24, 24, 24, 25, 25, 26, 26, 26, 27, 28, 28, 29, 31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 14 * [16, 17, 18, 18, 18, 18, 21, 21, 22, 24, 24, 24, 25, 25, 26, 26, 26, 27, 28, 28, 29, 31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 16 * [17, 18, 18, 18, 18, 21, 21, 22, 24, 24, 24, 25, 25, 26, 26, 26, 27, 28, 28, 29, 31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 17 * [18, 18, 18, 18, 21, 21, 22, 24, 24, 24, 25, 25, 26, 26, 26, 27, 28, 28, 29, 31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [18, 18, 18, 21, 21, 22, 24, 24, 24, 25, 25, 26, 26, 26, 27, 28, 28, 29, 31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [18, 18, 21, 21, 22, 24, 24, 24, 25, 25, 26, 26, 26, 27, 28, 28, 29, 31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [18, 21, 21, 22, 24, 24, 24, 25, 25, 26, 26, 26, 27, 28, 28, 29, 31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [21, 21, 22, 24, 24, 24, 25, 25, 26, 26, 26, 27, 28, 28, 29, 31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 21 * [21, 22, 24, 24, 24, 25, 25, 26, 26, 26, 27, 28, 28, 29, 31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [22, 24, 24, 24, 25, 25, 26, 26, 26, 27, 28, 28, 29, 31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [24, 24, 24, 25, 25, 26, 26, 26, 27, 28, 28, 29, 31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 24 * [24, 24, 25, 25, 26, 26, 26, 27, 28, 28, 29, 31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [24, 25, 25, 26, 26, 26, 27, 28, 28, 29, 31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [25, 25, 26, 26, 26, 27, 28, 28, 29, 31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [25, 26, 26, 26, 27, 28, 28, 29, 31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [26, 26, 26, 27, 28, 28, 29, 31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [26, 26, 27, 28, 28, 29, 31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [26, 27, 28, 28, 29, 31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [27, 28, 28, 29, 31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [28, 28, 29, 31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [28, 29, 31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [29, 31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 31 * [31, 32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [34, 34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [37, 37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 37 * [37, 37, 37, 37, 39, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [37, 37, 37, 39, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [37, 37, 39, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [37, 39, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [39, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 39 * [39, 39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST55----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 10 q1;;   (* [10]*)
let q1 = add 34 q1;;   (* [10, 34]*)
let (element, q1) = delete_min q1;;   (* 10 * [34]*)
assert(element = 10);;
let q1 = add 17 q1;;   (* [17, 34]*)
let (element, q1) = delete_min q1;;   (* 17 * [34]*)
assert(element = 17);;
let q1 = add 9 q1;;   (* [9, 34]*)
let q1 = add 3 q1;;   (* [3, 9, 34]*)
let q1 = add 22 q1;;   (* [3, 9, 22, 34]*)
let q1 = add 29 q1;;   (* [3, 9, 22, 29, 34]*)
let q1 = add 12 q1;;   (* [3, 9, 12, 22, 29, 34]*)
let q1 = add 17 q1;;   (* [3, 9, 12, 17, 22, 29, 34]*)
let (element, q1) = delete_min q1;;   (* 3 * [9, 12, 17, 22, 29, 34]*)
assert(element = 3);;
let q1 = add 22 q1;;   (* [9, 12, 17, 22, 22, 29, 34]*)
let q1 = add 18 q1;;   (* [9, 12, 17, 18, 22, 22, 29, 34]*)
let (element, q1) = delete_min q1;;   (* 9 * [12, 17, 18, 22, 22, 29, 34]*)
assert(element = 9);;
let (element, q1) = delete_min q1;;   (* 12 * [17, 18, 22, 22, 29, 34]*)
assert(element = 12);;
let q1 = add 36 q1;;   (* [17, 18, 22, 22, 29, 34, 36]*)
let q1 = add 14 q1;;   (* [14, 17, 18, 22, 22, 29, 34, 36]*)
let q1 = add 8 q1;;   (* [8, 14, 17, 18, 22, 22, 29, 34, 36]*)
let q1 = add 8 q1;;   (* [8, 8, 14, 17, 18, 22, 22, 29, 34, 36]*)
let q1 = add 38 q1;;   (* [8, 8, 14, 17, 18, 22, 22, 29, 34, 36, 38]*)
let q1 = add 39 q1;;   (* [8, 8, 14, 17, 18, 22, 22, 29, 34, 36, 38, 39]*)
assert(is_empty q1 = false);;   (*[8, 8, 14, 17, 18, 22, 22, 29, 34, 36, 38, 39]*)
let q1 = add 31 q1;;   (* [8, 8, 14, 17, 18, 22, 22, 29, 31, 34, 36, 38, 39]*)
let q1 = add 38 q1;;   (* [8, 8, 14, 17, 18, 22, 22, 29, 31, 34, 36, 38, 38, 39]*)
let q1 = add 39 q1;;   (* [8, 8, 14, 17, 18, 22, 22, 29, 31, 34, 36, 38, 38, 39, 39]*)
let (element, q1) = delete_min q1;;   (* 8 * [8, 14, 17, 18, 22, 22, 29, 31, 34, 36, 38, 38, 39, 39]*)
assert(element = 8);;
let q1 = add 22 q1;;   (* [8, 14, 17, 18, 22, 22, 22, 29, 31, 34, 36, 38, 38, 39, 39]*)
let q1 = add 15 q1;;   (* [8, 14, 15, 17, 18, 22, 22, 22, 29, 31, 34, 36, 38, 38, 39, 39]*)
assert(is_empty q1 = false);;   (*[8, 14, 15, 17, 18, 22, 22, 22, 29, 31, 34, 36, 38, 38, 39, 39]*)
let (element, q1) = delete_min q1;;   (* 8 * [14, 15, 17, 18, 22, 22, 22, 29, 31, 34, 36, 38, 38, 39, 39]*)
assert(element = 8);;
let (element, q1) = delete_min q1;;   (* 14 * [15, 17, 18, 22, 22, 22, 29, 31, 34, 36, 38, 38, 39, 39]*)
assert(element = 14);;

(* -------q2------ *)
let q2 = empty;;
let q2 = add 23 q2;;   (* [23]*)
let (element, q2) = delete_min q2;;   (* 23 * []*)
assert(element = 23);;
assert(is_empty q2 = true);;   (*[]*)
let q2 = add 36 q2;;   (* [36]*)
assert(is_empty q2 = false);;   (*[36]*)
let q2 = add 34 q2;;   (* [34, 36]*)
let (element, q2) = delete_min q2;;   (* 34 * [36]*)
assert(element = 34);;
let q2 = add 11 q2;;   (* [11, 36]*)
let q2 = add 19 q2;;   (* [11, 19, 36]*)
let (element, q2) = delete_min q2;;   (* 11 * [19, 36]*)
assert(element = 11);;
let q2 = add 26 q2;;   (* [19, 26, 36]*)
let q2 = add 36 q2;;   (* [19, 26, 36, 36]*)
let q2 = add 8 q2;;   (* [8, 19, 26, 36, 36]*)
let (element, q2) = delete_min q2;;   (* 8 * [19, 26, 36, 36]*)
assert(element = 8);;
let q2 = add 0 q2;;   (* [0, 19, 26, 36, 36]*)
let q2 = add 22 q2;;   (* [0, 19, 22, 26, 36, 36]*)
let q2 = add 29 q2;;   (* [0, 19, 22, 26, 29, 36, 36]*)
let q2 = add 39 q2;;   (* [0, 19, 22, 26, 29, 36, 36, 39]*)
let q2 = add 10 q2;;   (* [0, 10, 19, 22, 26, 29, 36, 36, 39]*)
let q2 = add 14 q2;;   (* [0, 10, 14, 19, 22, 26, 29, 36, 36, 39]*)
let q2 = add 1 q2;;   (* [0, 1, 10, 14, 19, 22, 26, 29, 36, 36, 39]*)
let q2 = add 34 q2;;   (* [0, 1, 10, 14, 19, 22, 26, 29, 34, 36, 36, 39]*)
let q2 = add 17 q2;;   (* [0, 1, 10, 14, 17, 19, 22, 26, 29, 34, 36, 36, 39]*)
assert(is_empty q2 = false);;   (*[0, 1, 10, 14, 17, 19, 22, 26, 29, 34, 36, 36, 39]*)
let q2 = add 1 q2;;   (* [0, 1, 1, 10, 14, 17, 19, 22, 26, 29, 34, 36, 36, 39]*)
let q2 = add 26 q2;;   (* [0, 1, 1, 10, 14, 17, 19, 22, 26, 26, 29, 34, 36, 36, 39]*)
let q2 = add 19 q2;;   (* [0, 1, 1, 10, 14, 17, 19, 19, 22, 26, 26, 29, 34, 36, 36, 39]*)
let (element, q2) = delete_min q2;;   (* 0 * [1, 1, 10, 14, 17, 19, 19, 22, 26, 26, 29, 34, 36, 36, 39]*)
assert(element = 0);;
assert(is_empty q2 = false);;   (*[1, 1, 10, 14, 17, 19, 19, 22, 26, 26, 29, 34, 36, 36, 39]*)
let (element, q2) = delete_min q2;;   (* 1 * [1, 10, 14, 17, 19, 19, 22, 26, 26, 29, 34, 36, 36, 39]*)
assert(element = 1);;
let q2 = add 19 q2;;   (* [1, 10, 14, 17, 19, 19, 19, 22, 26, 26, 29, 34, 36, 36, 39]*)
assert(is_empty q2 = false);;   (*[1, 10, 14, 17, 19, 19, 19, 22, 26, 26, 29, 34, 36, 36, 39]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 24 q3;;   (* [24]*)
let q3 = add 17 q3;;   (* [17, 24]*)
let q3 = add 17 q3;;   (* [17, 17, 24]*)
let q3 = add 24 q3;;   (* [17, 17, 24, 24]*)
let q3 = add 16 q3;;   (* [16, 17, 17, 24, 24]*)
let q3 = add 36 q3;;   (* [16, 17, 17, 24, 24, 36]*)
let q3 = add 31 q3;;   (* [16, 17, 17, 24, 24, 31, 36]*)
let q3 = add 28 q3;;   (* [16, 17, 17, 24, 24, 28, 31, 36]*)
let q3 = add 29 q3;;   (* [16, 17, 17, 24, 24, 28, 29, 31, 36]*)
let (element, q3) = delete_min q3;;   (* 16 * [17, 17, 24, 24, 28, 29, 31, 36]*)
assert(element = 16);;
let (element, q3) = delete_min q3;;   (* 17 * [17, 24, 24, 28, 29, 31, 36]*)
assert(element = 17);;
let q3 = add 7 q3;;   (* [7, 17, 24, 24, 28, 29, 31, 36]*)
let q3 = add 9 q3;;   (* [7, 9, 17, 24, 24, 28, 29, 31, 36]*)
let q3 = add 35 q3;;   (* [7, 9, 17, 24, 24, 28, 29, 31, 35, 36]*)
let q3 = add 35 q3;;   (* [7, 9, 17, 24, 24, 28, 29, 31, 35, 35, 36]*)
let (element, q3) = delete_min q3;;   (* 7 * [9, 17, 24, 24, 28, 29, 31, 35, 35, 36]*)
assert(element = 7);;
let q3 = add 34 q3;;   (* [9, 17, 24, 24, 28, 29, 31, 34, 35, 35, 36]*)
let q3 = add 3 q3;;   (* [3, 9, 17, 24, 24, 28, 29, 31, 34, 35, 35, 36]*)
let q3 = add 14 q3;;   (* [3, 9, 14, 17, 24, 24, 28, 29, 31, 34, 35, 35, 36]*)
let q3 = add 29 q3;;   (* [3, 9, 14, 17, 24, 24, 28, 29, 29, 31, 34, 35, 35, 36]*)
let (element, q3) = delete_min q3;;   (* 3 * [9, 14, 17, 24, 24, 28, 29, 29, 31, 34, 35, 35, 36]*)
assert(element = 3);;
let (element, q3) = delete_min q3;;   (* 9 * [14, 17, 24, 24, 28, 29, 29, 31, 34, 35, 35, 36]*)
assert(element = 9);;
let (element, q3) = delete_min q3;;   (* 14 * [17, 24, 24, 28, 29, 29, 31, 34, 35, 35, 36]*)
assert(element = 14);;
let (element, q3) = delete_min q3;;   (* 17 * [24, 24, 28, 29, 29, 31, 34, 35, 35, 36]*)
assert(element = 17);;
let q3 = add 32 q3;;   (* [24, 24, 28, 29, 29, 31, 32, 34, 35, 35, 36]*)
let q3 = add 30 q3;;   (* [24, 24, 28, 29, 29, 30, 31, 32, 34, 35, 35, 36]*)
let (element, q3) = delete_min q3;;   (* 24 * [24, 28, 29, 29, 30, 31, 32, 34, 35, 35, 36]*)
assert(element = 24);;
let (element, q3) = delete_min q3;;   (* 24 * [28, 29, 29, 30, 31, 32, 34, 35, 35, 36]*)
assert(element = 24);;
let q3 = add 5 q3;;   (* [5, 28, 29, 29, 30, 31, 32, 34, 35, 35, 36]*)
let (element, q3) = delete_min q3;;   (* 5 * [28, 29, 29, 30, 31, 32, 34, 35, 35, 36]*)
assert(element = 5);;
let q3 = add 0 q3;;   (* [0, 28, 29, 29, 30, 31, 32, 34, 35, 35, 36]*)
let q3 = add 15 q3;;   (* [0, 15, 28, 29, 29, 30, 31, 32, 34, 35, 35, 36]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 32 q4;;   (* [32]*)
let q4 = add 4 q4;;   (* [4, 32]*)
let q4 = add 11 q4;;   (* [4, 11, 32]*)
let q4 = add 13 q4;;   (* [4, 11, 13, 32]*)
let q4 = add 0 q4;;   (* [0, 4, 11, 13, 32]*)
let q4 = add 10 q4;;   (* [0, 4, 10, 11, 13, 32]*)
let (element, q4) = delete_min q4;;   (* 0 * [4, 10, 11, 13, 32]*)
assert(element = 0);;
let q4 = add 23 q4;;   (* [4, 10, 11, 13, 23, 32]*)
let q4 = add 10 q4;;   (* [4, 10, 10, 11, 13, 23, 32]*)
let q4 = add 38 q4;;   (* [4, 10, 10, 11, 13, 23, 32, 38]*)
let q4 = add 10 q4;;   (* [4, 10, 10, 10, 11, 13, 23, 32, 38]*)
let (element, q4) = delete_min q4;;   (* 4 * [10, 10, 10, 11, 13, 23, 32, 38]*)
assert(element = 4);;
let q4 = add 7 q4;;   (* [7, 10, 10, 10, 11, 13, 23, 32, 38]*)
let (element, q4) = delete_min q4;;   (* 7 * [10, 10, 10, 11, 13, 23, 32, 38]*)
assert(element = 7);;
let (element, q4) = delete_min q4;;   (* 10 * [10, 10, 11, 13, 23, 32, 38]*)
assert(element = 10);;
assert(is_empty q4 = false);;   (*[10, 10, 11, 13, 23, 32, 38]*)
let (element, q4) = delete_min q4;;   (* 10 * [10, 11, 13, 23, 32, 38]*)
assert(element = 10);;
let q4 = add 15 q4;;   (* [10, 11, 13, 15, 23, 32, 38]*)
assert(is_empty q4 = false);;   (*[10, 11, 13, 15, 23, 32, 38]*)
let q4 = add 18 q4;;   (* [10, 11, 13, 15, 18, 23, 32, 38]*)
let (element, q4) = delete_min q4;;   (* 10 * [11, 13, 15, 18, 23, 32, 38]*)
assert(element = 10);;
let q4 = add 10 q4;;   (* [10, 11, 13, 15, 18, 23, 32, 38]*)
assert(is_empty q4 = false);;   (*[10, 11, 13, 15, 18, 23, 32, 38]*)
let q4 = add 9 q4;;   (* [9, 10, 11, 13, 15, 18, 23, 32, 38]*)
let (element, q4) = delete_min q4;;   (* 9 * [10, 11, 13, 15, 18, 23, 32, 38]*)
assert(element = 9);;
let q4 = add 1 q4;;   (* [1, 10, 11, 13, 15, 18, 23, 32, 38]*)
assert(is_empty q4 = false);;   (*[1, 10, 11, 13, 15, 18, 23, 32, 38]*)
let (element, q4) = delete_min q4;;   (* 1 * [10, 11, 13, 15, 18, 23, 32, 38]*)
assert(element = 1);;
let q4 = add 18 q4;;   (* [10, 11, 13, 15, 18, 18, 23, 32, 38]*)
let q4 = add 6 q4;;   (* [6, 10, 11, 13, 15, 18, 18, 23, 32, 38]*)
let q4 = add 29 q4;;   (* [6, 10, 11, 13, 15, 18, 18, 23, 29, 32, 38]*)
let q4 = add 22 q4;;   (* [6, 10, 11, 13, 15, 18, 18, 22, 23, 29, 32, 38]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;   (*[0, 1, 6, 10, 10, 11, 13, 14, 15, 15, 15, 17, 17, 18, 18, 18, 19, 19, 19, 22, 22, 22, 22, 22, 23, 26, 26, 28, 29, 29, 29, 29, 29, 30, 31, 31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39]*)
let (element, q) = delete_min q;;   (* 0 * [1, 6, 10, 10, 11, 13, 14, 15, 15, 15, 17, 17, 18, 18, 18, 19, 19, 19, 22, 22, 22, 22, 22, 23, 26, 26, 28, 29, 29, 29, 29, 29, 30, 31, 31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 0);;
let (element, q) = delete_min q;;   (* 1 * [6, 10, 10, 11, 13, 14, 15, 15, 15, 17, 17, 18, 18, 18, 19, 19, 19, 22, 22, 22, 22, 22, 23, 26, 26, 28, 29, 29, 29, 29, 29, 30, 31, 31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 1);;
let (element, q) = delete_min q;;   (* 6 * [10, 10, 11, 13, 14, 15, 15, 15, 17, 17, 18, 18, 18, 19, 19, 19, 22, 22, 22, 22, 22, 23, 26, 26, 28, 29, 29, 29, 29, 29, 30, 31, 31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 10 * [10, 11, 13, 14, 15, 15, 15, 17, 17, 18, 18, 18, 19, 19, 19, 22, 22, 22, 22, 22, 23, 26, 26, 28, 29, 29, 29, 29, 29, 30, 31, 31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 10 * [11, 13, 14, 15, 15, 15, 17, 17, 18, 18, 18, 19, 19, 19, 22, 22, 22, 22, 22, 23, 26, 26, 28, 29, 29, 29, 29, 29, 30, 31, 31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 11 * [13, 14, 15, 15, 15, 17, 17, 18, 18, 18, 19, 19, 19, 22, 22, 22, 22, 22, 23, 26, 26, 28, 29, 29, 29, 29, 29, 30, 31, 31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 13 * [14, 15, 15, 15, 17, 17, 18, 18, 18, 19, 19, 19, 22, 22, 22, 22, 22, 23, 26, 26, 28, 29, 29, 29, 29, 29, 30, 31, 31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 14 * [15, 15, 15, 17, 17, 18, 18, 18, 19, 19, 19, 22, 22, 22, 22, 22, 23, 26, 26, 28, 29, 29, 29, 29, 29, 30, 31, 31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [15, 15, 17, 17, 18, 18, 18, 19, 19, 19, 22, 22, 22, 22, 22, 23, 26, 26, 28, 29, 29, 29, 29, 29, 30, 31, 31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [15, 17, 17, 18, 18, 18, 19, 19, 19, 22, 22, 22, 22, 22, 23, 26, 26, 28, 29, 29, 29, 29, 29, 30, 31, 31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [17, 17, 18, 18, 18, 19, 19, 19, 22, 22, 22, 22, 22, 23, 26, 26, 28, 29, 29, 29, 29, 29, 30, 31, 31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 17 * [17, 18, 18, 18, 19, 19, 19, 22, 22, 22, 22, 22, 23, 26, 26, 28, 29, 29, 29, 29, 29, 30, 31, 31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [18, 18, 18, 19, 19, 19, 22, 22, 22, 22, 22, 23, 26, 26, 28, 29, 29, 29, 29, 29, 30, 31, 31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [18, 18, 19, 19, 19, 22, 22, 22, 22, 22, 23, 26, 26, 28, 29, 29, 29, 29, 29, 30, 31, 31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [18, 19, 19, 19, 22, 22, 22, 22, 22, 23, 26, 26, 28, 29, 29, 29, 29, 29, 30, 31, 31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [19, 19, 19, 22, 22, 22, 22, 22, 23, 26, 26, 28, 29, 29, 29, 29, 29, 30, 31, 31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [19, 19, 22, 22, 22, 22, 22, 23, 26, 26, 28, 29, 29, 29, 29, 29, 30, 31, 31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [19, 22, 22, 22, 22, 22, 23, 26, 26, 28, 29, 29, 29, 29, 29, 30, 31, 31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [22, 22, 22, 22, 22, 23, 26, 26, 28, 29, 29, 29, 29, 29, 30, 31, 31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 22 * [22, 22, 22, 22, 23, 26, 26, 28, 29, 29, 29, 29, 29, 30, 31, 31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [22, 22, 22, 23, 26, 26, 28, 29, 29, 29, 29, 29, 30, 31, 31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [22, 22, 23, 26, 26, 28, 29, 29, 29, 29, 29, 30, 31, 31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [22, 23, 26, 26, 28, 29, 29, 29, 29, 29, 30, 31, 31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [23, 26, 26, 28, 29, 29, 29, 29, 29, 30, 31, 31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [26, 26, 28, 29, 29, 29, 29, 29, 30, 31, 31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 26 * [26, 28, 29, 29, 29, 29, 29, 30, 31, 31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [28, 29, 29, 29, 29, 29, 30, 31, 31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 28 * [29, 29, 29, 29, 29, 30, 31, 31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [29, 29, 29, 29, 30, 31, 31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [29, 29, 29, 30, 31, 31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [29, 29, 30, 31, 31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [29, 30, 31, 31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [30, 31, 31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [34, 34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 38, 38, 38, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 38, 38, 38, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [38, 38, 38, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST56----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 13 q1;;   (* [13]*)
let q1 = add 8 q1;;   (* [8, 13]*)
assert(is_empty q1 = false);;   (*[8, 13]*)
let (element, q1) = delete_min q1;;   (* 8 * [13]*)
assert(element = 8);;
let (element, q1) = delete_min q1;;   (* 13 * []*)
assert(element = 13);;
let q1 = add 12 q1;;   (* [12]*)
let (element, q1) = delete_min q1;;   (* 12 * []*)
assert(element = 12);;
let q1 = add 38 q1;;   (* [38]*)
let q1 = add 37 q1;;   (* [37, 38]*)
let q1 = add 34 q1;;   (* [34, 37, 38]*)
let q1 = add 24 q1;;   (* [24, 34, 37, 38]*)
let q1 = add 0 q1;;   (* [0, 24, 34, 37, 38]*)
let q1 = add 25 q1;;   (* [0, 24, 25, 34, 37, 38]*)
let q1 = add 11 q1;;   (* [0, 11, 24, 25, 34, 37, 38]*)
let q1 = add 26 q1;;   (* [0, 11, 24, 25, 26, 34, 37, 38]*)
let q1 = add 22 q1;;   (* [0, 11, 22, 24, 25, 26, 34, 37, 38]*)
let (element, q1) = delete_min q1;;   (* 0 * [11, 22, 24, 25, 26, 34, 37, 38]*)
assert(element = 0);;
let q1 = add 39 q1;;   (* [11, 22, 24, 25, 26, 34, 37, 38, 39]*)
let q1 = add 18 q1;;   (* [11, 18, 22, 24, 25, 26, 34, 37, 38, 39]*)
let q1 = add 38 q1;;   (* [11, 18, 22, 24, 25, 26, 34, 37, 38, 38, 39]*)
let (element, q1) = delete_min q1;;   (* 11 * [18, 22, 24, 25, 26, 34, 37, 38, 38, 39]*)
assert(element = 11);;
let (element, q1) = delete_min q1;;   (* 18 * [22, 24, 25, 26, 34, 37, 38, 38, 39]*)
assert(element = 18);;
let (element, q1) = delete_min q1;;   (* 22 * [24, 25, 26, 34, 37, 38, 38, 39]*)
assert(element = 22);;
assert(is_empty q1 = false);;   (*[24, 25, 26, 34, 37, 38, 38, 39]*)
let q1 = add 30 q1;;   (* [24, 25, 26, 30, 34, 37, 38, 38, 39]*)
let q1 = add 36 q1;;   (* [24, 25, 26, 30, 34, 36, 37, 38, 38, 39]*)
let q1 = add 36 q1;;   (* [24, 25, 26, 30, 34, 36, 36, 37, 38, 38, 39]*)
let q1 = add 35 q1;;   (* [24, 25, 26, 30, 34, 35, 36, 36, 37, 38, 38, 39]*)
assert(is_empty q1 = false);;   (*[24, 25, 26, 30, 34, 35, 36, 36, 37, 38, 38, 39]*)
let q1 = add 25 q1;;   (* [24, 25, 25, 26, 30, 34, 35, 36, 36, 37, 38, 38, 39]*)
let (element, q1) = delete_min q1;;   (* 24 * [25, 25, 26, 30, 34, 35, 36, 36, 37, 38, 38, 39]*)
assert(element = 24);;
let (element, q1) = delete_min q1;;   (* 25 * [25, 26, 30, 34, 35, 36, 36, 37, 38, 38, 39]*)
assert(element = 25);;
let (element, q1) = delete_min q1;;   (* 25 * [26, 30, 34, 35, 36, 36, 37, 38, 38, 39]*)
assert(element = 25);;

(* -------q2------ *)
let q2 = empty;;
let q2 = add 28 q2;;   (* [28]*)
let q2 = add 14 q2;;   (* [14, 28]*)
let q2 = add 2 q2;;   (* [2, 14, 28]*)
let (element, q2) = delete_min q2;;   (* 2 * [14, 28]*)
assert(element = 2);;
let (element, q2) = delete_min q2;;   (* 14 * [28]*)
assert(element = 14);;
let (element, q2) = delete_min q2;;   (* 28 * []*)
assert(element = 28);;
let q2 = add 23 q2;;   (* [23]*)
let q2 = add 30 q2;;   (* [23, 30]*)
let q2 = add 10 q2;;   (* [10, 23, 30]*)
let (element, q2) = delete_min q2;;   (* 10 * [23, 30]*)
assert(element = 10);;
let (element, q2) = delete_min q2;;   (* 23 * [30]*)
assert(element = 23);;
let q2 = add 27 q2;;   (* [27, 30]*)
let q2 = add 39 q2;;   (* [27, 30, 39]*)
let q2 = add 14 q2;;   (* [14, 27, 30, 39]*)
let q2 = add 6 q2;;   (* [6, 14, 27, 30, 39]*)
let q2 = add 31 q2;;   (* [6, 14, 27, 30, 31, 39]*)
let q2 = add 3 q2;;   (* [3, 6, 14, 27, 30, 31, 39]*)
let q2 = add 8 q2;;   (* [3, 6, 8, 14, 27, 30, 31, 39]*)
let q2 = add 25 q2;;   (* [3, 6, 8, 14, 25, 27, 30, 31, 39]*)
let q2 = add 33 q2;;   (* [3, 6, 8, 14, 25, 27, 30, 31, 33, 39]*)
let q2 = add 5 q2;;   (* [3, 5, 6, 8, 14, 25, 27, 30, 31, 33, 39]*)
let q2 = add 21 q2;;   (* [3, 5, 6, 8, 14, 21, 25, 27, 30, 31, 33, 39]*)
let q2 = add 5 q2;;   (* [3, 5, 5, 6, 8, 14, 21, 25, 27, 30, 31, 33, 39]*)
let q2 = add 35 q2;;   (* [3, 5, 5, 6, 8, 14, 21, 25, 27, 30, 31, 33, 35, 39]*)
assert(is_empty q2 = false);;   (*[3, 5, 5, 6, 8, 14, 21, 25, 27, 30, 31, 33, 35, 39]*)
let q2 = add 15 q2;;   (* [3, 5, 5, 6, 8, 14, 15, 21, 25, 27, 30, 31, 33, 35, 39]*)
let q2 = add 17 q2;;   (* [3, 5, 5, 6, 8, 14, 15, 17, 21, 25, 27, 30, 31, 33, 35, 39]*)
assert(is_empty q2 = false);;   (*[3, 5, 5, 6, 8, 14, 15, 17, 21, 25, 27, 30, 31, 33, 35, 39]*)
let (element, q2) = delete_min q2;;   (* 3 * [5, 5, 6, 8, 14, 15, 17, 21, 25, 27, 30, 31, 33, 35, 39]*)
assert(element = 3);;
let q2 = add 34 q2;;   (* [5, 5, 6, 8, 14, 15, 17, 21, 25, 27, 30, 31, 33, 34, 35, 39]*)
let q2 = add 8 q2;;   (* [5, 5, 6, 8, 8, 14, 15, 17, 21, 25, 27, 30, 31, 33, 34, 35, 39]*)
let q2 = add 29 q2;;   (* [5, 5, 6, 8, 8, 14, 15, 17, 21, 25, 27, 29, 30, 31, 33, 34, 35, 39]*)
let q2 = add 1 q2;;   (* [1, 5, 5, 6, 8, 8, 14, 15, 17, 21, 25, 27, 29, 30, 31, 33, 34, 35, 39]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 5 q3;;   (* [5]*)
let q3 = add 38 q3;;   (* [5, 38]*)
let q3 = add 12 q3;;   (* [5, 12, 38]*)
let (element, q3) = delete_min q3;;   (* 5 * [12, 38]*)
assert(element = 5);;
let q3 = add 11 q3;;   (* [11, 12, 38]*)
let (element, q3) = delete_min q3;;   (* 11 * [12, 38]*)
assert(element = 11);;
let q3 = add 20 q3;;   (* [12, 20, 38]*)
let q3 = add 3 q3;;   (* [3, 12, 20, 38]*)
let q3 = add 18 q3;;   (* [3, 12, 18, 20, 38]*)
let q3 = add 4 q3;;   (* [3, 4, 12, 18, 20, 38]*)
let q3 = add 8 q3;;   (* [3, 4, 8, 12, 18, 20, 38]*)
let q3 = add 29 q3;;   (* [3, 4, 8, 12, 18, 20, 29, 38]*)
assert(is_empty q3 = false);;   (*[3, 4, 8, 12, 18, 20, 29, 38]*)
let (element, q3) = delete_min q3;;   (* 3 * [4, 8, 12, 18, 20, 29, 38]*)
assert(element = 3);;
let q3 = add 11 q3;;   (* [4, 8, 11, 12, 18, 20, 29, 38]*)
let q3 = add 22 q3;;   (* [4, 8, 11, 12, 18, 20, 22, 29, 38]*)
let (element, q3) = delete_min q3;;   (* 4 * [8, 11, 12, 18, 20, 22, 29, 38]*)
assert(element = 4);;
let (element, q3) = delete_min q3;;   (* 8 * [11, 12, 18, 20, 22, 29, 38]*)
assert(element = 8);;
let q3 = add 29 q3;;   (* [11, 12, 18, 20, 22, 29, 29, 38]*)
let q3 = add 28 q3;;   (* [11, 12, 18, 20, 22, 28, 29, 29, 38]*)
let q3 = add 31 q3;;   (* [11, 12, 18, 20, 22, 28, 29, 29, 31, 38]*)
let q3 = add 1 q3;;   (* [1, 11, 12, 18, 20, 22, 28, 29, 29, 31, 38]*)
assert(is_empty q3 = false);;   (*[1, 11, 12, 18, 20, 22, 28, 29, 29, 31, 38]*)
let q3 = add 19 q3;;   (* [1, 11, 12, 18, 19, 20, 22, 28, 29, 29, 31, 38]*)
let (element, q3) = delete_min q3;;   (* 1 * [11, 12, 18, 19, 20, 22, 28, 29, 29, 31, 38]*)
assert(element = 1);;
let (element, q3) = delete_min q3;;   (* 11 * [12, 18, 19, 20, 22, 28, 29, 29, 31, 38]*)
assert(element = 11);;
let q3 = add 11 q3;;   (* [11, 12, 18, 19, 20, 22, 28, 29, 29, 31, 38]*)
let (element, q3) = delete_min q3;;   (* 11 * [12, 18, 19, 20, 22, 28, 29, 29, 31, 38]*)
assert(element = 11);;
let q3 = add 1 q3;;   (* [1, 12, 18, 19, 20, 22, 28, 29, 29, 31, 38]*)
let q3 = add 23 q3;;   (* [1, 12, 18, 19, 20, 22, 23, 28, 29, 29, 31, 38]*)
let (element, q3) = delete_min q3;;   (* 1 * [12, 18, 19, 20, 22, 23, 28, 29, 29, 31, 38]*)
assert(element = 1);;
let q3 = add 25 q3;;   (* [12, 18, 19, 20, 22, 23, 25, 28, 29, 29, 31, 38]*)
let q3 = add 7 q3;;   (* [7, 12, 18, 19, 20, 22, 23, 25, 28, 29, 29, 31, 38]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 16 q4;;   (* [16]*)
assert(is_empty q4 = false);;   (*[16]*)
let (element, q4) = delete_min q4;;   (* 16 * []*)
assert(element = 16);;
let q4 = add 35 q4;;   (* [35]*)
let q4 = add 9 q4;;   (* [9, 35]*)
let q4 = add 33 q4;;   (* [9, 33, 35]*)
assert(is_empty q4 = false);;   (*[9, 33, 35]*)
let q4 = add 16 q4;;   (* [9, 16, 33, 35]*)
let q4 = add 19 q4;;   (* [9, 16, 19, 33, 35]*)
let q4 = add 19 q4;;   (* [9, 16, 19, 19, 33, 35]*)
let (element, q4) = delete_min q4;;   (* 9 * [16, 19, 19, 33, 35]*)
assert(element = 9);;
let q4 = add 34 q4;;   (* [16, 19, 19, 33, 34, 35]*)
assert(is_empty q4 = false);;   (*[16, 19, 19, 33, 34, 35]*)
let (element, q4) = delete_min q4;;   (* 16 * [19, 19, 33, 34, 35]*)
assert(element = 16);;
assert(is_empty q4 = false);;   (*[19, 19, 33, 34, 35]*)
let (element, q4) = delete_min q4;;   (* 19 * [19, 33, 34, 35]*)
assert(element = 19);;
let (element, q4) = delete_min q4;;   (* 19 * [33, 34, 35]*)
assert(element = 19);;
let q4 = add 27 q4;;   (* [27, 33, 34, 35]*)
let (element, q4) = delete_min q4;;   (* 27 * [33, 34, 35]*)
assert(element = 27);;
let (element, q4) = delete_min q4;;   (* 33 * [34, 35]*)
assert(element = 33);;
let q4 = add 22 q4;;   (* [22, 34, 35]*)
let q4 = add 9 q4;;   (* [9, 22, 34, 35]*)
assert(is_empty q4 = false);;   (*[9, 22, 34, 35]*)
assert(is_empty q4 = false);;   (*[9, 22, 34, 35]*)
let q4 = add 22 q4;;   (* [9, 22, 22, 34, 35]*)
let q4 = add 15 q4;;   (* [9, 15, 22, 22, 34, 35]*)
let q4 = add 20 q4;;   (* [9, 15, 20, 22, 22, 34, 35]*)
let q4 = add 30 q4;;   (* [9, 15, 20, 22, 22, 30, 34, 35]*)
let q4 = add 28 q4;;   (* [9, 15, 20, 22, 22, 28, 30, 34, 35]*)
let q4 = add 31 q4;;   (* [9, 15, 20, 22, 22, 28, 30, 31, 34, 35]*)
let q4 = add 16 q4;;   (* [9, 15, 16, 20, 22, 22, 28, 30, 31, 34, 35]*)
assert(is_empty q4 = false);;   (*[9, 15, 16, 20, 22, 22, 28, 30, 31, 34, 35]*)
let q4 = add 37 q4;;   (* [9, 15, 16, 20, 22, 22, 28, 30, 31, 34, 35, 37]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;   (*[1, 5, 5, 6, 7, 8, 8, 9, 12, 14, 15, 15, 16, 17, 18, 19, 20, 20, 21, 22, 22, 22, 23, 25, 25, 26, 27, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39]*)
let (element, q) = delete_min q;;   (* 1 * [5, 5, 6, 7, 8, 8, 9, 12, 14, 15, 15, 16, 17, 18, 19, 20, 20, 21, 22, 22, 22, 23, 25, 25, 26, 27, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 1);;
let (element, q) = delete_min q;;   (* 5 * [5, 6, 7, 8, 8, 9, 12, 14, 15, 15, 16, 17, 18, 19, 20, 20, 21, 22, 22, 22, 23, 25, 25, 26, 27, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 5 * [6, 7, 8, 8, 9, 12, 14, 15, 15, 16, 17, 18, 19, 20, 20, 21, 22, 22, 22, 23, 25, 25, 26, 27, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 6 * [7, 8, 8, 9, 12, 14, 15, 15, 16, 17, 18, 19, 20, 20, 21, 22, 22, 22, 23, 25, 25, 26, 27, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 7 * [8, 8, 9, 12, 14, 15, 15, 16, 17, 18, 19, 20, 20, 21, 22, 22, 22, 23, 25, 25, 26, 27, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 8 * [8, 9, 12, 14, 15, 15, 16, 17, 18, 19, 20, 20, 21, 22, 22, 22, 23, 25, 25, 26, 27, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 8 * [9, 12, 14, 15, 15, 16, 17, 18, 19, 20, 20, 21, 22, 22, 22, 23, 25, 25, 26, 27, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 9 * [12, 14, 15, 15, 16, 17, 18, 19, 20, 20, 21, 22, 22, 22, 23, 25, 25, 26, 27, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 12 * [14, 15, 15, 16, 17, 18, 19, 20, 20, 21, 22, 22, 22, 23, 25, 25, 26, 27, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 14 * [15, 15, 16, 17, 18, 19, 20, 20, 21, 22, 22, 22, 23, 25, 25, 26, 27, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [15, 16, 17, 18, 19, 20, 20, 21, 22, 22, 22, 23, 25, 25, 26, 27, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [16, 17, 18, 19, 20, 20, 21, 22, 22, 22, 23, 25, 25, 26, 27, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [17, 18, 19, 20, 20, 21, 22, 22, 22, 23, 25, 25, 26, 27, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 17 * [18, 19, 20, 20, 21, 22, 22, 22, 23, 25, 25, 26, 27, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [19, 20, 20, 21, 22, 22, 22, 23, 25, 25, 26, 27, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [20, 20, 21, 22, 22, 22, 23, 25, 25, 26, 27, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [20, 21, 22, 22, 22, 23, 25, 25, 26, 27, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [21, 22, 22, 22, 23, 25, 25, 26, 27, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [22, 22, 22, 23, 25, 25, 26, 27, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [22, 22, 23, 25, 25, 26, 27, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [22, 23, 25, 25, 26, 27, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [23, 25, 25, 26, 27, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [25, 25, 26, 27, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 25 * [25, 26, 27, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [26, 27, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [27, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [29, 29, 29, 30, 30, 30, 31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [29, 29, 30, 30, 30, 31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [29, 30, 30, 30, 31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [30, 30, 30, 31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [30, 30, 31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [30, 31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [31, 33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [33, 34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 33 * [34, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 37, 38, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [37, 38, 38, 38, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [38, 38, 38, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST57----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 0 q1;;   (* [0]*)
assert(is_empty q1 = false);;   (*[0]*)
let (element, q1) = delete_min q1;;   (* 0 * []*)
assert(element = 0);;
let q1 = add 16 q1;;   (* [16]*)
let (element, q1) = delete_min q1;;   (* 16 * []*)
assert(element = 16);;
let q1 = add 22 q1;;   (* [22]*)
let q1 = add 9 q1;;   (* [9, 22]*)
let (element, q1) = delete_min q1;;   (* 9 * [22]*)
assert(element = 9);;
assert(is_empty q1 = false);;   (*[22]*)
let q1 = add 7 q1;;   (* [7, 22]*)
let (element, q1) = delete_min q1;;   (* 7 * [22]*)
assert(element = 7);;
let q1 = add 36 q1;;   (* [22, 36]*)
let q1 = add 20 q1;;   (* [20, 22, 36]*)
let q1 = add 28 q1;;   (* [20, 22, 28, 36]*)
let q1 = add 4 q1;;   (* [4, 20, 22, 28, 36]*)
let q1 = add 22 q1;;   (* [4, 20, 22, 22, 28, 36]*)
let q1 = add 25 q1;;   (* [4, 20, 22, 22, 25, 28, 36]*)
let q1 = add 16 q1;;   (* [4, 16, 20, 22, 22, 25, 28, 36]*)
let q1 = add 36 q1;;   (* [4, 16, 20, 22, 22, 25, 28, 36, 36]*)
assert(is_empty q1 = false);;   (*[4, 16, 20, 22, 22, 25, 28, 36, 36]*)
let (element, q1) = delete_min q1;;   (* 4 * [16, 20, 22, 22, 25, 28, 36, 36]*)
assert(element = 4);;
let q1 = add 15 q1;;   (* [15, 16, 20, 22, 22, 25, 28, 36, 36]*)
let q1 = add 2 q1;;   (* [2, 15, 16, 20, 22, 22, 25, 28, 36, 36]*)
assert(is_empty q1 = false);;   (*[2, 15, 16, 20, 22, 22, 25, 28, 36, 36]*)
let q1 = add 2 q1;;   (* [2, 2, 15, 16, 20, 22, 22, 25, 28, 36, 36]*)
let q1 = add 24 q1;;   (* [2, 2, 15, 16, 20, 22, 22, 24, 25, 28, 36, 36]*)
let q1 = add 39 q1;;   (* [2, 2, 15, 16, 20, 22, 22, 24, 25, 28, 36, 36, 39]*)
let q1 = add 9 q1;;   (* [2, 2, 9, 15, 16, 20, 22, 22, 24, 25, 28, 36, 36, 39]*)
let (element, q1) = delete_min q1;;   (* 2 * [2, 9, 15, 16, 20, 22, 22, 24, 25, 28, 36, 36, 39]*)
assert(element = 2);;
let q1 = add 11 q1;;   (* [2, 9, 11, 15, 16, 20, 22, 22, 24, 25, 28, 36, 36, 39]*)
assert(is_empty q1 = false);;   (*[2, 9, 11, 15, 16, 20, 22, 22, 24, 25, 28, 36, 36, 39]*)
let (element, q1) = delete_min q1;;   (* 2 * [9, 11, 15, 16, 20, 22, 22, 24, 25, 28, 36, 36, 39]*)
assert(element = 2);;
let (element, q1) = delete_min q1;;   (* 9 * [11, 15, 16, 20, 22, 22, 24, 25, 28, 36, 36, 39]*)
assert(element = 9);;
let q1 = add 30 q1;;   (* [11, 15, 16, 20, 22, 22, 24, 25, 28, 30, 36, 36, 39]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 2 q2;;   (* [2]*)
let (element, q2) = delete_min q2;;   (* 2 * []*)
assert(element = 2);;
let q2 = add 8 q2;;   (* [8]*)
let q2 = add 25 q2;;   (* [8, 25]*)
let q2 = add 8 q2;;   (* [8, 8, 25]*)
let (element, q2) = delete_min q2;;   (* 8 * [8, 25]*)
assert(element = 8);;
let q2 = add 22 q2;;   (* [8, 22, 25]*)
let q2 = add 32 q2;;   (* [8, 22, 25, 32]*)
let (element, q2) = delete_min q2;;   (* 8 * [22, 25, 32]*)
assert(element = 8);;
let q2 = add 7 q2;;   (* [7, 22, 25, 32]*)
let q2 = add 13 q2;;   (* [7, 13, 22, 25, 32]*)
let q2 = add 21 q2;;   (* [7, 13, 21, 22, 25, 32]*)
let (element, q2) = delete_min q2;;   (* 7 * [13, 21, 22, 25, 32]*)
assert(element = 7);;
let q2 = add 27 q2;;   (* [13, 21, 22, 25, 27, 32]*)
let (element, q2) = delete_min q2;;   (* 13 * [21, 22, 25, 27, 32]*)
assert(element = 13);;
let q2 = add 9 q2;;   (* [9, 21, 22, 25, 27, 32]*)
let q2 = add 20 q2;;   (* [9, 20, 21, 22, 25, 27, 32]*)
let q2 = add 20 q2;;   (* [9, 20, 20, 21, 22, 25, 27, 32]*)
let q2 = add 8 q2;;   (* [8, 9, 20, 20, 21, 22, 25, 27, 32]*)
assert(is_empty q2 = false);;   (*[8, 9, 20, 20, 21, 22, 25, 27, 32]*)
let q2 = add 10 q2;;   (* [8, 9, 10, 20, 20, 21, 22, 25, 27, 32]*)
let q2 = add 9 q2;;   (* [8, 9, 9, 10, 20, 20, 21, 22, 25, 27, 32]*)
let q2 = add 6 q2;;   (* [6, 8, 9, 9, 10, 20, 20, 21, 22, 25, 27, 32]*)
let (element, q2) = delete_min q2;;   (* 6 * [8, 9, 9, 10, 20, 20, 21, 22, 25, 27, 32]*)
assert(element = 6);;
let q2 = add 37 q2;;   (* [8, 9, 9, 10, 20, 20, 21, 22, 25, 27, 32, 37]*)
let (element, q2) = delete_min q2;;   (* 8 * [9, 9, 10, 20, 20, 21, 22, 25, 27, 32, 37]*)
assert(element = 8);;
let (element, q2) = delete_min q2;;   (* 9 * [9, 10, 20, 20, 21, 22, 25, 27, 32, 37]*)
assert(element = 9);;
let q2 = add 3 q2;;   (* [3, 9, 10, 20, 20, 21, 22, 25, 27, 32, 37]*)
let q2 = add 7 q2;;   (* [3, 7, 9, 10, 20, 20, 21, 22, 25, 27, 32, 37]*)
assert(is_empty q2 = false);;   (*[3, 7, 9, 10, 20, 20, 21, 22, 25, 27, 32, 37]*)
assert(is_empty q2 = false);;   (*[3, 7, 9, 10, 20, 20, 21, 22, 25, 27, 32, 37]*)
let (element, q2) = delete_min q2;;   (* 3 * [7, 9, 10, 20, 20, 21, 22, 25, 27, 32, 37]*)
assert(element = 3);;
let (element, q2) = delete_min q2;;   (* 7 * [9, 10, 20, 20, 21, 22, 25, 27, 32, 37]*)
assert(element = 7);;
let q2 = add 32 q2;;   (* [9, 10, 20, 20, 21, 22, 25, 27, 32, 32, 37]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 19 q3;;   (* [19]*)
let (element, q3) = delete_min q3;;   (* 19 * []*)
assert(element = 19);;
let q3 = add 7 q3;;   (* [7]*)
let q3 = add 3 q3;;   (* [3, 7]*)
let q3 = add 21 q3;;   (* [3, 7, 21]*)
let q3 = add 28 q3;;   (* [3, 7, 21, 28]*)
let q3 = add 16 q3;;   (* [3, 7, 16, 21, 28]*)
assert(is_empty q3 = false);;   (*[3, 7, 16, 21, 28]*)
let q3 = add 18 q3;;   (* [3, 7, 16, 18, 21, 28]*)
let (element, q3) = delete_min q3;;   (* 3 * [7, 16, 18, 21, 28]*)
assert(element = 3);;
let q3 = add 7 q3;;   (* [7, 7, 16, 18, 21, 28]*)
let (element, q3) = delete_min q3;;   (* 7 * [7, 16, 18, 21, 28]*)
assert(element = 7);;
let q3 = add 20 q3;;   (* [7, 16, 18, 20, 21, 28]*)
let q3 = add 9 q3;;   (* [7, 9, 16, 18, 20, 21, 28]*)
let (element, q3) = delete_min q3;;   (* 7 * [9, 16, 18, 20, 21, 28]*)
assert(element = 7);;
assert(is_empty q3 = false);;   (*[9, 16, 18, 20, 21, 28]*)
let (element, q3) = delete_min q3;;   (* 9 * [16, 18, 20, 21, 28]*)
assert(element = 9);;
let (element, q3) = delete_min q3;;   (* 16 * [18, 20, 21, 28]*)
assert(element = 16);;
let q3 = add 29 q3;;   (* [18, 20, 21, 28, 29]*)
let q3 = add 38 q3;;   (* [18, 20, 21, 28, 29, 38]*)
let (element, q3) = delete_min q3;;   (* 18 * [20, 21, 28, 29, 38]*)
assert(element = 18);;
let q3 = add 20 q3;;   (* [20, 20, 21, 28, 29, 38]*)
let q3 = add 12 q3;;   (* [12, 20, 20, 21, 28, 29, 38]*)
let q3 = add 18 q3;;   (* [12, 18, 20, 20, 21, 28, 29, 38]*)
let (element, q3) = delete_min q3;;   (* 12 * [18, 20, 20, 21, 28, 29, 38]*)
assert(element = 12);;
let q3 = add 7 q3;;   (* [7, 18, 20, 20, 21, 28, 29, 38]*)
let q3 = add 1 q3;;   (* [1, 7, 18, 20, 20, 21, 28, 29, 38]*)
let q3 = add 0 q3;;   (* [0, 1, 7, 18, 20, 20, 21, 28, 29, 38]*)
let q3 = add 14 q3;;   (* [0, 1, 7, 14, 18, 20, 20, 21, 28, 29, 38]*)
let q3 = add 1 q3;;   (* [0, 1, 1, 7, 14, 18, 20, 20, 21, 28, 29, 38]*)
let (element, q3) = delete_min q3;;   (* 0 * [1, 1, 7, 14, 18, 20, 20, 21, 28, 29, 38]*)
assert(element = 0);;
let q3 = add 39 q3;;   (* [1, 1, 7, 14, 18, 20, 20, 21, 28, 29, 38, 39]*)
let q3 = add 31 q3;;   (* [1, 1, 7, 14, 18, 20, 20, 21, 28, 29, 31, 38, 39]*)
let q3 = add 1 q3;;   (* [1, 1, 1, 7, 14, 18, 20, 20, 21, 28, 29, 31, 38, 39]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 34 q4;;   (* [34]*)
let q4 = add 31 q4;;   (* [31, 34]*)
let q4 = add 21 q4;;   (* [21, 31, 34]*)
assert(is_empty q4 = false);;   (*[21, 31, 34]*)
let q4 = add 23 q4;;   (* [21, 23, 31, 34]*)
let q4 = add 19 q4;;   (* [19, 21, 23, 31, 34]*)
let q4 = add 16 q4;;   (* [16, 19, 21, 23, 31, 34]*)
let (element, q4) = delete_min q4;;   (* 16 * [19, 21, 23, 31, 34]*)
assert(element = 16);;
let (element, q4) = delete_min q4;;   (* 19 * [21, 23, 31, 34]*)
assert(element = 19);;
let q4 = add 11 q4;;   (* [11, 21, 23, 31, 34]*)
let q4 = add 7 q4;;   (* [7, 11, 21, 23, 31, 34]*)
let q4 = add 14 q4;;   (* [7, 11, 14, 21, 23, 31, 34]*)
let q4 = add 10 q4;;   (* [7, 10, 11, 14, 21, 23, 31, 34]*)
let (element, q4) = delete_min q4;;   (* 7 * [10, 11, 14, 21, 23, 31, 34]*)
assert(element = 7);;
let q4 = add 33 q4;;   (* [10, 11, 14, 21, 23, 31, 33, 34]*)
let (element, q4) = delete_min q4;;   (* 10 * [11, 14, 21, 23, 31, 33, 34]*)
assert(element = 10);;
let q4 = add 8 q4;;   (* [8, 11, 14, 21, 23, 31, 33, 34]*)
let q4 = add 7 q4;;   (* [7, 8, 11, 14, 21, 23, 31, 33, 34]*)
let (element, q4) = delete_min q4;;   (* 7 * [8, 11, 14, 21, 23, 31, 33, 34]*)
assert(element = 7);;
let q4 = add 25 q4;;   (* [8, 11, 14, 21, 23, 25, 31, 33, 34]*)
let (element, q4) = delete_min q4;;   (* 8 * [11, 14, 21, 23, 25, 31, 33, 34]*)
assert(element = 8);;
let (element, q4) = delete_min q4;;   (* 11 * [14, 21, 23, 25, 31, 33, 34]*)
assert(element = 11);;
let q4 = add 30 q4;;   (* [14, 21, 23, 25, 30, 31, 33, 34]*)
let q4 = add 22 q4;;   (* [14, 21, 22, 23, 25, 30, 31, 33, 34]*)
let q4 = add 34 q4;;   (* [14, 21, 22, 23, 25, 30, 31, 33, 34, 34]*)
let q4 = add 38 q4;;   (* [14, 21, 22, 23, 25, 30, 31, 33, 34, 34, 38]*)
let (element, q4) = delete_min q4;;   (* 14 * [21, 22, 23, 25, 30, 31, 33, 34, 34, 38]*)
assert(element = 14);;
let q4 = add 26 q4;;   (* [21, 22, 23, 25, 26, 30, 31, 33, 34, 34, 38]*)
let q4 = add 5 q4;;   (* [5, 21, 22, 23, 25, 26, 30, 31, 33, 34, 34, 38]*)
assert(is_empty q4 = false);;   (*[5, 21, 22, 23, 25, 26, 30, 31, 33, 34, 34, 38]*)
let q4 = add 17 q4;;   (* [5, 17, 21, 22, 23, 25, 26, 30, 31, 33, 34, 34, 38]*)
let q4 = add 30 q4;;   (* [5, 17, 21, 22, 23, 25, 26, 30, 30, 31, 33, 34, 34, 38]*)
let (element, q4) = delete_min q4;;   (* 5 * [17, 21, 22, 23, 25, 26, 30, 30, 31, 33, 34, 34, 38]*)
assert(element = 5);;
let q4 = add 30 q4;;   (* [17, 21, 22, 23, 25, 26, 30, 30, 30, 31, 33, 34, 34, 38]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;   (*[1, 1, 1, 7, 9, 10, 11, 14, 15, 16, 17, 18, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 22, 22, 23, 24, 25, 25, 25, 26, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39]*)
let (element, q) = delete_min q;;   (* 1 * [1, 1, 7, 9, 10, 11, 14, 15, 16, 17, 18, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 22, 22, 23, 24, 25, 25, 25, 26, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 1);;
let (element, q) = delete_min q;;   (* 1 * [1, 7, 9, 10, 11, 14, 15, 16, 17, 18, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 22, 22, 23, 24, 25, 25, 25, 26, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 1);;
let (element, q) = delete_min q;;   (* 1 * [7, 9, 10, 11, 14, 15, 16, 17, 18, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 22, 22, 23, 24, 25, 25, 25, 26, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 1);;
let (element, q) = delete_min q;;   (* 7 * [9, 10, 11, 14, 15, 16, 17, 18, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 22, 22, 23, 24, 25, 25, 25, 26, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 9 * [10, 11, 14, 15, 16, 17, 18, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 22, 22, 23, 24, 25, 25, 25, 26, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 10 * [11, 14, 15, 16, 17, 18, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 22, 22, 23, 24, 25, 25, 25, 26, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 11 * [14, 15, 16, 17, 18, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 22, 22, 23, 24, 25, 25, 25, 26, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 14 * [15, 16, 17, 18, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 22, 22, 23, 24, 25, 25, 25, 26, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [16, 17, 18, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 22, 22, 23, 24, 25, 25, 25, 26, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [17, 18, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 22, 22, 23, 24, 25, 25, 25, 26, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 17 * [18, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 22, 22, 23, 24, 25, 25, 25, 26, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 22, 22, 23, 24, 25, 25, 25, 26, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 20, 20, 21, 21, 21, 22, 22, 22, 22, 23, 24, 25, 25, 25, 26, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 20, 21, 21, 21, 22, 22, 22, 22, 23, 24, 25, 25, 25, 26, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 21, 21, 21, 22, 22, 22, 22, 23, 24, 25, 25, 25, 26, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 21, 21, 21, 22, 22, 22, 22, 23, 24, 25, 25, 25, 26, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [21, 21, 21, 22, 22, 22, 22, 23, 24, 25, 25, 25, 26, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [21, 21, 22, 22, 22, 22, 23, 24, 25, 25, 25, 26, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [21, 22, 22, 22, 22, 23, 24, 25, 25, 25, 26, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [22, 22, 22, 22, 23, 24, 25, 25, 25, 26, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [22, 22, 22, 23, 24, 25, 25, 25, 26, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [22, 22, 23, 24, 25, 25, 25, 26, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [22, 23, 24, 25, 25, 25, 26, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [23, 24, 25, 25, 25, 26, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [24, 25, 25, 25, 26, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [25, 25, 25, 26, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [25, 25, 26, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [25, 26, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [26, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [30, 30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [30, 30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [30, 30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [30, 31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [34, 34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [34, 36, 36, 37, 38, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [36, 36, 37, 38, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [38, 38, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST58----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 33 q1;;   (* [33]*)
let q1 = add 32 q1;;   (* [32, 33]*)
let q1 = add 39 q1;;   (* [32, 33, 39]*)
let (element, q1) = delete_min q1;;   (* 32 * [33, 39]*)
assert(element = 32);;
let q1 = add 22 q1;;   (* [22, 33, 39]*)
assert(is_empty q1 = false);;   (*[22, 33, 39]*)
let (element, q1) = delete_min q1;;   (* 22 * [33, 39]*)
assert(element = 22);;
let q1 = add 32 q1;;   (* [32, 33, 39]*)
let q1 = add 26 q1;;   (* [26, 32, 33, 39]*)
let (element, q1) = delete_min q1;;   (* 26 * [32, 33, 39]*)
assert(element = 26);;
let (element, q1) = delete_min q1;;   (* 32 * [33, 39]*)
assert(element = 32);;
let (element, q1) = delete_min q1;;   (* 33 * [39]*)
assert(element = 33);;
let q1 = add 6 q1;;   (* [6, 39]*)
assert(is_empty q1 = false);;   (*[6, 39]*)
let q1 = add 34 q1;;   (* [6, 34, 39]*)
let q1 = add 17 q1;;   (* [6, 17, 34, 39]*)
let (element, q1) = delete_min q1;;   (* 6 * [17, 34, 39]*)
assert(element = 6);;
let q1 = add 17 q1;;   (* [17, 17, 34, 39]*)
let q1 = add 17 q1;;   (* [17, 17, 17, 34, 39]*)
let q1 = add 8 q1;;   (* [8, 17, 17, 17, 34, 39]*)
assert(is_empty q1 = false);;   (*[8, 17, 17, 17, 34, 39]*)
let (element, q1) = delete_min q1;;   (* 8 * [17, 17, 17, 34, 39]*)
assert(element = 8);;
let (element, q1) = delete_min q1;;   (* 17 * [17, 17, 34, 39]*)
assert(element = 17);;
let q1 = add 26 q1;;   (* [17, 17, 26, 34, 39]*)
let q1 = add 20 q1;;   (* [17, 17, 20, 26, 34, 39]*)
let q1 = add 38 q1;;   (* [17, 17, 20, 26, 34, 38, 39]*)
let q1 = add 15 q1;;   (* [15, 17, 17, 20, 26, 34, 38, 39]*)
let q1 = add 35 q1;;   (* [15, 17, 17, 20, 26, 34, 35, 38, 39]*)
let (element, q1) = delete_min q1;;   (* 15 * [17, 17, 20, 26, 34, 35, 38, 39]*)
assert(element = 15);;
let q1 = add 7 q1;;   (* [7, 17, 17, 20, 26, 34, 35, 38, 39]*)
let q1 = add 26 q1;;   (* [7, 17, 17, 20, 26, 26, 34, 35, 38, 39]*)
let q1 = add 27 q1;;   (* [7, 17, 17, 20, 26, 26, 27, 34, 35, 38, 39]*)
let q1 = add 26 q1;;   (* [7, 17, 17, 20, 26, 26, 26, 27, 34, 35, 38, 39]*)
let q1 = add 38 q1;;   (* [7, 17, 17, 20, 26, 26, 26, 27, 34, 35, 38, 38, 39]*)
let q1 = add 23 q1;;   (* [7, 17, 17, 20, 23, 26, 26, 26, 27, 34, 35, 38, 38, 39]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 11 q2;;   (* [11]*)
let q2 = add 13 q2;;   (* [11, 13]*)
let q2 = add 19 q2;;   (* [11, 13, 19]*)
let (element, q2) = delete_min q2;;   (* 11 * [13, 19]*)
assert(element = 11);;
let (element, q2) = delete_min q2;;   (* 13 * [19]*)
assert(element = 13);;
let (element, q2) = delete_min q2;;   (* 19 * []*)
assert(element = 19);;
let q2 = add 16 q2;;   (* [16]*)
let q2 = add 20 q2;;   (* [16, 20]*)
let q2 = add 28 q2;;   (* [16, 20, 28]*)
let (element, q2) = delete_min q2;;   (* 16 * [20, 28]*)
assert(element = 16);;
let (element, q2) = delete_min q2;;   (* 20 * [28]*)
assert(element = 20);;
let q2 = add 36 q2;;   (* [28, 36]*)
let q2 = add 17 q2;;   (* [17, 28, 36]*)
let (element, q2) = delete_min q2;;   (* 17 * [28, 36]*)
assert(element = 17);;
let q2 = add 4 q2;;   (* [4, 28, 36]*)
assert(is_empty q2 = false);;   (*[4, 28, 36]*)
let q2 = add 7 q2;;   (* [4, 7, 28, 36]*)
let (element, q2) = delete_min q2;;   (* 4 * [7, 28, 36]*)
assert(element = 4);;
let q2 = add 19 q2;;   (* [7, 19, 28, 36]*)
let q2 = add 22 q2;;   (* [7, 19, 22, 28, 36]*)
let q2 = add 0 q2;;   (* [0, 7, 19, 22, 28, 36]*)
let q2 = add 22 q2;;   (* [0, 7, 19, 22, 22, 28, 36]*)
let q2 = add 23 q2;;   (* [0, 7, 19, 22, 22, 23, 28, 36]*)
let q2 = add 31 q2;;   (* [0, 7, 19, 22, 22, 23, 28, 31, 36]*)
let q2 = add 14 q2;;   (* [0, 7, 14, 19, 22, 22, 23, 28, 31, 36]*)
let q2 = add 19 q2;;   (* [0, 7, 14, 19, 19, 22, 22, 23, 28, 31, 36]*)
let (element, q2) = delete_min q2;;   (* 0 * [7, 14, 19, 19, 22, 22, 23, 28, 31, 36]*)
assert(element = 0);;
let q2 = add 8 q2;;   (* [7, 8, 14, 19, 19, 22, 22, 23, 28, 31, 36]*)
let q2 = add 29 q2;;   (* [7, 8, 14, 19, 19, 22, 22, 23, 28, 29, 31, 36]*)
let q2 = add 22 q2;;   (* [7, 8, 14, 19, 19, 22, 22, 22, 23, 28, 29, 31, 36]*)
let (element, q2) = delete_min q2;;   (* 7 * [8, 14, 19, 19, 22, 22, 22, 23, 28, 29, 31, 36]*)
assert(element = 7);;
let q2 = add 35 q2;;   (* [8, 14, 19, 19, 22, 22, 22, 23, 28, 29, 31, 35, 36]*)
let q2 = add 32 q2;;   (* [8, 14, 19, 19, 22, 22, 22, 23, 28, 29, 31, 32, 35, 36]*)
let q2 = add 12 q2;;   (* [8, 12, 14, 19, 19, 22, 22, 22, 23, 28, 29, 31, 32, 35, 36]*)
let q2 = add 12 q2;;   (* [8, 12, 12, 14, 19, 19, 22, 22, 22, 23, 28, 29, 31, 32, 35, 36]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 23 q3;;   (* [23]*)
let (element, q3) = delete_min q3;;   (* 23 * []*)
assert(element = 23);;
let q3 = add 11 q3;;   (* [11]*)
let q3 = add 18 q3;;   (* [11, 18]*)
let (element, q3) = delete_min q3;;   (* 11 * [18]*)
assert(element = 11);;
let q3 = add 26 q3;;   (* [18, 26]*)
let q3 = add 32 q3;;   (* [18, 26, 32]*)
let q3 = add 12 q3;;   (* [12, 18, 26, 32]*)
let q3 = add 15 q3;;   (* [12, 15, 18, 26, 32]*)
let q3 = add 14 q3;;   (* [12, 14, 15, 18, 26, 32]*)
let q3 = add 29 q3;;   (* [12, 14, 15, 18, 26, 29, 32]*)
let q3 = add 7 q3;;   (* [7, 12, 14, 15, 18, 26, 29, 32]*)
let q3 = add 12 q3;;   (* [7, 12, 12, 14, 15, 18, 26, 29, 32]*)
let q3 = add 36 q3;;   (* [7, 12, 12, 14, 15, 18, 26, 29, 32, 36]*)
let (element, q3) = delete_min q3;;   (* 7 * [12, 12, 14, 15, 18, 26, 29, 32, 36]*)
assert(element = 7);;
assert(is_empty q3 = false);;   (*[12, 12, 14, 15, 18, 26, 29, 32, 36]*)
let q3 = add 3 q3;;   (* [3, 12, 12, 14, 15, 18, 26, 29, 32, 36]*)
let q3 = add 25 q3;;   (* [3, 12, 12, 14, 15, 18, 25, 26, 29, 32, 36]*)
let q3 = add 18 q3;;   (* [3, 12, 12, 14, 15, 18, 18, 25, 26, 29, 32, 36]*)
let q3 = add 6 q3;;   (* [3, 6, 12, 12, 14, 15, 18, 18, 25, 26, 29, 32, 36]*)
let q3 = add 10 q3;;   (* [3, 6, 10, 12, 12, 14, 15, 18, 18, 25, 26, 29, 32, 36]*)
let q3 = add 35 q3;;   (* [3, 6, 10, 12, 12, 14, 15, 18, 18, 25, 26, 29, 32, 35, 36]*)
let q3 = add 33 q3;;   (* [3, 6, 10, 12, 12, 14, 15, 18, 18, 25, 26, 29, 32, 33, 35, 36]*)
assert(is_empty q3 = false);;   (*[3, 6, 10, 12, 12, 14, 15, 18, 18, 25, 26, 29, 32, 33, 35, 36]*)
let q3 = add 27 q3;;   (* [3, 6, 10, 12, 12, 14, 15, 18, 18, 25, 26, 27, 29, 32, 33, 35, 36]*)
let q3 = add 3 q3;;   (* [3, 3, 6, 10, 12, 12, 14, 15, 18, 18, 25, 26, 27, 29, 32, 33, 35, 36]*)
let q3 = add 13 q3;;   (* [3, 3, 6, 10, 12, 12, 13, 14, 15, 18, 18, 25, 26, 27, 29, 32, 33, 35, 36]*)
let q3 = add 20 q3;;   (* [3, 3, 6, 10, 12, 12, 13, 14, 15, 18, 18, 20, 25, 26, 27, 29, 32, 33, 35, 36]*)
let q3 = add 9 q3;;   (* [3, 3, 6, 9, 10, 12, 12, 13, 14, 15, 18, 18, 20, 25, 26, 27, 29, 32, 33, 35, 36]*)
let q3 = add 24 q3;;   (* [3, 3, 6, 9, 10, 12, 12, 13, 14, 15, 18, 18, 20, 24, 25, 26, 27, 29, 32, 33, 35, 36]*)
let q3 = add 36 q3;;   (* [3, 3, 6, 9, 10, 12, 12, 13, 14, 15, 18, 18, 20, 24, 25, 26, 27, 29, 32, 33, 35, 36, 36]*)
let q3 = add 30 q3;;   (* [3, 3, 6, 9, 10, 12, 12, 13, 14, 15, 18, 18, 20, 24, 25, 26, 27, 29, 30, 32, 33, 35, 36, 36]*)
let q3 = add 35 q3;;   (* [3, 3, 6, 9, 10, 12, 12, 13, 14, 15, 18, 18, 20, 24, 25, 26, 27, 29, 30, 32, 33, 35, 35, 36, 36]*)
let q3 = add 7 q3;;   (* [3, 3, 6, 7, 9, 10, 12, 12, 13, 14, 15, 18, 18, 20, 24, 25, 26, 27, 29, 30, 32, 33, 35, 35, 36, 36]*)
let (element, q3) = delete_min q3;;   (* 3 * [3, 6, 7, 9, 10, 12, 12, 13, 14, 15, 18, 18, 20, 24, 25, 26, 27, 29, 30, 32, 33, 35, 35, 36, 36]*)
assert(element = 3);;

(* -------q4------ *)
let q4 = empty;;
assert(is_empty q4 = true);;   (*[]*)
assert(is_empty q4 = true);;   (*[]*)
let q4 = add 11 q4;;   (* [11]*)
let q4 = add 14 q4;;   (* [11, 14]*)
let q4 = add 29 q4;;   (* [11, 14, 29]*)
assert(is_empty q4 = false);;   (*[11, 14, 29]*)
let q4 = add 27 q4;;   (* [11, 14, 27, 29]*)
let q4 = add 6 q4;;   (* [6, 11, 14, 27, 29]*)
let (element, q4) = delete_min q4;;   (* 6 * [11, 14, 27, 29]*)
assert(element = 6);;
let q4 = add 20 q4;;   (* [11, 14, 20, 27, 29]*)
let q4 = add 0 q4;;   (* [0, 11, 14, 20, 27, 29]*)
let q4 = add 18 q4;;   (* [0, 11, 14, 18, 20, 27, 29]*)
let q4 = add 28 q4;;   (* [0, 11, 14, 18, 20, 27, 28, 29]*)
assert(is_empty q4 = false);;   (*[0, 11, 14, 18, 20, 27, 28, 29]*)
let q4 = add 27 q4;;   (* [0, 11, 14, 18, 20, 27, 27, 28, 29]*)
let q4 = add 24 q4;;   (* [0, 11, 14, 18, 20, 24, 27, 27, 28, 29]*)
let q4 = add 27 q4;;   (* [0, 11, 14, 18, 20, 24, 27, 27, 27, 28, 29]*)
let q4 = add 22 q4;;   (* [0, 11, 14, 18, 20, 22, 24, 27, 27, 27, 28, 29]*)
let q4 = add 36 q4;;   (* [0, 11, 14, 18, 20, 22, 24, 27, 27, 27, 28, 29, 36]*)
let q4 = add 34 q4;;   (* [0, 11, 14, 18, 20, 22, 24, 27, 27, 27, 28, 29, 34, 36]*)
let q4 = add 26 q4;;   (* [0, 11, 14, 18, 20, 22, 24, 26, 27, 27, 27, 28, 29, 34, 36]*)
let (element, q4) = delete_min q4;;   (* 0 * [11, 14, 18, 20, 22, 24, 26, 27, 27, 27, 28, 29, 34, 36]*)
assert(element = 0);;
let (element, q4) = delete_min q4;;   (* 11 * [14, 18, 20, 22, 24, 26, 27, 27, 27, 28, 29, 34, 36]*)
assert(element = 11);;
let q4 = add 35 q4;;   (* [14, 18, 20, 22, 24, 26, 27, 27, 27, 28, 29, 34, 35, 36]*)
let q4 = add 13 q4;;   (* [13, 14, 18, 20, 22, 24, 26, 27, 27, 27, 28, 29, 34, 35, 36]*)
assert(is_empty q4 = false);;   (*[13, 14, 18, 20, 22, 24, 26, 27, 27, 27, 28, 29, 34, 35, 36]*)
assert(is_empty q4 = false);;   (*[13, 14, 18, 20, 22, 24, 26, 27, 27, 27, 28, 29, 34, 35, 36]*)
let (element, q4) = delete_min q4;;   (* 13 * [14, 18, 20, 22, 24, 26, 27, 27, 27, 28, 29, 34, 35, 36]*)
assert(element = 13);;
let (element, q4) = delete_min q4;;   (* 14 * [18, 20, 22, 24, 26, 27, 27, 27, 28, 29, 34, 35, 36]*)
assert(element = 14);;
let (element, q4) = delete_min q4;;   (* 18 * [20, 22, 24, 26, 27, 27, 27, 28, 29, 34, 35, 36]*)
assert(element = 18);;
let (element, q4) = delete_min q4;;   (* 20 * [22, 24, 26, 27, 27, 27, 28, 29, 34, 35, 36]*)
assert(element = 20);;
let q4 = add 36 q4;;   (* [22, 24, 26, 27, 27, 27, 28, 29, 34, 35, 36, 36]*)
let (element, q4) = delete_min q4;;   (* 22 * [24, 26, 27, 27, 27, 28, 29, 34, 35, 36, 36]*)
assert(element = 22);;
let q4 = add 0 q4;;   (* [0, 24, 26, 27, 27, 27, 28, 29, 34, 35, 36, 36]*)
let q4 = add 27 q4;;   (* [0, 24, 26, 27, 27, 27, 27, 28, 29, 34, 35, 36, 36]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;   (*[0, 3, 6, 7, 7, 8, 9, 10, 12, 12, 12, 12, 13, 14, 14, 15, 17, 17, 18, 18, 19, 19, 20, 20, 22, 22, 22, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38]*)
let (element, q) = delete_min q;;   (* 0 * [3, 6, 7, 7, 8, 9, 10, 12, 12, 12, 12, 13, 14, 14, 15, 17, 17, 18, 18, 19, 19, 20, 20, 22, 22, 22, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 0);;
let (element, q) = delete_min q;;   (* 3 * [6, 7, 7, 8, 9, 10, 12, 12, 12, 12, 13, 14, 14, 15, 17, 17, 18, 18, 19, 19, 20, 20, 22, 22, 22, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 3);;
let (element, q) = delete_min q;;   (* 6 * [7, 7, 8, 9, 10, 12, 12, 12, 12, 13, 14, 14, 15, 17, 17, 18, 18, 19, 19, 20, 20, 22, 22, 22, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 7 * [7, 8, 9, 10, 12, 12, 12, 12, 13, 14, 14, 15, 17, 17, 18, 18, 19, 19, 20, 20, 22, 22, 22, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 7 * [8, 9, 10, 12, 12, 12, 12, 13, 14, 14, 15, 17, 17, 18, 18, 19, 19, 20, 20, 22, 22, 22, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 8 * [9, 10, 12, 12, 12, 12, 13, 14, 14, 15, 17, 17, 18, 18, 19, 19, 20, 20, 22, 22, 22, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 9 * [10, 12, 12, 12, 12, 13, 14, 14, 15, 17, 17, 18, 18, 19, 19, 20, 20, 22, 22, 22, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 10 * [12, 12, 12, 12, 13, 14, 14, 15, 17, 17, 18, 18, 19, 19, 20, 20, 22, 22, 22, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 12 * [12, 12, 12, 13, 14, 14, 15, 17, 17, 18, 18, 19, 19, 20, 20, 22, 22, 22, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 12 * [12, 12, 13, 14, 14, 15, 17, 17, 18, 18, 19, 19, 20, 20, 22, 22, 22, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 12 * [12, 13, 14, 14, 15, 17, 17, 18, 18, 19, 19, 20, 20, 22, 22, 22, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 12 * [13, 14, 14, 15, 17, 17, 18, 18, 19, 19, 20, 20, 22, 22, 22, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 13 * [14, 14, 15, 17, 17, 18, 18, 19, 19, 20, 20, 22, 22, 22, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 14 * [14, 15, 17, 17, 18, 18, 19, 19, 20, 20, 22, 22, 22, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [15, 17, 17, 18, 18, 19, 19, 20, 20, 22, 22, 22, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [17, 17, 18, 18, 19, 19, 20, 20, 22, 22, 22, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 17 * [17, 18, 18, 19, 19, 20, 20, 22, 22, 22, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [18, 18, 19, 19, 20, 20, 22, 22, 22, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [18, 19, 19, 20, 20, 22, 22, 22, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [19, 19, 20, 20, 22, 22, 22, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [19, 20, 20, 22, 22, 22, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [20, 20, 22, 22, 22, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [20, 22, 22, 22, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [22, 22, 22, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 22 * [22, 22, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [22, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [23, 24, 24, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [24, 24, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [24, 25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [25, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [28, 28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [28, 29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [29, 29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [29, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [30, 31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [31, 32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 36, 36, 36, 38, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 36, 36, 38, 38, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 36, 38, 38, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 38, 38, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 38, 38, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [38, 38, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 38 * [38, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST59----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 4 q1;;   (* [4]*)
let (element, q1) = delete_min q1;;   (* 4 * []*)
assert(element = 4);;
let q1 = add 36 q1;;   (* [36]*)
let q1 = add 16 q1;;   (* [16, 36]*)
let q1 = add 29 q1;;   (* [16, 29, 36]*)
let (element, q1) = delete_min q1;;   (* 16 * [29, 36]*)
assert(element = 16);;
let q1 = add 1 q1;;   (* [1, 29, 36]*)
let q1 = add 37 q1;;   (* [1, 29, 36, 37]*)
let (element, q1) = delete_min q1;;   (* 1 * [29, 36, 37]*)
assert(element = 1);;
let q1 = add 19 q1;;   (* [19, 29, 36, 37]*)
let (element, q1) = delete_min q1;;   (* 19 * [29, 36, 37]*)
assert(element = 19);;
let q1 = add 38 q1;;   (* [29, 36, 37, 38]*)
let q1 = add 38 q1;;   (* [29, 36, 37, 38, 38]*)
let q1 = add 5 q1;;   (* [5, 29, 36, 37, 38, 38]*)
let (element, q1) = delete_min q1;;   (* 5 * [29, 36, 37, 38, 38]*)
assert(element = 5);;
let (element, q1) = delete_min q1;;   (* 29 * [36, 37, 38, 38]*)
assert(element = 29);;
let q1 = add 18 q1;;   (* [18, 36, 37, 38, 38]*)
let q1 = add 21 q1;;   (* [18, 21, 36, 37, 38, 38]*)
let q1 = add 17 q1;;   (* [17, 18, 21, 36, 37, 38, 38]*)
let q1 = add 35 q1;;   (* [17, 18, 21, 35, 36, 37, 38, 38]*)
let q1 = add 28 q1;;   (* [17, 18, 21, 28, 35, 36, 37, 38, 38]*)
let q1 = add 9 q1;;   (* [9, 17, 18, 21, 28, 35, 36, 37, 38, 38]*)
let (element, q1) = delete_min q1;;   (* 9 * [17, 18, 21, 28, 35, 36, 37, 38, 38]*)
assert(element = 9);;
let (element, q1) = delete_min q1;;   (* 17 * [18, 21, 28, 35, 36, 37, 38, 38]*)
assert(element = 17);;
let (element, q1) = delete_min q1;;   (* 18 * [21, 28, 35, 36, 37, 38, 38]*)
assert(element = 18);;
let (element, q1) = delete_min q1;;   (* 21 * [28, 35, 36, 37, 38, 38]*)
assert(element = 21);;
let (element, q1) = delete_min q1;;   (* 28 * [35, 36, 37, 38, 38]*)
assert(element = 28);;
let q1 = add 17 q1;;   (* [17, 35, 36, 37, 38, 38]*)
assert(is_empty q1 = false);;   (*[17, 35, 36, 37, 38, 38]*)
assert(is_empty q1 = false);;   (*[17, 35, 36, 37, 38, 38]*)
let q1 = add 30 q1;;   (* [17, 30, 35, 36, 37, 38, 38]*)
let q1 = add 38 q1;;   (* [17, 30, 35, 36, 37, 38, 38, 38]*)
let q1 = add 13 q1;;   (* [13, 17, 30, 35, 36, 37, 38, 38, 38]*)
let q1 = add 25 q1;;   (* [13, 17, 25, 30, 35, 36, 37, 38, 38, 38]*)
let q1 = add 1 q1;;   (* [1, 13, 17, 25, 30, 35, 36, 37, 38, 38, 38]*)
let (element, q1) = delete_min q1;;   (* 1 * [13, 17, 25, 30, 35, 36, 37, 38, 38, 38]*)
assert(element = 1);;

(* -------q2------ *)
let q2 = empty;;
let q2 = add 3 q2;;   (* [3]*)
let q2 = add 3 q2;;   (* [3, 3]*)
assert(is_empty q2 = false);;   (*[3, 3]*)
let q2 = add 3 q2;;   (* [3, 3, 3]*)
let q2 = add 7 q2;;   (* [3, 3, 3, 7]*)
let (element, q2) = delete_min q2;;   (* 3 * [3, 3, 7]*)
assert(element = 3);;
let (element, q2) = delete_min q2;;   (* 3 * [3, 7]*)
assert(element = 3);;
let q2 = add 34 q2;;   (* [3, 7, 34]*)
let q2 = add 25 q2;;   (* [3, 7, 25, 34]*)
let q2 = add 9 q2;;   (* [3, 7, 9, 25, 34]*)
let q2 = add 18 q2;;   (* [3, 7, 9, 18, 25, 34]*)
let q2 = add 16 q2;;   (* [3, 7, 9, 16, 18, 25, 34]*)
let (element, q2) = delete_min q2;;   (* 3 * [7, 9, 16, 18, 25, 34]*)
assert(element = 3);;
let q2 = add 11 q2;;   (* [7, 9, 11, 16, 18, 25, 34]*)
let q2 = add 12 q2;;   (* [7, 9, 11, 12, 16, 18, 25, 34]*)
let (element, q2) = delete_min q2;;   (* 7 * [9, 11, 12, 16, 18, 25, 34]*)
assert(element = 7);;
assert(is_empty q2 = false);;   (*[9, 11, 12, 16, 18, 25, 34]*)
let (element, q2) = delete_min q2;;   (* 9 * [11, 12, 16, 18, 25, 34]*)
assert(element = 9);;
let q2 = add 25 q2;;   (* [11, 12, 16, 18, 25, 25, 34]*)
let (element, q2) = delete_min q2;;   (* 11 * [12, 16, 18, 25, 25, 34]*)
assert(element = 11);;
let (element, q2) = delete_min q2;;   (* 12 * [16, 18, 25, 25, 34]*)
assert(element = 12);;
let q2 = add 30 q2;;   (* [16, 18, 25, 25, 30, 34]*)
let (element, q2) = delete_min q2;;   (* 16 * [18, 25, 25, 30, 34]*)
assert(element = 16);;
let q2 = add 37 q2;;   (* [18, 25, 25, 30, 34, 37]*)
assert(is_empty q2 = false);;   (*[18, 25, 25, 30, 34, 37]*)
let q2 = add 32 q2;;   (* [18, 25, 25, 30, 32, 34, 37]*)
let (element, q2) = delete_min q2;;   (* 18 * [25, 25, 30, 32, 34, 37]*)
assert(element = 18);;
let q2 = add 28 q2;;   (* [25, 25, 28, 30, 32, 34, 37]*)
let q2 = add 37 q2;;   (* [25, 25, 28, 30, 32, 34, 37, 37]*)
let q2 = add 36 q2;;   (* [25, 25, 28, 30, 32, 34, 36, 37, 37]*)
let q2 = add 28 q2;;   (* [25, 25, 28, 28, 30, 32, 34, 36, 37, 37]*)
let q2 = add 24 q2;;   (* [24, 25, 25, 28, 28, 30, 32, 34, 36, 37, 37]*)
let q2 = add 13 q2;;   (* [13, 24, 25, 25, 28, 28, 30, 32, 34, 36, 37, 37]*)
let (element, q2) = delete_min q2;;   (* 13 * [24, 25, 25, 28, 28, 30, 32, 34, 36, 37, 37]*)
assert(element = 13);;
assert(is_empty q2 = false);;   (*[24, 25, 25, 28, 28, 30, 32, 34, 36, 37, 37]*)
let (element, q2) = delete_min q2;;   (* 24 * [25, 25, 28, 28, 30, 32, 34, 36, 37, 37]*)
assert(element = 24);;

(* -------q3------ *)
let q3 = empty;;
let q3 = add 7 q3;;   (* [7]*)
let (element, q3) = delete_min q3;;   (* 7 * []*)
assert(element = 7);;
let q3 = add 26 q3;;   (* [26]*)
let q3 = add 6 q3;;   (* [6, 26]*)
let q3 = add 17 q3;;   (* [6, 17, 26]*)
let q3 = add 31 q3;;   (* [6, 17, 26, 31]*)
let (element, q3) = delete_min q3;;   (* 6 * [17, 26, 31]*)
assert(element = 6);;
let q3 = add 5 q3;;   (* [5, 17, 26, 31]*)
let (element, q3) = delete_min q3;;   (* 5 * [17, 26, 31]*)
assert(element = 5);;
let (element, q3) = delete_min q3;;   (* 17 * [26, 31]*)
assert(element = 17);;
let q3 = add 25 q3;;   (* [25, 26, 31]*)
let q3 = add 20 q3;;   (* [20, 25, 26, 31]*)
let q3 = add 2 q3;;   (* [2, 20, 25, 26, 31]*)
let (element, q3) = delete_min q3;;   (* 2 * [20, 25, 26, 31]*)
assert(element = 2);;
let (element, q3) = delete_min q3;;   (* 20 * [25, 26, 31]*)
assert(element = 20);;
let q3 = add 33 q3;;   (* [25, 26, 31, 33]*)
assert(is_empty q3 = false);;   (*[25, 26, 31, 33]*)
let (element, q3) = delete_min q3;;   (* 25 * [26, 31, 33]*)
assert(element = 25);;
let q3 = add 30 q3;;   (* [26, 30, 31, 33]*)
let q3 = add 35 q3;;   (* [26, 30, 31, 33, 35]*)
let q3 = add 28 q3;;   (* [26, 28, 30, 31, 33, 35]*)
let (element, q3) = delete_min q3;;   (* 26 * [28, 30, 31, 33, 35]*)
assert(element = 26);;
assert(is_empty q3 = false);;   (*[28, 30, 31, 33, 35]*)
let q3 = add 13 q3;;   (* [13, 28, 30, 31, 33, 35]*)
let q3 = add 18 q3;;   (* [13, 18, 28, 30, 31, 33, 35]*)
let (element, q3) = delete_min q3;;   (* 13 * [18, 28, 30, 31, 33, 35]*)
assert(element = 13);;
let q3 = add 22 q3;;   (* [18, 22, 28, 30, 31, 33, 35]*)
let q3 = add 10 q3;;   (* [10, 18, 22, 28, 30, 31, 33, 35]*)
let q3 = add 19 q3;;   (* [10, 18, 19, 22, 28, 30, 31, 33, 35]*)
let q3 = add 9 q3;;   (* [9, 10, 18, 19, 22, 28, 30, 31, 33, 35]*)
let q3 = add 23 q3;;   (* [9, 10, 18, 19, 22, 23, 28, 30, 31, 33, 35]*)
let q3 = add 29 q3;;   (* [9, 10, 18, 19, 22, 23, 28, 29, 30, 31, 33, 35]*)
let q3 = add 25 q3;;   (* [9, 10, 18, 19, 22, 23, 25, 28, 29, 30, 31, 33, 35]*)
let q3 = add 20 q3;;   (* [9, 10, 18, 19, 20, 22, 23, 25, 28, 29, 30, 31, 33, 35]*)
let q3 = add 38 q3;;   (* [9, 10, 18, 19, 20, 22, 23, 25, 28, 29, 30, 31, 33, 35, 38]*)
let q3 = add 39 q3;;   (* [9, 10, 18, 19, 20, 22, 23, 25, 28, 29, 30, 31, 33, 35, 38, 39]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 7 q4;;   (* [7]*)
let q4 = add 22 q4;;   (* [7, 22]*)
let (element, q4) = delete_min q4;;   (* 7 * [22]*)
assert(element = 7);;
let (element, q4) = delete_min q4;;   (* 22 * []*)
assert(element = 22);;
let q4 = add 9 q4;;   (* [9]*)
let q4 = add 4 q4;;   (* [4, 9]*)
let q4 = add 10 q4;;   (* [4, 9, 10]*)
let q4 = add 35 q4;;   (* [4, 9, 10, 35]*)
let (element, q4) = delete_min q4;;   (* 4 * [9, 10, 35]*)
assert(element = 4);;
let q4 = add 18 q4;;   (* [9, 10, 18, 35]*)
let q4 = add 26 q4;;   (* [9, 10, 18, 26, 35]*)
let q4 = add 23 q4;;   (* [9, 10, 18, 23, 26, 35]*)
let q4 = add 16 q4;;   (* [9, 10, 16, 18, 23, 26, 35]*)
let q4 = add 3 q4;;   (* [3, 9, 10, 16, 18, 23, 26, 35]*)
let q4 = add 10 q4;;   (* [3, 9, 10, 10, 16, 18, 23, 26, 35]*)
let q4 = add 34 q4;;   (* [3, 9, 10, 10, 16, 18, 23, 26, 34, 35]*)
assert(is_empty q4 = false);;   (*[3, 9, 10, 10, 16, 18, 23, 26, 34, 35]*)
let (element, q4) = delete_min q4;;   (* 3 * [9, 10, 10, 16, 18, 23, 26, 34, 35]*)
assert(element = 3);;
let (element, q4) = delete_min q4;;   (* 9 * [10, 10, 16, 18, 23, 26, 34, 35]*)
assert(element = 9);;
let (element, q4) = delete_min q4;;   (* 10 * [10, 16, 18, 23, 26, 34, 35]*)
assert(element = 10);;
let q4 = add 19 q4;;   (* [10, 16, 18, 19, 23, 26, 34, 35]*)
let q4 = add 34 q4;;   (* [10, 16, 18, 19, 23, 26, 34, 34, 35]*)
let q4 = add 4 q4;;   (* [4, 10, 16, 18, 19, 23, 26, 34, 34, 35]*)
let q4 = add 19 q4;;   (* [4, 10, 16, 18, 19, 19, 23, 26, 34, 34, 35]*)
let q4 = add 0 q4;;   (* [0, 4, 10, 16, 18, 19, 19, 23, 26, 34, 34, 35]*)
let (element, q4) = delete_min q4;;   (* 0 * [4, 10, 16, 18, 19, 19, 23, 26, 34, 34, 35]*)
assert(element = 0);;
let q4 = add 27 q4;;   (* [4, 10, 16, 18, 19, 19, 23, 26, 27, 34, 34, 35]*)
let (element, q4) = delete_min q4;;   (* 4 * [10, 16, 18, 19, 19, 23, 26, 27, 34, 34, 35]*)
assert(element = 4);;
let q4 = add 35 q4;;   (* [10, 16, 18, 19, 19, 23, 26, 27, 34, 34, 35, 35]*)
let q4 = add 38 q4;;   (* [10, 16, 18, 19, 19, 23, 26, 27, 34, 34, 35, 35, 38]*)
let q4 = add 8 q4;;   (* [8, 10, 16, 18, 19, 19, 23, 26, 27, 34, 34, 35, 35, 38]*)
let q4 = add 14 q4;;   (* [8, 10, 14, 16, 18, 19, 19, 23, 26, 27, 34, 34, 35, 35, 38]*)
let (element, q4) = delete_min q4;;   (* 8 * [10, 14, 16, 18, 19, 19, 23, 26, 27, 34, 34, 35, 35, 38]*)
assert(element = 8);;
let q4 = add 8 q4;;   (* [8, 10, 14, 16, 18, 19, 19, 23, 26, 27, 34, 34, 35, 35, 38]*)
let (element, q4) = delete_min q4;;   (* 8 * [10, 14, 16, 18, 19, 19, 23, 26, 27, 34, 34, 35, 35, 38]*)
assert(element = 8);;
let q4 = add 30 q4;;   (* [10, 14, 16, 18, 19, 19, 23, 26, 27, 30, 34, 34, 35, 35, 38]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;   (*[9, 10, 10, 13, 14, 16, 17, 18, 18, 19, 19, 19, 20, 22, 23, 23, 25, 25, 25, 25, 26, 27, 28, 28, 28, 29, 30, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38]*)
let (element, q) = delete_min q;;   (* 9 * [10, 10, 13, 14, 16, 17, 18, 18, 19, 19, 19, 20, 22, 23, 23, 25, 25, 25, 25, 26, 27, 28, 28, 28, 29, 30, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 10 * [10, 13, 14, 16, 17, 18, 18, 19, 19, 19, 20, 22, 23, 23, 25, 25, 25, 25, 26, 27, 28, 28, 28, 29, 30, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 10 * [13, 14, 16, 17, 18, 18, 19, 19, 19, 20, 22, 23, 23, 25, 25, 25, 25, 26, 27, 28, 28, 28, 29, 30, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 13 * [14, 16, 17, 18, 18, 19, 19, 19, 20, 22, 23, 23, 25, 25, 25, 25, 26, 27, 28, 28, 28, 29, 30, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 14 * [16, 17, 18, 18, 19, 19, 19, 20, 22, 23, 23, 25, 25, 25, 25, 26, 27, 28, 28, 28, 29, 30, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 16 * [17, 18, 18, 19, 19, 19, 20, 22, 23, 23, 25, 25, 25, 25, 26, 27, 28, 28, 28, 29, 30, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 17 * [18, 18, 19, 19, 19, 20, 22, 23, 23, 25, 25, 25, 25, 26, 27, 28, 28, 28, 29, 30, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [18, 19, 19, 19, 20, 22, 23, 23, 25, 25, 25, 25, 26, 27, 28, 28, 28, 29, 30, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [19, 19, 19, 20, 22, 23, 23, 25, 25, 25, 25, 26, 27, 28, 28, 28, 29, 30, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [19, 19, 20, 22, 23, 23, 25, 25, 25, 25, 26, 27, 28, 28, 28, 29, 30, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [19, 20, 22, 23, 23, 25, 25, 25, 25, 26, 27, 28, 28, 28, 29, 30, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [20, 22, 23, 23, 25, 25, 25, 25, 26, 27, 28, 28, 28, 29, 30, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [22, 23, 23, 25, 25, 25, 25, 26, 27, 28, 28, 28, 29, 30, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 22 * [23, 23, 25, 25, 25, 25, 26, 27, 28, 28, 28, 29, 30, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [23, 25, 25, 25, 25, 26, 27, 28, 28, 28, 29, 30, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [25, 25, 25, 25, 26, 27, 28, 28, 28, 29, 30, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 25 * [25, 25, 25, 26, 27, 28, 28, 28, 29, 30, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [25, 25, 26, 27, 28, 28, 28, 29, 30, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [25, 26, 27, 28, 28, 28, 29, 30, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [26, 27, 28, 28, 28, 29, 30, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [27, 28, 28, 28, 29, 30, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [28, 28, 28, 29, 30, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 29, 30, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 29, 30, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [29, 30, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [30, 30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [30, 30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [30, 30, 31, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [30, 31, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [31, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [34, 34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [37, 38, 38, 38, 38, 38, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [38, 38, 38, 38, 38, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 38, 38, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 38, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST60----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 21 q1;;   (* [21]*)
let q1 = add 27 q1;;   (* [21, 27]*)
let q1 = add 5 q1;;   (* [5, 21, 27]*)
let q1 = add 6 q1;;   (* [5, 6, 21, 27]*)
let q1 = add 15 q1;;   (* [5, 6, 15, 21, 27]*)
let (element, q1) = delete_min q1;;   (* 5 * [6, 15, 21, 27]*)
assert(element = 5);;
let q1 = add 14 q1;;   (* [6, 14, 15, 21, 27]*)
let q1 = add 29 q1;;   (* [6, 14, 15, 21, 27, 29]*)
let q1 = add 36 q1;;   (* [6, 14, 15, 21, 27, 29, 36]*)
let q1 = add 19 q1;;   (* [6, 14, 15, 19, 21, 27, 29, 36]*)
assert(is_empty q1 = false);;   (*[6, 14, 15, 19, 21, 27, 29, 36]*)
let q1 = add 28 q1;;   (* [6, 14, 15, 19, 21, 27, 28, 29, 36]*)
let q1 = add 20 q1;;   (* [6, 14, 15, 19, 20, 21, 27, 28, 29, 36]*)
let q1 = add 26 q1;;   (* [6, 14, 15, 19, 20, 21, 26, 27, 28, 29, 36]*)
let (element, q1) = delete_min q1;;   (* 6 * [14, 15, 19, 20, 21, 26, 27, 28, 29, 36]*)
assert(element = 6);;
let (element, q1) = delete_min q1;;   (* 14 * [15, 19, 20, 21, 26, 27, 28, 29, 36]*)
assert(element = 14);;
let q1 = add 4 q1;;   (* [4, 15, 19, 20, 21, 26, 27, 28, 29, 36]*)
let q1 = add 6 q1;;   (* [4, 6, 15, 19, 20, 21, 26, 27, 28, 29, 36]*)
let (element, q1) = delete_min q1;;   (* 4 * [6, 15, 19, 20, 21, 26, 27, 28, 29, 36]*)
assert(element = 4);;
let q1 = add 39 q1;;   (* [6, 15, 19, 20, 21, 26, 27, 28, 29, 36, 39]*)
let (element, q1) = delete_min q1;;   (* 6 * [15, 19, 20, 21, 26, 27, 28, 29, 36, 39]*)
assert(element = 6);;
let q1 = add 21 q1;;   (* [15, 19, 20, 21, 21, 26, 27, 28, 29, 36, 39]*)
let (element, q1) = delete_min q1;;   (* 15 * [19, 20, 21, 21, 26, 27, 28, 29, 36, 39]*)
assert(element = 15);;
let q1 = add 16 q1;;   (* [16, 19, 20, 21, 21, 26, 27, 28, 29, 36, 39]*)
let q1 = add 31 q1;;   (* [16, 19, 20, 21, 21, 26, 27, 28, 29, 31, 36, 39]*)
let q1 = add 3 q1;;   (* [3, 16, 19, 20, 21, 21, 26, 27, 28, 29, 31, 36, 39]*)
let q1 = add 31 q1;;   (* [3, 16, 19, 20, 21, 21, 26, 27, 28, 29, 31, 31, 36, 39]*)
let q1 = add 7 q1;;   (* [3, 7, 16, 19, 20, 21, 21, 26, 27, 28, 29, 31, 31, 36, 39]*)
let q1 = add 36 q1;;   (* [3, 7, 16, 19, 20, 21, 21, 26, 27, 28, 29, 31, 31, 36, 36, 39]*)
assert(is_empty q1 = false);;   (*[3, 7, 16, 19, 20, 21, 21, 26, 27, 28, 29, 31, 31, 36, 36, 39]*)
let q1 = add 13 q1;;   (* [3, 7, 13, 16, 19, 20, 21, 21, 26, 27, 28, 29, 31, 31, 36, 36, 39]*)
let (element, q1) = delete_min q1;;   (* 3 * [7, 13, 16, 19, 20, 21, 21, 26, 27, 28, 29, 31, 31, 36, 36, 39]*)
assert(element = 3);;
let q1 = add 8 q1;;   (* [7, 8, 13, 16, 19, 20, 21, 21, 26, 27, 28, 29, 31, 31, 36, 36, 39]*)
let q1 = add 37 q1;;   (* [7, 8, 13, 16, 19, 20, 21, 21, 26, 27, 28, 29, 31, 31, 36, 36, 37, 39]*)
let q1 = add 8 q1;;   (* [7, 8, 8, 13, 16, 19, 20, 21, 21, 26, 27, 28, 29, 31, 31, 36, 36, 37, 39]*)
let q1 = add 31 q1;;   (* [7, 8, 8, 13, 16, 19, 20, 21, 21, 26, 27, 28, 29, 31, 31, 31, 36, 36, 37, 39]*)
let q1 = add 39 q1;;   (* [7, 8, 8, 13, 16, 19, 20, 21, 21, 26, 27, 28, 29, 31, 31, 31, 36, 36, 37, 39, 39]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 23 q2;;   (* [23]*)
let q2 = add 36 q2;;   (* [23, 36]*)
let q2 = add 1 q2;;   (* [1, 23, 36]*)
let (element, q2) = delete_min q2;;   (* 1 * [23, 36]*)
assert(element = 1);;
let (element, q2) = delete_min q2;;   (* 23 * [36]*)
assert(element = 23);;
let (element, q2) = delete_min q2;;   (* 36 * []*)
assert(element = 36);;
let q2 = add 5 q2;;   (* [5]*)
let q2 = add 5 q2;;   (* [5, 5]*)
let (element, q2) = delete_min q2;;   (* 5 * [5]*)
assert(element = 5);;
let (element, q2) = delete_min q2;;   (* 5 * []*)
assert(element = 5);;
let q2 = add 29 q2;;   (* [29]*)
let q2 = add 30 q2;;   (* [29, 30]*)
let q2 = add 39 q2;;   (* [29, 30, 39]*)
let q2 = add 38 q2;;   (* [29, 30, 38, 39]*)
let q2 = add 22 q2;;   (* [22, 29, 30, 38, 39]*)
let (element, q2) = delete_min q2;;   (* 22 * [29, 30, 38, 39]*)
assert(element = 22);;
let q2 = add 27 q2;;   (* [27, 29, 30, 38, 39]*)
let q2 = add 13 q2;;   (* [13, 27, 29, 30, 38, 39]*)
let q2 = add 17 q2;;   (* [13, 17, 27, 29, 30, 38, 39]*)
let (element, q2) = delete_min q2;;   (* 13 * [17, 27, 29, 30, 38, 39]*)
assert(element = 13);;
let q2 = add 1 q2;;   (* [1, 17, 27, 29, 30, 38, 39]*)
let q2 = add 12 q2;;   (* [1, 12, 17, 27, 29, 30, 38, 39]*)
let q2 = add 24 q2;;   (* [1, 12, 17, 24, 27, 29, 30, 38, 39]*)
let q2 = add 19 q2;;   (* [1, 12, 17, 19, 24, 27, 29, 30, 38, 39]*)
assert(is_empty q2 = false);;   (*[1, 12, 17, 19, 24, 27, 29, 30, 38, 39]*)
let q2 = add 11 q2;;   (* [1, 11, 12, 17, 19, 24, 27, 29, 30, 38, 39]*)
let (element, q2) = delete_min q2;;   (* 1 * [11, 12, 17, 19, 24, 27, 29, 30, 38, 39]*)
assert(element = 1);;
let q2 = add 10 q2;;   (* [10, 11, 12, 17, 19, 24, 27, 29, 30, 38, 39]*)
assert(is_empty q2 = false);;   (*[10, 11, 12, 17, 19, 24, 27, 29, 30, 38, 39]*)
let (element, q2) = delete_min q2;;   (* 10 * [11, 12, 17, 19, 24, 27, 29, 30, 38, 39]*)
assert(element = 10);;
let q2 = add 19 q2;;   (* [11, 12, 17, 19, 19, 24, 27, 29, 30, 38, 39]*)
let q2 = add 32 q2;;   (* [11, 12, 17, 19, 19, 24, 27, 29, 30, 32, 38, 39]*)
let (element, q2) = delete_min q2;;   (* 11 * [12, 17, 19, 19, 24, 27, 29, 30, 32, 38, 39]*)
assert(element = 11);;
let q2 = add 29 q2;;   (* [12, 17, 19, 19, 24, 27, 29, 29, 30, 32, 38, 39]*)
let q2 = add 8 q2;;   (* [8, 12, 17, 19, 19, 24, 27, 29, 29, 30, 32, 38, 39]*)
let q2 = add 15 q2;;   (* [8, 12, 15, 17, 19, 19, 24, 27, 29, 29, 30, 32, 38, 39]*)
let q2 = add 18 q2;;   (* [8, 12, 15, 17, 18, 19, 19, 24, 27, 29, 29, 30, 32, 38, 39]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 6 q3;;   (* [6]*)
let q3 = add 26 q3;;   (* [6, 26]*)
let q3 = add 27 q3;;   (* [6, 26, 27]*)
let q3 = add 38 q3;;   (* [6, 26, 27, 38]*)
assert(is_empty q3 = false);;   (*[6, 26, 27, 38]*)
let q3 = add 4 q3;;   (* [4, 6, 26, 27, 38]*)
let q3 = add 11 q3;;   (* [4, 6, 11, 26, 27, 38]*)
let (element, q3) = delete_min q3;;   (* 4 * [6, 11, 26, 27, 38]*)
assert(element = 4);;
let q3 = add 21 q3;;   (* [6, 11, 21, 26, 27, 38]*)
let q3 = add 17 q3;;   (* [6, 11, 17, 21, 26, 27, 38]*)
let q3 = add 16 q3;;   (* [6, 11, 16, 17, 21, 26, 27, 38]*)
let (element, q3) = delete_min q3;;   (* 6 * [11, 16, 17, 21, 26, 27, 38]*)
assert(element = 6);;
let (element, q3) = delete_min q3;;   (* 11 * [16, 17, 21, 26, 27, 38]*)
assert(element = 11);;
let q3 = add 8 q3;;   (* [8, 16, 17, 21, 26, 27, 38]*)
assert(is_empty q3 = false);;   (*[8, 16, 17, 21, 26, 27, 38]*)
let q3 = add 11 q3;;   (* [8, 11, 16, 17, 21, 26, 27, 38]*)
let (element, q3) = delete_min q3;;   (* 8 * [11, 16, 17, 21, 26, 27, 38]*)
assert(element = 8);;
assert(is_empty q3 = false);;   (*[11, 16, 17, 21, 26, 27, 38]*)
let (element, q3) = delete_min q3;;   (* 11 * [16, 17, 21, 26, 27, 38]*)
assert(element = 11);;
let (element, q3) = delete_min q3;;   (* 16 * [17, 21, 26, 27, 38]*)
assert(element = 16);;
assert(is_empty q3 = false);;   (*[17, 21, 26, 27, 38]*)
let q3 = add 38 q3;;   (* [17, 21, 26, 27, 38, 38]*)
let q3 = add 16 q3;;   (* [16, 17, 21, 26, 27, 38, 38]*)
let (element, q3) = delete_min q3;;   (* 16 * [17, 21, 26, 27, 38, 38]*)
assert(element = 16);;
let (element, q3) = delete_min q3;;   (* 17 * [21, 26, 27, 38, 38]*)
assert(element = 17);;
let q3 = add 24 q3;;   (* [21, 24, 26, 27, 38, 38]*)
let q3 = add 16 q3;;   (* [16, 21, 24, 26, 27, 38, 38]*)
let q3 = add 26 q3;;   (* [16, 21, 24, 26, 26, 27, 38, 38]*)
let q3 = add 14 q3;;   (* [14, 16, 21, 24, 26, 26, 27, 38, 38]*)
let q3 = add 34 q3;;   (* [14, 16, 21, 24, 26, 26, 27, 34, 38, 38]*)
let (element, q3) = delete_min q3;;   (* 14 * [16, 21, 24, 26, 26, 27, 34, 38, 38]*)
assert(element = 14);;
let q3 = add 16 q3;;   (* [16, 16, 21, 24, 26, 26, 27, 34, 38, 38]*)
let q3 = add 2 q3;;   (* [2, 16, 16, 21, 24, 26, 26, 27, 34, 38, 38]*)
let (element, q3) = delete_min q3;;   (* 2 * [16, 16, 21, 24, 26, 26, 27, 34, 38, 38]*)
assert(element = 2);;
assert(is_empty q3 = false);;   (*[16, 16, 21, 24, 26, 26, 27, 34, 38, 38]*)
let q3 = add 27 q3;;   (* [16, 16, 21, 24, 26, 26, 27, 27, 34, 38, 38]*)
assert(is_empty q3 = false);;   (*[16, 16, 21, 24, 26, 26, 27, 27, 34, 38, 38]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 5 q4;;   (* [5]*)
let q4 = add 14 q4;;   (* [5, 14]*)
assert(is_empty q4 = false);;   (*[5, 14]*)
let q4 = add 24 q4;;   (* [5, 14, 24]*)
let q4 = add 10 q4;;   (* [5, 10, 14, 24]*)
let (element, q4) = delete_min q4;;   (* 5 * [10, 14, 24]*)
assert(element = 5);;
let (element, q4) = delete_min q4;;   (* 10 * [14, 24]*)
assert(element = 10);;
let (element, q4) = delete_min q4;;   (* 14 * [24]*)
assert(element = 14);;
let q4 = add 7 q4;;   (* [7, 24]*)
assert(is_empty q4 = false);;   (*[7, 24]*)
let q4 = add 4 q4;;   (* [4, 7, 24]*)
assert(is_empty q4 = false);;   (*[4, 7, 24]*)
let (element, q4) = delete_min q4;;   (* 4 * [7, 24]*)
assert(element = 4);;
let q4 = add 35 q4;;   (* [7, 24, 35]*)
let q4 = add 37 q4;;   (* [7, 24, 35, 37]*)
let (element, q4) = delete_min q4;;   (* 7 * [24, 35, 37]*)
assert(element = 7);;
let q4 = add 0 q4;;   (* [0, 24, 35, 37]*)
let q4 = add 4 q4;;   (* [0, 4, 24, 35, 37]*)
let (element, q4) = delete_min q4;;   (* 0 * [4, 24, 35, 37]*)
assert(element = 0);;
assert(is_empty q4 = false);;   (*[4, 24, 35, 37]*)
let q4 = add 33 q4;;   (* [4, 24, 33, 35, 37]*)
let (element, q4) = delete_min q4;;   (* 4 * [24, 33, 35, 37]*)
assert(element = 4);;
let (element, q4) = delete_min q4;;   (* 24 * [33, 35, 37]*)
assert(element = 24);;
let q4 = add 24 q4;;   (* [24, 33, 35, 37]*)
assert(is_empty q4 = false);;   (*[24, 33, 35, 37]*)
let (element, q4) = delete_min q4;;   (* 24 * [33, 35, 37]*)
assert(element = 24);;
let (element, q4) = delete_min q4;;   (* 33 * [35, 37]*)
assert(element = 33);;
let (element, q4) = delete_min q4;;   (* 35 * [37]*)
assert(element = 35);;
assert(is_empty q4 = false);;   (*[37]*)
let q4 = add 21 q4;;   (* [21, 37]*)
let q4 = add 0 q4;;   (* [0, 21, 37]*)
let q4 = add 34 q4;;   (* [0, 21, 34, 37]*)
let q4 = add 1 q4;;   (* [0, 1, 21, 34, 37]*)
let (element, q4) = delete_min q4;;   (* 0 * [1, 21, 34, 37]*)
assert(element = 0);;
let q4 = add 35 q4;;   (* [1, 21, 34, 35, 37]*)
let (element, q4) = delete_min q4;;   (* 1 * [21, 34, 35, 37]*)
assert(element = 1);;
let q4 = add 18 q4;;   (* [18, 21, 34, 35, 37]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;   (*[7, 8, 8, 8, 12, 13, 15, 16, 16, 16, 17, 18, 18, 19, 19, 19, 20, 21, 21, 21, 21, 24, 24, 26, 26, 26, 27, 27, 27, 27, 28, 29, 29, 29, 30, 31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
let (element, q) = delete_min q;;   (* 7 * [8, 8, 8, 12, 13, 15, 16, 16, 16, 17, 18, 18, 19, 19, 19, 20, 21, 21, 21, 21, 24, 24, 26, 26, 26, 27, 27, 27, 27, 28, 29, 29, 29, 30, 31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 8 * [8, 8, 12, 13, 15, 16, 16, 16, 17, 18, 18, 19, 19, 19, 20, 21, 21, 21, 21, 24, 24, 26, 26, 26, 27, 27, 27, 27, 28, 29, 29, 29, 30, 31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 8 * [8, 12, 13, 15, 16, 16, 16, 17, 18, 18, 19, 19, 19, 20, 21, 21, 21, 21, 24, 24, 26, 26, 26, 27, 27, 27, 27, 28, 29, 29, 29, 30, 31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 8 * [12, 13, 15, 16, 16, 16, 17, 18, 18, 19, 19, 19, 20, 21, 21, 21, 21, 24, 24, 26, 26, 26, 27, 27, 27, 27, 28, 29, 29, 29, 30, 31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 12 * [13, 15, 16, 16, 16, 17, 18, 18, 19, 19, 19, 20, 21, 21, 21, 21, 24, 24, 26, 26, 26, 27, 27, 27, 27, 28, 29, 29, 29, 30, 31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 13 * [15, 16, 16, 16, 17, 18, 18, 19, 19, 19, 20, 21, 21, 21, 21, 24, 24, 26, 26, 26, 27, 27, 27, 27, 28, 29, 29, 29, 30, 31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 15 * [16, 16, 16, 17, 18, 18, 19, 19, 19, 20, 21, 21, 21, 21, 24, 24, 26, 26, 26, 27, 27, 27, 27, 28, 29, 29, 29, 30, 31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [16, 16, 17, 18, 18, 19, 19, 19, 20, 21, 21, 21, 21, 24, 24, 26, 26, 26, 27, 27, 27, 27, 28, 29, 29, 29, 30, 31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [16, 17, 18, 18, 19, 19, 19, 20, 21, 21, 21, 21, 24, 24, 26, 26, 26, 27, 27, 27, 27, 28, 29, 29, 29, 30, 31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [17, 18, 18, 19, 19, 19, 20, 21, 21, 21, 21, 24, 24, 26, 26, 26, 27, 27, 27, 27, 28, 29, 29, 29, 30, 31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 17 * [18, 18, 19, 19, 19, 20, 21, 21, 21, 21, 24, 24, 26, 26, 26, 27, 27, 27, 27, 28, 29, 29, 29, 30, 31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [18, 19, 19, 19, 20, 21, 21, 21, 21, 24, 24, 26, 26, 26, 27, 27, 27, 27, 28, 29, 29, 29, 30, 31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [19, 19, 19, 20, 21, 21, 21, 21, 24, 24, 26, 26, 26, 27, 27, 27, 27, 28, 29, 29, 29, 30, 31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [19, 19, 20, 21, 21, 21, 21, 24, 24, 26, 26, 26, 27, 27, 27, 27, 28, 29, 29, 29, 30, 31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [19, 20, 21, 21, 21, 21, 24, 24, 26, 26, 26, 27, 27, 27, 27, 28, 29, 29, 29, 30, 31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [20, 21, 21, 21, 21, 24, 24, 26, 26, 26, 27, 27, 27, 27, 28, 29, 29, 29, 30, 31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [21, 21, 21, 21, 24, 24, 26, 26, 26, 27, 27, 27, 27, 28, 29, 29, 29, 30, 31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [21, 21, 21, 24, 24, 26, 26, 26, 27, 27, 27, 27, 28, 29, 29, 29, 30, 31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [21, 21, 24, 24, 26, 26, 26, 27, 27, 27, 27, 28, 29, 29, 29, 30, 31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [21, 24, 24, 26, 26, 26, 27, 27, 27, 27, 28, 29, 29, 29, 30, 31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [24, 24, 26, 26, 26, 27, 27, 27, 27, 28, 29, 29, 29, 30, 31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 24 * [24, 26, 26, 26, 27, 27, 27, 27, 28, 29, 29, 29, 30, 31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [26, 26, 26, 27, 27, 27, 27, 28, 29, 29, 29, 30, 31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 26 * [26, 26, 27, 27, 27, 27, 28, 29, 29, 29, 30, 31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [26, 27, 27, 27, 27, 28, 29, 29, 29, 30, 31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [27, 27, 27, 27, 28, 29, 29, 29, 30, 31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 27, 28, 29, 29, 29, 30, 31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 28, 29, 29, 29, 30, 31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 28, 29, 29, 29, 30, 31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [28, 29, 29, 29, 30, 31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [29, 29, 29, 30, 31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [29, 29, 30, 31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [29, 30, 31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [30, 31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [31, 32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [32, 34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [34, 34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [37, 38, 38, 38, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [38, 38, 38, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST61----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 26 q1;;   (* [26]*)
let q1 = add 11 q1;;   (* [11, 26]*)
let q1 = add 28 q1;;   (* [11, 26, 28]*)
let q1 = add 35 q1;;   (* [11, 26, 28, 35]*)
let (element, q1) = delete_min q1;;   (* 11 * [26, 28, 35]*)
assert(element = 11);;
let q1 = add 29 q1;;   (* [26, 28, 29, 35]*)
let q1 = add 11 q1;;   (* [11, 26, 28, 29, 35]*)
let q1 = add 39 q1;;   (* [11, 26, 28, 29, 35, 39]*)
let q1 = add 29 q1;;   (* [11, 26, 28, 29, 29, 35, 39]*)
let q1 = add 12 q1;;   (* [11, 12, 26, 28, 29, 29, 35, 39]*)
let (element, q1) = delete_min q1;;   (* 11 * [12, 26, 28, 29, 29, 35, 39]*)
assert(element = 11);;
let q1 = add 38 q1;;   (* [12, 26, 28, 29, 29, 35, 38, 39]*)
let q1 = add 1 q1;;   (* [1, 12, 26, 28, 29, 29, 35, 38, 39]*)
let q1 = add 26 q1;;   (* [1, 12, 26, 26, 28, 29, 29, 35, 38, 39]*)
let q1 = add 25 q1;;   (* [1, 12, 25, 26, 26, 28, 29, 29, 35, 38, 39]*)
let q1 = add 36 q1;;   (* [1, 12, 25, 26, 26, 28, 29, 29, 35, 36, 38, 39]*)
let q1 = add 6 q1;;   (* [1, 6, 12, 25, 26, 26, 28, 29, 29, 35, 36, 38, 39]*)
let q1 = add 35 q1;;   (* [1, 6, 12, 25, 26, 26, 28, 29, 29, 35, 35, 36, 38, 39]*)
let q1 = add 22 q1;;   (* [1, 6, 12, 22, 25, 26, 26, 28, 29, 29, 35, 35, 36, 38, 39]*)
let q1 = add 28 q1;;   (* [1, 6, 12, 22, 25, 26, 26, 28, 28, 29, 29, 35, 35, 36, 38, 39]*)
let q1 = add 4 q1;;   (* [1, 4, 6, 12, 22, 25, 26, 26, 28, 28, 29, 29, 35, 35, 36, 38, 39]*)
let q1 = add 15 q1;;   (* [1, 4, 6, 12, 15, 22, 25, 26, 26, 28, 28, 29, 29, 35, 35, 36, 38, 39]*)
let (element, q1) = delete_min q1;;   (* 1 * [4, 6, 12, 15, 22, 25, 26, 26, 28, 28, 29, 29, 35, 35, 36, 38, 39]*)
assert(element = 1);;
let q1 = add 0 q1;;   (* [0, 4, 6, 12, 15, 22, 25, 26, 26, 28, 28, 29, 29, 35, 35, 36, 38, 39]*)
let q1 = add 27 q1;;   (* [0, 4, 6, 12, 15, 22, 25, 26, 26, 27, 28, 28, 29, 29, 35, 35, 36, 38, 39]*)
let (element, q1) = delete_min q1;;   (* 0 * [4, 6, 12, 15, 22, 25, 26, 26, 27, 28, 28, 29, 29, 35, 35, 36, 38, 39]*)
assert(element = 0);;
let (element, q1) = delete_min q1;;   (* 4 * [6, 12, 15, 22, 25, 26, 26, 27, 28, 28, 29, 29, 35, 35, 36, 38, 39]*)
assert(element = 4);;
let q1 = add 13 q1;;   (* [6, 12, 13, 15, 22, 25, 26, 26, 27, 28, 28, 29, 29, 35, 35, 36, 38, 39]*)
let q1 = add 10 q1;;   (* [6, 10, 12, 13, 15, 22, 25, 26, 26, 27, 28, 28, 29, 29, 35, 35, 36, 38, 39]*)
let (element, q1) = delete_min q1;;   (* 6 * [10, 12, 13, 15, 22, 25, 26, 26, 27, 28, 28, 29, 29, 35, 35, 36, 38, 39]*)
assert(element = 6);;
assert(is_empty q1 = false);;   (*[10, 12, 13, 15, 22, 25, 26, 26, 27, 28, 28, 29, 29, 35, 35, 36, 38, 39]*)
let q1 = add 37 q1;;   (* [10, 12, 13, 15, 22, 25, 26, 26, 27, 28, 28, 29, 29, 35, 35, 36, 37, 38, 39]*)
let q1 = add 19 q1;;   (* [10, 12, 13, 15, 19, 22, 25, 26, 26, 27, 28, 28, 29, 29, 35, 35, 36, 37, 38, 39]*)
let q1 = add 4 q1;;   (* [4, 10, 12, 13, 15, 19, 22, 25, 26, 26, 27, 28, 28, 29, 29, 35, 35, 36, 37, 38, 39]*)
let q1 = add 9 q1;;   (* [4, 9, 10, 12, 13, 15, 19, 22, 25, 26, 26, 27, 28, 28, 29, 29, 35, 35, 36, 37, 38, 39]*)
let (element, q1) = delete_min q1;;   (* 4 * [9, 10, 12, 13, 15, 19, 22, 25, 26, 26, 27, 28, 28, 29, 29, 35, 35, 36, 37, 38, 39]*)
assert(element = 4);;
let q1 = add 38 q1;;   (* [9, 10, 12, 13, 15, 19, 22, 25, 26, 26, 27, 28, 28, 29, 29, 35, 35, 36, 37, 38, 38, 39]*)
let q1 = add 38 q1;;   (* [9, 10, 12, 13, 15, 19, 22, 25, 26, 26, 27, 28, 28, 29, 29, 35, 35, 36, 37, 38, 38, 38, 39]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 18 q2;;   (* [18]*)
let q2 = add 7 q2;;   (* [7, 18]*)
let (element, q2) = delete_min q2;;   (* 7 * [18]*)
assert(element = 7);;
let q2 = add 17 q2;;   (* [17, 18]*)
let (element, q2) = delete_min q2;;   (* 17 * [18]*)
assert(element = 17);;
let q2 = add 35 q2;;   (* [18, 35]*)
let q2 = add 1 q2;;   (* [1, 18, 35]*)
let (element, q2) = delete_min q2;;   (* 1 * [18, 35]*)
assert(element = 1);;
let (element, q2) = delete_min q2;;   (* 18 * [35]*)
assert(element = 18);;
assert(is_empty q2 = false);;   (*[35]*)
let (element, q2) = delete_min q2;;   (* 35 * []*)
assert(element = 35);;
let q2 = add 14 q2;;   (* [14]*)
assert(is_empty q2 = false);;   (*[14]*)
let (element, q2) = delete_min q2;;   (* 14 * []*)
assert(element = 14);;
let q2 = add 27 q2;;   (* [27]*)
let (element, q2) = delete_min q2;;   (* 27 * []*)
assert(element = 27);;
let q2 = add 39 q2;;   (* [39]*)
let q2 = add 10 q2;;   (* [10, 39]*)
let (element, q2) = delete_min q2;;   (* 10 * [39]*)
assert(element = 10);;
let (element, q2) = delete_min q2;;   (* 39 * []*)
assert(element = 39);;
assert(is_empty q2 = true);;   (*[]*)
let q2 = add 20 q2;;   (* [20]*)
let (element, q2) = delete_min q2;;   (* 20 * []*)
assert(element = 20);;
assert(is_empty q2 = true);;   (*[]*)
let q2 = add 14 q2;;   (* [14]*)
let q2 = add 36 q2;;   (* [14, 36]*)
assert(is_empty q2 = false);;   (*[14, 36]*)
let q2 = add 35 q2;;   (* [14, 35, 36]*)
let q2 = add 0 q2;;   (* [0, 14, 35, 36]*)
let q2 = add 37 q2;;   (* [0, 14, 35, 36, 37]*)
let q2 = add 16 q2;;   (* [0, 14, 16, 35, 36, 37]*)
let q2 = add 3 q2;;   (* [0, 3, 14, 16, 35, 36, 37]*)
let (element, q2) = delete_min q2;;   (* 0 * [3, 14, 16, 35, 36, 37]*)
assert(element = 0);;
let q2 = add 11 q2;;   (* [3, 11, 14, 16, 35, 36, 37]*)
let q2 = add 20 q2;;   (* [3, 11, 14, 16, 20, 35, 36, 37]*)
let (element, q2) = delete_min q2;;   (* 3 * [11, 14, 16, 20, 35, 36, 37]*)
assert(element = 3);;
let (element, q2) = delete_min q2;;   (* 11 * [14, 16, 20, 35, 36, 37]*)
assert(element = 11);;
let q2 = add 23 q2;;   (* [14, 16, 20, 23, 35, 36, 37]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 22 q3;;   (* [22]*)
let (element, q3) = delete_min q3;;   (* 22 * []*)
assert(element = 22);;
let q3 = add 28 q3;;   (* [28]*)
let q3 = add 16 q3;;   (* [16, 28]*)
let q3 = add 1 q3;;   (* [1, 16, 28]*)
let q3 = add 29 q3;;   (* [1, 16, 28, 29]*)
let (element, q3) = delete_min q3;;   (* 1 * [16, 28, 29]*)
assert(element = 1);;
let (element, q3) = delete_min q3;;   (* 16 * [28, 29]*)
assert(element = 16);;
let q3 = add 8 q3;;   (* [8, 28, 29]*)
let q3 = add 28 q3;;   (* [8, 28, 28, 29]*)
let q3 = add 36 q3;;   (* [8, 28, 28, 29, 36]*)
let (element, q3) = delete_min q3;;   (* 8 * [28, 28, 29, 36]*)
assert(element = 8);;
let (element, q3) = delete_min q3;;   (* 28 * [28, 29, 36]*)
assert(element = 28);;
assert(is_empty q3 = false);;   (*[28, 29, 36]*)
let q3 = add 6 q3;;   (* [6, 28, 29, 36]*)
let q3 = add 1 q3;;   (* [1, 6, 28, 29, 36]*)
let q3 = add 21 q3;;   (* [1, 6, 21, 28, 29, 36]*)
let q3 = add 33 q3;;   (* [1, 6, 21, 28, 29, 33, 36]*)
let q3 = add 33 q3;;   (* [1, 6, 21, 28, 29, 33, 33, 36]*)
let q3 = add 38 q3;;   (* [1, 6, 21, 28, 29, 33, 33, 36, 38]*)
let q3 = add 26 q3;;   (* [1, 6, 21, 26, 28, 29, 33, 33, 36, 38]*)
assert(is_empty q3 = false);;   (*[1, 6, 21, 26, 28, 29, 33, 33, 36, 38]*)
let q3 = add 2 q3;;   (* [1, 2, 6, 21, 26, 28, 29, 33, 33, 36, 38]*)
let q3 = add 4 q3;;   (* [1, 2, 4, 6, 21, 26, 28, 29, 33, 33, 36, 38]*)
let (element, q3) = delete_min q3;;   (* 1 * [2, 4, 6, 21, 26, 28, 29, 33, 33, 36, 38]*)
assert(element = 1);;
let q3 = add 11 q3;;   (* [2, 4, 6, 11, 21, 26, 28, 29, 33, 33, 36, 38]*)
let (element, q3) = delete_min q3;;   (* 2 * [4, 6, 11, 21, 26, 28, 29, 33, 33, 36, 38]*)
assert(element = 2);;
assert(is_empty q3 = false);;   (*[4, 6, 11, 21, 26, 28, 29, 33, 33, 36, 38]*)
let q3 = add 5 q3;;   (* [4, 5, 6, 11, 21, 26, 28, 29, 33, 33, 36, 38]*)
let q3 = add 13 q3;;   (* [4, 5, 6, 11, 13, 21, 26, 28, 29, 33, 33, 36, 38]*)
let q3 = add 5 q3;;   (* [4, 5, 5, 6, 11, 13, 21, 26, 28, 29, 33, 33, 36, 38]*)
let q3 = add 27 q3;;   (* [4, 5, 5, 6, 11, 13, 21, 26, 27, 28, 29, 33, 33, 36, 38]*)
let q3 = add 15 q3;;   (* [4, 5, 5, 6, 11, 13, 15, 21, 26, 27, 28, 29, 33, 33, 36, 38]*)
let (element, q3) = delete_min q3;;   (* 4 * [5, 5, 6, 11, 13, 15, 21, 26, 27, 28, 29, 33, 33, 36, 38]*)
assert(element = 4);;
let q3 = add 12 q3;;   (* [5, 5, 6, 11, 12, 13, 15, 21, 26, 27, 28, 29, 33, 33, 36, 38]*)
let q3 = add 37 q3;;   (* [5, 5, 6, 11, 12, 13, 15, 21, 26, 27, 28, 29, 33, 33, 36, 37, 38]*)
let (element, q3) = delete_min q3;;   (* 5 * [5, 6, 11, 12, 13, 15, 21, 26, 27, 28, 29, 33, 33, 36, 37, 38]*)
assert(element = 5);;
assert(is_empty q3 = false);;   (*[5, 6, 11, 12, 13, 15, 21, 26, 27, 28, 29, 33, 33, 36, 37, 38]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 18 q4;;   (* [18]*)
let q4 = add 10 q4;;   (* [10, 18]*)
let q4 = add 11 q4;;   (* [10, 11, 18]*)
let q4 = add 17 q4;;   (* [10, 11, 17, 18]*)
let (element, q4) = delete_min q4;;   (* 10 * [11, 17, 18]*)
assert(element = 10);;
let (element, q4) = delete_min q4;;   (* 11 * [17, 18]*)
assert(element = 11);;
let (element, q4) = delete_min q4;;   (* 17 * [18]*)
assert(element = 17);;
let (element, q4) = delete_min q4;;   (* 18 * []*)
assert(element = 18);;
let q4 = add 9 q4;;   (* [9]*)
let q4 = add 26 q4;;   (* [9, 26]*)
let q4 = add 31 q4;;   (* [9, 26, 31]*)
let q4 = add 2 q4;;   (* [2, 9, 26, 31]*)
let q4 = add 9 q4;;   (* [2, 9, 9, 26, 31]*)
assert(is_empty q4 = false);;   (*[2, 9, 9, 26, 31]*)
let (element, q4) = delete_min q4;;   (* 2 * [9, 9, 26, 31]*)
assert(element = 2);;
let (element, q4) = delete_min q4;;   (* 9 * [9, 26, 31]*)
assert(element = 9);;
assert(is_empty q4 = false);;   (*[9, 26, 31]*)
let q4 = add 27 q4;;   (* [9, 26, 27, 31]*)
let q4 = add 38 q4;;   (* [9, 26, 27, 31, 38]*)
let q4 = add 2 q4;;   (* [2, 9, 26, 27, 31, 38]*)
let q4 = add 22 q4;;   (* [2, 9, 22, 26, 27, 31, 38]*)
let q4 = add 22 q4;;   (* [2, 9, 22, 22, 26, 27, 31, 38]*)
let q4 = add 9 q4;;   (* [2, 9, 9, 22, 22, 26, 27, 31, 38]*)
let q4 = add 10 q4;;   (* [2, 9, 9, 10, 22, 22, 26, 27, 31, 38]*)
let (element, q4) = delete_min q4;;   (* 2 * [9, 9, 10, 22, 22, 26, 27, 31, 38]*)
assert(element = 2);;
let q4 = add 20 q4;;   (* [9, 9, 10, 20, 22, 22, 26, 27, 31, 38]*)
let q4 = add 17 q4;;   (* [9, 9, 10, 17, 20, 22, 22, 26, 27, 31, 38]*)
let (element, q4) = delete_min q4;;   (* 9 * [9, 10, 17, 20, 22, 22, 26, 27, 31, 38]*)
assert(element = 9);;
let (element, q4) = delete_min q4;;   (* 9 * [10, 17, 20, 22, 22, 26, 27, 31, 38]*)
assert(element = 9);;
let q4 = add 26 q4;;   (* [10, 17, 20, 22, 22, 26, 26, 27, 31, 38]*)
let (element, q4) = delete_min q4;;   (* 10 * [17, 20, 22, 22, 26, 26, 27, 31, 38]*)
assert(element = 10);;
let q4 = add 14 q4;;   (* [14, 17, 20, 22, 22, 26, 26, 27, 31, 38]*)
let (element, q4) = delete_min q4;;   (* 14 * [17, 20, 22, 22, 26, 26, 27, 31, 38]*)
assert(element = 14);;
let q4 = add 35 q4;;   (* [17, 20, 22, 22, 26, 26, 27, 31, 35, 38]*)
let q4 = add 6 q4;;   (* [6, 17, 20, 22, 22, 26, 26, 27, 31, 35, 38]*)
let q4 = add 20 q4;;   (* [6, 17, 20, 20, 22, 22, 26, 26, 27, 31, 35, 38]*)
let q4 = add 36 q4;;   (* [6, 17, 20, 20, 22, 22, 26, 26, 27, 31, 35, 36, 38]*)
let (element, q4) = delete_min q4;;   (* 6 * [17, 20, 20, 22, 22, 26, 26, 27, 31, 35, 36, 38]*)
assert(element = 6);;

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;   (*[5, 6, 9, 10, 11, 12, 12, 13, 13, 14, 15, 15, 16, 17, 19, 20, 20, 20, 21, 22, 22, 22, 23, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38]*)
let (element, q) = delete_min q;;   (* 5 * [6, 9, 10, 11, 12, 12, 13, 13, 14, 15, 15, 16, 17, 19, 20, 20, 20, 21, 22, 22, 22, 23, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 6 * [9, 10, 11, 12, 12, 13, 13, 14, 15, 15, 16, 17, 19, 20, 20, 20, 21, 22, 22, 22, 23, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 9 * [10, 11, 12, 12, 13, 13, 14, 15, 15, 16, 17, 19, 20, 20, 20, 21, 22, 22, 22, 23, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 10 * [11, 12, 12, 13, 13, 14, 15, 15, 16, 17, 19, 20, 20, 20, 21, 22, 22, 22, 23, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 11 * [12, 12, 13, 13, 14, 15, 15, 16, 17, 19, 20, 20, 20, 21, 22, 22, 22, 23, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 12 * [12, 13, 13, 14, 15, 15, 16, 17, 19, 20, 20, 20, 21, 22, 22, 22, 23, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 12 * [13, 13, 14, 15, 15, 16, 17, 19, 20, 20, 20, 21, 22, 22, 22, 23, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 13 * [13, 14, 15, 15, 16, 17, 19, 20, 20, 20, 21, 22, 22, 22, 23, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 13 * [14, 15, 15, 16, 17, 19, 20, 20, 20, 21, 22, 22, 22, 23, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 14 * [15, 15, 16, 17, 19, 20, 20, 20, 21, 22, 22, 22, 23, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [15, 16, 17, 19, 20, 20, 20, 21, 22, 22, 22, 23, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [16, 17, 19, 20, 20, 20, 21, 22, 22, 22, 23, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [17, 19, 20, 20, 20, 21, 22, 22, 22, 23, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 17 * [19, 20, 20, 20, 21, 22, 22, 22, 23, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 19 * [20, 20, 20, 21, 22, 22, 22, 23, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 21, 22, 22, 22, 23, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 21, 22, 22, 22, 23, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [21, 22, 22, 22, 23, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [22, 22, 22, 23, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [22, 22, 23, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [22, 23, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [23, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 25 * [26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [27, 27, 27, 28, 28, 28, 29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 28, 28, 28, 29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 28, 28, 28, 29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [28, 28, 28, 29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [29, 29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [29, 29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [29, 31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [31, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 31 * [33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 33 * [33, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [37, 37, 38, 38, 38, 38, 38, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [37, 38, 38, 38, 38, 38, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [38, 38, 38, 38, 38, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 38, 38, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 38, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST62----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 22 q1;;   (* [22]*)
let q1 = add 23 q1;;   (* [22, 23]*)
let q1 = add 21 q1;;   (* [21, 22, 23]*)
let q1 = add 35 q1;;   (* [21, 22, 23, 35]*)
let q1 = add 7 q1;;   (* [7, 21, 22, 23, 35]*)
let (element, q1) = delete_min q1;;   (* 7 * [21, 22, 23, 35]*)
assert(element = 7);;
assert(is_empty q1 = false);;   (*[21, 22, 23, 35]*)
assert(is_empty q1 = false);;   (*[21, 22, 23, 35]*)
let q1 = add 24 q1;;   (* [21, 22, 23, 24, 35]*)
let q1 = add 8 q1;;   (* [8, 21, 22, 23, 24, 35]*)
let (element, q1) = delete_min q1;;   (* 8 * [21, 22, 23, 24, 35]*)
assert(element = 8);;
let (element, q1) = delete_min q1;;   (* 21 * [22, 23, 24, 35]*)
assert(element = 21);;
let q1 = add 2 q1;;   (* [2, 22, 23, 24, 35]*)
let (element, q1) = delete_min q1;;   (* 2 * [22, 23, 24, 35]*)
assert(element = 2);;
let q1 = add 11 q1;;   (* [11, 22, 23, 24, 35]*)
let q1 = add 0 q1;;   (* [0, 11, 22, 23, 24, 35]*)
let q1 = add 0 q1;;   (* [0, 0, 11, 22, 23, 24, 35]*)
let q1 = add 25 q1;;   (* [0, 0, 11, 22, 23, 24, 25, 35]*)
let q1 = add 5 q1;;   (* [0, 0, 5, 11, 22, 23, 24, 25, 35]*)
assert(is_empty q1 = false);;   (*[0, 0, 5, 11, 22, 23, 24, 25, 35]*)
let q1 = add 2 q1;;   (* [0, 0, 2, 5, 11, 22, 23, 24, 25, 35]*)
let (element, q1) = delete_min q1;;   (* 0 * [0, 2, 5, 11, 22, 23, 24, 25, 35]*)
assert(element = 0);;
let q1 = add 4 q1;;   (* [0, 2, 4, 5, 11, 22, 23, 24, 25, 35]*)
assert(is_empty q1 = false);;   (*[0, 2, 4, 5, 11, 22, 23, 24, 25, 35]*)
let q1 = add 29 q1;;   (* [0, 2, 4, 5, 11, 22, 23, 24, 25, 29, 35]*)
let (element, q1) = delete_min q1;;   (* 0 * [2, 4, 5, 11, 22, 23, 24, 25, 29, 35]*)
assert(element = 0);;
let (element, q1) = delete_min q1;;   (* 2 * [4, 5, 11, 22, 23, 24, 25, 29, 35]*)
assert(element = 2);;
let (element, q1) = delete_min q1;;   (* 4 * [5, 11, 22, 23, 24, 25, 29, 35]*)
assert(element = 4);;
let q1 = add 16 q1;;   (* [5, 11, 16, 22, 23, 24, 25, 29, 35]*)
let (element, q1) = delete_min q1;;   (* 5 * [11, 16, 22, 23, 24, 25, 29, 35]*)
assert(element = 5);;
assert(is_empty q1 = false);;   (*[11, 16, 22, 23, 24, 25, 29, 35]*)
let q1 = add 3 q1;;   (* [3, 11, 16, 22, 23, 24, 25, 29, 35]*)
let (element, q1) = delete_min q1;;   (* 3 * [11, 16, 22, 23, 24, 25, 29, 35]*)
assert(element = 3);;
let q1 = add 10 q1;;   (* [10, 11, 16, 22, 23, 24, 25, 29, 35]*)
let q1 = add 39 q1;;   (* [10, 11, 16, 22, 23, 24, 25, 29, 35, 39]*)
let q1 = add 38 q1;;   (* [10, 11, 16, 22, 23, 24, 25, 29, 35, 38, 39]*)
let (element, q1) = delete_min q1;;   (* 10 * [11, 16, 22, 23, 24, 25, 29, 35, 38, 39]*)
assert(element = 10);;
let q1 = add 13 q1;;   (* [11, 13, 16, 22, 23, 24, 25, 29, 35, 38, 39]*)
let q1 = add 20 q1;;   (* [11, 13, 16, 20, 22, 23, 24, 25, 29, 35, 38, 39]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 6 q2;;   (* [6]*)
let (element, q2) = delete_min q2;;   (* 6 * []*)
assert(element = 6);;
let q2 = add 17 q2;;   (* [17]*)
let (element, q2) = delete_min q2;;   (* 17 * []*)
assert(element = 17);;
let q2 = add 12 q2;;   (* [12]*)
let q2 = add 5 q2;;   (* [5, 12]*)
let q2 = add 18 q2;;   (* [5, 12, 18]*)
let q2 = add 3 q2;;   (* [3, 5, 12, 18]*)
let q2 = add 9 q2;;   (* [3, 5, 9, 12, 18]*)
let (element, q2) = delete_min q2;;   (* 3 * [5, 9, 12, 18]*)
assert(element = 3);;
let (element, q2) = delete_min q2;;   (* 5 * [9, 12, 18]*)
assert(element = 5);;
let (element, q2) = delete_min q2;;   (* 9 * [12, 18]*)
assert(element = 9);;
let (element, q2) = delete_min q2;;   (* 12 * [18]*)
assert(element = 12);;
assert(is_empty q2 = false);;   (*[18]*)
let (element, q2) = delete_min q2;;   (* 18 * []*)
assert(element = 18);;
let q2 = add 27 q2;;   (* [27]*)
let q2 = add 18 q2;;   (* [18, 27]*)
let (element, q2) = delete_min q2;;   (* 18 * [27]*)
assert(element = 18);;
let q2 = add 22 q2;;   (* [22, 27]*)
let q2 = add 26 q2;;   (* [22, 26, 27]*)
let (element, q2) = delete_min q2;;   (* 22 * [26, 27]*)
assert(element = 22);;
assert(is_empty q2 = false);;   (*[26, 27]*)
let q2 = add 30 q2;;   (* [26, 27, 30]*)
assert(is_empty q2 = false);;   (*[26, 27, 30]*)
let q2 = add 34 q2;;   (* [26, 27, 30, 34]*)
let q2 = add 37 q2;;   (* [26, 27, 30, 34, 37]*)
let (element, q2) = delete_min q2;;   (* 26 * [27, 30, 34, 37]*)
assert(element = 26);;
let q2 = add 2 q2;;   (* [2, 27, 30, 34, 37]*)
let q2 = add 34 q2;;   (* [2, 27, 30, 34, 34, 37]*)
let q2 = add 5 q2;;   (* [2, 5, 27, 30, 34, 34, 37]*)
let q2 = add 23 q2;;   (* [2, 5, 23, 27, 30, 34, 34, 37]*)
assert(is_empty q2 = false);;   (*[2, 5, 23, 27, 30, 34, 34, 37]*)
let q2 = add 38 q2;;   (* [2, 5, 23, 27, 30, 34, 34, 37, 38]*)
let (element, q2) = delete_min q2;;   (* 2 * [5, 23, 27, 30, 34, 34, 37, 38]*)
assert(element = 2);;
assert(is_empty q2 = false);;   (*[5, 23, 27, 30, 34, 34, 37, 38]*)
let q2 = add 4 q2;;   (* [4, 5, 23, 27, 30, 34, 34, 37, 38]*)
let q2 = add 13 q2;;   (* [4, 5, 13, 23, 27, 30, 34, 34, 37, 38]*)
let (element, q2) = delete_min q2;;   (* 4 * [5, 13, 23, 27, 30, 34, 34, 37, 38]*)
assert(element = 4);;
let q2 = add 29 q2;;   (* [5, 13, 23, 27, 29, 30, 34, 34, 37, 38]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 0 q3;;   (* [0]*)
let (element, q3) = delete_min q3;;   (* 0 * []*)
assert(element = 0);;
let q3 = add 35 q3;;   (* [35]*)
let q3 = add 15 q3;;   (* [15, 35]*)
assert(is_empty q3 = false);;   (*[15, 35]*)
let q3 = add 25 q3;;   (* [15, 25, 35]*)
let q3 = add 27 q3;;   (* [15, 25, 27, 35]*)
let q3 = add 27 q3;;   (* [15, 25, 27, 27, 35]*)
let q3 = add 29 q3;;   (* [15, 25, 27, 27, 29, 35]*)
let (element, q3) = delete_min q3;;   (* 15 * [25, 27, 27, 29, 35]*)
assert(element = 15);;
assert(is_empty q3 = false);;   (*[25, 27, 27, 29, 35]*)
let q3 = add 27 q3;;   (* [25, 27, 27, 27, 29, 35]*)
let q3 = add 32 q3;;   (* [25, 27, 27, 27, 29, 32, 35]*)
let (element, q3) = delete_min q3;;   (* 25 * [27, 27, 27, 29, 32, 35]*)
assert(element = 25);;
let q3 = add 33 q3;;   (* [27, 27, 27, 29, 32, 33, 35]*)
let q3 = add 38 q3;;   (* [27, 27, 27, 29, 32, 33, 35, 38]*)
let (element, q3) = delete_min q3;;   (* 27 * [27, 27, 29, 32, 33, 35, 38]*)
assert(element = 27);;
let q3 = add 20 q3;;   (* [20, 27, 27, 29, 32, 33, 35, 38]*)
let q3 = add 34 q3;;   (* [20, 27, 27, 29, 32, 33, 34, 35, 38]*)
assert(is_empty q3 = false);;   (*[20, 27, 27, 29, 32, 33, 34, 35, 38]*)
let q3 = add 6 q3;;   (* [6, 20, 27, 27, 29, 32, 33, 34, 35, 38]*)
let (element, q3) = delete_min q3;;   (* 6 * [20, 27, 27, 29, 32, 33, 34, 35, 38]*)
assert(element = 6);;
let q3 = add 5 q3;;   (* [5, 20, 27, 27, 29, 32, 33, 34, 35, 38]*)
let q3 = add 12 q3;;   (* [5, 12, 20, 27, 27, 29, 32, 33, 34, 35, 38]*)
let (element, q3) = delete_min q3;;   (* 5 * [12, 20, 27, 27, 29, 32, 33, 34, 35, 38]*)
assert(element = 5);;
assert(is_empty q3 = false);;   (*[12, 20, 27, 27, 29, 32, 33, 34, 35, 38]*)
let (element, q3) = delete_min q3;;   (* 12 * [20, 27, 27, 29, 32, 33, 34, 35, 38]*)
assert(element = 12);;
let (element, q3) = delete_min q3;;   (* 20 * [27, 27, 29, 32, 33, 34, 35, 38]*)
assert(element = 20);;
let q3 = add 39 q3;;   (* [27, 27, 29, 32, 33, 34, 35, 38, 39]*)
let q3 = add 15 q3;;   (* [15, 27, 27, 29, 32, 33, 34, 35, 38, 39]*)
let q3 = add 15 q3;;   (* [15, 15, 27, 27, 29, 32, 33, 34, 35, 38, 39]*)
let q3 = add 39 q3;;   (* [15, 15, 27, 27, 29, 32, 33, 34, 35, 38, 39, 39]*)
let q3 = add 5 q3;;   (* [5, 15, 15, 27, 27, 29, 32, 33, 34, 35, 38, 39, 39]*)
let (element, q3) = delete_min q3;;   (* 5 * [15, 15, 27, 27, 29, 32, 33, 34, 35, 38, 39, 39]*)
assert(element = 5);;
let (element, q3) = delete_min q3;;   (* 15 * [15, 27, 27, 29, 32, 33, 34, 35, 38, 39, 39]*)
assert(element = 15);;
let q3 = add 9 q3;;   (* [9, 15, 27, 27, 29, 32, 33, 34, 35, 38, 39, 39]*)
let q3 = add 14 q3;;   (* [9, 14, 15, 27, 27, 29, 32, 33, 34, 35, 38, 39, 39]*)
let q3 = add 2 q3;;   (* [2, 9, 14, 15, 27, 27, 29, 32, 33, 34, 35, 38, 39, 39]*)
let (element, q3) = delete_min q3;;   (* 2 * [9, 14, 15, 27, 27, 29, 32, 33, 34, 35, 38, 39, 39]*)
assert(element = 2);;

(* -------q4------ *)
let q4 = empty;;
let q4 = add 10 q4;;   (* [10]*)
let q4 = add 37 q4;;   (* [10, 37]*)
let (element, q4) = delete_min q4;;   (* 10 * [37]*)
assert(element = 10);;
let q4 = add 2 q4;;   (* [2, 37]*)
let q4 = add 24 q4;;   (* [2, 24, 37]*)
let (element, q4) = delete_min q4;;   (* 2 * [24, 37]*)
assert(element = 2);;
let q4 = add 20 q4;;   (* [20, 24, 37]*)
let q4 = add 9 q4;;   (* [9, 20, 24, 37]*)
let (element, q4) = delete_min q4;;   (* 9 * [20, 24, 37]*)
assert(element = 9);;
let q4 = add 11 q4;;   (* [11, 20, 24, 37]*)
let q4 = add 30 q4;;   (* [11, 20, 24, 30, 37]*)
let q4 = add 36 q4;;   (* [11, 20, 24, 30, 36, 37]*)
let q4 = add 27 q4;;   (* [11, 20, 24, 27, 30, 36, 37]*)
let q4 = add 6 q4;;   (* [6, 11, 20, 24, 27, 30, 36, 37]*)
assert(is_empty q4 = false);;   (*[6, 11, 20, 24, 27, 30, 36, 37]*)
let q4 = add 19 q4;;   (* [6, 11, 19, 20, 24, 27, 30, 36, 37]*)
assert(is_empty q4 = false);;   (*[6, 11, 19, 20, 24, 27, 30, 36, 37]*)
let q4 = add 26 q4;;   (* [6, 11, 19, 20, 24, 26, 27, 30, 36, 37]*)
let q4 = add 8 q4;;   (* [6, 8, 11, 19, 20, 24, 26, 27, 30, 36, 37]*)
let q4 = add 37 q4;;   (* [6, 8, 11, 19, 20, 24, 26, 27, 30, 36, 37, 37]*)
let q4 = add 38 q4;;   (* [6, 8, 11, 19, 20, 24, 26, 27, 30, 36, 37, 37, 38]*)
let (element, q4) = delete_min q4;;   (* 6 * [8, 11, 19, 20, 24, 26, 27, 30, 36, 37, 37, 38]*)
assert(element = 6);;
let (element, q4) = delete_min q4;;   (* 8 * [11, 19, 20, 24, 26, 27, 30, 36, 37, 37, 38]*)
assert(element = 8);;
let q4 = add 31 q4;;   (* [11, 19, 20, 24, 26, 27, 30, 31, 36, 37, 37, 38]*)
let q4 = add 26 q4;;   (* [11, 19, 20, 24, 26, 26, 27, 30, 31, 36, 37, 37, 38]*)
let q4 = add 15 q4;;   (* [11, 15, 19, 20, 24, 26, 26, 27, 30, 31, 36, 37, 37, 38]*)
let (element, q4) = delete_min q4;;   (* 11 * [15, 19, 20, 24, 26, 26, 27, 30, 31, 36, 37, 37, 38]*)
assert(element = 11);;
let q4 = add 27 q4;;   (* [15, 19, 20, 24, 26, 26, 27, 27, 30, 31, 36, 37, 37, 38]*)
let (element, q4) = delete_min q4;;   (* 15 * [19, 20, 24, 26, 26, 27, 27, 30, 31, 36, 37, 37, 38]*)
assert(element = 15);;
let q4 = add 3 q4;;   (* [3, 19, 20, 24, 26, 26, 27, 27, 30, 31, 36, 37, 37, 38]*)
let q4 = add 28 q4;;   (* [3, 19, 20, 24, 26, 26, 27, 27, 28, 30, 31, 36, 37, 37, 38]*)
let q4 = add 22 q4;;   (* [3, 19, 20, 22, 24, 26, 26, 27, 27, 28, 30, 31, 36, 37, 37, 38]*)
let q4 = add 29 q4;;   (* [3, 19, 20, 22, 24, 26, 26, 27, 27, 28, 29, 30, 31, 36, 37, 37, 38]*)
let (element, q4) = delete_min q4;;   (* 3 * [19, 20, 22, 24, 26, 26, 27, 27, 28, 29, 30, 31, 36, 37, 37, 38]*)
assert(element = 3);;
let q4 = add 34 q4;;   (* [19, 20, 22, 24, 26, 26, 27, 27, 28, 29, 30, 31, 34, 36, 37, 37, 38]*)
let q4 = add 19 q4;;   (* [19, 19, 20, 22, 24, 26, 26, 27, 27, 28, 29, 30, 31, 34, 36, 37, 37, 38]*)
let (element, q4) = delete_min q4;;   (* 19 * [19, 20, 22, 24, 26, 26, 27, 27, 28, 29, 30, 31, 34, 36, 37, 37, 38]*)
assert(element = 19);;
let q4 = add 8 q4;;   (* [8, 19, 20, 22, 24, 26, 26, 27, 27, 28, 29, 30, 31, 34, 36, 37, 37, 38]*)
let q4 = add 1 q4;;   (* [1, 8, 19, 20, 22, 24, 26, 26, 27, 27, 28, 29, 30, 31, 34, 36, 37, 37, 38]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;   (*[1, 5, 8, 9, 11, 13, 13, 14, 15, 16, 19, 20, 20, 22, 22, 23, 23, 24, 24, 25, 26, 26, 27, 27, 27, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39]*)
let (element, q) = delete_min q;;   (* 1 * [5, 8, 9, 11, 13, 13, 14, 15, 16, 19, 20, 20, 22, 22, 23, 23, 24, 24, 25, 26, 26, 27, 27, 27, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 1);;
let (element, q) = delete_min q;;   (* 5 * [8, 9, 11, 13, 13, 14, 15, 16, 19, 20, 20, 22, 22, 23, 23, 24, 24, 25, 26, 26, 27, 27, 27, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 8 * [9, 11, 13, 13, 14, 15, 16, 19, 20, 20, 22, 22, 23, 23, 24, 24, 25, 26, 26, 27, 27, 27, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 9 * [11, 13, 13, 14, 15, 16, 19, 20, 20, 22, 22, 23, 23, 24, 24, 25, 26, 26, 27, 27, 27, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 11 * [13, 13, 14, 15, 16, 19, 20, 20, 22, 22, 23, 23, 24, 24, 25, 26, 26, 27, 27, 27, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 13 * [13, 14, 15, 16, 19, 20, 20, 22, 22, 23, 23, 24, 24, 25, 26, 26, 27, 27, 27, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 13 * [14, 15, 16, 19, 20, 20, 22, 22, 23, 23, 24, 24, 25, 26, 26, 27, 27, 27, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 14 * [15, 16, 19, 20, 20, 22, 22, 23, 23, 24, 24, 25, 26, 26, 27, 27, 27, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [16, 19, 20, 20, 22, 22, 23, 23, 24, 24, 25, 26, 26, 27, 27, 27, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [19, 20, 20, 22, 22, 23, 23, 24, 24, 25, 26, 26, 27, 27, 27, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 19 * [20, 20, 22, 22, 23, 23, 24, 24, 25, 26, 26, 27, 27, 27, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [20, 22, 22, 23, 23, 24, 24, 25, 26, 26, 27, 27, 27, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [22, 22, 23, 23, 24, 24, 25, 26, 26, 27, 27, 27, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 22 * [22, 23, 23, 24, 24, 25, 26, 26, 27, 27, 27, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [23, 23, 24, 24, 25, 26, 26, 27, 27, 27, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [23, 24, 24, 25, 26, 26, 27, 27, 27, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [24, 24, 25, 26, 26, 27, 27, 27, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [24, 25, 26, 26, 27, 27, 27, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [25, 26, 26, 27, 27, 27, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [26, 26, 27, 27, 27, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [26, 27, 27, 27, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [27, 27, 27, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [28, 29, 29, 29, 29, 30, 30, 31, 32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [29, 29, 29, 29, 30, 30, 31, 32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [29, 29, 29, 30, 30, 31, 32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [29, 29, 30, 30, 31, 32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [29, 30, 30, 31, 32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [30, 30, 31, 32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [30, 31, 32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [31, 32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [32, 33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [33, 34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [34, 34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [37, 37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [37, 37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [37, 38, 38, 38, 38, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [38, 38, 38, 38, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 38, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST63----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 16 q1;;   (* [16]*)
let q1 = add 17 q1;;   (* [16, 17]*)
let q1 = add 18 q1;;   (* [16, 17, 18]*)
let q1 = add 15 q1;;   (* [15, 16, 17, 18]*)
let q1 = add 9 q1;;   (* [9, 15, 16, 17, 18]*)
let q1 = add 24 q1;;   (* [9, 15, 16, 17, 18, 24]*)
let (element, q1) = delete_min q1;;   (* 9 * [15, 16, 17, 18, 24]*)
assert(element = 9);;
assert(is_empty q1 = false);;   (*[15, 16, 17, 18, 24]*)
let q1 = add 7 q1;;   (* [7, 15, 16, 17, 18, 24]*)
let (element, q1) = delete_min q1;;   (* 7 * [15, 16, 17, 18, 24]*)
assert(element = 7);;
let (element, q1) = delete_min q1;;   (* 15 * [16, 17, 18, 24]*)
assert(element = 15);;
let (element, q1) = delete_min q1;;   (* 16 * [17, 18, 24]*)
assert(element = 16);;
let (element, q1) = delete_min q1;;   (* 17 * [18, 24]*)
assert(element = 17);;
let q1 = add 14 q1;;   (* [14, 18, 24]*)
let q1 = add 9 q1;;   (* [9, 14, 18, 24]*)
let q1 = add 16 q1;;   (* [9, 14, 16, 18, 24]*)
assert(is_empty q1 = false);;   (*[9, 14, 16, 18, 24]*)
let q1 = add 0 q1;;   (* [0, 9, 14, 16, 18, 24]*)
let q1 = add 30 q1;;   (* [0, 9, 14, 16, 18, 24, 30]*)
let (element, q1) = delete_min q1;;   (* 0 * [9, 14, 16, 18, 24, 30]*)
assert(element = 0);;
let q1 = add 29 q1;;   (* [9, 14, 16, 18, 24, 29, 30]*)
assert(is_empty q1 = false);;   (*[9, 14, 16, 18, 24, 29, 30]*)
let q1 = add 18 q1;;   (* [9, 14, 16, 18, 18, 24, 29, 30]*)
let q1 = add 0 q1;;   (* [0, 9, 14, 16, 18, 18, 24, 29, 30]*)
let q1 = add 27 q1;;   (* [0, 9, 14, 16, 18, 18, 24, 27, 29, 30]*)
assert(is_empty q1 = false);;   (*[0, 9, 14, 16, 18, 18, 24, 27, 29, 30]*)
let (element, q1) = delete_min q1;;   (* 0 * [9, 14, 16, 18, 18, 24, 27, 29, 30]*)
assert(element = 0);;
let q1 = add 15 q1;;   (* [9, 14, 15, 16, 18, 18, 24, 27, 29, 30]*)
let q1 = add 10 q1;;   (* [9, 10, 14, 15, 16, 18, 18, 24, 27, 29, 30]*)
let q1 = add 16 q1;;   (* [9, 10, 14, 15, 16, 16, 18, 18, 24, 27, 29, 30]*)
let q1 = add 39 q1;;   (* [9, 10, 14, 15, 16, 16, 18, 18, 24, 27, 29, 30, 39]*)
assert(is_empty q1 = false);;   (*[9, 10, 14, 15, 16, 16, 18, 18, 24, 27, 29, 30, 39]*)
let (element, q1) = delete_min q1;;   (* 9 * [10, 14, 15, 16, 16, 18, 18, 24, 27, 29, 30, 39]*)
assert(element = 9);;
let q1 = add 39 q1;;   (* [10, 14, 15, 16, 16, 18, 18, 24, 27, 29, 30, 39, 39]*)
let q1 = add 4 q1;;   (* [4, 10, 14, 15, 16, 16, 18, 18, 24, 27, 29, 30, 39, 39]*)
let q1 = add 39 q1;;   (* [4, 10, 14, 15, 16, 16, 18, 18, 24, 27, 29, 30, 39, 39, 39]*)
assert(is_empty q1 = false);;   (*[4, 10, 14, 15, 16, 16, 18, 18, 24, 27, 29, 30, 39, 39, 39]*)
assert(is_empty q1 = false);;   (*[4, 10, 14, 15, 16, 16, 18, 18, 24, 27, 29, 30, 39, 39, 39]*)
let q1 = add 3 q1;;   (* [3, 4, 10, 14, 15, 16, 16, 18, 18, 24, 27, 29, 30, 39, 39, 39]*)
let q1 = add 35 q1;;   (* [3, 4, 10, 14, 15, 16, 16, 18, 18, 24, 27, 29, 30, 35, 39, 39, 39]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 4 q2;;   (* [4]*)
let q2 = add 18 q2;;   (* [4, 18]*)
let q2 = add 31 q2;;   (* [4, 18, 31]*)
let q2 = add 4 q2;;   (* [4, 4, 18, 31]*)
let (element, q2) = delete_min q2;;   (* 4 * [4, 18, 31]*)
assert(element = 4);;
let q2 = add 11 q2;;   (* [4, 11, 18, 31]*)
let q2 = add 13 q2;;   (* [4, 11, 13, 18, 31]*)
let (element, q2) = delete_min q2;;   (* 4 * [11, 13, 18, 31]*)
assert(element = 4);;
let q2 = add 23 q2;;   (* [11, 13, 18, 23, 31]*)
let q2 = add 21 q2;;   (* [11, 13, 18, 21, 23, 31]*)
let q2 = add 38 q2;;   (* [11, 13, 18, 21, 23, 31, 38]*)
assert(is_empty q2 = false);;   (*[11, 13, 18, 21, 23, 31, 38]*)
let q2 = add 30 q2;;   (* [11, 13, 18, 21, 23, 30, 31, 38]*)
let (element, q2) = delete_min q2;;   (* 11 * [13, 18, 21, 23, 30, 31, 38]*)
assert(element = 11);;
let q2 = add 5 q2;;   (* [5, 13, 18, 21, 23, 30, 31, 38]*)
let q2 = add 35 q2;;   (* [5, 13, 18, 21, 23, 30, 31, 35, 38]*)
let q2 = add 25 q2;;   (* [5, 13, 18, 21, 23, 25, 30, 31, 35, 38]*)
let q2 = add 3 q2;;   (* [3, 5, 13, 18, 21, 23, 25, 30, 31, 35, 38]*)
let q2 = add 24 q2;;   (* [3, 5, 13, 18, 21, 23, 24, 25, 30, 31, 35, 38]*)
let q2 = add 18 q2;;   (* [3, 5, 13, 18, 18, 21, 23, 24, 25, 30, 31, 35, 38]*)
let q2 = add 2 q2;;   (* [2, 3, 5, 13, 18, 18, 21, 23, 24, 25, 30, 31, 35, 38]*)
let q2 = add 31 q2;;   (* [2, 3, 5, 13, 18, 18, 21, 23, 24, 25, 30, 31, 31, 35, 38]*)
let (element, q2) = delete_min q2;;   (* 2 * [3, 5, 13, 18, 18, 21, 23, 24, 25, 30, 31, 31, 35, 38]*)
assert(element = 2);;
let q2 = add 9 q2;;   (* [3, 5, 9, 13, 18, 18, 21, 23, 24, 25, 30, 31, 31, 35, 38]*)
let (element, q2) = delete_min q2;;   (* 3 * [5, 9, 13, 18, 18, 21, 23, 24, 25, 30, 31, 31, 35, 38]*)
assert(element = 3);;
let q2 = add 2 q2;;   (* [2, 5, 9, 13, 18, 18, 21, 23, 24, 25, 30, 31, 31, 35, 38]*)
let (element, q2) = delete_min q2;;   (* 2 * [5, 9, 13, 18, 18, 21, 23, 24, 25, 30, 31, 31, 35, 38]*)
assert(element = 2);;
let (element, q2) = delete_min q2;;   (* 5 * [9, 13, 18, 18, 21, 23, 24, 25, 30, 31, 31, 35, 38]*)
assert(element = 5);;
let q2 = add 13 q2;;   (* [9, 13, 13, 18, 18, 21, 23, 24, 25, 30, 31, 31, 35, 38]*)
let q2 = add 36 q2;;   (* [9, 13, 13, 18, 18, 21, 23, 24, 25, 30, 31, 31, 35, 36, 38]*)
let q2 = add 1 q2;;   (* [1, 9, 13, 13, 18, 18, 21, 23, 24, 25, 30, 31, 31, 35, 36, 38]*)
let q2 = add 33 q2;;   (* [1, 9, 13, 13, 18, 18, 21, 23, 24, 25, 30, 31, 31, 33, 35, 36, 38]*)
let (element, q2) = delete_min q2;;   (* 1 * [9, 13, 13, 18, 18, 21, 23, 24, 25, 30, 31, 31, 33, 35, 36, 38]*)
assert(element = 1);;
let (element, q2) = delete_min q2;;   (* 9 * [13, 13, 18, 18, 21, 23, 24, 25, 30, 31, 31, 33, 35, 36, 38]*)
assert(element = 9);;
let q2 = add 37 q2;;   (* [13, 13, 18, 18, 21, 23, 24, 25, 30, 31, 31, 33, 35, 36, 37, 38]*)
let (element, q2) = delete_min q2;;   (* 13 * [13, 18, 18, 21, 23, 24, 25, 30, 31, 31, 33, 35, 36, 37, 38]*)
assert(element = 13);;
let (element, q2) = delete_min q2;;   (* 13 * [18, 18, 21, 23, 24, 25, 30, 31, 31, 33, 35, 36, 37, 38]*)
assert(element = 13);;
let q2 = add 32 q2;;   (* [18, 18, 21, 23, 24, 25, 30, 31, 31, 32, 33, 35, 36, 37, 38]*)
let q2 = add 10 q2;;   (* [10, 18, 18, 21, 23, 24, 25, 30, 31, 31, 32, 33, 35, 36, 37, 38]*)
let (element, q2) = delete_min q2;;   (* 10 * [18, 18, 21, 23, 24, 25, 30, 31, 31, 32, 33, 35, 36, 37, 38]*)
assert(element = 10);;

(* -------q3------ *)
let q3 = empty;;
let q3 = add 34 q3;;   (* [34]*)
let q3 = add 4 q3;;   (* [4, 34]*)
let (element, q3) = delete_min q3;;   (* 4 * [34]*)
assert(element = 4);;
let q3 = add 9 q3;;   (* [9, 34]*)
let q3 = add 11 q3;;   (* [9, 11, 34]*)
let q3 = add 1 q3;;   (* [1, 9, 11, 34]*)
let q3 = add 30 q3;;   (* [1, 9, 11, 30, 34]*)
let q3 = add 28 q3;;   (* [1, 9, 11, 28, 30, 34]*)
let (element, q3) = delete_min q3;;   (* 1 * [9, 11, 28, 30, 34]*)
assert(element = 1);;
assert(is_empty q3 = false);;   (*[9, 11, 28, 30, 34]*)
let (element, q3) = delete_min q3;;   (* 9 * [11, 28, 30, 34]*)
assert(element = 9);;
let q3 = add 17 q3;;   (* [11, 17, 28, 30, 34]*)
let q3 = add 5 q3;;   (* [5, 11, 17, 28, 30, 34]*)
let (element, q3) = delete_min q3;;   (* 5 * [11, 17, 28, 30, 34]*)
assert(element = 5);;
let q3 = add 4 q3;;   (* [4, 11, 17, 28, 30, 34]*)
let (element, q3) = delete_min q3;;   (* 4 * [11, 17, 28, 30, 34]*)
assert(element = 4);;
let q3 = add 18 q3;;   (* [11, 17, 18, 28, 30, 34]*)
let q3 = add 32 q3;;   (* [11, 17, 18, 28, 30, 32, 34]*)
let (element, q3) = delete_min q3;;   (* 11 * [17, 18, 28, 30, 32, 34]*)
assert(element = 11);;
let (element, q3) = delete_min q3;;   (* 17 * [18, 28, 30, 32, 34]*)
assert(element = 17);;
let q3 = add 26 q3;;   (* [18, 26, 28, 30, 32, 34]*)
let q3 = add 34 q3;;   (* [18, 26, 28, 30, 32, 34, 34]*)
assert(is_empty q3 = false);;   (*[18, 26, 28, 30, 32, 34, 34]*)
let q3 = add 32 q3;;   (* [18, 26, 28, 30, 32, 32, 34, 34]*)
let (element, q3) = delete_min q3;;   (* 18 * [26, 28, 30, 32, 32, 34, 34]*)
assert(element = 18);;
let (element, q3) = delete_min q3;;   (* 26 * [28, 30, 32, 32, 34, 34]*)
assert(element = 26);;
let q3 = add 10 q3;;   (* [10, 28, 30, 32, 32, 34, 34]*)
let q3 = add 16 q3;;   (* [10, 16, 28, 30, 32, 32, 34, 34]*)
let q3 = add 31 q3;;   (* [10, 16, 28, 30, 31, 32, 32, 34, 34]*)
let (element, q3) = delete_min q3;;   (* 10 * [16, 28, 30, 31, 32, 32, 34, 34]*)
assert(element = 10);;
let (element, q3) = delete_min q3;;   (* 16 * [28, 30, 31, 32, 32, 34, 34]*)
assert(element = 16);;
let (element, q3) = delete_min q3;;   (* 28 * [30, 31, 32, 32, 34, 34]*)
assert(element = 28);;
let q3 = add 39 q3;;   (* [30, 31, 32, 32, 34, 34, 39]*)
let (element, q3) = delete_min q3;;   (* 30 * [31, 32, 32, 34, 34, 39]*)
assert(element = 30);;
let q3 = add 3 q3;;   (* [3, 31, 32, 32, 34, 34, 39]*)
let (element, q3) = delete_min q3;;   (* 3 * [31, 32, 32, 34, 34, 39]*)
assert(element = 3);;
assert(is_empty q3 = false);;   (*[31, 32, 32, 34, 34, 39]*)
let (element, q3) = delete_min q3;;   (* 31 * [32, 32, 34, 34, 39]*)
assert(element = 31);;
let q3 = add 36 q3;;   (* [32, 32, 34, 34, 36, 39]*)
let q3 = add 4 q3;;   (* [4, 32, 32, 34, 34, 36, 39]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 8 q4;;   (* [8]*)
let q4 = add 39 q4;;   (* [8, 39]*)
let (element, q4) = delete_min q4;;   (* 8 * [39]*)
assert(element = 8);;
let q4 = add 22 q4;;   (* [22, 39]*)
let q4 = add 22 q4;;   (* [22, 22, 39]*)
let (element, q4) = delete_min q4;;   (* 22 * [22, 39]*)
assert(element = 22);;
let q4 = add 35 q4;;   (* [22, 35, 39]*)
let q4 = add 14 q4;;   (* [14, 22, 35, 39]*)
let (element, q4) = delete_min q4;;   (* 14 * [22, 35, 39]*)
assert(element = 14);;
let q4 = add 5 q4;;   (* [5, 22, 35, 39]*)
let (element, q4) = delete_min q4;;   (* 5 * [22, 35, 39]*)
assert(element = 5);;
assert(is_empty q4 = false);;   (*[22, 35, 39]*)
let q4 = add 35 q4;;   (* [22, 35, 35, 39]*)
let q4 = add 26 q4;;   (* [22, 26, 35, 35, 39]*)
let (element, q4) = delete_min q4;;   (* 22 * [26, 35, 35, 39]*)
assert(element = 22);;
let (element, q4) = delete_min q4;;   (* 26 * [35, 35, 39]*)
assert(element = 26);;
let q4 = add 13 q4;;   (* [13, 35, 35, 39]*)
let (element, q4) = delete_min q4;;   (* 13 * [35, 35, 39]*)
assert(element = 13);;
let q4 = add 35 q4;;   (* [35, 35, 35, 39]*)
let q4 = add 21 q4;;   (* [21, 35, 35, 35, 39]*)
let q4 = add 23 q4;;   (* [21, 23, 35, 35, 35, 39]*)
let q4 = add 20 q4;;   (* [20, 21, 23, 35, 35, 35, 39]*)
assert(is_empty q4 = false);;   (*[20, 21, 23, 35, 35, 35, 39]*)
let q4 = add 31 q4;;   (* [20, 21, 23, 31, 35, 35, 35, 39]*)
let (element, q4) = delete_min q4;;   (* 20 * [21, 23, 31, 35, 35, 35, 39]*)
assert(element = 20);;
assert(is_empty q4 = false);;   (*[21, 23, 31, 35, 35, 35, 39]*)
assert(is_empty q4 = false);;   (*[21, 23, 31, 35, 35, 35, 39]*)
let q4 = add 38 q4;;   (* [21, 23, 31, 35, 35, 35, 38, 39]*)
let q4 = add 15 q4;;   (* [15, 21, 23, 31, 35, 35, 35, 38, 39]*)
let q4 = add 2 q4;;   (* [2, 15, 21, 23, 31, 35, 35, 35, 38, 39]*)
let q4 = add 11 q4;;   (* [2, 11, 15, 21, 23, 31, 35, 35, 35, 38, 39]*)
let q4 = add 35 q4;;   (* [2, 11, 15, 21, 23, 31, 35, 35, 35, 35, 38, 39]*)
let q4 = add 32 q4;;   (* [2, 11, 15, 21, 23, 31, 32, 35, 35, 35, 35, 38, 39]*)
let (element, q4) = delete_min q4;;   (* 2 * [11, 15, 21, 23, 31, 32, 35, 35, 35, 35, 38, 39]*)
assert(element = 2);;
assert(is_empty q4 = false);;   (*[11, 15, 21, 23, 31, 32, 35, 35, 35, 35, 38, 39]*)
let q4 = add 30 q4;;   (* [11, 15, 21, 23, 30, 31, 32, 35, 35, 35, 35, 38, 39]*)
let q4 = add 37 q4;;   (* [11, 15, 21, 23, 30, 31, 32, 35, 35, 35, 35, 37, 38, 39]*)
let q4 = add 12 q4;;   (* [11, 12, 15, 21, 23, 30, 31, 32, 35, 35, 35, 35, 37, 38, 39]*)
let q4 = add 33 q4;;   (* [11, 12, 15, 21, 23, 30, 31, 32, 33, 35, 35, 35, 35, 37, 38, 39]*)
let (element, q4) = delete_min q4;;   (* 11 * [12, 15, 21, 23, 30, 31, 32, 33, 35, 35, 35, 35, 37, 38, 39]*)
assert(element = 11);;

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;   (*[3, 4, 4, 10, 12, 14, 15, 15, 16, 16, 18, 18, 18, 18, 21, 21, 23, 23, 24, 24, 25, 27, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39]*)
let (element, q) = delete_min q;;   (* 3 * [4, 4, 10, 12, 14, 15, 15, 16, 16, 18, 18, 18, 18, 21, 21, 23, 23, 24, 24, 25, 27, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 3);;
let (element, q) = delete_min q;;   (* 4 * [4, 10, 12, 14, 15, 15, 16, 16, 18, 18, 18, 18, 21, 21, 23, 23, 24, 24, 25, 27, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 4 * [10, 12, 14, 15, 15, 16, 16, 18, 18, 18, 18, 21, 21, 23, 23, 24, 24, 25, 27, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 10 * [12, 14, 15, 15, 16, 16, 18, 18, 18, 18, 21, 21, 23, 23, 24, 24, 25, 27, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 12 * [14, 15, 15, 16, 16, 18, 18, 18, 18, 21, 21, 23, 23, 24, 24, 25, 27, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 14 * [15, 15, 16, 16, 18, 18, 18, 18, 21, 21, 23, 23, 24, 24, 25, 27, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [15, 16, 16, 18, 18, 18, 18, 21, 21, 23, 23, 24, 24, 25, 27, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [16, 16, 18, 18, 18, 18, 21, 21, 23, 23, 24, 24, 25, 27, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [16, 18, 18, 18, 18, 21, 21, 23, 23, 24, 24, 25, 27, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [18, 18, 18, 18, 21, 21, 23, 23, 24, 24, 25, 27, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 18 * [18, 18, 18, 21, 21, 23, 23, 24, 24, 25, 27, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [18, 18, 21, 21, 23, 23, 24, 24, 25, 27, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [18, 21, 21, 23, 23, 24, 24, 25, 27, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [21, 21, 23, 23, 24, 24, 25, 27, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 21 * [21, 23, 23, 24, 24, 25, 27, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [23, 23, 24, 24, 25, 27, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 23 * [23, 24, 24, 25, 27, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [24, 24, 25, 27, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [24, 25, 27, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [25, 27, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [27, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 27 * [29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 29 * [30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 31, 32, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 31, 32, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [31, 32, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 33, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [33, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [37, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [38, 38, 39, 39, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38, 39, 39, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39, 39, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39, 39, 39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39, 39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST64----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 29 q1;;   (* [29]*)
let (element, q1) = delete_min q1;;   (* 29 * []*)
assert(element = 29);;
let q1 = add 5 q1;;   (* [5]*)
let q1 = add 39 q1;;   (* [5, 39]*)
let q1 = add 18 q1;;   (* [5, 18, 39]*)
let q1 = add 5 q1;;   (* [5, 5, 18, 39]*)
let (element, q1) = delete_min q1;;   (* 5 * [5, 18, 39]*)
assert(element = 5);;
let q1 = add 15 q1;;   (* [5, 15, 18, 39]*)
let q1 = add 14 q1;;   (* [5, 14, 15, 18, 39]*)
let q1 = add 24 q1;;   (* [5, 14, 15, 18, 24, 39]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 13 q2;;   (* [13]*)
let q2 = add 18 q2;;   (* [13, 18]*)
let q2 = add 16 q2;;   (* [13, 16, 18]*)
let (element, q2) = delete_min q2;;   (* 13 * [16, 18]*)
assert(element = 13);;
let (element, q2) = delete_min q2;;   (* 16 * [18]*)
assert(element = 16);;
let (element, q2) = delete_min q2;;   (* 18 * []*)
assert(element = 18);;
let q2 = add 21 q2;;   (* [21]*)
let q2 = add 38 q2;;   (* [21, 38]*)
let q2 = add 9 q2;;   (* [9, 21, 38]*)
let q2 = add 30 q2;;   (* [9, 21, 30, 38]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 27 q3;;   (* [27]*)
let (element, q3) = delete_min q3;;   (* 27 * []*)
assert(element = 27);;
let q3 = add 12 q3;;   (* [12]*)
let (element, q3) = delete_min q3;;   (* 12 * []*)
assert(element = 12);;
let q3 = add 14 q3;;   (* [14]*)
assert(is_empty q3 = false);;   (*[14]*)
let (element, q3) = delete_min q3;;   (* 14 * []*)
assert(element = 14);;
let q3 = add 16 q3;;   (* [16]*)
let (element, q3) = delete_min q3;;   (* 16 * []*)
assert(element = 16);;
let q3 = add 39 q3;;   (* [39]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 16 q4;;   (* [16]*)
let q4 = add 22 q4;;   (* [16, 22]*)
let q4 = add 8 q4;;   (* [8, 16, 22]*)
let q4 = add 27 q4;;   (* [8, 16, 22, 27]*)
let q4 = add 31 q4;;   (* [8, 16, 22, 27, 31]*)
let (element, q4) = delete_min q4;;   (* 8 * [16, 22, 27, 31]*)
assert(element = 8);;
let q4 = add 28 q4;;   (* [16, 22, 27, 28, 31]*)
let q4 = add 31 q4;;   (* [16, 22, 27, 28, 31, 31]*)
let q4 = add 20 q4;;   (* [16, 20, 22, 27, 28, 31, 31]*)
let q4 = add 27 q4;;   (* [16, 20, 22, 27, 27, 28, 31, 31]*)

(* -------q5------ *)
let q5 = empty;;
let q5 = add 4 q5;;   (* [4]*)
let q5 = add 28 q5;;   (* [4, 28]*)
let q5 = add 6 q5;;   (* [4, 6, 28]*)
assert(is_empty q5 = false);;   (*[4, 6, 28]*)
let (element, q5) = delete_min q5;;   (* 4 * [6, 28]*)
assert(element = 4);;
let q5 = add 36 q5;;   (* [6, 28, 36]*)
let q5 = add 18 q5;;   (* [6, 18, 28, 36]*)
assert(is_empty q5 = false);;   (*[6, 18, 28, 36]*)
let (element, q5) = delete_min q5;;   (* 6 * [18, 28, 36]*)
assert(element = 6);;
let q5 = add 29 q5;;   (* [18, 28, 29, 36]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[5, 9, 14, 15, 16, 18, 18, 20, 21, 22, 24, 27, 27, 28, 28, 29, 30, 31, 31, 36, 38, 39]*)
let (element, q) = delete_min q;;   (* 5 * [9, 14, 15, 16, 18, 18, 20, 21, 22, 24, 27, 27, 28, 28, 29, 30, 31, 31, 36, 38, 39, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 9 * [14, 15, 16, 18, 18, 20, 21, 22, 24, 27, 27, 28, 28, 29, 30, 31, 31, 36, 38, 39, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 14 * [15, 16, 18, 18, 20, 21, 22, 24, 27, 27, 28, 28, 29, 30, 31, 31, 36, 38, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [16, 18, 18, 20, 21, 22, 24, 27, 27, 28, 28, 29, 30, 31, 31, 36, 38, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [18, 18, 20, 21, 22, 24, 27, 27, 28, 28, 29, 30, 31, 31, 36, 38, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 18 * [18, 20, 21, 22, 24, 27, 27, 28, 28, 29, 30, 31, 31, 36, 38, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [20, 21, 22, 24, 27, 27, 28, 28, 29, 30, 31, 31, 36, 38, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 20 * [21, 22, 24, 27, 27, 28, 28, 29, 30, 31, 31, 36, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [22, 24, 27, 27, 28, 28, 29, 30, 31, 31, 36, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [24, 27, 27, 28, 28, 29, 30, 31, 31, 36, 38, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 24 * [27, 27, 28, 28, 29, 30, 31, 31, 36, 38, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 27 * [27, 28, 28, 29, 30, 31, 31, 36, 38, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [28, 28, 29, 30, 31, 31, 36, 38, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [28, 29, 30, 31, 31, 36, 38, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [29, 30, 31, 31, 36, 38, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [30, 31, 31, 36, 38, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 36, 38, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 36, 38, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [36, 38, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 36 * [38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 38 * [39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST65----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 8 q1;;   (* [8]*)
let q1 = add 11 q1;;   (* [8, 11]*)
let (element, q1) = delete_min q1;;   (* 8 * [11]*)
assert(element = 8);;
let q1 = add 0 q1;;   (* [0, 11]*)
let q1 = add 29 q1;;   (* [0, 11, 29]*)
let (element, q1) = delete_min q1;;   (* 0 * [11, 29]*)
assert(element = 0);;
let q1 = add 2 q1;;   (* [2, 11, 29]*)
let q1 = add 0 q1;;   (* [0, 2, 11, 29]*)
let q1 = add 38 q1;;   (* [0, 2, 11, 29, 38]*)
let q1 = add 30 q1;;   (* [0, 2, 11, 29, 30, 38]*)
let q1 = add 11 q1;;   (* [0, 2, 11, 11, 29, 30, 38]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 1 q2;;   (* [1]*)
let q2 = add 39 q2;;   (* [1, 39]*)
let q2 = add 23 q2;;   (* [1, 23, 39]*)
let q2 = add 22 q2;;   (* [1, 22, 23, 39]*)
let (element, q2) = delete_min q2;;   (* 1 * [22, 23, 39]*)
assert(element = 1);;
let q2 = add 5 q2;;   (* [5, 22, 23, 39]*)
let (element, q2) = delete_min q2;;   (* 5 * [22, 23, 39]*)
assert(element = 5);;
let (element, q2) = delete_min q2;;   (* 22 * [23, 39]*)
assert(element = 22);;
let q2 = add 5 q2;;   (* [5, 23, 39]*)
let q2 = add 23 q2;;   (* [5, 23, 23, 39]*)
let q2 = add 36 q2;;   (* [5, 23, 23, 36, 39]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 30 q3;;   (* [30]*)
let q3 = add 28 q3;;   (* [28, 30]*)
let q3 = add 26 q3;;   (* [26, 28, 30]*)
let q3 = add 30 q3;;   (* [26, 28, 30, 30]*)
let q3 = add 29 q3;;   (* [26, 28, 29, 30, 30]*)
let (element, q3) = delete_min q3;;   (* 26 * [28, 29, 30, 30]*)
assert(element = 26);;
let q3 = add 36 q3;;   (* [28, 29, 30, 30, 36]*)
let (element, q3) = delete_min q3;;   (* 28 * [29, 30, 30, 36]*)
assert(element = 28);;
let q3 = add 11 q3;;   (* [11, 29, 30, 30, 36]*)
let (element, q3) = delete_min q3;;   (* 11 * [29, 30, 30, 36]*)
assert(element = 11);;
let (element, q3) = delete_min q3;;   (* 29 * [30, 30, 36]*)
assert(element = 29);;

(* -------q4------ *)
let q4 = empty;;
let q4 = add 36 q4;;   (* [36]*)
let q4 = add 19 q4;;   (* [19, 36]*)
let (element, q4) = delete_min q4;;   (* 19 * [36]*)
assert(element = 19);;
let q4 = add 27 q4;;   (* [27, 36]*)
let q4 = add 15 q4;;   (* [15, 27, 36]*)
let (element, q4) = delete_min q4;;   (* 15 * [27, 36]*)
assert(element = 15);;
let q4 = add 23 q4;;   (* [23, 27, 36]*)
let q4 = add 15 q4;;   (* [15, 23, 27, 36]*)
let q4 = add 28 q4;;   (* [15, 23, 27, 28, 36]*)
let q4 = add 39 q4;;   (* [15, 23, 27, 28, 36, 39]*)
let (element, q4) = delete_min q4;;   (* 15 * [23, 27, 28, 36, 39]*)
assert(element = 15);;

(* -------q5------ *)
let q5 = empty;;
let q5 = add 5 q5;;   (* [5]*)
let (element, q5) = delete_min q5;;   (* 5 * []*)
assert(element = 5);;
let q5 = add 11 q5;;   (* [11]*)
let q5 = add 28 q5;;   (* [11, 28]*)
let q5 = add 7 q5;;   (* [7, 11, 28]*)
let q5 = add 39 q5;;   (* [7, 11, 28, 39]*)
let q5 = add 34 q5;;   (* [7, 11, 28, 34, 39]*)
let q5 = add 31 q5;;   (* [7, 11, 28, 31, 34, 39]*)
let (element, q5) = delete_min q5;;   (* 7 * [11, 28, 31, 34, 39]*)
assert(element = 7);;
let q5 = add 20 q5;;   (* [11, 20, 28, 31, 34, 39]*)
let (element, q5) = delete_min q5;;   (* 11 * [20, 28, 31, 34, 39]*)
assert(element = 11);;

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[0, 2, 5, 11, 11, 20, 23, 23, 23, 27, 28, 28, 29, 30, 30, 30, 31, 34, 36, 36, 36, 38, 39, 39]*)
let (element, q) = delete_min q;;   (* 0 * [2, 5, 11, 11, 20, 23, 23, 23, 27, 28, 28, 29, 30, 30, 30, 31, 34, 36, 36, 36, 38, 39, 39, 39]*)
assert(element = 0);;
let (element, q) = delete_min q;;   (* 2 * [5, 11, 11, 20, 23, 23, 23, 27, 28, 28, 29, 30, 30, 30, 31, 34, 36, 36, 36, 38, 39, 39, 39]*)
assert(element = 2);;
let (element, q) = delete_min q;;   (* 5 * [11, 11, 20, 23, 23, 23, 27, 28, 28, 29, 30, 30, 30, 31, 34, 36, 36, 36, 38, 39, 39, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 11 * [11, 20, 23, 23, 23, 27, 28, 28, 29, 30, 30, 30, 31, 34, 36, 36, 36, 38, 39, 39, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 11 * [20, 23, 23, 23, 27, 28, 28, 29, 30, 30, 30, 31, 34, 36, 36, 36, 38, 39, 39, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 20 * [23, 23, 23, 27, 28, 28, 29, 30, 30, 30, 31, 34, 36, 36, 36, 38, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 23 * [23, 23, 27, 28, 28, 29, 30, 30, 30, 31, 34, 36, 36, 36, 38, 39, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [23, 27, 28, 28, 29, 30, 30, 30, 31, 34, 36, 36, 36, 38, 39, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [27, 28, 28, 29, 30, 30, 30, 31, 34, 36, 36, 36, 38, 39, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 27 * [28, 28, 29, 30, 30, 30, 31, 34, 36, 36, 36, 38, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [28, 29, 30, 30, 30, 31, 34, 36, 36, 36, 38, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [29, 30, 30, 30, 31, 34, 36, 36, 36, 38, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [30, 30, 30, 31, 34, 36, 36, 36, 38, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [30, 30, 31, 34, 36, 36, 36, 38, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [30, 31, 34, 36, 36, 36, 38, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [31, 34, 36, 36, 36, 38, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [34, 36, 36, 36, 38, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 34 * [36, 36, 36, 38, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 38, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 38, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [38, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 38 * [39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST66----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 8 q1;;   (* [8]*)
let q1 = add 11 q1;;   (* [8, 11]*)
let q1 = add 19 q1;;   (* [8, 11, 19]*)
let q1 = add 36 q1;;   (* [8, 11, 19, 36]*)
let (element, q1) = delete_min q1;;   (* 8 * [11, 19, 36]*)
assert(element = 8);;
let q1 = add 19 q1;;   (* [11, 19, 19, 36]*)
let q1 = add 28 q1;;   (* [11, 19, 19, 28, 36]*)
let (element, q1) = delete_min q1;;   (* 11 * [19, 19, 28, 36]*)
assert(element = 11);;
let q1 = add 29 q1;;   (* [19, 19, 28, 29, 36]*)
let q1 = add 25 q1;;   (* [19, 19, 25, 28, 29, 36]*)
let q1 = add 6 q1;;   (* [6, 19, 19, 25, 28, 29, 36]*)
assert(is_empty q1 = false);;   (*[6, 19, 19, 25, 28, 29, 36]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 33 q2;;   (* [33]*)
assert(is_empty q2 = false);;   (*[33]*)
let q2 = add 5 q2;;   (* [5, 33]*)
let q2 = add 33 q2;;   (* [5, 33, 33]*)
let q2 = add 18 q2;;   (* [5, 18, 33, 33]*)
let (element, q2) = delete_min q2;;   (* 5 * [18, 33, 33]*)
assert(element = 5);;
let q2 = add 30 q2;;   (* [18, 30, 33, 33]*)
assert(is_empty q2 = false);;   (*[18, 30, 33, 33]*)
assert(is_empty q2 = false);;   (*[18, 30, 33, 33]*)
let (element, q2) = delete_min q2;;   (* 18 * [30, 33, 33]*)
assert(element = 18);;
let q2 = add 23 q2;;   (* [23, 30, 33, 33]*)
let (element, q2) = delete_min q2;;   (* 23 * [30, 33, 33]*)
assert(element = 23);;

(* -------q3------ *)
let q3 = empty;;
let q3 = add 22 q3;;   (* [22]*)
let (element, q3) = delete_min q3;;   (* 22 * []*)
assert(element = 22);;
let q3 = add 22 q3;;   (* [22]*)
let (element, q3) = delete_min q3;;   (* 22 * []*)
assert(element = 22);;
let q3 = add 27 q3;;   (* [27]*)
let q3 = add 10 q3;;   (* [10, 27]*)
let q3 = add 4 q3;;   (* [4, 10, 27]*)
let q3 = add 35 q3;;   (* [4, 10, 27, 35]*)
let (element, q3) = delete_min q3;;   (* 4 * [10, 27, 35]*)
assert(element = 4);;
let q3 = add 21 q3;;   (* [10, 21, 27, 35]*)
let q3 = add 23 q3;;   (* [10, 21, 23, 27, 35]*)
let q3 = add 18 q3;;   (* [10, 18, 21, 23, 27, 35]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 17 q4;;   (* [17]*)
let q4 = add 1 q4;;   (* [1, 17]*)
let q4 = add 24 q4;;   (* [1, 17, 24]*)
let q4 = add 26 q4;;   (* [1, 17, 24, 26]*)
let q4 = add 32 q4;;   (* [1, 17, 24, 26, 32]*)
let q4 = add 34 q4;;   (* [1, 17, 24, 26, 32, 34]*)
let q4 = add 10 q4;;   (* [1, 10, 17, 24, 26, 32, 34]*)
let q4 = add 34 q4;;   (* [1, 10, 17, 24, 26, 32, 34, 34]*)
let (element, q4) = delete_min q4;;   (* 1 * [10, 17, 24, 26, 32, 34, 34]*)
assert(element = 1);;
let q4 = add 22 q4;;   (* [10, 17, 22, 24, 26, 32, 34, 34]*)
let q4 = add 16 q4;;   (* [10, 16, 17, 22, 24, 26, 32, 34, 34]*)
let q4 = add 23 q4;;   (* [10, 16, 17, 22, 23, 24, 26, 32, 34, 34]*)

(* -------q5------ *)
let q5 = empty;;
let q5 = add 8 q5;;   (* [8]*)
let q5 = add 33 q5;;   (* [8, 33]*)
let q5 = add 38 q5;;   (* [8, 33, 38]*)
let (element, q5) = delete_min q5;;   (* 8 * [33, 38]*)
assert(element = 8);;
let (element, q5) = delete_min q5;;   (* 33 * [38]*)
assert(element = 33);;
let q5 = add 7 q5;;   (* [7, 38]*)
let (element, q5) = delete_min q5;;   (* 7 * [38]*)
assert(element = 7);;
let (element, q5) = delete_min q5;;   (* 38 * []*)
assert(element = 38);;
let q5 = add 27 q5;;   (* [27]*)
let q5 = add 38 q5;;   (* [27, 38]*)
let (element, q5) = delete_min q5;;   (* 27 * [38]*)
assert(element = 27);;
let (element, q5) = delete_min q5;;   (* 38 * []*)
assert(element = 38);;

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[6, 10, 10, 16, 17, 18, 19, 19, 21, 22, 23, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 33, 34, 34, 35]*)
let (element, q) = delete_min q;;   (* 6 * [10, 10, 16, 17, 18, 19, 19, 21, 22, 23, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 33, 34, 34, 35, 36]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 10 * [10, 16, 17, 18, 19, 19, 21, 22, 23, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 33, 34, 34, 35, 36]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 10 * [16, 17, 18, 19, 19, 21, 22, 23, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 33, 34, 34, 35, 36]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 16 * [17, 18, 19, 19, 21, 22, 23, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 33, 34, 34, 35, 36]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 17 * [18, 19, 19, 21, 22, 23, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 33, 34, 34, 35, 36]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [19, 19, 21, 22, 23, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 33, 34, 34, 35, 36]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [19, 21, 22, 23, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 33, 34, 34, 35, 36]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [21, 22, 23, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 33, 34, 34, 35, 36]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 21 * [22, 23, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 33, 34, 34, 35, 36]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [23, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 33, 34, 34, 35, 36]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 33, 34, 34, 35, 36]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [24, 25, 26, 27, 28, 29, 30, 32, 33, 33, 34, 34, 35, 36]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [25, 26, 27, 28, 29, 30, 32, 33, 33, 34, 34, 35, 36]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [26, 27, 28, 29, 30, 32, 33, 33, 34, 34, 35, 36]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [27, 28, 29, 30, 32, 33, 33, 34, 34, 35, 36]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [28, 29, 30, 32, 33, 33, 34, 34, 35, 36]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [29, 30, 32, 33, 33, 34, 34, 35, 36]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [30, 32, 33, 33, 34, 34, 35, 36]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [32, 33, 33, 34, 34, 35, 36]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 32 * [33, 33, 34, 34, 35, 36]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [33, 34, 34, 35, 36]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [34, 34, 35, 36]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 36]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 36]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [36]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * []*)
assert(element = 36);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST67----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 7 q1;;   (* [7]*)
let q1 = add 2 q1;;   (* [2, 7]*)
let q1 = add 29 q1;;   (* [2, 7, 29]*)
let q1 = add 7 q1;;   (* [2, 7, 7, 29]*)
let (element, q1) = delete_min q1;;   (* 2 * [7, 7, 29]*)
assert(element = 2);;
let q1 = add 33 q1;;   (* [7, 7, 29, 33]*)
let q1 = add 1 q1;;   (* [1, 7, 7, 29, 33]*)
let q1 = add 24 q1;;   (* [1, 7, 7, 24, 29, 33]*)
let (element, q1) = delete_min q1;;   (* 1 * [7, 7, 24, 29, 33]*)
assert(element = 1);;
let (element, q1) = delete_min q1;;   (* 7 * [7, 24, 29, 33]*)
assert(element = 7);;
let (element, q1) = delete_min q1;;   (* 7 * [24, 29, 33]*)
assert(element = 7);;
let q1 = add 16 q1;;   (* [16, 24, 29, 33]*)
let (element, q1) = delete_min q1;;   (* 16 * [24, 29, 33]*)
assert(element = 16);;

(* -------q2------ *)
let q2 = empty;;
let q2 = add 35 q2;;   (* [35]*)
let q2 = add 34 q2;;   (* [34, 35]*)
assert(is_empty q2 = false);;   (*[34, 35]*)
let q2 = add 2 q2;;   (* [2, 34, 35]*)
let (element, q2) = delete_min q2;;   (* 2 * [34, 35]*)
assert(element = 2);;
let q2 = add 4 q2;;   (* [4, 34, 35]*)
let q2 = add 29 q2;;   (* [4, 29, 34, 35]*)
let (element, q2) = delete_min q2;;   (* 4 * [29, 34, 35]*)
assert(element = 4);;
let (element, q2) = delete_min q2;;   (* 29 * [34, 35]*)
assert(element = 29);;
let (element, q2) = delete_min q2;;   (* 34 * [35]*)
assert(element = 34);;
let q2 = add 11 q2;;   (* [11, 35]*)
let (element, q2) = delete_min q2;;   (* 11 * [35]*)
assert(element = 11);;
let q2 = add 25 q2;;   (* [25, 35]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 37 q3;;   (* [37]*)
let q3 = add 21 q3;;   (* [21, 37]*)
let (element, q3) = delete_min q3;;   (* 21 * [37]*)
assert(element = 21);;
let q3 = add 34 q3;;   (* [34, 37]*)
let q3 = add 36 q3;;   (* [34, 36, 37]*)
let q3 = add 2 q3;;   (* [2, 34, 36, 37]*)
let (element, q3) = delete_min q3;;   (* 2 * [34, 36, 37]*)
assert(element = 2);;
assert(is_empty q3 = false);;   (*[34, 36, 37]*)
let q3 = add 14 q3;;   (* [14, 34, 36, 37]*)
assert(is_empty q3 = false);;   (*[14, 34, 36, 37]*)
let q3 = add 15 q3;;   (* [14, 15, 34, 36, 37]*)
let q3 = add 22 q3;;   (* [14, 15, 22, 34, 36, 37]*)
let (element, q3) = delete_min q3;;   (* 14 * [15, 22, 34, 36, 37]*)
assert(element = 14);;

(* -------q4------ *)
let q4 = empty;;
let q4 = add 32 q4;;   (* [32]*)
let q4 = add 15 q4;;   (* [15, 32]*)
let q4 = add 25 q4;;   (* [15, 25, 32]*)
let q4 = add 36 q4;;   (* [15, 25, 32, 36]*)
let (element, q4) = delete_min q4;;   (* 15 * [25, 32, 36]*)
assert(element = 15);;
let q4 = add 32 q4;;   (* [25, 32, 32, 36]*)
let q4 = add 6 q4;;   (* [6, 25, 32, 32, 36]*)
let (element, q4) = delete_min q4;;   (* 6 * [25, 32, 32, 36]*)
assert(element = 6);;
let (element, q4) = delete_min q4;;   (* 25 * [32, 32, 36]*)
assert(element = 25);;
assert(is_empty q4 = false);;   (*[32, 32, 36]*)
let q4 = add 3 q4;;   (* [3, 32, 32, 36]*)
let q4 = add 2 q4;;   (* [2, 3, 32, 32, 36]*)
let q4 = add 22 q4;;   (* [2, 3, 22, 32, 32, 36]*)

(* -------q5------ *)
let q5 = empty;;
let q5 = add 5 q5;;   (* [5]*)
let q5 = add 1 q5;;   (* [1, 5]*)
let (element, q5) = delete_min q5;;   (* 1 * [5]*)
assert(element = 1);;
let (element, q5) = delete_min q5;;   (* 5 * []*)
assert(element = 5);;
let q5 = add 21 q5;;   (* [21]*)
assert(is_empty q5 = false);;   (*[21]*)
let (element, q5) = delete_min q5;;   (* 21 * []*)
assert(element = 21);;
let q5 = add 24 q5;;   (* [24]*)
let q5 = add 29 q5;;   (* [24, 29]*)
let q5 = add 21 q5;;   (* [21, 24, 29]*)
let (element, q5) = delete_min q5;;   (* 21 * [24, 29]*)
assert(element = 21);;
let (element, q5) = delete_min q5;;   (* 24 * [29]*)
assert(element = 24);;
let q5 = add 39 q5;;   (* [29, 39]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[2, 3, 15, 22, 22, 24, 25, 29, 29, 32, 32, 33, 34, 35, 36, 36, 37]*)
let (element, q) = delete_min q;;   (* 2 * [3, 15, 22, 22, 24, 25, 29, 29, 32, 32, 33, 34, 35, 36, 36, 37, 39]*)
assert(element = 2);;
let (element, q) = delete_min q;;   (* 3 * [15, 22, 22, 24, 25, 29, 29, 32, 32, 33, 34, 35, 36, 36, 37, 39]*)
assert(element = 3);;
let (element, q) = delete_min q;;   (* 15 * [22, 22, 24, 25, 29, 29, 32, 32, 33, 34, 35, 36, 36, 37, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 22 * [22, 24, 25, 29, 29, 32, 32, 33, 34, 35, 36, 36, 37, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [24, 25, 29, 29, 32, 32, 33, 34, 35, 36, 36, 37, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 24 * [25, 29, 29, 32, 32, 33, 34, 35, 36, 36, 37, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [29, 29, 32, 32, 33, 34, 35, 36, 36, 37, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 29 * [29, 32, 32, 33, 34, 35, 36, 36, 37, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [32, 32, 33, 34, 35, 36, 36, 37, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 34, 35, 36, 36, 37, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 34, 35, 36, 36, 37, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [34, 35, 36, 36, 37, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [35, 36, 36, 37, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 37, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST68----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 8 q1;;   (* [8]*)
let q1 = add 22 q1;;   (* [8, 22]*)
let (element, q1) = delete_min q1;;   (* 8 * [22]*)
assert(element = 8);;
let (element, q1) = delete_min q1;;   (* 22 * []*)
assert(element = 22);;
let q1 = add 14 q1;;   (* [14]*)
let q1 = add 7 q1;;   (* [7, 14]*)
assert(is_empty q1 = false);;   (*[7, 14]*)
let q1 = add 36 q1;;   (* [7, 14, 36]*)
let q1 = add 5 q1;;   (* [5, 7, 14, 36]*)
let q1 = add 29 q1;;   (* [5, 7, 14, 29, 36]*)
let q1 = add 39 q1;;   (* [5, 7, 14, 29, 36, 39]*)
let q1 = add 15 q1;;   (* [5, 7, 14, 15, 29, 36, 39]*)
let q1 = add 29 q1;;   (* [5, 7, 14, 15, 29, 29, 36, 39]*)
let (element, q1) = delete_min q1;;   (* 5 * [7, 14, 15, 29, 29, 36, 39]*)
assert(element = 5);;

(* -------q2------ *)
let q2 = empty;;
let q2 = add 4 q2;;   (* [4]*)
assert(is_empty q2 = false);;   (*[4]*)
let (element, q2) = delete_min q2;;   (* 4 * []*)
assert(element = 4);;
let q2 = add 29 q2;;   (* [29]*)
let q2 = add 15 q2;;   (* [15, 29]*)
let q2 = add 25 q2;;   (* [15, 25, 29]*)
let (element, q2) = delete_min q2;;   (* 15 * [25, 29]*)
assert(element = 15);;
let q2 = add 21 q2;;   (* [21, 25, 29]*)
let q2 = add 20 q2;;   (* [20, 21, 25, 29]*)
let q2 = add 14 q2;;   (* [14, 20, 21, 25, 29]*)
let (element, q2) = delete_min q2;;   (* 14 * [20, 21, 25, 29]*)
assert(element = 14);;
let (element, q2) = delete_min q2;;   (* 20 * [21, 25, 29]*)
assert(element = 20);;
let q2 = add 26 q2;;   (* [21, 25, 26, 29]*)
let q2 = add 15 q2;;   (* [15, 21, 25, 26, 29]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 31 q3;;   (* [31]*)
let q3 = add 1 q3;;   (* [1, 31]*)
let q3 = add 24 q3;;   (* [1, 24, 31]*)
let q3 = add 4 q3;;   (* [1, 4, 24, 31]*)
assert(is_empty q3 = false);;   (*[1, 4, 24, 31]*)
let q3 = add 34 q3;;   (* [1, 4, 24, 31, 34]*)
let q3 = add 21 q3;;   (* [1, 4, 21, 24, 31, 34]*)
let (element, q3) = delete_min q3;;   (* 1 * [4, 21, 24, 31, 34]*)
assert(element = 1);;
let (element, q3) = delete_min q3;;   (* 4 * [21, 24, 31, 34]*)
assert(element = 4);;
let q3 = add 23 q3;;   (* [21, 23, 24, 31, 34]*)
let q3 = add 25 q3;;   (* [21, 23, 24, 25, 31, 34]*)
let q3 = add 4 q3;;   (* [4, 21, 23, 24, 25, 31, 34]*)
let q3 = add 23 q3;;   (* [4, 21, 23, 23, 24, 25, 31, 34]*)
let q3 = add 32 q3;;   (* [4, 21, 23, 23, 24, 25, 31, 32, 34]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 6 q4;;   (* [6]*)
let (element, q4) = delete_min q4;;   (* 6 * []*)
assert(element = 6);;
let q4 = add 37 q4;;   (* [37]*)
let (element, q4) = delete_min q4;;   (* 37 * []*)
assert(element = 37);;
let q4 = add 19 q4;;   (* [19]*)
let q4 = add 3 q4;;   (* [3, 19]*)
let q4 = add 32 q4;;   (* [3, 19, 32]*)
let (element, q4) = delete_min q4;;   (* 3 * [19, 32]*)
assert(element = 3);;
let q4 = add 35 q4;;   (* [19, 32, 35]*)
let (element, q4) = delete_min q4;;   (* 19 * [32, 35]*)
assert(element = 19);;
let q4 = add 19 q4;;   (* [19, 32, 35]*)
let q4 = add 20 q4;;   (* [19, 20, 32, 35]*)
let (element, q4) = delete_min q4;;   (* 19 * [20, 32, 35]*)
assert(element = 19);;
let q4 = add 21 q4;;   (* [20, 21, 32, 35]*)

(* -------q5------ *)
let q5 = empty;;
let q5 = add 22 q5;;   (* [22]*)
let q5 = add 30 q5;;   (* [22, 30]*)
let q5 = add 12 q5;;   (* [12, 22, 30]*)
let q5 = add 7 q5;;   (* [7, 12, 22, 30]*)
let q5 = add 0 q5;;   (* [0, 7, 12, 22, 30]*)
assert(is_empty q5 = false);;   (*[0, 7, 12, 22, 30]*)
let (element, q5) = delete_min q5;;   (* 0 * [7, 12, 22, 30]*)
assert(element = 0);;
let q5 = add 38 q5;;   (* [7, 12, 22, 30, 38]*)
let q5 = add 3 q5;;   (* [3, 7, 12, 22, 30, 38]*)
let (element, q5) = delete_min q5;;   (* 3 * [7, 12, 22, 30, 38]*)
assert(element = 3);;
let q5 = add 0 q5;;   (* [0, 7, 12, 22, 30, 38]*)
let q5 = add 26 q5;;   (* [0, 7, 12, 22, 26, 30, 38]*)
assert(is_empty q5 = false);;   (*[0, 7, 12, 22, 26, 30, 38]*)
assert(is_empty q5 = false);;   (*[0, 7, 12, 22, 26, 30, 38]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[0, 4, 7, 7, 12, 14, 15, 15, 20, 21, 21, 21, 22, 23, 23, 24, 25, 25, 26, 26, 29, 29, 29, 30, 31, 32, 32, 34, 35, 36, 38]*)
let (element, q) = delete_min q;;   (* 0 * [4, 7, 7, 12, 14, 15, 15, 20, 21, 21, 21, 22, 23, 23, 24, 25, 25, 26, 26, 29, 29, 29, 30, 31, 32, 32, 34, 35, 36, 38, 39]*)
assert(element = 0);;
let (element, q) = delete_min q;;   (* 4 * [7, 7, 12, 14, 15, 15, 20, 21, 21, 21, 22, 23, 23, 24, 25, 25, 26, 26, 29, 29, 29, 30, 31, 32, 32, 34, 35, 36, 38, 39]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 7 * [7, 12, 14, 15, 15, 20, 21, 21, 21, 22, 23, 23, 24, 25, 25, 26, 26, 29, 29, 29, 30, 31, 32, 32, 34, 35, 36, 38, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 7 * [12, 14, 15, 15, 20, 21, 21, 21, 22, 23, 23, 24, 25, 25, 26, 26, 29, 29, 29, 30, 31, 32, 32, 34, 35, 36, 38, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 12 * [14, 15, 15, 20, 21, 21, 21, 22, 23, 23, 24, 25, 25, 26, 26, 29, 29, 29, 30, 31, 32, 32, 34, 35, 36, 38, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 14 * [15, 15, 20, 21, 21, 21, 22, 23, 23, 24, 25, 25, 26, 26, 29, 29, 29, 30, 31, 32, 32, 34, 35, 36, 38, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [15, 20, 21, 21, 21, 22, 23, 23, 24, 25, 25, 26, 26, 29, 29, 29, 30, 31, 32, 32, 34, 35, 36, 38, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [20, 21, 21, 21, 22, 23, 23, 24, 25, 25, 26, 26, 29, 29, 29, 30, 31, 32, 32, 34, 35, 36, 38, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 20 * [21, 21, 21, 22, 23, 23, 24, 25, 25, 26, 26, 29, 29, 29, 30, 31, 32, 32, 34, 35, 36, 38, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [21, 21, 22, 23, 23, 24, 25, 25, 26, 26, 29, 29, 29, 30, 31, 32, 32, 34, 35, 36, 38, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [21, 22, 23, 23, 24, 25, 25, 26, 26, 29, 29, 29, 30, 31, 32, 32, 34, 35, 36, 38, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [22, 23, 23, 24, 25, 25, 26, 26, 29, 29, 29, 30, 31, 32, 32, 34, 35, 36, 38, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [23, 23, 24, 25, 25, 26, 26, 29, 29, 29, 30, 31, 32, 32, 34, 35, 36, 38, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [23, 24, 25, 25, 26, 26, 29, 29, 29, 30, 31, 32, 32, 34, 35, 36, 38, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [24, 25, 25, 26, 26, 29, 29, 29, 30, 31, 32, 32, 34, 35, 36, 38, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [25, 25, 26, 26, 29, 29, 29, 30, 31, 32, 32, 34, 35, 36, 38, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [25, 26, 26, 29, 29, 29, 30, 31, 32, 32, 34, 35, 36, 38, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [26, 26, 29, 29, 29, 30, 31, 32, 32, 34, 35, 36, 38, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [26, 29, 29, 29, 30, 31, 32, 32, 34, 35, 36, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [29, 29, 29, 30, 31, 32, 32, 34, 35, 36, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 29 * [29, 29, 30, 31, 32, 32, 34, 35, 36, 38, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [29, 30, 31, 32, 32, 34, 35, 36, 38, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [30, 31, 32, 32, 34, 35, 36, 38, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [31, 32, 32, 34, 35, 36, 38, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 34, 35, 36, 38, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 34, 35, 36, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [34, 35, 36, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 34 * [35, 36, 38, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [36, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [38, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 38 * [39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST69----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 14 q1;;   (* [14]*)
let q1 = add 4 q1;;   (* [4, 14]*)
let q1 = add 3 q1;;   (* [3, 4, 14]*)
let q1 = add 4 q1;;   (* [3, 4, 4, 14]*)
let q1 = add 34 q1;;   (* [3, 4, 4, 14, 34]*)
assert(is_empty q1 = false);;   (*[3, 4, 4, 14, 34]*)
let (element, q1) = delete_min q1;;   (* 3 * [4, 4, 14, 34]*)
assert(element = 3);;
assert(is_empty q1 = false);;   (*[4, 4, 14, 34]*)
let q1 = add 4 q1;;   (* [4, 4, 4, 14, 34]*)
let q1 = add 13 q1;;   (* [4, 4, 4, 13, 14, 34]*)
let (element, q1) = delete_min q1;;   (* 4 * [4, 4, 13, 14, 34]*)
assert(element = 4);;
let q1 = add 18 q1;;   (* [4, 4, 13, 14, 18, 34]*)
let q1 = add 22 q1;;   (* [4, 4, 13, 14, 18, 22, 34]*)
let q1 = add 14 q1;;   (* [4, 4, 13, 14, 14, 18, 22, 34]*)
let (element, q1) = delete_min q1;;   (* 4 * [4, 13, 14, 14, 18, 22, 34]*)
assert(element = 4);;

(* -------q2------ *)
let q2 = empty;;
let q2 = add 28 q2;;   (* [28]*)
let (element, q2) = delete_min q2;;   (* 28 * []*)
assert(element = 28);;
let q2 = add 33 q2;;   (* [33]*)
let q2 = add 0 q2;;   (* [0, 33]*)
let q2 = add 4 q2;;   (* [0, 4, 33]*)
let (element, q2) = delete_min q2;;   (* 0 * [4, 33]*)
assert(element = 0);;
let (element, q2) = delete_min q2;;   (* 4 * [33]*)
assert(element = 4);;
let q2 = add 39 q2;;   (* [33, 39]*)
let (element, q2) = delete_min q2;;   (* 33 * [39]*)
assert(element = 33);;
let q2 = add 36 q2;;   (* [36, 39]*)
let q2 = add 18 q2;;   (* [18, 36, 39]*)
let q2 = add 27 q2;;   (* [18, 27, 36, 39]*)
assert(is_empty q2 = false);;   (*[18, 27, 36, 39]*)
let q2 = add 30 q2;;   (* [18, 27, 30, 36, 39]*)
let (element, q2) = delete_min q2;;   (* 18 * [27, 30, 36, 39]*)
assert(element = 18);;

(* -------q3------ *)
let q3 = empty;;
let q3 = add 16 q3;;   (* [16]*)
let (element, q3) = delete_min q3;;   (* 16 * []*)
assert(element = 16);;
let q3 = add 34 q3;;   (* [34]*)
let q3 = add 17 q3;;   (* [17, 34]*)
let (element, q3) = delete_min q3;;   (* 17 * [34]*)
assert(element = 17);;
let q3 = add 3 q3;;   (* [3, 34]*)
let q3 = add 5 q3;;   (* [3, 5, 34]*)
let (element, q3) = delete_min q3;;   (* 3 * [5, 34]*)
assert(element = 3);;
let q3 = add 7 q3;;   (* [5, 7, 34]*)
let q3 = add 10 q3;;   (* [5, 7, 10, 34]*)
let q3 = add 14 q3;;   (* [5, 7, 10, 14, 34]*)
let q3 = add 35 q3;;   (* [5, 7, 10, 14, 34, 35]*)
assert(is_empty q3 = false);;   (*[5, 7, 10, 14, 34, 35]*)
assert(is_empty q3 = false);;   (*[5, 7, 10, 14, 34, 35]*)
let (element, q3) = delete_min q3;;   (* 5 * [7, 10, 14, 34, 35]*)
assert(element = 5);;

(* -------q4------ *)
let q4 = empty;;
let q4 = add 19 q4;;   (* [19]*)
let q4 = add 12 q4;;   (* [12, 19]*)
let q4 = add 1 q4;;   (* [1, 12, 19]*)
let (element, q4) = delete_min q4;;   (* 1 * [12, 19]*)
assert(element = 1);;
let q4 = add 11 q4;;   (* [11, 12, 19]*)
let q4 = add 21 q4;;   (* [11, 12, 19, 21]*)
let q4 = add 37 q4;;   (* [11, 12, 19, 21, 37]*)
let q4 = add 9 q4;;   (* [9, 11, 12, 19, 21, 37]*)
let q4 = add 17 q4;;   (* [9, 11, 12, 17, 19, 21, 37]*)
let q4 = add 26 q4;;   (* [9, 11, 12, 17, 19, 21, 26, 37]*)
assert(is_empty q4 = false);;   (*[9, 11, 12, 17, 19, 21, 26, 37]*)
let (element, q4) = delete_min q4;;   (* 9 * [11, 12, 17, 19, 21, 26, 37]*)
assert(element = 9);;
let q4 = add 39 q4;;   (* [11, 12, 17, 19, 21, 26, 37, 39]*)
let (element, q4) = delete_min q4;;   (* 11 * [12, 17, 19, 21, 26, 37, 39]*)
assert(element = 11);;
let (element, q4) = delete_min q4;;   (* 12 * [17, 19, 21, 26, 37, 39]*)
assert(element = 12);;

(* -------q5------ *)
let q5 = empty;;
let q5 = add 25 q5;;   (* [25]*)
let (element, q5) = delete_min q5;;   (* 25 * []*)
assert(element = 25);;
let q5 = add 1 q5;;   (* [1]*)
let q5 = add 15 q5;;   (* [1, 15]*)
let q5 = add 13 q5;;   (* [1, 13, 15]*)
let (element, q5) = delete_min q5;;   (* 1 * [13, 15]*)
assert(element = 1);;
let q5 = add 9 q5;;   (* [9, 13, 15]*)
let q5 = add 39 q5;;   (* [9, 13, 15, 39]*)
let (element, q5) = delete_min q5;;   (* 9 * [13, 15, 39]*)
assert(element = 9);;
let (element, q5) = delete_min q5;;   (* 13 * [15, 39]*)
assert(element = 13);;
let q5 = add 0 q5;;   (* [0, 15, 39]*)
let q5 = add 35 q5;;   (* [0, 15, 35, 39]*)
let q5 = add 18 q5;;   (* [0, 15, 18, 35, 39]*)
let q5 = add 39 q5;;   (* [0, 15, 18, 35, 39, 39]*)
let q5 = add 12 q5;;   (* [0, 12, 15, 18, 35, 39, 39]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[0, 4, 7, 10, 12, 13, 14, 14, 14, 15, 17, 18, 18, 19, 21, 22, 26, 27, 30, 34, 34, 35, 35, 36, 37, 39, 39, 39]*)
let (element, q) = delete_min q;;   (* 0 * [4, 7, 10, 12, 13, 14, 14, 14, 15, 17, 18, 18, 19, 21, 22, 26, 27, 30, 34, 34, 35, 35, 36, 37, 39, 39, 39, 39]*)
assert(element = 0);;
let (element, q) = delete_min q;;   (* 4 * [7, 10, 12, 13, 14, 14, 14, 15, 17, 18, 18, 19, 21, 22, 26, 27, 30, 34, 34, 35, 35, 36, 37, 39, 39, 39, 39]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 7 * [10, 12, 13, 14, 14, 14, 15, 17, 18, 18, 19, 21, 22, 26, 27, 30, 34, 34, 35, 35, 36, 37, 39, 39, 39, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 10 * [12, 13, 14, 14, 14, 15, 17, 18, 18, 19, 21, 22, 26, 27, 30, 34, 34, 35, 35, 36, 37, 39, 39, 39, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 12 * [13, 14, 14, 14, 15, 17, 18, 18, 19, 21, 22, 26, 27, 30, 34, 34, 35, 35, 36, 37, 39, 39, 39, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 13 * [14, 14, 14, 15, 17, 18, 18, 19, 21, 22, 26, 27, 30, 34, 34, 35, 35, 36, 37, 39, 39, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 14 * [14, 14, 15, 17, 18, 18, 19, 21, 22, 26, 27, 30, 34, 34, 35, 35, 36, 37, 39, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [14, 15, 17, 18, 18, 19, 21, 22, 26, 27, 30, 34, 34, 35, 35, 36, 37, 39, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [15, 17, 18, 18, 19, 21, 22, 26, 27, 30, 34, 34, 35, 35, 36, 37, 39, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [17, 18, 18, 19, 21, 22, 26, 27, 30, 34, 34, 35, 35, 36, 37, 39, 39, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 17 * [18, 18, 19, 21, 22, 26, 27, 30, 34, 34, 35, 35, 36, 37, 39, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [18, 19, 21, 22, 26, 27, 30, 34, 34, 35, 35, 36, 37, 39, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [19, 21, 22, 26, 27, 30, 34, 34, 35, 35, 36, 37, 39, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [21, 22, 26, 27, 30, 34, 34, 35, 35, 36, 37, 39, 39, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 21 * [22, 26, 27, 30, 34, 34, 35, 35, 36, 37, 39, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [26, 27, 30, 34, 34, 35, 35, 36, 37, 39, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 26 * [27, 30, 34, 34, 35, 35, 36, 37, 39, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [30, 34, 34, 35, 35, 36, 37, 39, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 30 * [34, 34, 35, 35, 36, 37, 39, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 35, 36, 37, 39, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 36, 37, 39, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 37, 39, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 37, 39, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [37, 39, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [39, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 39 * [39, 39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST70----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 33 q1;;   (* [33]*)
let (element, q1) = delete_min q1;;   (* 33 * []*)
assert(element = 33);;
let q1 = add 5 q1;;   (* [5]*)
let q1 = add 25 q1;;   (* [5, 25]*)
let q1 = add 8 q1;;   (* [5, 8, 25]*)
let (element, q1) = delete_min q1;;   (* 5 * [8, 25]*)
assert(element = 5);;
let q1 = add 11 q1;;   (* [8, 11, 25]*)
assert(is_empty q1 = false);;   (*[8, 11, 25]*)
let q1 = add 4 q1;;   (* [4, 8, 11, 25]*)
let (element, q1) = delete_min q1;;   (* 4 * [8, 11, 25]*)
assert(element = 4);;
let (element, q1) = delete_min q1;;   (* 8 * [11, 25]*)
assert(element = 8);;
let q1 = add 23 q1;;   (* [11, 23, 25]*)
let q1 = add 9 q1;;   (* [9, 11, 23, 25]*)
assert(is_empty q1 = false);;   (*[9, 11, 23, 25]*)
let q1 = add 11 q1;;   (* [9, 11, 11, 23, 25]*)
let q1 = add 36 q1;;   (* [9, 11, 11, 23, 25, 36]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 23 q2;;   (* [23]*)
let q2 = add 26 q2;;   (* [23, 26]*)
let q2 = add 5 q2;;   (* [5, 23, 26]*)
let q2 = add 25 q2;;   (* [5, 23, 25, 26]*)
let (element, q2) = delete_min q2;;   (* 5 * [23, 25, 26]*)
assert(element = 5);;
let (element, q2) = delete_min q2;;   (* 23 * [25, 26]*)
assert(element = 23);;
let q2 = add 26 q2;;   (* [25, 26, 26]*)
let q2 = add 13 q2;;   (* [13, 25, 26, 26]*)
let q2 = add 8 q2;;   (* [8, 13, 25, 26, 26]*)
let q2 = add 22 q2;;   (* [8, 13, 22, 25, 26, 26]*)
let q2 = add 7 q2;;   (* [7, 8, 13, 22, 25, 26, 26]*)
let q2 = add 29 q2;;   (* [7, 8, 13, 22, 25, 26, 26, 29]*)
let q2 = add 26 q2;;   (* [7, 8, 13, 22, 25, 26, 26, 26, 29]*)
let q2 = add 9 q2;;   (* [7, 8, 9, 13, 22, 25, 26, 26, 26, 29]*)
let (element, q2) = delete_min q2;;   (* 7 * [8, 9, 13, 22, 25, 26, 26, 26, 29]*)
assert(element = 7);;
let q2 = add 39 q2;;   (* [8, 9, 13, 22, 25, 26, 26, 26, 29, 39]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 27 q3;;   (* [27]*)
let (element, q3) = delete_min q3;;   (* 27 * []*)
assert(element = 27);;
let q3 = add 37 q3;;   (* [37]*)
let q3 = add 6 q3;;   (* [6, 37]*)
let q3 = add 19 q3;;   (* [6, 19, 37]*)
assert(is_empty q3 = false);;   (*[6, 19, 37]*)
let q3 = add 9 q3;;   (* [6, 9, 19, 37]*)
let (element, q3) = delete_min q3;;   (* 6 * [9, 19, 37]*)
assert(element = 6);;
let (element, q3) = delete_min q3;;   (* 9 * [19, 37]*)
assert(element = 9);;
assert(is_empty q3 = false);;   (*[19, 37]*)
let q3 = add 37 q3;;   (* [19, 37, 37]*)
let q3 = add 35 q3;;   (* [19, 35, 37, 37]*)
let (element, q3) = delete_min q3;;   (* 19 * [35, 37, 37]*)
assert(element = 19);;
let q3 = add 0 q3;;   (* [0, 35, 37, 37]*)
let q3 = add 15 q3;;   (* [0, 15, 35, 37, 37]*)
let q3 = add 34 q3;;   (* [0, 15, 34, 35, 37, 37]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 11 q4;;   (* [11]*)
let q4 = add 23 q4;;   (* [11, 23]*)
assert(is_empty q4 = false);;   (*[11, 23]*)
let q4 = add 11 q4;;   (* [11, 11, 23]*)
let (element, q4) = delete_min q4;;   (* 11 * [11, 23]*)
assert(element = 11);;
let (element, q4) = delete_min q4;;   (* 11 * [23]*)
assert(element = 11);;
let q4 = add 28 q4;;   (* [23, 28]*)
let (element, q4) = delete_min q4;;   (* 23 * [28]*)
assert(element = 23);;
let q4 = add 27 q4;;   (* [27, 28]*)
let (element, q4) = delete_min q4;;   (* 27 * [28]*)
assert(element = 27);;
let (element, q4) = delete_min q4;;   (* 28 * []*)
assert(element = 28);;
let q4 = add 35 q4;;   (* [35]*)
let (element, q4) = delete_min q4;;   (* 35 * []*)
assert(element = 35);;
let q4 = add 25 q4;;   (* [25]*)
let q4 = add 13 q4;;   (* [13, 25]*)
let (element, q4) = delete_min q4;;   (* 13 * [25]*)
assert(element = 13);;

(* -------q5------ *)
let q5 = empty;;
let q5 = add 23 q5;;   (* [23]*)
assert(is_empty q5 = false);;   (*[23]*)
let (element, q5) = delete_min q5;;   (* 23 * []*)
assert(element = 23);;
let q5 = add 21 q5;;   (* [21]*)
let (element, q5) = delete_min q5;;   (* 21 * []*)
assert(element = 21);;
assert(is_empty q5 = true);;   (*[]*)
let q5 = add 23 q5;;   (* [23]*)
let (element, q5) = delete_min q5;;   (* 23 * []*)
assert(element = 23);;
let q5 = add 35 q5;;   (* [35]*)
let q5 = add 7 q5;;   (* [7, 35]*)
let q5 = add 38 q5;;   (* [7, 35, 38]*)
let (element, q5) = delete_min q5;;   (* 7 * [35, 38]*)
assert(element = 7);;
let q5 = add 33 q5;;   (* [33, 35, 38]*)
let q5 = add 37 q5;;   (* [33, 35, 37, 38]*)
let (element, q5) = delete_min q5;;   (* 33 * [35, 37, 38]*)
assert(element = 33);;
let (element, q5) = delete_min q5;;   (* 35 * [37, 38]*)
assert(element = 35);;

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[0, 8, 9, 9, 11, 11, 13, 15, 22, 23, 25, 25, 25, 26, 26, 26, 29, 34, 35, 36, 37, 37, 37, 38]*)
let (element, q) = delete_min q;;   (* 0 * [8, 9, 9, 11, 11, 13, 15, 22, 23, 25, 25, 25, 26, 26, 26, 29, 34, 35, 36, 37, 37, 37, 38, 39]*)
assert(element = 0);;
let (element, q) = delete_min q;;   (* 8 * [9, 9, 11, 11, 13, 15, 22, 23, 25, 25, 25, 26, 26, 26, 29, 34, 35, 36, 37, 37, 37, 38, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 9 * [9, 11, 11, 13, 15, 22, 23, 25, 25, 25, 26, 26, 26, 29, 34, 35, 36, 37, 37, 37, 38, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 9 * [11, 11, 13, 15, 22, 23, 25, 25, 25, 26, 26, 26, 29, 34, 35, 36, 37, 37, 37, 38, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 11 * [11, 13, 15, 22, 23, 25, 25, 25, 26, 26, 26, 29, 34, 35, 36, 37, 37, 37, 38, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 11 * [13, 15, 22, 23, 25, 25, 25, 26, 26, 26, 29, 34, 35, 36, 37, 37, 37, 38, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 13 * [15, 22, 23, 25, 25, 25, 26, 26, 26, 29, 34, 35, 36, 37, 37, 37, 38, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 15 * [22, 23, 25, 25, 25, 26, 26, 26, 29, 34, 35, 36, 37, 37, 37, 38, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 22 * [23, 25, 25, 25, 26, 26, 26, 29, 34, 35, 36, 37, 37, 37, 38, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [25, 25, 25, 26, 26, 26, 29, 34, 35, 36, 37, 37, 37, 38, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 25 * [25, 25, 26, 26, 26, 29, 34, 35, 36, 37, 37, 37, 38, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [25, 26, 26, 26, 29, 34, 35, 36, 37, 37, 37, 38, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [26, 26, 26, 29, 34, 35, 36, 37, 37, 37, 38, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [26, 26, 29, 34, 35, 36, 37, 37, 37, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [26, 29, 34, 35, 36, 37, 37, 37, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [29, 34, 35, 36, 37, 37, 37, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 29 * [34, 35, 36, 37, 37, 37, 38, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 34 * [35, 36, 37, 37, 37, 38, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [36, 37, 37, 37, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [37, 37, 37, 38, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [37, 37, 38, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [37, 38, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [38, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST71----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 35 q1;;   (* [35]*)
let q1 = add 30 q1;;   (* [30, 35]*)
let q1 = add 20 q1;;   (* [20, 30, 35]*)
let (element, q1) = delete_min q1;;   (* 20 * [30, 35]*)
assert(element = 20);;
let q1 = add 30 q1;;   (* [30, 30, 35]*)
let q1 = add 27 q1;;   (* [27, 30, 30, 35]*)
let (element, q1) = delete_min q1;;   (* 27 * [30, 30, 35]*)
assert(element = 27);;
let q1 = add 13 q1;;   (* [13, 30, 30, 35]*)
let q1 = add 2 q1;;   (* [2, 13, 30, 30, 35]*)
let q1 = add 29 q1;;   (* [2, 13, 29, 30, 30, 35]*)
let (element, q1) = delete_min q1;;   (* 2 * [13, 29, 30, 30, 35]*)
assert(element = 2);;
let q1 = add 4 q1;;   (* [4, 13, 29, 30, 30, 35]*)
let (element, q1) = delete_min q1;;   (* 4 * [13, 29, 30, 30, 35]*)
assert(element = 4);;
let q1 = add 34 q1;;   (* [13, 29, 30, 30, 34, 35]*)
let q1 = add 39 q1;;   (* [13, 29, 30, 30, 34, 35, 39]*)
let (element, q1) = delete_min q1;;   (* 13 * [29, 30, 30, 34, 35, 39]*)
assert(element = 13);;
let q1 = add 29 q1;;   (* [29, 29, 30, 30, 34, 35, 39]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 4 q2;;   (* [4]*)
let q2 = add 11 q2;;   (* [4, 11]*)
let q2 = add 36 q2;;   (* [4, 11, 36]*)
let q2 = add 10 q2;;   (* [4, 10, 11, 36]*)
let (element, q2) = delete_min q2;;   (* 4 * [10, 11, 36]*)
assert(element = 4);;
let q2 = add 37 q2;;   (* [10, 11, 36, 37]*)
let (element, q2) = delete_min q2;;   (* 10 * [11, 36, 37]*)
assert(element = 10);;
let q2 = add 27 q2;;   (* [11, 27, 36, 37]*)
let (element, q2) = delete_min q2;;   (* 11 * [27, 36, 37]*)
assert(element = 11);;
let q2 = add 17 q2;;   (* [17, 27, 36, 37]*)
let q2 = add 31 q2;;   (* [17, 27, 31, 36, 37]*)
let q2 = add 35 q2;;   (* [17, 27, 31, 35, 36, 37]*)
let q2 = add 39 q2;;   (* [17, 27, 31, 35, 36, 37, 39]*)
let q2 = add 20 q2;;   (* [17, 20, 27, 31, 35, 36, 37, 39]*)
let q2 = add 6 q2;;   (* [6, 17, 20, 27, 31, 35, 36, 37, 39]*)
let q2 = add 11 q2;;   (* [6, 11, 17, 20, 27, 31, 35, 36, 37, 39]*)
let q2 = add 14 q2;;   (* [6, 11, 14, 17, 20, 27, 31, 35, 36, 37, 39]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 6 q3;;   (* [6]*)
assert(is_empty q3 = false);;   (*[6]*)
let q3 = add 34 q3;;   (* [6, 34]*)
let (element, q3) = delete_min q3;;   (* 6 * [34]*)
assert(element = 6);;
let (element, q3) = delete_min q3;;   (* 34 * []*)
assert(element = 34);;
let q3 = add 39 q3;;   (* [39]*)
let q3 = add 2 q3;;   (* [2, 39]*)
let (element, q3) = delete_min q3;;   (* 2 * [39]*)
assert(element = 2);;
assert(is_empty q3 = false);;   (*[39]*)
let q3 = add 8 q3;;   (* [8, 39]*)
let q3 = add 13 q3;;   (* [8, 13, 39]*)
let q3 = add 21 q3;;   (* [8, 13, 21, 39]*)
let q3 = add 1 q3;;   (* [1, 8, 13, 21, 39]*)
let q3 = add 38 q3;;   (* [1, 8, 13, 21, 38, 39]*)
let q3 = add 25 q3;;   (* [1, 8, 13, 21, 25, 38, 39]*)
let q3 = add 5 q3;;   (* [1, 5, 8, 13, 21, 25, 38, 39]*)
let q3 = add 13 q3;;   (* [1, 5, 8, 13, 13, 21, 25, 38, 39]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 13 q4;;   (* [13]*)
let q4 = add 22 q4;;   (* [13, 22]*)
assert(is_empty q4 = false);;   (*[13, 22]*)
let q4 = add 26 q4;;   (* [13, 22, 26]*)
let q4 = add 17 q4;;   (* [13, 17, 22, 26]*)
let (element, q4) = delete_min q4;;   (* 13 * [17, 22, 26]*)
assert(element = 13);;
assert(is_empty q4 = false);;   (*[17, 22, 26]*)
let q4 = add 32 q4;;   (* [17, 22, 26, 32]*)
let q4 = add 27 q4;;   (* [17, 22, 26, 27, 32]*)
let (element, q4) = delete_min q4;;   (* 17 * [22, 26, 27, 32]*)
assert(element = 17);;
assert(is_empty q4 = false);;   (*[22, 26, 27, 32]*)
let (element, q4) = delete_min q4;;   (* 22 * [26, 27, 32]*)
assert(element = 22);;
let (element, q4) = delete_min q4;;   (* 26 * [27, 32]*)
assert(element = 26);;
let (element, q4) = delete_min q4;;   (* 27 * [32]*)
assert(element = 27);;
let q4 = add 18 q4;;   (* [18, 32]*)
let q4 = add 21 q4;;   (* [18, 21, 32]*)
let (element, q4) = delete_min q4;;   (* 18 * [21, 32]*)
assert(element = 18);;

(* -------q5------ *)
let q5 = empty;;
assert(is_empty q5 = true);;   (*[]*)
let q5 = add 28 q5;;   (* [28]*)
let q5 = add 31 q5;;   (* [28, 31]*)
let (element, q5) = delete_min q5;;   (* 28 * [31]*)
assert(element = 28);;
let q5 = add 19 q5;;   (* [19, 31]*)
let q5 = add 3 q5;;   (* [3, 19, 31]*)
let (element, q5) = delete_min q5;;   (* 3 * [19, 31]*)
assert(element = 3);;
let q5 = add 10 q5;;   (* [10, 19, 31]*)
let q5 = add 27 q5;;   (* [10, 19, 27, 31]*)
let (element, q5) = delete_min q5;;   (* 10 * [19, 27, 31]*)
assert(element = 10);;
let q5 = add 1 q5;;   (* [1, 19, 27, 31]*)
let (element, q5) = delete_min q5;;   (* 1 * [19, 27, 31]*)
assert(element = 1);;
let q5 = add 10 q5;;   (* [10, 19, 27, 31]*)
let (element, q5) = delete_min q5;;   (* 10 * [19, 27, 31]*)
assert(element = 10);;
let q5 = add 20 q5;;   (* [19, 20, 27, 31]*)
let q5 = add 37 q5;;   (* [19, 20, 27, 31, 37]*)
let q5 = add 32 q5;;   (* [19, 20, 27, 31, 32, 37]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[1, 5, 6, 8, 11, 13, 13, 14, 17, 19, 20, 20, 21, 21, 25, 27, 27, 29, 29, 30, 30, 31, 31, 32, 32, 34, 35, 35, 36, 37, 37, 38, 39, 39]*)
let (element, q) = delete_min q;;   (* 1 * [5, 6, 8, 11, 13, 13, 14, 17, 19, 20, 20, 21, 21, 25, 27, 27, 29, 29, 30, 30, 31, 31, 32, 32, 34, 35, 35, 36, 37, 37, 38, 39, 39, 39]*)
assert(element = 1);;
let (element, q) = delete_min q;;   (* 5 * [6, 8, 11, 13, 13, 14, 17, 19, 20, 20, 21, 21, 25, 27, 27, 29, 29, 30, 30, 31, 31, 32, 32, 34, 35, 35, 36, 37, 37, 38, 39, 39, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 6 * [8, 11, 13, 13, 14, 17, 19, 20, 20, 21, 21, 25, 27, 27, 29, 29, 30, 30, 31, 31, 32, 32, 34, 35, 35, 36, 37, 37, 38, 39, 39, 39]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 8 * [11, 13, 13, 14, 17, 19, 20, 20, 21, 21, 25, 27, 27, 29, 29, 30, 30, 31, 31, 32, 32, 34, 35, 35, 36, 37, 37, 38, 39, 39, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 11 * [13, 13, 14, 17, 19, 20, 20, 21, 21, 25, 27, 27, 29, 29, 30, 30, 31, 31, 32, 32, 34, 35, 35, 36, 37, 37, 38, 39, 39, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 13 * [13, 14, 17, 19, 20, 20, 21, 21, 25, 27, 27, 29, 29, 30, 30, 31, 31, 32, 32, 34, 35, 35, 36, 37, 37, 38, 39, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 13 * [14, 17, 19, 20, 20, 21, 21, 25, 27, 27, 29, 29, 30, 30, 31, 31, 32, 32, 34, 35, 35, 36, 37, 37, 38, 39, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 14 * [17, 19, 20, 20, 21, 21, 25, 27, 27, 29, 29, 30, 30, 31, 31, 32, 32, 34, 35, 35, 36, 37, 37, 38, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 17 * [19, 20, 20, 21, 21, 25, 27, 27, 29, 29, 30, 30, 31, 31, 32, 32, 34, 35, 35, 36, 37, 37, 38, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 19 * [20, 20, 21, 21, 25, 27, 27, 29, 29, 30, 30, 31, 31, 32, 32, 34, 35, 35, 36, 37, 37, 38, 39, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [20, 21, 21, 25, 27, 27, 29, 29, 30, 30, 31, 31, 32, 32, 34, 35, 35, 36, 37, 37, 38, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [21, 21, 25, 27, 27, 29, 29, 30, 30, 31, 31, 32, 32, 34, 35, 35, 36, 37, 37, 38, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [21, 25, 27, 27, 29, 29, 30, 30, 31, 31, 32, 32, 34, 35, 35, 36, 37, 37, 38, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [25, 27, 27, 29, 29, 30, 30, 31, 31, 32, 32, 34, 35, 35, 36, 37, 37, 38, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 25 * [27, 27, 29, 29, 30, 30, 31, 31, 32, 32, 34, 35, 35, 36, 37, 37, 38, 39, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 27 * [27, 29, 29, 30, 30, 31, 31, 32, 32, 34, 35, 35, 36, 37, 37, 38, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [29, 29, 30, 30, 31, 31, 32, 32, 34, 35, 35, 36, 37, 37, 38, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 29 * [29, 30, 30, 31, 31, 32, 32, 34, 35, 35, 36, 37, 37, 38, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [30, 30, 31, 31, 32, 32, 34, 35, 35, 36, 37, 37, 38, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [30, 31, 31, 32, 32, 34, 35, 35, 36, 37, 37, 38, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 32, 32, 34, 35, 35, 36, 37, 37, 38, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 32, 32, 34, 35, 35, 36, 37, 37, 38, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 34, 35, 35, 36, 37, 37, 38, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 34, 35, 35, 36, 37, 37, 38, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [34, 35, 35, 36, 37, 37, 38, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 36, 37, 37, 38, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 37, 37, 38, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 37, 37, 38, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [37, 37, 38, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [37, 38, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [38, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST72----*)

(* -------q1------ *)
let q1 = empty;;
assert(is_empty q1 = true);;   (*[]*)
let q1 = add 13 q1;;   (* [13]*)
let q1 = add 37 q1;;   (* [13, 37]*)
assert(is_empty q1 = false);;   (*[13, 37]*)
let q1 = add 16 q1;;   (* [13, 16, 37]*)
assert(is_empty q1 = false);;   (*[13, 16, 37]*)
let (element, q1) = delete_min q1;;   (* 13 * [16, 37]*)
assert(element = 13);;
let q1 = add 13 q1;;   (* [13, 16, 37]*)
let q1 = add 38 q1;;   (* [13, 16, 37, 38]*)
let q1 = add 9 q1;;   (* [9, 13, 16, 37, 38]*)
let (element, q1) = delete_min q1;;   (* 9 * [13, 16, 37, 38]*)
assert(element = 9);;
let q1 = add 3 q1;;   (* [3, 13, 16, 37, 38]*)
let q1 = add 37 q1;;   (* [3, 13, 16, 37, 37, 38]*)
let (element, q1) = delete_min q1;;   (* 3 * [13, 16, 37, 37, 38]*)
assert(element = 3);;
let q1 = add 14 q1;;   (* [13, 14, 16, 37, 37, 38]*)
let (element, q1) = delete_min q1;;   (* 13 * [14, 16, 37, 37, 38]*)
assert(element = 13);;
assert(is_empty q1 = false);;   (*[14, 16, 37, 37, 38]*)
let (element, q1) = delete_min q1;;   (* 14 * [16, 37, 37, 38]*)
assert(element = 14);;

(* -------q2------ *)
let q2 = empty;;
let q2 = add 2 q2;;   (* [2]*)
let q2 = add 1 q2;;   (* [1, 2]*)
let q2 = add 7 q2;;   (* [1, 2, 7]*)
let q2 = add 33 q2;;   (* [1, 2, 7, 33]*)
let q2 = add 39 q2;;   (* [1, 2, 7, 33, 39]*)
let (element, q2) = delete_min q2;;   (* 1 * [2, 7, 33, 39]*)
assert(element = 1);;
let (element, q2) = delete_min q2;;   (* 2 * [7, 33, 39]*)
assert(element = 2);;
let (element, q2) = delete_min q2;;   (* 7 * [33, 39]*)
assert(element = 7);;
assert(is_empty q2 = false);;   (*[33, 39]*)
let q2 = add 12 q2;;   (* [12, 33, 39]*)
assert(is_empty q2 = false);;   (*[12, 33, 39]*)
let (element, q2) = delete_min q2;;   (* 12 * [33, 39]*)
assert(element = 12);;
let (element, q2) = delete_min q2;;   (* 33 * [39]*)
assert(element = 33);;
let q2 = add 21 q2;;   (* [21, 39]*)
let q2 = add 6 q2;;   (* [6, 21, 39]*)
let q2 = add 11 q2;;   (* [6, 11, 21, 39]*)
let (element, q2) = delete_min q2;;   (* 6 * [11, 21, 39]*)
assert(element = 6);;
let q2 = add 17 q2;;   (* [11, 17, 21, 39]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 36 q3;;   (* [36]*)
let q3 = add 37 q3;;   (* [36, 37]*)
assert(is_empty q3 = false);;   (*[36, 37]*)
let q3 = add 20 q3;;   (* [20, 36, 37]*)
let q3 = add 26 q3;;   (* [20, 26, 36, 37]*)
let q3 = add 26 q3;;   (* [20, 26, 26, 36, 37]*)
let (element, q3) = delete_min q3;;   (* 20 * [26, 26, 36, 37]*)
assert(element = 20);;
let q3 = add 29 q3;;   (* [26, 26, 29, 36, 37]*)
let q3 = add 26 q3;;   (* [26, 26, 26, 29, 36, 37]*)
let q3 = add 20 q3;;   (* [20, 26, 26, 26, 29, 36, 37]*)
let (element, q3) = delete_min q3;;   (* 20 * [26, 26, 26, 29, 36, 37]*)
assert(element = 20);;
let (element, q3) = delete_min q3;;   (* 26 * [26, 26, 29, 36, 37]*)
assert(element = 26);;
let q3 = add 24 q3;;   (* [24, 26, 26, 29, 36, 37]*)
let (element, q3) = delete_min q3;;   (* 24 * [26, 26, 29, 36, 37]*)
assert(element = 24);;
let (element, q3) = delete_min q3;;   (* 26 * [26, 29, 36, 37]*)
assert(element = 26);;
let q3 = add 13 q3;;   (* [13, 26, 29, 36, 37]*)
let q3 = add 4 q3;;   (* [4, 13, 26, 29, 36, 37]*)
let (element, q3) = delete_min q3;;   (* 4 * [13, 26, 29, 36, 37]*)
assert(element = 4);;

(* -------q4------ *)
let q4 = empty;;
let q4 = add 8 q4;;   (* [8]*)
let q4 = add 35 q4;;   (* [8, 35]*)
let q4 = add 32 q4;;   (* [8, 32, 35]*)
let q4 = add 23 q4;;   (* [8, 23, 32, 35]*)
let q4 = add 29 q4;;   (* [8, 23, 29, 32, 35]*)
let q4 = add 25 q4;;   (* [8, 23, 25, 29, 32, 35]*)
assert(is_empty q4 = false);;   (*[8, 23, 25, 29, 32, 35]*)
let q4 = add 38 q4;;   (* [8, 23, 25, 29, 32, 35, 38]*)
let q4 = add 38 q4;;   (* [8, 23, 25, 29, 32, 35, 38, 38]*)
let q4 = add 28 q4;;   (* [8, 23, 25, 28, 29, 32, 35, 38, 38]*)
let q4 = add 3 q4;;   (* [3, 8, 23, 25, 28, 29, 32, 35, 38, 38]*)
assert(is_empty q4 = false);;   (*[3, 8, 23, 25, 28, 29, 32, 35, 38, 38]*)
let q4 = add 17 q4;;   (* [3, 8, 17, 23, 25, 28, 29, 32, 35, 38, 38]*)
let (element, q4) = delete_min q4;;   (* 3 * [8, 17, 23, 25, 28, 29, 32, 35, 38, 38]*)
assert(element = 3);;
assert(is_empty q4 = false);;   (*[8, 17, 23, 25, 28, 29, 32, 35, 38, 38]*)
let (element, q4) = delete_min q4;;   (* 8 * [17, 23, 25, 28, 29, 32, 35, 38, 38]*)
assert(element = 8);;
let q4 = add 12 q4;;   (* [12, 17, 23, 25, 28, 29, 32, 35, 38, 38]*)
let q4 = add 1 q4;;   (* [1, 12, 17, 23, 25, 28, 29, 32, 35, 38, 38]*)

(* -------q5------ *)
let q5 = empty;;
let q5 = add 31 q5;;   (* [31]*)
let q5 = add 20 q5;;   (* [20, 31]*)
let q5 = add 6 q5;;   (* [6, 20, 31]*)
let q5 = add 39 q5;;   (* [6, 20, 31, 39]*)
let q5 = add 20 q5;;   (* [6, 20, 20, 31, 39]*)
let q5 = add 1 q5;;   (* [1, 6, 20, 20, 31, 39]*)
let q5 = add 37 q5;;   (* [1, 6, 20, 20, 31, 37, 39]*)
let q5 = add 9 q5;;   (* [1, 6, 9, 20, 20, 31, 37, 39]*)
let (element, q5) = delete_min q5;;   (* 1 * [6, 9, 20, 20, 31, 37, 39]*)
assert(element = 1);;
let q5 = add 14 q5;;   (* [6, 9, 14, 20, 20, 31, 37, 39]*)
let q5 = add 34 q5;;   (* [6, 9, 14, 20, 20, 31, 34, 37, 39]*)
let q5 = add 22 q5;;   (* [6, 9, 14, 20, 20, 22, 31, 34, 37, 39]*)
let q5 = add 3 q5;;   (* [3, 6, 9, 14, 20, 20, 22, 31, 34, 37, 39]*)
let q5 = add 11 q5;;   (* [3, 6, 9, 11, 14, 20, 20, 22, 31, 34, 37, 39]*)
let q5 = add 1 q5;;   (* [1, 3, 6, 9, 11, 14, 20, 20, 22, 31, 34, 37, 39]*)
let q5 = add 6 q5;;   (* [1, 3, 6, 6, 9, 11, 14, 20, 20, 22, 31, 34, 37, 39]*)
let q5 = add 0 q5;;   (* [0, 1, 3, 6, 6, 9, 11, 14, 20, 20, 22, 31, 34, 37, 39]*)
let q5 = add 14 q5;;   (* [0, 1, 3, 6, 6, 9, 11, 14, 14, 20, 20, 22, 31, 34, 37, 39]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[0, 1, 1, 3, 6, 6, 9, 11, 11, 12, 13, 14, 14, 16, 17, 17, 20, 20, 21, 22, 23, 25, 26, 28, 29, 29, 31, 32, 34, 35, 36, 37, 37, 37, 37, 38, 38, 38, 39]*)
let (element, q) = delete_min q;;   (* 0 * [1, 1, 3, 6, 6, 9, 11, 11, 12, 13, 14, 14, 16, 17, 17, 20, 20, 21, 22, 23, 25, 26, 28, 29, 29, 31, 32, 34, 35, 36, 37, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 0);;
let (element, q) = delete_min q;;   (* 1 * [1, 3, 6, 6, 9, 11, 11, 12, 13, 14, 14, 16, 17, 17, 20, 20, 21, 22, 23, 25, 26, 28, 29, 29, 31, 32, 34, 35, 36, 37, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 1);;
let (element, q) = delete_min q;;   (* 1 * [3, 6, 6, 9, 11, 11, 12, 13, 14, 14, 16, 17, 17, 20, 20, 21, 22, 23, 25, 26, 28, 29, 29, 31, 32, 34, 35, 36, 37, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 1);;
let (element, q) = delete_min q;;   (* 3 * [6, 6, 9, 11, 11, 12, 13, 14, 14, 16, 17, 17, 20, 20, 21, 22, 23, 25, 26, 28, 29, 29, 31, 32, 34, 35, 36, 37, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 3);;
let (element, q) = delete_min q;;   (* 6 * [6, 9, 11, 11, 12, 13, 14, 14, 16, 17, 17, 20, 20, 21, 22, 23, 25, 26, 28, 29, 29, 31, 32, 34, 35, 36, 37, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 6 * [9, 11, 11, 12, 13, 14, 14, 16, 17, 17, 20, 20, 21, 22, 23, 25, 26, 28, 29, 29, 31, 32, 34, 35, 36, 37, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 9 * [11, 11, 12, 13, 14, 14, 16, 17, 17, 20, 20, 21, 22, 23, 25, 26, 28, 29, 29, 31, 32, 34, 35, 36, 37, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 11 * [11, 12, 13, 14, 14, 16, 17, 17, 20, 20, 21, 22, 23, 25, 26, 28, 29, 29, 31, 32, 34, 35, 36, 37, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 11 * [12, 13, 14, 14, 16, 17, 17, 20, 20, 21, 22, 23, 25, 26, 28, 29, 29, 31, 32, 34, 35, 36, 37, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 12 * [13, 14, 14, 16, 17, 17, 20, 20, 21, 22, 23, 25, 26, 28, 29, 29, 31, 32, 34, 35, 36, 37, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 13 * [14, 14, 16, 17, 17, 20, 20, 21, 22, 23, 25, 26, 28, 29, 29, 31, 32, 34, 35, 36, 37, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 14 * [14, 16, 17, 17, 20, 20, 21, 22, 23, 25, 26, 28, 29, 29, 31, 32, 34, 35, 36, 37, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [16, 17, 17, 20, 20, 21, 22, 23, 25, 26, 28, 29, 29, 31, 32, 34, 35, 36, 37, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 16 * [17, 17, 20, 20, 21, 22, 23, 25, 26, 28, 29, 29, 31, 32, 34, 35, 36, 37, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 17 * [17, 20, 20, 21, 22, 23, 25, 26, 28, 29, 29, 31, 32, 34, 35, 36, 37, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [20, 20, 21, 22, 23, 25, 26, 28, 29, 29, 31, 32, 34, 35, 36, 37, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 20 * [20, 21, 22, 23, 25, 26, 28, 29, 29, 31, 32, 34, 35, 36, 37, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [21, 22, 23, 25, 26, 28, 29, 29, 31, 32, 34, 35, 36, 37, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [22, 23, 25, 26, 28, 29, 29, 31, 32, 34, 35, 36, 37, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [23, 25, 26, 28, 29, 29, 31, 32, 34, 35, 36, 37, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [25, 26, 28, 29, 29, 31, 32, 34, 35, 36, 37, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 25 * [26, 28, 29, 29, 31, 32, 34, 35, 36, 37, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [28, 29, 29, 31, 32, 34, 35, 36, 37, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 28 * [29, 29, 31, 32, 34, 35, 36, 37, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [29, 31, 32, 34, 35, 36, 37, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [31, 32, 34, 35, 36, 37, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 31 * [32, 34, 35, 36, 37, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [34, 35, 36, 37, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 34 * [35, 36, 37, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [36, 37, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [37, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [37, 37, 38, 38, 38, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [37, 38, 38, 38, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [38, 38, 38, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST73----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 11 q1;;   (* [11]*)
let q1 = add 35 q1;;   (* [11, 35]*)
let q1 = add 34 q1;;   (* [11, 34, 35]*)
let (element, q1) = delete_min q1;;   (* 11 * [34, 35]*)
assert(element = 11);;
let q1 = add 5 q1;;   (* [5, 34, 35]*)
let (element, q1) = delete_min q1;;   (* 5 * [34, 35]*)
assert(element = 5);;
let q1 = add 39 q1;;   (* [34, 35, 39]*)
let (element, q1) = delete_min q1;;   (* 34 * [35, 39]*)
assert(element = 34);;
let (element, q1) = delete_min q1;;   (* 35 * [39]*)
assert(element = 35);;
assert(is_empty q1 = false);;   (*[39]*)
let q1 = add 27 q1;;   (* [27, 39]*)
assert(is_empty q1 = false);;   (*[27, 39]*)
let q1 = add 0 q1;;   (* [0, 27, 39]*)
let q1 = add 29 q1;;   (* [0, 27, 29, 39]*)
assert(is_empty q1 = false);;   (*[0, 27, 29, 39]*)
let q1 = add 18 q1;;   (* [0, 18, 27, 29, 39]*)
assert(is_empty q1 = false);;   (*[0, 18, 27, 29, 39]*)
let q1 = add 30 q1;;   (* [0, 18, 27, 29, 30, 39]*)
let q1 = add 16 q1;;   (* [0, 16, 18, 27, 29, 30, 39]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 22 q2;;   (* [22]*)
let (element, q2) = delete_min q2;;   (* 22 * []*)
assert(element = 22);;
let q2 = add 4 q2;;   (* [4]*)
let (element, q2) = delete_min q2;;   (* 4 * []*)
assert(element = 4);;
let q2 = add 2 q2;;   (* [2]*)
let q2 = add 7 q2;;   (* [2, 7]*)
let q2 = add 36 q2;;   (* [2, 7, 36]*)
let (element, q2) = delete_min q2;;   (* 2 * [7, 36]*)
assert(element = 2);;
let q2 = add 19 q2;;   (* [7, 19, 36]*)
let q2 = add 0 q2;;   (* [0, 7, 19, 36]*)
let q2 = add 39 q2;;   (* [0, 7, 19, 36, 39]*)
let q2 = add 1 q2;;   (* [0, 1, 7, 19, 36, 39]*)
let (element, q2) = delete_min q2;;   (* 0 * [1, 7, 19, 36, 39]*)
assert(element = 0);;
let q2 = add 26 q2;;   (* [1, 7, 19, 26, 36, 39]*)
let (element, q2) = delete_min q2;;   (* 1 * [7, 19, 26, 36, 39]*)
assert(element = 1);;
let q2 = add 29 q2;;   (* [7, 19, 26, 29, 36, 39]*)
let q2 = add 10 q2;;   (* [7, 10, 19, 26, 29, 36, 39]*)
let (element, q2) = delete_min q2;;   (* 7 * [10, 19, 26, 29, 36, 39]*)
assert(element = 7);;
let (element, q2) = delete_min q2;;   (* 10 * [19, 26, 29, 36, 39]*)
assert(element = 10);;

(* -------q3------ *)
let q3 = empty;;
let q3 = add 29 q3;;   (* [29]*)
let (element, q3) = delete_min q3;;   (* 29 * []*)
assert(element = 29);;
let q3 = add 36 q3;;   (* [36]*)
let q3 = add 8 q3;;   (* [8, 36]*)
let q3 = add 35 q3;;   (* [8, 35, 36]*)
let q3 = add 13 q3;;   (* [8, 13, 35, 36]*)
let q3 = add 28 q3;;   (* [8, 13, 28, 35, 36]*)
let q3 = add 37 q3;;   (* [8, 13, 28, 35, 36, 37]*)
let q3 = add 34 q3;;   (* [8, 13, 28, 34, 35, 36, 37]*)
let q3 = add 16 q3;;   (* [8, 13, 16, 28, 34, 35, 36, 37]*)
let q3 = add 5 q3;;   (* [5, 8, 13, 16, 28, 34, 35, 36, 37]*)
let (element, q3) = delete_min q3;;   (* 5 * [8, 13, 16, 28, 34, 35, 36, 37]*)
assert(element = 5);;
let (element, q3) = delete_min q3;;   (* 8 * [13, 16, 28, 34, 35, 36, 37]*)
assert(element = 8);;
let q3 = add 31 q3;;   (* [13, 16, 28, 31, 34, 35, 36, 37]*)
let q3 = add 15 q3;;   (* [13, 15, 16, 28, 31, 34, 35, 36, 37]*)
assert(is_empty q3 = false);;   (*[13, 15, 16, 28, 31, 34, 35, 36, 37]*)
let q3 = add 2 q3;;   (* [2, 13, 15, 16, 28, 31, 34, 35, 36, 37]*)
let (element, q3) = delete_min q3;;   (* 2 * [13, 15, 16, 28, 31, 34, 35, 36, 37]*)
assert(element = 2);;
let q3 = add 15 q3;;   (* [13, 15, 15, 16, 28, 31, 34, 35, 36, 37]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 10 q4;;   (* [10]*)
let q4 = add 36 q4;;   (* [10, 36]*)
let q4 = add 31 q4;;   (* [10, 31, 36]*)
assert(is_empty q4 = false);;   (*[10, 31, 36]*)
let q4 = add 28 q4;;   (* [10, 28, 31, 36]*)
assert(is_empty q4 = false);;   (*[10, 28, 31, 36]*)
let q4 = add 28 q4;;   (* [10, 28, 28, 31, 36]*)
let q4 = add 10 q4;;   (* [10, 10, 28, 28, 31, 36]*)
let q4 = add 34 q4;;   (* [10, 10, 28, 28, 31, 34, 36]*)
let (element, q4) = delete_min q4;;   (* 10 * [10, 28, 28, 31, 34, 36]*)
assert(element = 10);;
assert(is_empty q4 = false);;   (*[10, 28, 28, 31, 34, 36]*)
let q4 = add 28 q4;;   (* [10, 28, 28, 28, 31, 34, 36]*)
let q4 = add 30 q4;;   (* [10, 28, 28, 28, 30, 31, 34, 36]*)
let (element, q4) = delete_min q4;;   (* 10 * [28, 28, 28, 30, 31, 34, 36]*)
assert(element = 10);;
let q4 = add 1 q4;;   (* [1, 28, 28, 28, 30, 31, 34, 36]*)
let q4 = add 6 q4;;   (* [1, 6, 28, 28, 28, 30, 31, 34, 36]*)
let (element, q4) = delete_min q4;;   (* 1 * [6, 28, 28, 28, 30, 31, 34, 36]*)
assert(element = 1);;
let q4 = add 16 q4;;   (* [6, 16, 28, 28, 28, 30, 31, 34, 36]*)
let q4 = add 6 q4;;   (* [6, 6, 16, 28, 28, 28, 30, 31, 34, 36]*)

(* -------q5------ *)
let q5 = empty;;
let q5 = add 7 q5;;   (* [7]*)
let q5 = add 36 q5;;   (* [7, 36]*)
let q5 = add 6 q5;;   (* [6, 7, 36]*)
let q5 = add 26 q5;;   (* [6, 7, 26, 36]*)
let q5 = add 19 q5;;   (* [6, 7, 19, 26, 36]*)
let q5 = add 5 q5;;   (* [5, 6, 7, 19, 26, 36]*)
let (element, q5) = delete_min q5;;   (* 5 * [6, 7, 19, 26, 36]*)
assert(element = 5);;
let (element, q5) = delete_min q5;;   (* 6 * [7, 19, 26, 36]*)
assert(element = 6);;
assert(is_empty q5 = false);;   (*[7, 19, 26, 36]*)
let q5 = add 24 q5;;   (* [7, 19, 24, 26, 36]*)
assert(is_empty q5 = false);;   (*[7, 19, 24, 26, 36]*)
let (element, q5) = delete_min q5;;   (* 7 * [19, 24, 26, 36]*)
assert(element = 7);;
let q5 = add 18 q5;;   (* [18, 19, 24, 26, 36]*)
assert(is_empty q5 = false);;   (*[18, 19, 24, 26, 36]*)
let q5 = add 19 q5;;   (* [18, 19, 19, 24, 26, 36]*)
let (element, q5) = delete_min q5;;   (* 18 * [19, 19, 24, 26, 36]*)
assert(element = 18);;
assert(is_empty q5 = false);;   (*[19, 19, 24, 26, 36]*)
let q5 = add 15 q5;;   (* [15, 19, 19, 24, 26, 36]*)
let (element, q5) = delete_min q5;;   (* 15 * [19, 19, 24, 26, 36]*)
assert(element = 15);;

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[0, 6, 6, 13, 15, 15, 16, 16, 16, 18, 19, 19, 19, 24, 26, 26, 27, 28, 28, 28, 28, 29, 29, 30, 30, 31, 31, 34, 34, 35, 36, 36, 36, 36, 37, 39]*)
let (element, q) = delete_min q;;   (* 0 * [6, 6, 13, 15, 15, 16, 16, 16, 18, 19, 19, 19, 24, 26, 26, 27, 28, 28, 28, 28, 29, 29, 30, 30, 31, 31, 34, 34, 35, 36, 36, 36, 36, 37, 39, 39]*)
assert(element = 0);;
let (element, q) = delete_min q;;   (* 6 * [6, 13, 15, 15, 16, 16, 16, 18, 19, 19, 19, 24, 26, 26, 27, 28, 28, 28, 28, 29, 29, 30, 30, 31, 31, 34, 34, 35, 36, 36, 36, 36, 37, 39, 39]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 6 * [13, 15, 15, 16, 16, 16, 18, 19, 19, 19, 24, 26, 26, 27, 28, 28, 28, 28, 29, 29, 30, 30, 31, 31, 34, 34, 35, 36, 36, 36, 36, 37, 39, 39]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 13 * [15, 15, 16, 16, 16, 18, 19, 19, 19, 24, 26, 26, 27, 28, 28, 28, 28, 29, 29, 30, 30, 31, 31, 34, 34, 35, 36, 36, 36, 36, 37, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 15 * [15, 16, 16, 16, 18, 19, 19, 19, 24, 26, 26, 27, 28, 28, 28, 28, 29, 29, 30, 30, 31, 31, 34, 34, 35, 36, 36, 36, 36, 37, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [16, 16, 16, 18, 19, 19, 19, 24, 26, 26, 27, 28, 28, 28, 28, 29, 29, 30, 30, 31, 31, 34, 34, 35, 36, 36, 36, 36, 37, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [16, 16, 18, 19, 19, 19, 24, 26, 26, 27, 28, 28, 28, 28, 29, 29, 30, 30, 31, 31, 34, 34, 35, 36, 36, 36, 36, 37, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [16, 18, 19, 19, 19, 24, 26, 26, 27, 28, 28, 28, 28, 29, 29, 30, 30, 31, 31, 34, 34, 35, 36, 36, 36, 36, 37, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [18, 19, 19, 19, 24, 26, 26, 27, 28, 28, 28, 28, 29, 29, 30, 30, 31, 31, 34, 34, 35, 36, 36, 36, 36, 37, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 18 * [19, 19, 19, 24, 26, 26, 27, 28, 28, 28, 28, 29, 29, 30, 30, 31, 31, 34, 34, 35, 36, 36, 36, 36, 37, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [19, 19, 24, 26, 26, 27, 28, 28, 28, 28, 29, 29, 30, 30, 31, 31, 34, 34, 35, 36, 36, 36, 36, 37, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [19, 24, 26, 26, 27, 28, 28, 28, 28, 29, 29, 30, 30, 31, 31, 34, 34, 35, 36, 36, 36, 36, 37, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [24, 26, 26, 27, 28, 28, 28, 28, 29, 29, 30, 30, 31, 31, 34, 34, 35, 36, 36, 36, 36, 37, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 24 * [26, 26, 27, 28, 28, 28, 28, 29, 29, 30, 30, 31, 31, 34, 34, 35, 36, 36, 36, 36, 37, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 26 * [26, 27, 28, 28, 28, 28, 29, 29, 30, 30, 31, 31, 34, 34, 35, 36, 36, 36, 36, 37, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [27, 28, 28, 28, 28, 29, 29, 30, 30, 31, 31, 34, 34, 35, 36, 36, 36, 36, 37, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [28, 28, 28, 28, 29, 29, 30, 30, 31, 31, 34, 34, 35, 36, 36, 36, 36, 37, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 28, 29, 29, 30, 30, 31, 31, 34, 34, 35, 36, 36, 36, 36, 37, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 29, 29, 30, 30, 31, 31, 34, 34, 35, 36, 36, 36, 36, 37, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 29, 29, 30, 30, 31, 31, 34, 34, 35, 36, 36, 36, 36, 37, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [29, 29, 30, 30, 31, 31, 34, 34, 35, 36, 36, 36, 36, 37, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [29, 30, 30, 31, 31, 34, 34, 35, 36, 36, 36, 36, 37, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [30, 30, 31, 31, 34, 34, 35, 36, 36, 36, 36, 37, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [30, 31, 31, 34, 34, 35, 36, 36, 36, 36, 37, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 34, 34, 35, 36, 36, 36, 36, 37, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 34, 34, 35, 36, 36, 36, 36, 37, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [34, 34, 35, 36, 36, 36, 36, 37, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 36, 36, 36, 36, 37, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 36, 36, 36, 36, 37, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 36, 36, 37, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 36, 37, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 37, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST74----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 18 q1;;   (* [18]*)
let q1 = add 5 q1;;   (* [5, 18]*)
let (element, q1) = delete_min q1;;   (* 5 * [18]*)
assert(element = 5);;
let q1 = add 3 q1;;   (* [3, 18]*)
let q1 = add 27 q1;;   (* [3, 18, 27]*)
let q1 = add 8 q1;;   (* [3, 8, 18, 27]*)
let (element, q1) = delete_min q1;;   (* 3 * [8, 18, 27]*)
assert(element = 3);;
let (element, q1) = delete_min q1;;   (* 8 * [18, 27]*)
assert(element = 8);;
let (element, q1) = delete_min q1;;   (* 18 * [27]*)
assert(element = 18);;
let q1 = add 8 q1;;   (* [8, 27]*)
let q1 = add 16 q1;;   (* [8, 16, 27]*)
let q1 = add 5 q1;;   (* [5, 8, 16, 27]*)
let (element, q1) = delete_min q1;;   (* 5 * [8, 16, 27]*)
assert(element = 5);;
let (element, q1) = delete_min q1;;   (* 8 * [16, 27]*)
assert(element = 8);;
assert(is_empty q1 = false);;   (*[16, 27]*)
let q1 = add 24 q1;;   (* [16, 24, 27]*)
let q1 = add 14 q1;;   (* [14, 16, 24, 27]*)
let (element, q1) = delete_min q1;;   (* 14 * [16, 24, 27]*)
assert(element = 14);;
let q1 = add 8 q1;;   (* [8, 16, 24, 27]*)
let q1 = add 8 q1;;   (* [8, 8, 16, 24, 27]*)

(* -------q2------ *)
let q2 = empty;;
assert(is_empty q2 = true);;   (*[]*)
let q2 = add 17 q2;;   (* [17]*)
let q2 = add 39 q2;;   (* [17, 39]*)
let q2 = add 5 q2;;   (* [5, 17, 39]*)
let (element, q2) = delete_min q2;;   (* 5 * [17, 39]*)
assert(element = 5);;
let q2 = add 28 q2;;   (* [17, 28, 39]*)
let q2 = add 9 q2;;   (* [9, 17, 28, 39]*)
let (element, q2) = delete_min q2;;   (* 9 * [17, 28, 39]*)
assert(element = 9);;
let q2 = add 28 q2;;   (* [17, 28, 28, 39]*)
assert(is_empty q2 = false);;   (*[17, 28, 28, 39]*)
let q2 = add 33 q2;;   (* [17, 28, 28, 33, 39]*)
let q2 = add 15 q2;;   (* [15, 17, 28, 28, 33, 39]*)
let (element, q2) = delete_min q2;;   (* 15 * [17, 28, 28, 33, 39]*)
assert(element = 15);;
let q2 = add 14 q2;;   (* [14, 17, 28, 28, 33, 39]*)
let q2 = add 4 q2;;   (* [4, 14, 17, 28, 28, 33, 39]*)
let (element, q2) = delete_min q2;;   (* 4 * [14, 17, 28, 28, 33, 39]*)
assert(element = 4);;
let q2 = add 38 q2;;   (* [14, 17, 28, 28, 33, 38, 39]*)
assert(is_empty q2 = false);;   (*[14, 17, 28, 28, 33, 38, 39]*)
let q2 = add 24 q2;;   (* [14, 17, 24, 28, 28, 33, 38, 39]*)
let (element, q2) = delete_min q2;;   (* 14 * [17, 24, 28, 28, 33, 38, 39]*)
assert(element = 14);;

(* -------q3------ *)
let q3 = empty;;
let q3 = add 5 q3;;   (* [5]*)
let q3 = add 38 q3;;   (* [5, 38]*)
let (element, q3) = delete_min q3;;   (* 5 * [38]*)
assert(element = 5);;
let q3 = add 23 q3;;   (* [23, 38]*)
let q3 = add 12 q3;;   (* [12, 23, 38]*)
assert(is_empty q3 = false);;   (*[12, 23, 38]*)
let q3 = add 26 q3;;   (* [12, 23, 26, 38]*)
let q3 = add 1 q3;;   (* [1, 12, 23, 26, 38]*)
let q3 = add 14 q3;;   (* [1, 12, 14, 23, 26, 38]*)
let q3 = add 2 q3;;   (* [1, 2, 12, 14, 23, 26, 38]*)
let (element, q3) = delete_min q3;;   (* 1 * [2, 12, 14, 23, 26, 38]*)
assert(element = 1);;
let q3 = add 23 q3;;   (* [2, 12, 14, 23, 23, 26, 38]*)
let q3 = add 33 q3;;   (* [2, 12, 14, 23, 23, 26, 33, 38]*)
let (element, q3) = delete_min q3;;   (* 2 * [12, 14, 23, 23, 26, 33, 38]*)
assert(element = 2);;
let q3 = add 13 q3;;   (* [12, 13, 14, 23, 23, 26, 33, 38]*)
assert(is_empty q3 = false);;   (*[12, 13, 14, 23, 23, 26, 33, 38]*)
let q3 = add 37 q3;;   (* [12, 13, 14, 23, 23, 26, 33, 37, 38]*)
let (element, q3) = delete_min q3;;   (* 12 * [13, 14, 23, 23, 26, 33, 37, 38]*)
assert(element = 12);;
let q3 = add 17 q3;;   (* [13, 14, 17, 23, 23, 26, 33, 37, 38]*)
assert(is_empty q3 = false);;   (*[13, 14, 17, 23, 23, 26, 33, 37, 38]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 28 q4;;   (* [28]*)
let q4 = add 14 q4;;   (* [14, 28]*)
let (element, q4) = delete_min q4;;   (* 14 * [28]*)
assert(element = 14);;
let (element, q4) = delete_min q4;;   (* 28 * []*)
assert(element = 28);;
let q4 = add 13 q4;;   (* [13]*)
let q4 = add 22 q4;;   (* [13, 22]*)
let q4 = add 14 q4;;   (* [13, 14, 22]*)
let q4 = add 19 q4;;   (* [13, 14, 19, 22]*)
assert(is_empty q4 = false);;   (*[13, 14, 19, 22]*)
let q4 = add 13 q4;;   (* [13, 13, 14, 19, 22]*)
let (element, q4) = delete_min q4;;   (* 13 * [13, 14, 19, 22]*)
assert(element = 13);;
let q4 = add 22 q4;;   (* [13, 14, 19, 22, 22]*)
let q4 = add 31 q4;;   (* [13, 14, 19, 22, 22, 31]*)
assert(is_empty q4 = false);;   (*[13, 14, 19, 22, 22, 31]*)
let (element, q4) = delete_min q4;;   (* 13 * [14, 19, 22, 22, 31]*)
assert(element = 13);;
let q4 = add 37 q4;;   (* [14, 19, 22, 22, 31, 37]*)
let q4 = add 24 q4;;   (* [14, 19, 22, 22, 24, 31, 37]*)
let q4 = add 5 q4;;   (* [5, 14, 19, 22, 22, 24, 31, 37]*)
let (element, q4) = delete_min q4;;   (* 5 * [14, 19, 22, 22, 24, 31, 37]*)
assert(element = 5);;
let q4 = add 21 q4;;   (* [14, 19, 21, 22, 22, 24, 31, 37]*)

(* -------q5------ *)
let q5 = empty;;
let q5 = add 23 q5;;   (* [23]*)
let q5 = add 2 q5;;   (* [2, 23]*)
let q5 = add 20 q5;;   (* [2, 20, 23]*)
let q5 = add 6 q5;;   (* [2, 6, 20, 23]*)
let (element, q5) = delete_min q5;;   (* 2 * [6, 20, 23]*)
assert(element = 2);;
let (element, q5) = delete_min q5;;   (* 6 * [20, 23]*)
assert(element = 6);;
let q5 = add 8 q5;;   (* [8, 20, 23]*)
let q5 = add 18 q5;;   (* [8, 18, 20, 23]*)
let (element, q5) = delete_min q5;;   (* 8 * [18, 20, 23]*)
assert(element = 8);;
assert(is_empty q5 = false);;   (*[18, 20, 23]*)
let q5 = add 25 q5;;   (* [18, 20, 23, 25]*)
let (element, q5) = delete_min q5;;   (* 18 * [20, 23, 25]*)
assert(element = 18);;
let q5 = add 24 q5;;   (* [20, 23, 24, 25]*)
let q5 = add 29 q5;;   (* [20, 23, 24, 25, 29]*)
let (element, q5) = delete_min q5;;   (* 20 * [23, 24, 25, 29]*)
assert(element = 20);;
let q5 = add 25 q5;;   (* [23, 24, 25, 25, 29]*)
let q5 = add 4 q5;;   (* [4, 23, 24, 25, 25, 29]*)
let q5 = add 4 q5;;   (* [4, 4, 23, 24, 25, 25, 29]*)
let (element, q5) = delete_min q5;;   (* 4 * [4, 23, 24, 25, 25, 29]*)
assert(element = 4);;
let (element, q5) = delete_min q5;;   (* 4 * [23, 24, 25, 25, 29]*)
assert(element = 4);;

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[8, 8, 13, 14, 14, 16, 17, 17, 19, 21, 22, 22, 23, 23, 23, 24, 24, 24, 24, 25, 25, 26, 27, 28, 28, 29, 31, 33, 33, 37, 37, 38, 38]*)
let (element, q) = delete_min q;;   (* 8 * [8, 13, 14, 14, 16, 17, 17, 19, 21, 22, 22, 23, 23, 23, 24, 24, 24, 24, 25, 25, 26, 27, 28, 28, 29, 31, 33, 33, 37, 37, 38, 38, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 8 * [13, 14, 14, 16, 17, 17, 19, 21, 22, 22, 23, 23, 23, 24, 24, 24, 24, 25, 25, 26, 27, 28, 28, 29, 31, 33, 33, 37, 37, 38, 38, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 13 * [14, 14, 16, 17, 17, 19, 21, 22, 22, 23, 23, 23, 24, 24, 24, 24, 25, 25, 26, 27, 28, 28, 29, 31, 33, 33, 37, 37, 38, 38, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 14 * [14, 16, 17, 17, 19, 21, 22, 22, 23, 23, 23, 24, 24, 24, 24, 25, 25, 26, 27, 28, 28, 29, 31, 33, 33, 37, 37, 38, 38, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [16, 17, 17, 19, 21, 22, 22, 23, 23, 23, 24, 24, 24, 24, 25, 25, 26, 27, 28, 28, 29, 31, 33, 33, 37, 37, 38, 38, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 16 * [17, 17, 19, 21, 22, 22, 23, 23, 23, 24, 24, 24, 24, 25, 25, 26, 27, 28, 28, 29, 31, 33, 33, 37, 37, 38, 38, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 17 * [17, 19, 21, 22, 22, 23, 23, 23, 24, 24, 24, 24, 25, 25, 26, 27, 28, 28, 29, 31, 33, 33, 37, 37, 38, 38, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [19, 21, 22, 22, 23, 23, 23, 24, 24, 24, 24, 25, 25, 26, 27, 28, 28, 29, 31, 33, 33, 37, 37, 38, 38, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 19 * [21, 22, 22, 23, 23, 23, 24, 24, 24, 24, 25, 25, 26, 27, 28, 28, 29, 31, 33, 33, 37, 37, 38, 38, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 21 * [22, 22, 23, 23, 23, 24, 24, 24, 24, 25, 25, 26, 27, 28, 28, 29, 31, 33, 33, 37, 37, 38, 38, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [22, 23, 23, 23, 24, 24, 24, 24, 25, 25, 26, 27, 28, 28, 29, 31, 33, 33, 37, 37, 38, 38, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [23, 23, 23, 24, 24, 24, 24, 25, 25, 26, 27, 28, 28, 29, 31, 33, 33, 37, 37, 38, 38, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [23, 23, 24, 24, 24, 24, 25, 25, 26, 27, 28, 28, 29, 31, 33, 33, 37, 37, 38, 38, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [23, 24, 24, 24, 24, 25, 25, 26, 27, 28, 28, 29, 31, 33, 33, 37, 37, 38, 38, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [24, 24, 24, 24, 25, 25, 26, 27, 28, 28, 29, 31, 33, 33, 37, 37, 38, 38, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [24, 24, 24, 25, 25, 26, 27, 28, 28, 29, 31, 33, 33, 37, 37, 38, 38, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [24, 24, 25, 25, 26, 27, 28, 28, 29, 31, 33, 33, 37, 37, 38, 38, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [24, 25, 25, 26, 27, 28, 28, 29, 31, 33, 33, 37, 37, 38, 38, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [25, 25, 26, 27, 28, 28, 29, 31, 33, 33, 37, 37, 38, 38, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [25, 26, 27, 28, 28, 29, 31, 33, 33, 37, 37, 38, 38, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [26, 27, 28, 28, 29, 31, 33, 33, 37, 37, 38, 38, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [27, 28, 28, 29, 31, 33, 33, 37, 37, 38, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [28, 28, 29, 31, 33, 33, 37, 37, 38, 38, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [28, 29, 31, 33, 33, 37, 37, 38, 38, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [29, 31, 33, 33, 37, 37, 38, 38, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [31, 33, 33, 37, 37, 38, 38, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 31 * [33, 33, 37, 37, 38, 38, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 33 * [33, 37, 37, 38, 38, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [37, 37, 38, 38, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 37 * [37, 38, 38, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [38, 38, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST75----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 2 q1;;   (* [2]*)
let q1 = add 36 q1;;   (* [2, 36]*)
let (element, q1) = delete_min q1;;   (* 2 * [36]*)
assert(element = 2);;
let q1 = add 3 q1;;   (* [3, 36]*)
let q1 = add 12 q1;;   (* [3, 12, 36]*)
let q1 = add 35 q1;;   (* [3, 12, 35, 36]*)
let q1 = add 16 q1;;   (* [3, 12, 16, 35, 36]*)
let (element, q1) = delete_min q1;;   (* 3 * [12, 16, 35, 36]*)
assert(element = 3);;
let (element, q1) = delete_min q1;;   (* 12 * [16, 35, 36]*)
assert(element = 12);;
let q1 = add 39 q1;;   (* [16, 35, 36, 39]*)
assert(is_empty q1 = false);;   (*[16, 35, 36, 39]*)
let (element, q1) = delete_min q1;;   (* 16 * [35, 36, 39]*)
assert(element = 16);;
let (element, q1) = delete_min q1;;   (* 35 * [36, 39]*)
assert(element = 35);;
let q1 = add 38 q1;;   (* [36, 38, 39]*)
assert(is_empty q1 = false);;   (*[36, 38, 39]*)
let q1 = add 12 q1;;   (* [12, 36, 38, 39]*)
assert(is_empty q1 = false);;   (*[12, 36, 38, 39]*)
let q1 = add 6 q1;;   (* [6, 12, 36, 38, 39]*)
assert(is_empty q1 = false);;   (*[6, 12, 36, 38, 39]*)
let q1 = add 37 q1;;   (* [6, 12, 36, 37, 38, 39]*)
let q1 = add 38 q1;;   (* [6, 12, 36, 37, 38, 38, 39]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 1 q2;;   (* [1]*)
assert(is_empty q2 = false);;   (*[1]*)
let q2 = add 37 q2;;   (* [1, 37]*)
let q2 = add 25 q2;;   (* [1, 25, 37]*)
let (element, q2) = delete_min q2;;   (* 1 * [25, 37]*)
assert(element = 1);;
let (element, q2) = delete_min q2;;   (* 25 * [37]*)
assert(element = 25);;
let (element, q2) = delete_min q2;;   (* 37 * []*)
assert(element = 37);;
let q2 = add 20 q2;;   (* [20]*)
let q2 = add 15 q2;;   (* [15, 20]*)
let q2 = add 13 q2;;   (* [13, 15, 20]*)
let q2 = add 22 q2;;   (* [13, 15, 20, 22]*)
let (element, q2) = delete_min q2;;   (* 13 * [15, 20, 22]*)
assert(element = 13);;
let (element, q2) = delete_min q2;;   (* 15 * [20, 22]*)
assert(element = 15);;
let q2 = add 14 q2;;   (* [14, 20, 22]*)
let (element, q2) = delete_min q2;;   (* 14 * [20, 22]*)
assert(element = 14);;
let q2 = add 21 q2;;   (* [20, 21, 22]*)
let q2 = add 14 q2;;   (* [14, 20, 21, 22]*)
let q2 = add 5 q2;;   (* [5, 14, 20, 21, 22]*)
let q2 = add 13 q2;;   (* [5, 13, 14, 20, 21, 22]*)
let (element, q2) = delete_min q2;;   (* 5 * [13, 14, 20, 21, 22]*)
assert(element = 5);;
let q2 = add 27 q2;;   (* [13, 14, 20, 21, 22, 27]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 33 q3;;   (* [33]*)
let q3 = add 14 q3;;   (* [14, 33]*)
let (element, q3) = delete_min q3;;   (* 14 * [33]*)
assert(element = 14);;
let q3 = add 17 q3;;   (* [17, 33]*)
let q3 = add 21 q3;;   (* [17, 21, 33]*)
let (element, q3) = delete_min q3;;   (* 17 * [21, 33]*)
assert(element = 17);;
let q3 = add 36 q3;;   (* [21, 33, 36]*)
let q3 = add 30 q3;;   (* [21, 30, 33, 36]*)
let q3 = add 0 q3;;   (* [0, 21, 30, 33, 36]*)
let q3 = add 17 q3;;   (* [0, 17, 21, 30, 33, 36]*)
let q3 = add 2 q3;;   (* [0, 2, 17, 21, 30, 33, 36]*)
let q3 = add 18 q3;;   (* [0, 2, 17, 18, 21, 30, 33, 36]*)
let (element, q3) = delete_min q3;;   (* 0 * [2, 17, 18, 21, 30, 33, 36]*)
assert(element = 0);;
let q3 = add 2 q3;;   (* [2, 2, 17, 18, 21, 30, 33, 36]*)
let (element, q3) = delete_min q3;;   (* 2 * [2, 17, 18, 21, 30, 33, 36]*)
assert(element = 2);;
let q3 = add 19 q3;;   (* [2, 17, 18, 19, 21, 30, 33, 36]*)
let q3 = add 27 q3;;   (* [2, 17, 18, 19, 21, 27, 30, 33, 36]*)
assert(is_empty q3 = false);;   (*[2, 17, 18, 19, 21, 27, 30, 33, 36]*)
let q3 = add 24 q3;;   (* [2, 17, 18, 19, 21, 24, 27, 30, 33, 36]*)
let q3 = add 33 q3;;   (* [2, 17, 18, 19, 21, 24, 27, 30, 33, 33, 36]*)
assert(is_empty q3 = false);;   (*[2, 17, 18, 19, 21, 24, 27, 30, 33, 33, 36]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 3 q4;;   (* [3]*)
let q4 = add 15 q4;;   (* [3, 15]*)
let (element, q4) = delete_min q4;;   (* 3 * [15]*)
assert(element = 3);;
let q4 = add 38 q4;;   (* [15, 38]*)
let q4 = add 32 q4;;   (* [15, 32, 38]*)
let q4 = add 18 q4;;   (* [15, 18, 32, 38]*)
let q4 = add 39 q4;;   (* [15, 18, 32, 38, 39]*)
let q4 = add 22 q4;;   (* [15, 18, 22, 32, 38, 39]*)
let q4 = add 34 q4;;   (* [15, 18, 22, 32, 34, 38, 39]*)
let q4 = add 16 q4;;   (* [15, 16, 18, 22, 32, 34, 38, 39]*)
let q4 = add 31 q4;;   (* [15, 16, 18, 22, 31, 32, 34, 38, 39]*)
let q4 = add 23 q4;;   (* [15, 16, 18, 22, 23, 31, 32, 34, 38, 39]*)
let q4 = add 23 q4;;   (* [15, 16, 18, 22, 23, 23, 31, 32, 34, 38, 39]*)
let (element, q4) = delete_min q4;;   (* 15 * [16, 18, 22, 23, 23, 31, 32, 34, 38, 39]*)
assert(element = 15);;
let q4 = add 34 q4;;   (* [16, 18, 22, 23, 23, 31, 32, 34, 34, 38, 39]*)
let q4 = add 32 q4;;   (* [16, 18, 22, 23, 23, 31, 32, 32, 34, 34, 38, 39]*)
let q4 = add 9 q4;;   (* [9, 16, 18, 22, 23, 23, 31, 32, 32, 34, 34, 38, 39]*)
let q4 = add 17 q4;;   (* [9, 16, 17, 18, 22, 23, 23, 31, 32, 32, 34, 34, 38, 39]*)
let (element, q4) = delete_min q4;;   (* 9 * [16, 17, 18, 22, 23, 23, 31, 32, 32, 34, 34, 38, 39]*)
assert(element = 9);;
let q4 = add 35 q4;;   (* [16, 17, 18, 22, 23, 23, 31, 32, 32, 34, 34, 35, 38, 39]*)
let q4 = add 16 q4;;   (* [16, 16, 17, 18, 22, 23, 23, 31, 32, 32, 34, 34, 35, 38, 39]*)

(* -------q5------ *)
let q5 = empty;;
let q5 = add 2 q5;;   (* [2]*)
let q5 = add 17 q5;;   (* [2, 17]*)
let q5 = add 15 q5;;   (* [2, 15, 17]*)
let q5 = add 25 q5;;   (* [2, 15, 17, 25]*)
let q5 = add 24 q5;;   (* [2, 15, 17, 24, 25]*)
let q5 = add 25 q5;;   (* [2, 15, 17, 24, 25, 25]*)
let q5 = add 34 q5;;   (* [2, 15, 17, 24, 25, 25, 34]*)
assert(is_empty q5 = false);;   (*[2, 15, 17, 24, 25, 25, 34]*)
let q5 = add 15 q5;;   (* [2, 15, 15, 17, 24, 25, 25, 34]*)
let q5 = add 15 q5;;   (* [2, 15, 15, 15, 17, 24, 25, 25, 34]*)
let q5 = add 38 q5;;   (* [2, 15, 15, 15, 17, 24, 25, 25, 34, 38]*)
let q5 = add 4 q5;;   (* [2, 4, 15, 15, 15, 17, 24, 25, 25, 34, 38]*)
let (element, q5) = delete_min q5;;   (* 2 * [4, 15, 15, 15, 17, 24, 25, 25, 34, 38]*)
assert(element = 2);;
let q5 = add 39 q5;;   (* [4, 15, 15, 15, 17, 24, 25, 25, 34, 38, 39]*)
let q5 = add 35 q5;;   (* [4, 15, 15, 15, 17, 24, 25, 25, 34, 35, 38, 39]*)
assert(is_empty q5 = false);;   (*[4, 15, 15, 15, 17, 24, 25, 25, 34, 35, 38, 39]*)
let (element, q5) = delete_min q5;;   (* 4 * [15, 15, 15, 17, 24, 25, 25, 34, 35, 38, 39]*)
assert(element = 4);;
let q5 = add 23 q5;;   (* [15, 15, 15, 17, 23, 24, 25, 25, 34, 35, 38, 39]*)
let (element, q5) = delete_min q5;;   (* 15 * [15, 15, 17, 23, 24, 25, 25, 34, 35, 38, 39]*)
assert(element = 15);;
let q5 = add 39 q5;;   (* [15, 15, 17, 23, 24, 25, 25, 34, 35, 38, 39, 39]*)
let (element, q5) = delete_min q5;;   (* 15 * [15, 17, 23, 24, 25, 25, 34, 35, 38, 39, 39]*)
assert(element = 15);;

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[2, 6, 12, 13, 14, 15, 16, 16, 17, 17, 17, 18, 18, 19, 20, 21, 21, 22, 22, 23, 23, 23, 24, 24, 25, 25, 27, 27, 30, 31, 32, 32, 33, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39]*)
let (element, q) = delete_min q;;   (* 2 * [6, 12, 13, 14, 15, 16, 16, 17, 17, 17, 18, 18, 19, 20, 21, 21, 22, 22, 23, 23, 23, 24, 24, 25, 25, 27, 27, 30, 31, 32, 32, 33, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 2);;
let (element, q) = delete_min q;;   (* 6 * [12, 13, 14, 15, 16, 16, 17, 17, 17, 18, 18, 19, 20, 21, 21, 22, 22, 23, 23, 23, 24, 24, 25, 25, 27, 27, 30, 31, 32, 32, 33, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 12 * [13, 14, 15, 16, 16, 17, 17, 17, 18, 18, 19, 20, 21, 21, 22, 22, 23, 23, 23, 24, 24, 25, 25, 27, 27, 30, 31, 32, 32, 33, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 13 * [14, 15, 16, 16, 17, 17, 17, 18, 18, 19, 20, 21, 21, 22, 22, 23, 23, 23, 24, 24, 25, 25, 27, 27, 30, 31, 32, 32, 33, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 14 * [15, 16, 16, 17, 17, 17, 18, 18, 19, 20, 21, 21, 22, 22, 23, 23, 23, 24, 24, 25, 25, 27, 27, 30, 31, 32, 32, 33, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [16, 16, 17, 17, 17, 18, 18, 19, 20, 21, 21, 22, 22, 23, 23, 23, 24, 24, 25, 25, 27, 27, 30, 31, 32, 32, 33, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [16, 17, 17, 17, 18, 18, 19, 20, 21, 21, 22, 22, 23, 23, 23, 24, 24, 25, 25, 27, 27, 30, 31, 32, 32, 33, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [17, 17, 17, 18, 18, 19, 20, 21, 21, 22, 22, 23, 23, 23, 24, 24, 25, 25, 27, 27, 30, 31, 32, 32, 33, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 17 * [17, 17, 18, 18, 19, 20, 21, 21, 22, 22, 23, 23, 23, 24, 24, 25, 25, 27, 27, 30, 31, 32, 32, 33, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [17, 18, 18, 19, 20, 21, 21, 22, 22, 23, 23, 23, 24, 24, 25, 25, 27, 27, 30, 31, 32, 32, 33, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [18, 18, 19, 20, 21, 21, 22, 22, 23, 23, 23, 24, 24, 25, 25, 27, 27, 30, 31, 32, 32, 33, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [18, 19, 20, 21, 21, 22, 22, 23, 23, 23, 24, 24, 25, 25, 27, 27, 30, 31, 32, 32, 33, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [19, 20, 21, 21, 22, 22, 23, 23, 23, 24, 24, 25, 25, 27, 27, 30, 31, 32, 32, 33, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [20, 21, 21, 22, 22, 23, 23, 23, 24, 24, 25, 25, 27, 27, 30, 31, 32, 32, 33, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [21, 21, 22, 22, 23, 23, 23, 24, 24, 25, 25, 27, 27, 30, 31, 32, 32, 33, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [21, 22, 22, 23, 23, 23, 24, 24, 25, 25, 27, 27, 30, 31, 32, 32, 33, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [22, 22, 23, 23, 23, 24, 24, 25, 25, 27, 27, 30, 31, 32, 32, 33, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [22, 23, 23, 23, 24, 24, 25, 25, 27, 27, 30, 31, 32, 32, 33, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [23, 23, 23, 24, 24, 25, 25, 27, 27, 30, 31, 32, 32, 33, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [23, 23, 24, 24, 25, 25, 27, 27, 30, 31, 32, 32, 33, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [23, 24, 24, 25, 25, 27, 27, 30, 31, 32, 32, 33, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [24, 24, 25, 25, 27, 27, 30, 31, 32, 32, 33, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [24, 25, 25, 27, 27, 30, 31, 32, 32, 33, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [25, 25, 27, 27, 30, 31, 32, 32, 33, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [25, 27, 27, 30, 31, 32, 32, 33, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [27, 27, 30, 31, 32, 32, 33, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 27 * [27, 30, 31, 32, 32, 33, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [30, 31, 32, 32, 33, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 30 * [31, 32, 32, 33, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 33, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [33, 34, 34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [34, 34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [38, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 38, 39, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 39, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 39, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39, 39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST76----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 31 q1;;   (* [31]*)
let (element, q1) = delete_min q1;;   (* 31 * []*)
assert(element = 31);;
let q1 = add 12 q1;;   (* [12]*)
let (element, q1) = delete_min q1;;   (* 12 * []*)
assert(element = 12);;
let q1 = add 19 q1;;   (* [19]*)
let q1 = add 9 q1;;   (* [9, 19]*)
let q1 = add 14 q1;;   (* [9, 14, 19]*)
let (element, q1) = delete_min q1;;   (* 9 * [14, 19]*)
assert(element = 9);;
let (element, q1) = delete_min q1;;   (* 14 * [19]*)
assert(element = 14);;
let (element, q1) = delete_min q1;;   (* 19 * []*)
assert(element = 19);;
let q1 = add 0 q1;;   (* [0]*)
let q1 = add 1 q1;;   (* [0, 1]*)
let (element, q1) = delete_min q1;;   (* 0 * [1]*)
assert(element = 0);;
let (element, q1) = delete_min q1;;   (* 1 * []*)
assert(element = 1);;
assert(is_empty q1 = true);;   (*[]*)
assert(is_empty q1 = true);;   (*[]*)
let q1 = add 21 q1;;   (* [21]*)
let q1 = add 7 q1;;   (* [7, 21]*)
assert(is_empty q1 = false);;   (*[7, 21]*)
let q1 = add 2 q1;;   (* [2, 7, 21]*)
let q1 = add 5 q1;;   (* [2, 5, 7, 21]*)
assert(is_empty q1 = false);;   (*[2, 5, 7, 21]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 19 q2;;   (* [19]*)
assert(is_empty q2 = false);;   (*[19]*)
let q2 = add 39 q2;;   (* [19, 39]*)
let q2 = add 2 q2;;   (* [2, 19, 39]*)
let q2 = add 29 q2;;   (* [2, 19, 29, 39]*)
let (element, q2) = delete_min q2;;   (* 2 * [19, 29, 39]*)
assert(element = 2);;
let (element, q2) = delete_min q2;;   (* 19 * [29, 39]*)
assert(element = 19);;
let q2 = add 30 q2;;   (* [29, 30, 39]*)
let q2 = add 35 q2;;   (* [29, 30, 35, 39]*)
let q2 = add 28 q2;;   (* [28, 29, 30, 35, 39]*)
let q2 = add 23 q2;;   (* [23, 28, 29, 30, 35, 39]*)
let (element, q2) = delete_min q2;;   (* 23 * [28, 29, 30, 35, 39]*)
assert(element = 23);;
let (element, q2) = delete_min q2;;   (* 28 * [29, 30, 35, 39]*)
assert(element = 28);;
let q2 = add 25 q2;;   (* [25, 29, 30, 35, 39]*)
let (element, q2) = delete_min q2;;   (* 25 * [29, 30, 35, 39]*)
assert(element = 25);;
let (element, q2) = delete_min q2;;   (* 29 * [30, 35, 39]*)
assert(element = 29);;
let q2 = add 23 q2;;   (* [23, 30, 35, 39]*)
let q2 = add 26 q2;;   (* [23, 26, 30, 35, 39]*)
let q2 = add 20 q2;;   (* [20, 23, 26, 30, 35, 39]*)
let (element, q2) = delete_min q2;;   (* 20 * [23, 26, 30, 35, 39]*)
assert(element = 20);;
let q2 = add 9 q2;;   (* [9, 23, 26, 30, 35, 39]*)
let (element, q2) = delete_min q2;;   (* 9 * [23, 26, 30, 35, 39]*)
assert(element = 9);;

(* -------q3------ *)
let q3 = empty;;
let q3 = add 2 q3;;   (* [2]*)
assert(is_empty q3 = false);;   (*[2]*)
let (element, q3) = delete_min q3;;   (* 2 * []*)
assert(element = 2);;
let q3 = add 7 q3;;   (* [7]*)
let q3 = add 17 q3;;   (* [7, 17]*)
let (element, q3) = delete_min q3;;   (* 7 * [17]*)
assert(element = 7);;
let (element, q3) = delete_min q3;;   (* 17 * []*)
assert(element = 17);;
let q3 = add 7 q3;;   (* [7]*)
let (element, q3) = delete_min q3;;   (* 7 * []*)
assert(element = 7);;
assert(is_empty q3 = true);;   (*[]*)
let q3 = add 13 q3;;   (* [13]*)
let q3 = add 28 q3;;   (* [13, 28]*)
let q3 = add 20 q3;;   (* [13, 20, 28]*)
let q3 = add 20 q3;;   (* [13, 20, 20, 28]*)
let (element, q3) = delete_min q3;;   (* 13 * [20, 20, 28]*)
assert(element = 13);;
let q3 = add 14 q3;;   (* [14, 20, 20, 28]*)
let q3 = add 20 q3;;   (* [14, 20, 20, 20, 28]*)
let q3 = add 1 q3;;   (* [1, 14, 20, 20, 20, 28]*)
let q3 = add 0 q3;;   (* [0, 1, 14, 20, 20, 20, 28]*)
let q3 = add 9 q3;;   (* [0, 1, 9, 14, 20, 20, 20, 28]*)
let q3 = add 4 q3;;   (* [0, 1, 4, 9, 14, 20, 20, 20, 28]*)
assert(is_empty q3 = false);;   (*[0, 1, 4, 9, 14, 20, 20, 20, 28]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 8 q4;;   (* [8]*)
let (element, q4) = delete_min q4;;   (* 8 * []*)
assert(element = 8);;
assert(is_empty q4 = true);;   (*[]*)
let q4 = add 22 q4;;   (* [22]*)
let q4 = add 25 q4;;   (* [22, 25]*)
let (element, q4) = delete_min q4;;   (* 22 * [25]*)
assert(element = 22);;
let (element, q4) = delete_min q4;;   (* 25 * []*)
assert(element = 25);;
let q4 = add 26 q4;;   (* [26]*)
let (element, q4) = delete_min q4;;   (* 26 * []*)
assert(element = 26);;
let q4 = add 23 q4;;   (* [23]*)
let q4 = add 0 q4;;   (* [0, 23]*)
let q4 = add 39 q4;;   (* [0, 23, 39]*)
let (element, q4) = delete_min q4;;   (* 0 * [23, 39]*)
assert(element = 0);;
let q4 = add 16 q4;;   (* [16, 23, 39]*)
let (element, q4) = delete_min q4;;   (* 16 * [23, 39]*)
assert(element = 16);;
let (element, q4) = delete_min q4;;   (* 23 * [39]*)
assert(element = 23);;
let q4 = add 15 q4;;   (* [15, 39]*)
let q4 = add 28 q4;;   (* [15, 28, 39]*)
assert(is_empty q4 = false);;   (*[15, 28, 39]*)
let q4 = add 24 q4;;   (* [15, 24, 28, 39]*)
let (element, q4) = delete_min q4;;   (* 15 * [24, 28, 39]*)
assert(element = 15);;
let q4 = add 14 q4;;   (* [14, 24, 28, 39]*)

(* -------q5------ *)
let q5 = empty;;
let q5 = add 31 q5;;   (* [31]*)
let q5 = add 14 q5;;   (* [14, 31]*)
let q5 = add 25 q5;;   (* [14, 25, 31]*)
let q5 = add 19 q5;;   (* [14, 19, 25, 31]*)
let (element, q5) = delete_min q5;;   (* 14 * [19, 25, 31]*)
assert(element = 14);;
let q5 = add 3 q5;;   (* [3, 19, 25, 31]*)
let q5 = add 18 q5;;   (* [3, 18, 19, 25, 31]*)
let q5 = add 30 q5;;   (* [3, 18, 19, 25, 30, 31]*)
let q5 = add 15 q5;;   (* [3, 15, 18, 19, 25, 30, 31]*)
let (element, q5) = delete_min q5;;   (* 3 * [15, 18, 19, 25, 30, 31]*)
assert(element = 3);;
let q5 = add 0 q5;;   (* [0, 15, 18, 19, 25, 30, 31]*)
let q5 = add 10 q5;;   (* [0, 10, 15, 18, 19, 25, 30, 31]*)
let q5 = add 26 q5;;   (* [0, 10, 15, 18, 19, 25, 26, 30, 31]*)
let q5 = add 24 q5;;   (* [0, 10, 15, 18, 19, 24, 25, 26, 30, 31]*)
let (element, q5) = delete_min q5;;   (* 0 * [10, 15, 18, 19, 24, 25, 26, 30, 31]*)
assert(element = 0);;
let (element, q5) = delete_min q5;;   (* 10 * [15, 18, 19, 24, 25, 26, 30, 31]*)
assert(element = 10);;
let q5 = add 0 q5;;   (* [0, 15, 18, 19, 24, 25, 26, 30, 31]*)
let (element, q5) = delete_min q5;;   (* 0 * [15, 18, 19, 24, 25, 26, 30, 31]*)
assert(element = 0);;
let q5 = add 8 q5;;   (* [8, 15, 18, 19, 24, 25, 26, 30, 31]*)
let q5 = add 14 q5;;   (* [8, 14, 15, 18, 19, 24, 25, 26, 30, 31]*)
let q5 = add 22 q5;;   (* [8, 14, 15, 18, 19, 22, 24, 25, 26, 30, 31]*)
let q5 = add 30 q5;;   (* [8, 14, 15, 18, 19, 22, 24, 25, 26, 30, 30, 31]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[0, 1, 2, 4, 5, 7, 8, 9, 14, 14, 14, 15, 18, 19, 20, 20, 20, 21, 22, 23, 24, 24, 25, 26, 26, 28, 28, 30, 30, 30, 31, 35, 39]*)
let (element, q) = delete_min q;;   (* 0 * [1, 2, 4, 5, 7, 8, 9, 14, 14, 14, 15, 18, 19, 20, 20, 20, 21, 22, 23, 24, 24, 25, 26, 26, 28, 28, 30, 30, 30, 31, 35, 39, 39]*)
assert(element = 0);;
let (element, q) = delete_min q;;   (* 1 * [2, 4, 5, 7, 8, 9, 14, 14, 14, 15, 18, 19, 20, 20, 20, 21, 22, 23, 24, 24, 25, 26, 26, 28, 28, 30, 30, 30, 31, 35, 39, 39]*)
assert(element = 1);;
let (element, q) = delete_min q;;   (* 2 * [4, 5, 7, 8, 9, 14, 14, 14, 15, 18, 19, 20, 20, 20, 21, 22, 23, 24, 24, 25, 26, 26, 28, 28, 30, 30, 30, 31, 35, 39, 39]*)
assert(element = 2);;
let (element, q) = delete_min q;;   (* 4 * [5, 7, 8, 9, 14, 14, 14, 15, 18, 19, 20, 20, 20, 21, 22, 23, 24, 24, 25, 26, 26, 28, 28, 30, 30, 30, 31, 35, 39, 39]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 5 * [7, 8, 9, 14, 14, 14, 15, 18, 19, 20, 20, 20, 21, 22, 23, 24, 24, 25, 26, 26, 28, 28, 30, 30, 30, 31, 35, 39, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 7 * [8, 9, 14, 14, 14, 15, 18, 19, 20, 20, 20, 21, 22, 23, 24, 24, 25, 26, 26, 28, 28, 30, 30, 30, 31, 35, 39, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 8 * [9, 14, 14, 14, 15, 18, 19, 20, 20, 20, 21, 22, 23, 24, 24, 25, 26, 26, 28, 28, 30, 30, 30, 31, 35, 39, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 9 * [14, 14, 14, 15, 18, 19, 20, 20, 20, 21, 22, 23, 24, 24, 25, 26, 26, 28, 28, 30, 30, 30, 31, 35, 39, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 14 * [14, 14, 15, 18, 19, 20, 20, 20, 21, 22, 23, 24, 24, 25, 26, 26, 28, 28, 30, 30, 30, 31, 35, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [14, 15, 18, 19, 20, 20, 20, 21, 22, 23, 24, 24, 25, 26, 26, 28, 28, 30, 30, 30, 31, 35, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [15, 18, 19, 20, 20, 20, 21, 22, 23, 24, 24, 25, 26, 26, 28, 28, 30, 30, 30, 31, 35, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [18, 19, 20, 20, 20, 21, 22, 23, 24, 24, 25, 26, 26, 28, 28, 30, 30, 30, 31, 35, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 18 * [19, 20, 20, 20, 21, 22, 23, 24, 24, 25, 26, 26, 28, 28, 30, 30, 30, 31, 35, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [20, 20, 20, 21, 22, 23, 24, 24, 25, 26, 26, 28, 28, 30, 30, 30, 31, 35, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 21, 22, 23, 24, 24, 25, 26, 26, 28, 28, 30, 30, 30, 31, 35, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 21, 22, 23, 24, 24, 25, 26, 26, 28, 28, 30, 30, 30, 31, 35, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [21, 22, 23, 24, 24, 25, 26, 26, 28, 28, 30, 30, 30, 31, 35, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [22, 23, 24, 24, 25, 26, 26, 28, 28, 30, 30, 30, 31, 35, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [23, 24, 24, 25, 26, 26, 28, 28, 30, 30, 30, 31, 35, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [24, 24, 25, 26, 26, 28, 28, 30, 30, 30, 31, 35, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [24, 25, 26, 26, 28, 28, 30, 30, 30, 31, 35, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [25, 26, 26, 28, 28, 30, 30, 30, 31, 35, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [26, 26, 28, 28, 30, 30, 30, 31, 35, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [26, 28, 28, 30, 30, 30, 31, 35, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [28, 28, 30, 30, 30, 31, 35, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 28 * [28, 30, 30, 30, 31, 35, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [30, 30, 30, 31, 35, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 30 * [30, 30, 31, 35, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [30, 31, 35, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [31, 35, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [35, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 35 * [39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST77----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 29 q1;;   (* [29]*)
let (element, q1) = delete_min q1;;   (* 29 * []*)
assert(element = 29);;
assert(is_empty q1 = true);;   (*[]*)
let q1 = add 11 q1;;   (* [11]*)
let q1 = add 32 q1;;   (* [11, 32]*)
let q1 = add 13 q1;;   (* [11, 13, 32]*)
let q1 = add 4 q1;;   (* [4, 11, 13, 32]*)
let q1 = add 2 q1;;   (* [2, 4, 11, 13, 32]*)
let q1 = add 10 q1;;   (* [2, 4, 10, 11, 13, 32]*)
let (element, q1) = delete_min q1;;   (* 2 * [4, 10, 11, 13, 32]*)
assert(element = 2);;
let q1 = add 33 q1;;   (* [4, 10, 11, 13, 32, 33]*)
let q1 = add 38 q1;;   (* [4, 10, 11, 13, 32, 33, 38]*)
let q1 = add 10 q1;;   (* [4, 10, 10, 11, 13, 32, 33, 38]*)
let q1 = add 31 q1;;   (* [4, 10, 10, 11, 13, 31, 32, 33, 38]*)
let q1 = add 30 q1;;   (* [4, 10, 10, 11, 13, 30, 31, 32, 33, 38]*)
let q1 = add 14 q1;;   (* [4, 10, 10, 11, 13, 14, 30, 31, 32, 33, 38]*)
let q1 = add 11 q1;;   (* [4, 10, 10, 11, 11, 13, 14, 30, 31, 32, 33, 38]*)
let (element, q1) = delete_min q1;;   (* 4 * [10, 10, 11, 11, 13, 14, 30, 31, 32, 33, 38]*)
assert(element = 4);;
let q1 = add 1 q1;;   (* [1, 10, 10, 11, 11, 13, 14, 30, 31, 32, 33, 38]*)
let (element, q1) = delete_min q1;;   (* 1 * [10, 10, 11, 11, 13, 14, 30, 31, 32, 33, 38]*)
assert(element = 1);;
let q1 = add 27 q1;;   (* [10, 10, 11, 11, 13, 14, 27, 30, 31, 32, 33, 38]*)
let q1 = add 0 q1;;   (* [0, 10, 10, 11, 11, 13, 14, 27, 30, 31, 32, 33, 38]*)
let q1 = add 1 q1;;   (* [0, 1, 10, 10, 11, 11, 13, 14, 27, 30, 31, 32, 33, 38]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 5 q2;;   (* [5]*)
let (element, q2) = delete_min q2;;   (* 5 * []*)
assert(element = 5);;
let q2 = add 36 q2;;   (* [36]*)
let q2 = add 17 q2;;   (* [17, 36]*)
let q2 = add 3 q2;;   (* [3, 17, 36]*)
let q2 = add 29 q2;;   (* [3, 17, 29, 36]*)
let q2 = add 27 q2;;   (* [3, 17, 27, 29, 36]*)
assert(is_empty q2 = false);;   (*[3, 17, 27, 29, 36]*)
let q2 = add 18 q2;;   (* [3, 17, 18, 27, 29, 36]*)
let q2 = add 35 q2;;   (* [3, 17, 18, 27, 29, 35, 36]*)
let q2 = add 10 q2;;   (* [3, 10, 17, 18, 27, 29, 35, 36]*)
let q2 = add 20 q2;;   (* [3, 10, 17, 18, 20, 27, 29, 35, 36]*)
let q2 = add 23 q2;;   (* [3, 10, 17, 18, 20, 23, 27, 29, 35, 36]*)
let (element, q2) = delete_min q2;;   (* 3 * [10, 17, 18, 20, 23, 27, 29, 35, 36]*)
assert(element = 3);;
let q2 = add 23 q2;;   (* [10, 17, 18, 20, 23, 23, 27, 29, 35, 36]*)
assert(is_empty q2 = false);;   (*[10, 17, 18, 20, 23, 23, 27, 29, 35, 36]*)
let q2 = add 21 q2;;   (* [10, 17, 18, 20, 21, 23, 23, 27, 29, 35, 36]*)
let q2 = add 31 q2;;   (* [10, 17, 18, 20, 21, 23, 23, 27, 29, 31, 35, 36]*)
let q2 = add 17 q2;;   (* [10, 17, 17, 18, 20, 21, 23, 23, 27, 29, 31, 35, 36]*)
assert(is_empty q2 = false);;   (*[10, 17, 17, 18, 20, 21, 23, 23, 27, 29, 31, 35, 36]*)
let q2 = add 18 q2;;   (* [10, 17, 17, 18, 18, 20, 21, 23, 23, 27, 29, 31, 35, 36]*)
let q2 = add 26 q2;;   (* [10, 17, 17, 18, 18, 20, 21, 23, 23, 26, 27, 29, 31, 35, 36]*)
let (element, q2) = delete_min q2;;   (* 10 * [17, 17, 18, 18, 20, 21, 23, 23, 26, 27, 29, 31, 35, 36]*)
assert(element = 10);;

(* -------q3------ *)
let q3 = empty;;
let q3 = add 32 q3;;   (* [32]*)
assert(is_empty q3 = false);;   (*[32]*)
let (element, q3) = delete_min q3;;   (* 32 * []*)
assert(element = 32);;
let q3 = add 16 q3;;   (* [16]*)
let (element, q3) = delete_min q3;;   (* 16 * []*)
assert(element = 16);;
let q3 = add 16 q3;;   (* [16]*)
let q3 = add 36 q3;;   (* [16, 36]*)
assert(is_empty q3 = false);;   (*[16, 36]*)
let q3 = add 22 q3;;   (* [16, 22, 36]*)
let (element, q3) = delete_min q3;;   (* 16 * [22, 36]*)
assert(element = 16);;
let (element, q3) = delete_min q3;;   (* 22 * [36]*)
assert(element = 22);;
assert(is_empty q3 = false);;   (*[36]*)
let q3 = add 5 q3;;   (* [5, 36]*)
let (element, q3) = delete_min q3;;   (* 5 * [36]*)
assert(element = 5);;
let q3 = add 18 q3;;   (* [18, 36]*)
let q3 = add 22 q3;;   (* [18, 22, 36]*)
let (element, q3) = delete_min q3;;   (* 18 * [22, 36]*)
assert(element = 18);;
let q3 = add 15 q3;;   (* [15, 22, 36]*)
let (element, q3) = delete_min q3;;   (* 15 * [22, 36]*)
assert(element = 15);;
let q3 = add 30 q3;;   (* [22, 30, 36]*)
let q3 = add 35 q3;;   (* [22, 30, 35, 36]*)
let q3 = add 34 q3;;   (* [22, 30, 34, 35, 36]*)
let q3 = add 19 q3;;   (* [19, 22, 30, 34, 35, 36]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 32 q4;;   (* [32]*)
let (element, q4) = delete_min q4;;   (* 32 * []*)
assert(element = 32);;
let q4 = add 17 q4;;   (* [17]*)
let q4 = add 29 q4;;   (* [17, 29]*)
let (element, q4) = delete_min q4;;   (* 17 * [29]*)
assert(element = 17);;
let (element, q4) = delete_min q4;;   (* 29 * []*)
assert(element = 29);;
assert(is_empty q4 = true);;   (*[]*)
let q4 = add 11 q4;;   (* [11]*)
let q4 = add 11 q4;;   (* [11, 11]*)
let (element, q4) = delete_min q4;;   (* 11 * [11]*)
assert(element = 11);;
assert(is_empty q4 = false);;   (*[11]*)
let (element, q4) = delete_min q4;;   (* 11 * []*)
assert(element = 11);;
let q4 = add 7 q4;;   (* [7]*)
let (element, q4) = delete_min q4;;   (* 7 * []*)
assert(element = 7);;
let q4 = add 13 q4;;   (* [13]*)
let q4 = add 9 q4;;   (* [9, 13]*)
let q4 = add 9 q4;;   (* [9, 9, 13]*)
let q4 = add 2 q4;;   (* [2, 9, 9, 13]*)
let q4 = add 3 q4;;   (* [2, 3, 9, 9, 13]*)
let q4 = add 34 q4;;   (* [2, 3, 9, 9, 13, 34]*)
let q4 = add 29 q4;;   (* [2, 3, 9, 9, 13, 29, 34]*)
let (element, q4) = delete_min q4;;   (* 2 * [3, 9, 9, 13, 29, 34]*)
assert(element = 2);;
let q4 = add 15 q4;;   (* [3, 9, 9, 13, 15, 29, 34]*)

(* -------q5------ *)
let q5 = empty;;
let q5 = add 7 q5;;   (* [7]*)
let q5 = add 15 q5;;   (* [7, 15]*)
let q5 = add 23 q5;;   (* [7, 15, 23]*)
let q5 = add 32 q5;;   (* [7, 15, 23, 32]*)
let q5 = add 18 q5;;   (* [7, 15, 18, 23, 32]*)
let q5 = add 16 q5;;   (* [7, 15, 16, 18, 23, 32]*)
let q5 = add 19 q5;;   (* [7, 15, 16, 18, 19, 23, 32]*)
let q5 = add 6 q5;;   (* [6, 7, 15, 16, 18, 19, 23, 32]*)
let q5 = add 35 q5;;   (* [6, 7, 15, 16, 18, 19, 23, 32, 35]*)
let q5 = add 24 q5;;   (* [6, 7, 15, 16, 18, 19, 23, 24, 32, 35]*)
let q5 = add 24 q5;;   (* [6, 7, 15, 16, 18, 19, 23, 24, 24, 32, 35]*)
let q5 = add 14 q5;;   (* [6, 7, 14, 15, 16, 18, 19, 23, 24, 24, 32, 35]*)
let q5 = add 25 q5;;   (* [6, 7, 14, 15, 16, 18, 19, 23, 24, 24, 25, 32, 35]*)
let q5 = add 29 q5;;   (* [6, 7, 14, 15, 16, 18, 19, 23, 24, 24, 25, 29, 32, 35]*)
assert(is_empty q5 = false);;   (*[6, 7, 14, 15, 16, 18, 19, 23, 24, 24, 25, 29, 32, 35]*)
let q5 = add 32 q5;;   (* [6, 7, 14, 15, 16, 18, 19, 23, 24, 24, 25, 29, 32, 32, 35]*)
let q5 = add 13 q5;;   (* [6, 7, 13, 14, 15, 16, 18, 19, 23, 24, 24, 25, 29, 32, 32, 35]*)
let q5 = add 19 q5;;   (* [6, 7, 13, 14, 15, 16, 18, 19, 19, 23, 24, 24, 25, 29, 32, 32, 35]*)
let q5 = add 24 q5;;   (* [6, 7, 13, 14, 15, 16, 18, 19, 19, 23, 24, 24, 24, 25, 29, 32, 32, 35]*)
let (element, q5) = delete_min q5;;   (* 6 * [7, 13, 14, 15, 16, 18, 19, 19, 23, 24, 24, 24, 25, 29, 32, 32, 35]*)
assert(element = 6);;
let q5 = add 27 q5;;   (* [7, 13, 14, 15, 16, 18, 19, 19, 23, 24, 24, 24, 25, 27, 29, 32, 32, 35]*)
let q5 = add 22 q5;;   (* [7, 13, 14, 15, 16, 18, 19, 19, 22, 23, 24, 24, 24, 25, 27, 29, 32, 32, 35]*)
let q5 = add 6 q5;;   (* [6, 7, 13, 14, 15, 16, 18, 19, 19, 22, 23, 24, 24, 24, 25, 27, 29, 32, 32, 35]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[0, 1, 3, 6, 7, 9, 9, 10, 10, 11, 11, 13, 13, 13, 14, 14, 15, 15, 16, 17, 17, 18, 18, 18, 19, 19, 19, 20, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36]*)
let (element, q) = delete_min q;;   (* 0 * [1, 3, 6, 7, 9, 9, 10, 10, 11, 11, 13, 13, 13, 14, 14, 15, 15, 16, 17, 17, 18, 18, 18, 19, 19, 19, 20, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 0);;
let (element, q) = delete_min q;;   (* 1 * [3, 6, 7, 9, 9, 10, 10, 11, 11, 13, 13, 13, 14, 14, 15, 15, 16, 17, 17, 18, 18, 18, 19, 19, 19, 20, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 1);;
let (element, q) = delete_min q;;   (* 3 * [6, 7, 9, 9, 10, 10, 11, 11, 13, 13, 13, 14, 14, 15, 15, 16, 17, 17, 18, 18, 18, 19, 19, 19, 20, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 3);;
let (element, q) = delete_min q;;   (* 6 * [7, 9, 9, 10, 10, 11, 11, 13, 13, 13, 14, 14, 15, 15, 16, 17, 17, 18, 18, 18, 19, 19, 19, 20, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 7 * [9, 9, 10, 10, 11, 11, 13, 13, 13, 14, 14, 15, 15, 16, 17, 17, 18, 18, 18, 19, 19, 19, 20, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 9 * [9, 10, 10, 11, 11, 13, 13, 13, 14, 14, 15, 15, 16, 17, 17, 18, 18, 18, 19, 19, 19, 20, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 9 * [10, 10, 11, 11, 13, 13, 13, 14, 14, 15, 15, 16, 17, 17, 18, 18, 18, 19, 19, 19, 20, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 10 * [10, 11, 11, 13, 13, 13, 14, 14, 15, 15, 16, 17, 17, 18, 18, 18, 19, 19, 19, 20, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 10 * [11, 11, 13, 13, 13, 14, 14, 15, 15, 16, 17, 17, 18, 18, 18, 19, 19, 19, 20, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 11 * [11, 13, 13, 13, 14, 14, 15, 15, 16, 17, 17, 18, 18, 18, 19, 19, 19, 20, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 11 * [13, 13, 13, 14, 14, 15, 15, 16, 17, 17, 18, 18, 18, 19, 19, 19, 20, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 13 * [13, 13, 14, 14, 15, 15, 16, 17, 17, 18, 18, 18, 19, 19, 19, 20, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 13 * [13, 14, 14, 15, 15, 16, 17, 17, 18, 18, 18, 19, 19, 19, 20, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 13 * [14, 14, 15, 15, 16, 17, 17, 18, 18, 18, 19, 19, 19, 20, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 14 * [14, 15, 15, 16, 17, 17, 18, 18, 18, 19, 19, 19, 20, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [15, 15, 16, 17, 17, 18, 18, 18, 19, 19, 19, 20, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [15, 16, 17, 17, 18, 18, 18, 19, 19, 19, 20, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [16, 17, 17, 18, 18, 18, 19, 19, 19, 20, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [17, 17, 18, 18, 18, 19, 19, 19, 20, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 17 * [17, 18, 18, 18, 19, 19, 19, 20, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [18, 18, 18, 19, 19, 19, 20, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [18, 18, 19, 19, 19, 20, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [18, 19, 19, 19, 20, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [19, 19, 19, 20, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [19, 19, 20, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [19, 20, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [20, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [22, 22, 23, 23, 23, 24, 24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [22, 23, 23, 23, 24, 24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [23, 23, 23, 24, 24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [23, 23, 24, 24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [23, 24, 24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [24, 24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [24, 24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [24, 25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [25, 26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [26, 27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [27, 27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [29, 29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 29 * [29, 29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [29, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [30, 31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [34, 34, 35, 35, 35, 36, 36, 38]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 35, 35, 36, 36, 38]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 35, 36, 36, 38]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 36, 36, 38]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 36, 38]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 38]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 38]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [38]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 38 * []*)
assert(element = 38);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST78----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 37 q1;;   (* [37]*)
let q1 = add 36 q1;;   (* [36, 37]*)
let q1 = add 30 q1;;   (* [30, 36, 37]*)
let q1 = add 0 q1;;   (* [0, 30, 36, 37]*)
let q1 = add 32 q1;;   (* [0, 30, 32, 36, 37]*)
let q1 = add 26 q1;;   (* [0, 26, 30, 32, 36, 37]*)
let q1 = add 15 q1;;   (* [0, 15, 26, 30, 32, 36, 37]*)
let q1 = add 21 q1;;   (* [0, 15, 21, 26, 30, 32, 36, 37]*)
let q1 = add 1 q1;;   (* [0, 1, 15, 21, 26, 30, 32, 36, 37]*)
let q1 = add 26 q1;;   (* [0, 1, 15, 21, 26, 26, 30, 32, 36, 37]*)
let q1 = add 39 q1;;   (* [0, 1, 15, 21, 26, 26, 30, 32, 36, 37, 39]*)
let q1 = add 6 q1;;   (* [0, 1, 6, 15, 21, 26, 26, 30, 32, 36, 37, 39]*)
let q1 = add 1 q1;;   (* [0, 1, 1, 6, 15, 21, 26, 26, 30, 32, 36, 37, 39]*)
let q1 = add 22 q1;;   (* [0, 1, 1, 6, 15, 21, 22, 26, 26, 30, 32, 36, 37, 39]*)
let q1 = add 36 q1;;   (* [0, 1, 1, 6, 15, 21, 22, 26, 26, 30, 32, 36, 36, 37, 39]*)
let (element, q1) = delete_min q1;;   (* 0 * [1, 1, 6, 15, 21, 22, 26, 26, 30, 32, 36, 36, 37, 39]*)
assert(element = 0);;
let (element, q1) = delete_min q1;;   (* 1 * [1, 6, 15, 21, 22, 26, 26, 30, 32, 36, 36, 37, 39]*)
assert(element = 1);;
let (element, q1) = delete_min q1;;   (* 1 * [6, 15, 21, 22, 26, 26, 30, 32, 36, 36, 37, 39]*)
assert(element = 1);;
let (element, q1) = delete_min q1;;   (* 6 * [15, 21, 22, 26, 26, 30, 32, 36, 36, 37, 39]*)
assert(element = 6);;
let q1 = add 19 q1;;   (* [15, 19, 21, 22, 26, 26, 30, 32, 36, 36, 37, 39]*)
assert(is_empty q1 = false);;   (*[15, 19, 21, 22, 26, 26, 30, 32, 36, 36, 37, 39]*)
let q1 = add 20 q1;;   (* [15, 19, 20, 21, 22, 26, 26, 30, 32, 36, 36, 37, 39]*)
let q1 = add 17 q1;;   (* [15, 17, 19, 20, 21, 22, 26, 26, 30, 32, 36, 36, 37, 39]*)
let (element, q1) = delete_min q1;;   (* 15 * [17, 19, 20, 21, 22, 26, 26, 30, 32, 36, 36, 37, 39]*)
assert(element = 15);;

(* -------q2------ *)
let q2 = empty;;
let q2 = add 28 q2;;   (* [28]*)
let q2 = add 23 q2;;   (* [23, 28]*)
let q2 = add 38 q2;;   (* [23, 28, 38]*)
let q2 = add 20 q2;;   (* [20, 23, 28, 38]*)
let (element, q2) = delete_min q2;;   (* 20 * [23, 28, 38]*)
assert(element = 20);;
let q2 = add 22 q2;;   (* [22, 23, 28, 38]*)
let q2 = add 14 q2;;   (* [14, 22, 23, 28, 38]*)
let q2 = add 35 q2;;   (* [14, 22, 23, 28, 35, 38]*)
let (element, q2) = delete_min q2;;   (* 14 * [22, 23, 28, 35, 38]*)
assert(element = 14);;
let q2 = add 31 q2;;   (* [22, 23, 28, 31, 35, 38]*)
let (element, q2) = delete_min q2;;   (* 22 * [23, 28, 31, 35, 38]*)
assert(element = 22);;
let q2 = add 26 q2;;   (* [23, 26, 28, 31, 35, 38]*)
let q2 = add 19 q2;;   (* [19, 23, 26, 28, 31, 35, 38]*)
let (element, q2) = delete_min q2;;   (* 19 * [23, 26, 28, 31, 35, 38]*)
assert(element = 19);;
let (element, q2) = delete_min q2;;   (* 23 * [26, 28, 31, 35, 38]*)
assert(element = 23);;
let q2 = add 28 q2;;   (* [26, 28, 28, 31, 35, 38]*)
let q2 = add 35 q2;;   (* [26, 28, 28, 31, 35, 35, 38]*)
let (element, q2) = delete_min q2;;   (* 26 * [28, 28, 31, 35, 35, 38]*)
assert(element = 26);;
let (element, q2) = delete_min q2;;   (* 28 * [28, 31, 35, 35, 38]*)
assert(element = 28);;
let q2 = add 18 q2;;   (* [18, 28, 31, 35, 35, 38]*)
assert(is_empty q2 = false);;   (*[18, 28, 31, 35, 35, 38]*)
let q2 = add 20 q2;;   (* [18, 20, 28, 31, 35, 35, 38]*)
let q2 = add 18 q2;;   (* [18, 18, 20, 28, 31, 35, 35, 38]*)
let q2 = add 4 q2;;   (* [4, 18, 18, 20, 28, 31, 35, 35, 38]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 37 q3;;   (* [37]*)
let q3 = add 15 q3;;   (* [15, 37]*)
let q3 = add 31 q3;;   (* [15, 31, 37]*)
let (element, q3) = delete_min q3;;   (* 15 * [31, 37]*)
assert(element = 15);;
assert(is_empty q3 = false);;   (*[31, 37]*)
let q3 = add 26 q3;;   (* [26, 31, 37]*)
let q3 = add 15 q3;;   (* [15, 26, 31, 37]*)
let q3 = add 35 q3;;   (* [15, 26, 31, 35, 37]*)
let (element, q3) = delete_min q3;;   (* 15 * [26, 31, 35, 37]*)
assert(element = 15);;
let q3 = add 9 q3;;   (* [9, 26, 31, 35, 37]*)
let (element, q3) = delete_min q3;;   (* 9 * [26, 31, 35, 37]*)
assert(element = 9);;
let q3 = add 31 q3;;   (* [26, 31, 31, 35, 37]*)
let q3 = add 32 q3;;   (* [26, 31, 31, 32, 35, 37]*)
let q3 = add 31 q3;;   (* [26, 31, 31, 31, 32, 35, 37]*)
let (element, q3) = delete_min q3;;   (* 26 * [31, 31, 31, 32, 35, 37]*)
assert(element = 26);;
let q3 = add 15 q3;;   (* [15, 31, 31, 31, 32, 35, 37]*)
let (element, q3) = delete_min q3;;   (* 15 * [31, 31, 31, 32, 35, 37]*)
assert(element = 15);;
let q3 = add 32 q3;;   (* [31, 31, 31, 32, 32, 35, 37]*)
let (element, q3) = delete_min q3;;   (* 31 * [31, 31, 32, 32, 35, 37]*)
assert(element = 31);;
let q3 = add 19 q3;;   (* [19, 31, 31, 32, 32, 35, 37]*)
let q3 = add 24 q3;;   (* [19, 24, 31, 31, 32, 32, 35, 37]*)
assert(is_empty q3 = false);;   (*[19, 24, 31, 31, 32, 32, 35, 37]*)
let (element, q3) = delete_min q3;;   (* 19 * [24, 31, 31, 32, 32, 35, 37]*)
assert(element = 19);;
let q3 = add 2 q3;;   (* [2, 24, 31, 31, 32, 32, 35, 37]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 12 q4;;   (* [12]*)
let (element, q4) = delete_min q4;;   (* 12 * []*)
assert(element = 12);;
let q4 = add 9 q4;;   (* [9]*)
let q4 = add 11 q4;;   (* [9, 11]*)
assert(is_empty q4 = false);;   (*[9, 11]*)
let (element, q4) = delete_min q4;;   (* 9 * [11]*)
assert(element = 9);;
assert(is_empty q4 = false);;   (*[11]*)
let q4 = add 2 q4;;   (* [2, 11]*)
let q4 = add 28 q4;;   (* [2, 11, 28]*)
let (element, q4) = delete_min q4;;   (* 2 * [11, 28]*)
assert(element = 2);;
let q4 = add 31 q4;;   (* [11, 28, 31]*)
let (element, q4) = delete_min q4;;   (* 11 * [28, 31]*)
assert(element = 11);;
let q4 = add 35 q4;;   (* [28, 31, 35]*)
let (element, q4) = delete_min q4;;   (* 28 * [31, 35]*)
assert(element = 28);;
let (element, q4) = delete_min q4;;   (* 31 * [35]*)
assert(element = 31);;
let q4 = add 8 q4;;   (* [8, 35]*)
let (element, q4) = delete_min q4;;   (* 8 * [35]*)
assert(element = 8);;
let q4 = add 36 q4;;   (* [35, 36]*)
let (element, q4) = delete_min q4;;   (* 35 * [36]*)
assert(element = 35);;
let q4 = add 36 q4;;   (* [36, 36]*)
assert(is_empty q4 = false);;   (*[36, 36]*)
let q4 = add 19 q4;;   (* [19, 36, 36]*)
let q4 = add 16 q4;;   (* [16, 19, 36, 36]*)
let q4 = add 32 q4;;   (* [16, 19, 32, 36, 36]*)

(* -------q5------ *)
let q5 = empty;;
let q5 = add 5 q5;;   (* [5]*)
let q5 = add 31 q5;;   (* [5, 31]*)
assert(is_empty q5 = false);;   (*[5, 31]*)
let (element, q5) = delete_min q5;;   (* 5 * [31]*)
assert(element = 5);;
let q5 = add 8 q5;;   (* [8, 31]*)
let (element, q5) = delete_min q5;;   (* 8 * [31]*)
assert(element = 8);;
let (element, q5) = delete_min q5;;   (* 31 * []*)
assert(element = 31);;
let q5 = add 37 q5;;   (* [37]*)
let (element, q5) = delete_min q5;;   (* 37 * []*)
assert(element = 37);;
let q5 = add 11 q5;;   (* [11]*)
let (element, q5) = delete_min q5;;   (* 11 * []*)
assert(element = 11);;
let q5 = add 29 q5;;   (* [29]*)
let (element, q5) = delete_min q5;;   (* 29 * []*)
assert(element = 29);;
let q5 = add 11 q5;;   (* [11]*)
let q5 = add 30 q5;;   (* [11, 30]*)
let q5 = add 33 q5;;   (* [11, 30, 33]*)
let (element, q5) = delete_min q5;;   (* 11 * [30, 33]*)
assert(element = 11);;
let q5 = add 26 q5;;   (* [26, 30, 33]*)
assert(is_empty q5 = false);;   (*[26, 30, 33]*)
let q5 = add 16 q5;;   (* [16, 26, 30, 33]*)
let q5 = add 34 q5;;   (* [16, 26, 30, 33, 34]*)
let (element, q5) = delete_min q5;;   (* 16 * [26, 30, 33, 34]*)
assert(element = 16);;
let q5 = add 22 q5;;   (* [22, 26, 30, 33, 34]*)
let q5 = add 26 q5;;   (* [22, 26, 26, 30, 33, 34]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[2, 4, 16, 17, 18, 18, 19, 19, 20, 20, 21, 22, 22, 24, 26, 26, 26, 26, 28, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 34, 35, 35, 35, 36, 36, 36, 36, 37, 37, 38]*)
let (element, q) = delete_min q;;   (* 2 * [4, 16, 17, 18, 18, 19, 19, 20, 20, 21, 22, 22, 24, 26, 26, 26, 26, 28, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 34, 35, 35, 35, 36, 36, 36, 36, 37, 37, 38, 39]*)
assert(element = 2);;
let (element, q) = delete_min q;;   (* 4 * [16, 17, 18, 18, 19, 19, 20, 20, 21, 22, 22, 24, 26, 26, 26, 26, 28, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 34, 35, 35, 35, 36, 36, 36, 36, 37, 37, 38, 39]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 16 * [17, 18, 18, 19, 19, 20, 20, 21, 22, 22, 24, 26, 26, 26, 26, 28, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 34, 35, 35, 35, 36, 36, 36, 36, 37, 37, 38, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 17 * [18, 18, 19, 19, 20, 20, 21, 22, 22, 24, 26, 26, 26, 26, 28, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 34, 35, 35, 35, 36, 36, 36, 36, 37, 37, 38, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [18, 19, 19, 20, 20, 21, 22, 22, 24, 26, 26, 26, 26, 28, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 34, 35, 35, 35, 36, 36, 36, 36, 37, 37, 38, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [19, 19, 20, 20, 21, 22, 22, 24, 26, 26, 26, 26, 28, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 34, 35, 35, 35, 36, 36, 36, 36, 37, 37, 38, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [19, 20, 20, 21, 22, 22, 24, 26, 26, 26, 26, 28, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 34, 35, 35, 35, 36, 36, 36, 36, 37, 37, 38, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [20, 20, 21, 22, 22, 24, 26, 26, 26, 26, 28, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 34, 35, 35, 35, 36, 36, 36, 36, 37, 37, 38, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [20, 21, 22, 22, 24, 26, 26, 26, 26, 28, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 34, 35, 35, 35, 36, 36, 36, 36, 37, 37, 38, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [21, 22, 22, 24, 26, 26, 26, 26, 28, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 34, 35, 35, 35, 36, 36, 36, 36, 37, 37, 38, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [22, 22, 24, 26, 26, 26, 26, 28, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 34, 35, 35, 35, 36, 36, 36, 36, 37, 37, 38, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [22, 24, 26, 26, 26, 26, 28, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 34, 35, 35, 35, 36, 36, 36, 36, 37, 37, 38, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [24, 26, 26, 26, 26, 28, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 34, 35, 35, 35, 36, 36, 36, 36, 37, 37, 38, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 24 * [26, 26, 26, 26, 28, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 34, 35, 35, 35, 36, 36, 36, 36, 37, 37, 38, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 26 * [26, 26, 26, 28, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 34, 35, 35, 35, 36, 36, 36, 36, 37, 37, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [26, 26, 28, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 34, 35, 35, 35, 36, 36, 36, 36, 37, 37, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [26, 28, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 34, 35, 35, 35, 36, 36, 36, 36, 37, 37, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [28, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 34, 35, 35, 35, 36, 36, 36, 36, 37, 37, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 28 * [30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 34, 35, 35, 35, 36, 36, 36, 36, 37, 37, 38, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 30 * [30, 31, 31, 31, 32, 32, 32, 32, 33, 34, 35, 35, 35, 36, 36, 36, 36, 37, 37, 38, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 31, 32, 32, 32, 32, 33, 34, 35, 35, 35, 36, 36, 36, 36, 37, 37, 38, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 31, 32, 32, 32, 32, 33, 34, 35, 35, 35, 36, 36, 36, 36, 37, 37, 38, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [31, 32, 32, 32, 32, 33, 34, 35, 35, 35, 36, 36, 36, 36, 37, 37, 38, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 32, 32, 33, 34, 35, 35, 35, 36, 36, 36, 36, 37, 37, 38, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 32, 33, 34, 35, 35, 35, 36, 36, 36, 36, 37, 37, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 33, 34, 35, 35, 35, 36, 36, 36, 36, 37, 37, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 34, 35, 35, 35, 36, 36, 36, 36, 37, 37, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 34, 35, 35, 35, 36, 36, 36, 36, 37, 37, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [34, 35, 35, 35, 36, 36, 36, 36, 37, 37, 38, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 35, 36, 36, 36, 36, 37, 37, 38, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 36, 36, 36, 36, 37, 37, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 36, 36, 36, 37, 37, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 36, 36, 37, 37, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 36, 37, 37, 38, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 37, 37, 38, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 37, 38, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 37, 38, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [37, 38, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [38, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST79----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 32 q1;;   (* [32]*)
let q1 = add 23 q1;;   (* [23, 32]*)
let (element, q1) = delete_min q1;;   (* 23 * [32]*)
assert(element = 23);;
let q1 = add 33 q1;;   (* [32, 33]*)
let q1 = add 21 q1;;   (* [21, 32, 33]*)
let q1 = add 11 q1;;   (* [11, 21, 32, 33]*)
let q1 = add 1 q1;;   (* [1, 11, 21, 32, 33]*)
let q1 = add 16 q1;;   (* [1, 11, 16, 21, 32, 33]*)
let (element, q1) = delete_min q1;;   (* 1 * [11, 16, 21, 32, 33]*)
assert(element = 1);;
let q1 = add 22 q1;;   (* [11, 16, 21, 22, 32, 33]*)
let q1 = add 16 q1;;   (* [11, 16, 16, 21, 22, 32, 33]*)
let q1 = add 34 q1;;   (* [11, 16, 16, 21, 22, 32, 33, 34]*)
let q1 = add 8 q1;;   (* [8, 11, 16, 16, 21, 22, 32, 33, 34]*)
let q1 = add 20 q1;;   (* [8, 11, 16, 16, 20, 21, 22, 32, 33, 34]*)
let q1 = add 8 q1;;   (* [8, 8, 11, 16, 16, 20, 21, 22, 32, 33, 34]*)
let (element, q1) = delete_min q1;;   (* 8 * [8, 11, 16, 16, 20, 21, 22, 32, 33, 34]*)
assert(element = 8);;
assert(is_empty q1 = false);;   (*[8, 11, 16, 16, 20, 21, 22, 32, 33, 34]*)
let q1 = add 38 q1;;   (* [8, 11, 16, 16, 20, 21, 22, 32, 33, 34, 38]*)
assert(is_empty q1 = false);;   (*[8, 11, 16, 16, 20, 21, 22, 32, 33, 34, 38]*)
let q1 = add 7 q1;;   (* [7, 8, 11, 16, 16, 20, 21, 22, 32, 33, 34, 38]*)
let q1 = add 28 q1;;   (* [7, 8, 11, 16, 16, 20, 21, 22, 28, 32, 33, 34, 38]*)
let q1 = add 3 q1;;   (* [3, 7, 8, 11, 16, 16, 20, 21, 22, 28, 32, 33, 34, 38]*)
let q1 = add 21 q1;;   (* [3, 7, 8, 11, 16, 16, 20, 21, 21, 22, 28, 32, 33, 34, 38]*)
let (element, q1) = delete_min q1;;   (* 3 * [7, 8, 11, 16, 16, 20, 21, 21, 22, 28, 32, 33, 34, 38]*)
assert(element = 3);;
let q1 = add 19 q1;;   (* [7, 8, 11, 16, 16, 19, 20, 21, 21, 22, 28, 32, 33, 34, 38]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 36 q2;;   (* [36]*)
let q2 = add 17 q2;;   (* [17, 36]*)
let q2 = add 21 q2;;   (* [17, 21, 36]*)
assert(is_empty q2 = false);;   (*[17, 21, 36]*)
let q2 = add 35 q2;;   (* [17, 21, 35, 36]*)
let q2 = add 37 q2;;   (* [17, 21, 35, 36, 37]*)
let (element, q2) = delete_min q2;;   (* 17 * [21, 35, 36, 37]*)
assert(element = 17);;
assert(is_empty q2 = false);;   (*[21, 35, 36, 37]*)
let q2 = add 13 q2;;   (* [13, 21, 35, 36, 37]*)
assert(is_empty q2 = false);;   (*[13, 21, 35, 36, 37]*)
let q2 = add 3 q2;;   (* [3, 13, 21, 35, 36, 37]*)
let q2 = add 5 q2;;   (* [3, 5, 13, 21, 35, 36, 37]*)
assert(is_empty q2 = false);;   (*[3, 5, 13, 21, 35, 36, 37]*)
let q2 = add 22 q2;;   (* [3, 5, 13, 21, 22, 35, 36, 37]*)
let q2 = add 31 q2;;   (* [3, 5, 13, 21, 22, 31, 35, 36, 37]*)
let q2 = add 38 q2;;   (* [3, 5, 13, 21, 22, 31, 35, 36, 37, 38]*)
assert(is_empty q2 = false);;   (*[3, 5, 13, 21, 22, 31, 35, 36, 37, 38]*)
let q2 = add 28 q2;;   (* [3, 5, 13, 21, 22, 28, 31, 35, 36, 37, 38]*)
let q2 = add 14 q2;;   (* [3, 5, 13, 14, 21, 22, 28, 31, 35, 36, 37, 38]*)
let q2 = add 20 q2;;   (* [3, 5, 13, 14, 20, 21, 22, 28, 31, 35, 36, 37, 38]*)
let (element, q2) = delete_min q2;;   (* 3 * [5, 13, 14, 20, 21, 22, 28, 31, 35, 36, 37, 38]*)
assert(element = 3);;
let q2 = add 35 q2;;   (* [5, 13, 14, 20, 21, 22, 28, 31, 35, 35, 36, 37, 38]*)
let (element, q2) = delete_min q2;;   (* 5 * [13, 14, 20, 21, 22, 28, 31, 35, 35, 36, 37, 38]*)
assert(element = 5);;
let (element, q2) = delete_min q2;;   (* 13 * [14, 20, 21, 22, 28, 31, 35, 35, 36, 37, 38]*)
assert(element = 13);;
let q2 = add 19 q2;;   (* [14, 19, 20, 21, 22, 28, 31, 35, 35, 36, 37, 38]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 36 q3;;   (* [36]*)
let q3 = add 15 q3;;   (* [15, 36]*)
let q3 = add 15 q3;;   (* [15, 15, 36]*)
let q3 = add 16 q3;;   (* [15, 15, 16, 36]*)
let (element, q3) = delete_min q3;;   (* 15 * [15, 16, 36]*)
assert(element = 15);;
let q3 = add 5 q3;;   (* [5, 15, 16, 36]*)
let q3 = add 31 q3;;   (* [5, 15, 16, 31, 36]*)
let (element, q3) = delete_min q3;;   (* 5 * [15, 16, 31, 36]*)
assert(element = 5);;
let q3 = add 11 q3;;   (* [11, 15, 16, 31, 36]*)
let (element, q3) = delete_min q3;;   (* 11 * [15, 16, 31, 36]*)
assert(element = 11);;
let q3 = add 8 q3;;   (* [8, 15, 16, 31, 36]*)
let q3 = add 15 q3;;   (* [8, 15, 15, 16, 31, 36]*)
let q3 = add 15 q3;;   (* [8, 15, 15, 15, 16, 31, 36]*)
let (element, q3) = delete_min q3;;   (* 8 * [15, 15, 15, 16, 31, 36]*)
assert(element = 8);;
let q3 = add 7 q3;;   (* [7, 15, 15, 15, 16, 31, 36]*)
let q3 = add 8 q3;;   (* [7, 8, 15, 15, 15, 16, 31, 36]*)
assert(is_empty q3 = false);;   (*[7, 8, 15, 15, 15, 16, 31, 36]*)
assert(is_empty q3 = false);;   (*[7, 8, 15, 15, 15, 16, 31, 36]*)
let (element, q3) = delete_min q3;;   (* 7 * [8, 15, 15, 15, 16, 31, 36]*)
assert(element = 7);;
let (element, q3) = delete_min q3;;   (* 8 * [15, 15, 15, 16, 31, 36]*)
assert(element = 8);;
let q3 = add 2 q3;;   (* [2, 15, 15, 15, 16, 31, 36]*)
let (element, q3) = delete_min q3;;   (* 2 * [15, 15, 15, 16, 31, 36]*)
assert(element = 2);;
let q3 = add 33 q3;;   (* [15, 15, 15, 16, 31, 33, 36]*)
let q3 = add 15 q3;;   (* [15, 15, 15, 15, 16, 31, 33, 36]*)
let q3 = add 29 q3;;   (* [15, 15, 15, 15, 16, 29, 31, 33, 36]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 39 q4;;   (* [39]*)
let q4 = add 5 q4;;   (* [5, 39]*)
let q4 = add 32 q4;;   (* [5, 32, 39]*)
let q4 = add 3 q4;;   (* [3, 5, 32, 39]*)
let q4 = add 27 q4;;   (* [3, 5, 27, 32, 39]*)
let q4 = add 29 q4;;   (* [3, 5, 27, 29, 32, 39]*)
let q4 = add 20 q4;;   (* [3, 5, 20, 27, 29, 32, 39]*)
let (element, q4) = delete_min q4;;   (* 3 * [5, 20, 27, 29, 32, 39]*)
assert(element = 3);;
let q4 = add 32 q4;;   (* [5, 20, 27, 29, 32, 32, 39]*)
let q4 = add 36 q4;;   (* [5, 20, 27, 29, 32, 32, 36, 39]*)
let (element, q4) = delete_min q4;;   (* 5 * [20, 27, 29, 32, 32, 36, 39]*)
assert(element = 5);;
let q4 = add 12 q4;;   (* [12, 20, 27, 29, 32, 32, 36, 39]*)
let (element, q4) = delete_min q4;;   (* 12 * [20, 27, 29, 32, 32, 36, 39]*)
assert(element = 12);;
let q4 = add 13 q4;;   (* [13, 20, 27, 29, 32, 32, 36, 39]*)
let (element, q4) = delete_min q4;;   (* 13 * [20, 27, 29, 32, 32, 36, 39]*)
assert(element = 13);;
let q4 = add 10 q4;;   (* [10, 20, 27, 29, 32, 32, 36, 39]*)
let q4 = add 24 q4;;   (* [10, 20, 24, 27, 29, 32, 32, 36, 39]*)
let q4 = add 6 q4;;   (* [6, 10, 20, 24, 27, 29, 32, 32, 36, 39]*)
let (element, q4) = delete_min q4;;   (* 6 * [10, 20, 24, 27, 29, 32, 32, 36, 39]*)
assert(element = 6);;
let q4 = add 39 q4;;   (* [10, 20, 24, 27, 29, 32, 32, 36, 39, 39]*)
let q4 = add 5 q4;;   (* [5, 10, 20, 24, 27, 29, 32, 32, 36, 39, 39]*)
assert(is_empty q4 = false);;   (*[5, 10, 20, 24, 27, 29, 32, 32, 36, 39, 39]*)
let q4 = add 36 q4;;   (* [5, 10, 20, 24, 27, 29, 32, 32, 36, 36, 39, 39]*)
let (element, q4) = delete_min q4;;   (* 5 * [10, 20, 24, 27, 29, 32, 32, 36, 36, 39, 39]*)
assert(element = 5);;
let q4 = add 8 q4;;   (* [8, 10, 20, 24, 27, 29, 32, 32, 36, 36, 39, 39]*)

(* -------q5------ *)
let q5 = empty;;
let q5 = add 16 q5;;   (* [16]*)
let q5 = add 10 q5;;   (* [10, 16]*)
let (element, q5) = delete_min q5;;   (* 10 * [16]*)
assert(element = 10);;
assert(is_empty q5 = false);;   (*[16]*)
let q5 = add 26 q5;;   (* [16, 26]*)
let q5 = add 11 q5;;   (* [11, 16, 26]*)
let q5 = add 33 q5;;   (* [11, 16, 26, 33]*)
let (element, q5) = delete_min q5;;   (* 11 * [16, 26, 33]*)
assert(element = 11);;
let q5 = add 3 q5;;   (* [3, 16, 26, 33]*)
let q5 = add 19 q5;;   (* [3, 16, 19, 26, 33]*)
let q5 = add 36 q5;;   (* [3, 16, 19, 26, 33, 36]*)
let q5 = add 11 q5;;   (* [3, 11, 16, 19, 26, 33, 36]*)
let q5 = add 36 q5;;   (* [3, 11, 16, 19, 26, 33, 36, 36]*)
assert(is_empty q5 = false);;   (*[3, 11, 16, 19, 26, 33, 36, 36]*)
let q5 = add 4 q5;;   (* [3, 4, 11, 16, 19, 26, 33, 36, 36]*)
let q5 = add 16 q5;;   (* [3, 4, 11, 16, 16, 19, 26, 33, 36, 36]*)
let q5 = add 27 q5;;   (* [3, 4, 11, 16, 16, 19, 26, 27, 33, 36, 36]*)
let q5 = add 11 q5;;   (* [3, 4, 11, 11, 16, 16, 19, 26, 27, 33, 36, 36]*)
let q5 = add 2 q5;;   (* [2, 3, 4, 11, 11, 16, 16, 19, 26, 27, 33, 36, 36]*)
let (element, q5) = delete_min q5;;   (* 2 * [3, 4, 11, 11, 16, 16, 19, 26, 27, 33, 36, 36]*)
assert(element = 2);;
let q5 = add 33 q5;;   (* [3, 4, 11, 11, 16, 16, 19, 26, 27, 33, 33, 36, 36]*)
let q5 = add 38 q5;;   (* [3, 4, 11, 11, 16, 16, 19, 26, 27, 33, 33, 36, 36, 38]*)
let q5 = add 22 q5;;   (* [3, 4, 11, 11, 16, 16, 19, 22, 26, 27, 33, 33, 36, 36, 38]*)
let (element, q5) = delete_min q5;;   (* 3 * [4, 11, 11, 16, 16, 19, 22, 26, 27, 33, 33, 36, 36, 38]*)
assert(element = 3);;
let q5 = add 18 q5;;   (* [4, 11, 11, 16, 16, 18, 19, 22, 26, 27, 33, 33, 36, 36, 38]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[4, 7, 8, 8, 10, 11, 11, 11, 14, 15, 15, 15, 15, 16, 16, 16, 16, 16, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 24, 26, 27, 27, 28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39]*)
let (element, q) = delete_min q;;   (* 4 * [7, 8, 8, 10, 11, 11, 11, 14, 15, 15, 15, 15, 16, 16, 16, 16, 16, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 24, 26, 27, 27, 28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 7 * [8, 8, 10, 11, 11, 11, 14, 15, 15, 15, 15, 16, 16, 16, 16, 16, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 24, 26, 27, 27, 28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 8 * [8, 10, 11, 11, 11, 14, 15, 15, 15, 15, 16, 16, 16, 16, 16, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 24, 26, 27, 27, 28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 8 * [10, 11, 11, 11, 14, 15, 15, 15, 15, 16, 16, 16, 16, 16, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 24, 26, 27, 27, 28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 10 * [11, 11, 11, 14, 15, 15, 15, 15, 16, 16, 16, 16, 16, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 24, 26, 27, 27, 28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 11 * [11, 11, 14, 15, 15, 15, 15, 16, 16, 16, 16, 16, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 24, 26, 27, 27, 28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 11 * [11, 14, 15, 15, 15, 15, 16, 16, 16, 16, 16, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 24, 26, 27, 27, 28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 11 * [14, 15, 15, 15, 15, 16, 16, 16, 16, 16, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 24, 26, 27, 27, 28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 14 * [15, 15, 15, 15, 16, 16, 16, 16, 16, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 24, 26, 27, 27, 28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [15, 15, 15, 16, 16, 16, 16, 16, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 24, 26, 27, 27, 28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [15, 15, 16, 16, 16, 16, 16, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 24, 26, 27, 27, 28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [15, 16, 16, 16, 16, 16, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 24, 26, 27, 27, 28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [16, 16, 16, 16, 16, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 24, 26, 27, 27, 28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [16, 16, 16, 16, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 24, 26, 27, 27, 28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [16, 16, 16, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 24, 26, 27, 27, 28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [16, 16, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 24, 26, 27, 27, 28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [16, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 24, 26, 27, 27, 28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 24, 26, 27, 27, 28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 18 * [19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 24, 26, 27, 27, 28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 24, 26, 27, 27, 28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 24, 26, 27, 27, 28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [20, 20, 20, 21, 21, 21, 22, 22, 22, 24, 26, 27, 27, 28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 21, 21, 21, 22, 22, 22, 24, 26, 27, 27, 28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 21, 21, 21, 22, 22, 22, 24, 26, 27, 27, 28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [21, 21, 21, 22, 22, 22, 24, 26, 27, 27, 28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [21, 21, 22, 22, 22, 24, 26, 27, 27, 28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [21, 22, 22, 22, 24, 26, 27, 27, 28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [22, 22, 22, 24, 26, 27, 27, 28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [22, 22, 24, 26, 27, 27, 28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [22, 24, 26, 27, 27, 28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [24, 26, 27, 27, 28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 24 * [26, 27, 27, 28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 26 * [27, 27, 28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [27, 28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [28, 28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [28, 29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [29, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 31 * [31, 32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [34, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 37, 38, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 38, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 38, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [38, 38, 38, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST80----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 8 q1;;   (* [8]*)
let q1 = add 36 q1;;   (* [8, 36]*)
let (element, q1) = delete_min q1;;   (* 8 * [36]*)
assert(element = 8);;
let q1 = add 14 q1;;   (* [14, 36]*)
let q1 = add 17 q1;;   (* [14, 17, 36]*)
let q1 = add 21 q1;;   (* [14, 17, 21, 36]*)
let q1 = add 7 q1;;   (* [7, 14, 17, 21, 36]*)
let (element, q1) = delete_min q1;;   (* 7 * [14, 17, 21, 36]*)
assert(element = 7);;
let (element, q1) = delete_min q1;;   (* 14 * [17, 21, 36]*)
assert(element = 14);;
let (element, q1) = delete_min q1;;   (* 17 * [21, 36]*)
assert(element = 17);;
let q1 = add 15 q1;;   (* [15, 21, 36]*)
let q1 = add 11 q1;;   (* [11, 15, 21, 36]*)
let (element, q1) = delete_min q1;;   (* 11 * [15, 21, 36]*)
assert(element = 11);;
let q1 = add 6 q1;;   (* [6, 15, 21, 36]*)
assert(is_empty q1 = false);;   (*[6, 15, 21, 36]*)
let (element, q1) = delete_min q1;;   (* 6 * [15, 21, 36]*)
assert(element = 6);;
let q1 = add 8 q1;;   (* [8, 15, 21, 36]*)
let q1 = add 18 q1;;   (* [8, 15, 18, 21, 36]*)
let q1 = add 23 q1;;   (* [8, 15, 18, 21, 23, 36]*)
assert(is_empty q1 = false);;   (*[8, 15, 18, 21, 23, 36]*)
let q1 = add 36 q1;;   (* [8, 15, 18, 21, 23, 36, 36]*)
let q1 = add 38 q1;;   (* [8, 15, 18, 21, 23, 36, 36, 38]*)
let q1 = add 20 q1;;   (* [8, 15, 18, 20, 21, 23, 36, 36, 38]*)
let q1 = add 10 q1;;   (* [8, 10, 15, 18, 20, 21, 23, 36, 36, 38]*)
let q1 = add 26 q1;;   (* [8, 10, 15, 18, 20, 21, 23, 26, 36, 36, 38]*)
let q1 = add 20 q1;;   (* [8, 10, 15, 18, 20, 20, 21, 23, 26, 36, 36, 38]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 27 q2;;   (* [27]*)
let q2 = add 31 q2;;   (* [27, 31]*)
let q2 = add 35 q2;;   (* [27, 31, 35]*)
let q2 = add 33 q2;;   (* [27, 31, 33, 35]*)
let (element, q2) = delete_min q2;;   (* 27 * [31, 33, 35]*)
assert(element = 27);;
let q2 = add 36 q2;;   (* [31, 33, 35, 36]*)
let q2 = add 6 q2;;   (* [6, 31, 33, 35, 36]*)
let q2 = add 7 q2;;   (* [6, 7, 31, 33, 35, 36]*)
let q2 = add 37 q2;;   (* [6, 7, 31, 33, 35, 36, 37]*)
let (element, q2) = delete_min q2;;   (* 6 * [7, 31, 33, 35, 36, 37]*)
assert(element = 6);;
let q2 = add 37 q2;;   (* [7, 31, 33, 35, 36, 37, 37]*)
let (element, q2) = delete_min q2;;   (* 7 * [31, 33, 35, 36, 37, 37]*)
assert(element = 7);;
let q2 = add 29 q2;;   (* [29, 31, 33, 35, 36, 37, 37]*)
let q2 = add 27 q2;;   (* [27, 29, 31, 33, 35, 36, 37, 37]*)
let q2 = add 36 q2;;   (* [27, 29, 31, 33, 35, 36, 36, 37, 37]*)
let q2 = add 38 q2;;   (* [27, 29, 31, 33, 35, 36, 36, 37, 37, 38]*)
let q2 = add 5 q2;;   (* [5, 27, 29, 31, 33, 35, 36, 36, 37, 37, 38]*)
assert(is_empty q2 = false);;   (*[5, 27, 29, 31, 33, 35, 36, 36, 37, 37, 38]*)
let (element, q2) = delete_min q2;;   (* 5 * [27, 29, 31, 33, 35, 36, 36, 37, 37, 38]*)
assert(element = 5);;
let q2 = add 0 q2;;   (* [0, 27, 29, 31, 33, 35, 36, 36, 37, 37, 38]*)
let q2 = add 35 q2;;   (* [0, 27, 29, 31, 33, 35, 35, 36, 36, 37, 37, 38]*)
let q2 = add 5 q2;;   (* [0, 5, 27, 29, 31, 33, 35, 35, 36, 36, 37, 37, 38]*)
let q2 = add 22 q2;;   (* [0, 5, 22, 27, 29, 31, 33, 35, 35, 36, 36, 37, 37, 38]*)
let q2 = add 7 q2;;   (* [0, 5, 7, 22, 27, 29, 31, 33, 35, 35, 36, 36, 37, 37, 38]*)
let q2 = add 20 q2;;   (* [0, 5, 7, 20, 22, 27, 29, 31, 33, 35, 35, 36, 36, 37, 37, 38]*)
let (element, q2) = delete_min q2;;   (* 0 * [5, 7, 20, 22, 27, 29, 31, 33, 35, 35, 36, 36, 37, 37, 38]*)
assert(element = 0);;

(* -------q3------ *)
let q3 = empty;;
let q3 = add 30 q3;;   (* [30]*)
let q3 = add 38 q3;;   (* [30, 38]*)
let q3 = add 12 q3;;   (* [12, 30, 38]*)
let (element, q3) = delete_min q3;;   (* 12 * [30, 38]*)
assert(element = 12);;
let (element, q3) = delete_min q3;;   (* 30 * [38]*)
assert(element = 30);;
let q3 = add 31 q3;;   (* [31, 38]*)
let (element, q3) = delete_min q3;;   (* 31 * [38]*)
assert(element = 31);;
let q3 = add 29 q3;;   (* [29, 38]*)
let q3 = add 36 q3;;   (* [29, 36, 38]*)
let q3 = add 38 q3;;   (* [29, 36, 38, 38]*)
let q3 = add 13 q3;;   (* [13, 29, 36, 38, 38]*)
let q3 = add 25 q3;;   (* [13, 25, 29, 36, 38, 38]*)
let (element, q3) = delete_min q3;;   (* 13 * [25, 29, 36, 38, 38]*)
assert(element = 13);;
let (element, q3) = delete_min q3;;   (* 25 * [29, 36, 38, 38]*)
assert(element = 25);;
let q3 = add 33 q3;;   (* [29, 33, 36, 38, 38]*)
let q3 = add 20 q3;;   (* [20, 29, 33, 36, 38, 38]*)
let q3 = add 10 q3;;   (* [10, 20, 29, 33, 36, 38, 38]*)
assert(is_empty q3 = false);;   (*[10, 20, 29, 33, 36, 38, 38]*)
let (element, q3) = delete_min q3;;   (* 10 * [20, 29, 33, 36, 38, 38]*)
assert(element = 10);;
let q3 = add 10 q3;;   (* [10, 20, 29, 33, 36, 38, 38]*)
let q3 = add 33 q3;;   (* [10, 20, 29, 33, 33, 36, 38, 38]*)
let q3 = add 10 q3;;   (* [10, 10, 20, 29, 33, 33, 36, 38, 38]*)
let q3 = add 10 q3;;   (* [10, 10, 10, 20, 29, 33, 33, 36, 38, 38]*)
let q3 = add 35 q3;;   (* [10, 10, 10, 20, 29, 33, 33, 35, 36, 38, 38]*)
let q3 = add 38 q3;;   (* [10, 10, 10, 20, 29, 33, 33, 35, 36, 38, 38, 38]*)
let q3 = add 14 q3;;   (* [10, 10, 10, 14, 20, 29, 33, 33, 35, 36, 38, 38, 38]*)

(* -------q4------ *)
let q4 = empty;;
assert(is_empty q4 = true);;   (*[]*)
let q4 = add 3 q4;;   (* [3]*)
assert(is_empty q4 = false);;   (*[3]*)
let q4 = add 4 q4;;   (* [3, 4]*)
let q4 = add 10 q4;;   (* [3, 4, 10]*)
let q4 = add 4 q4;;   (* [3, 4, 4, 10]*)
let q4 = add 18 q4;;   (* [3, 4, 4, 10, 18]*)
let q4 = add 16 q4;;   (* [3, 4, 4, 10, 16, 18]*)
let q4 = add 1 q4;;   (* [1, 3, 4, 4, 10, 16, 18]*)
let q4 = add 25 q4;;   (* [1, 3, 4, 4, 10, 16, 18, 25]*)
let q4 = add 8 q4;;   (* [1, 3, 4, 4, 8, 10, 16, 18, 25]*)
let q4 = add 39 q4;;   (* [1, 3, 4, 4, 8, 10, 16, 18, 25, 39]*)
let q4 = add 11 q4;;   (* [1, 3, 4, 4, 8, 10, 11, 16, 18, 25, 39]*)
let q4 = add 16 q4;;   (* [1, 3, 4, 4, 8, 10, 11, 16, 16, 18, 25, 39]*)
let (element, q4) = delete_min q4;;   (* 1 * [3, 4, 4, 8, 10, 11, 16, 16, 18, 25, 39]*)
assert(element = 1);;
let q4 = add 7 q4;;   (* [3, 4, 4, 7, 8, 10, 11, 16, 16, 18, 25, 39]*)
let q4 = add 23 q4;;   (* [3, 4, 4, 7, 8, 10, 11, 16, 16, 18, 23, 25, 39]*)
let q4 = add 21 q4;;   (* [3, 4, 4, 7, 8, 10, 11, 16, 16, 18, 21, 23, 25, 39]*)
let q4 = add 22 q4;;   (* [3, 4, 4, 7, 8, 10, 11, 16, 16, 18, 21, 22, 23, 25, 39]*)
let (element, q4) = delete_min q4;;   (* 3 * [4, 4, 7, 8, 10, 11, 16, 16, 18, 21, 22, 23, 25, 39]*)
assert(element = 3);;
let q4 = add 36 q4;;   (* [4, 4, 7, 8, 10, 11, 16, 16, 18, 21, 22, 23, 25, 36, 39]*)
let (element, q4) = delete_min q4;;   (* 4 * [4, 7, 8, 10, 11, 16, 16, 18, 21, 22, 23, 25, 36, 39]*)
assert(element = 4);;
let q4 = add 36 q4;;   (* [4, 7, 8, 10, 11, 16, 16, 18, 21, 22, 23, 25, 36, 36, 39]*)
let (element, q4) = delete_min q4;;   (* 4 * [7, 8, 10, 11, 16, 16, 18, 21, 22, 23, 25, 36, 36, 39]*)
assert(element = 4);;
let q4 = add 39 q4;;   (* [7, 8, 10, 11, 16, 16, 18, 21, 22, 23, 25, 36, 36, 39, 39]*)
let q4 = add 32 q4;;   (* [7, 8, 10, 11, 16, 16, 18, 21, 22, 23, 25, 32, 36, 36, 39, 39]*)

(* -------q5------ *)
let q5 = empty;;
let q5 = add 35 q5;;   (* [35]*)
let q5 = add 26 q5;;   (* [26, 35]*)
let q5 = add 25 q5;;   (* [25, 26, 35]*)
let (element, q5) = delete_min q5;;   (* 25 * [26, 35]*)
assert(element = 25);;
let q5 = add 14 q5;;   (* [14, 26, 35]*)
let q5 = add 20 q5;;   (* [14, 20, 26, 35]*)
let (element, q5) = delete_min q5;;   (* 14 * [20, 26, 35]*)
assert(element = 14);;
let q5 = add 30 q5;;   (* [20, 26, 30, 35]*)
assert(is_empty q5 = false);;   (*[20, 26, 30, 35]*)
let q5 = add 21 q5;;   (* [20, 21, 26, 30, 35]*)
let q5 = add 23 q5;;   (* [20, 21, 23, 26, 30, 35]*)
let (element, q5) = delete_min q5;;   (* 20 * [21, 23, 26, 30, 35]*)
assert(element = 20);;
let q5 = add 20 q5;;   (* [20, 21, 23, 26, 30, 35]*)
let q5 = add 17 q5;;   (* [17, 20, 21, 23, 26, 30, 35]*)
let q5 = add 28 q5;;   (* [17, 20, 21, 23, 26, 28, 30, 35]*)
let (element, q5) = delete_min q5;;   (* 17 * [20, 21, 23, 26, 28, 30, 35]*)
assert(element = 17);;
let (element, q5) = delete_min q5;;   (* 20 * [21, 23, 26, 28, 30, 35]*)
assert(element = 20);;
let q5 = add 20 q5;;   (* [20, 21, 23, 26, 28, 30, 35]*)
assert(is_empty q5 = false);;   (*[20, 21, 23, 26, 28, 30, 35]*)
let (element, q5) = delete_min q5;;   (* 20 * [21, 23, 26, 28, 30, 35]*)
assert(element = 20);;
assert(is_empty q5 = false);;   (*[21, 23, 26, 28, 30, 35]*)
let q5 = add 3 q5;;   (* [3, 21, 23, 26, 28, 30, 35]*)
let q5 = add 8 q5;;   (* [3, 8, 21, 23, 26, 28, 30, 35]*)
let (element, q5) = delete_min q5;;   (* 3 * [8, 21, 23, 26, 28, 30, 35]*)
assert(element = 3);;
assert(is_empty q5 = false);;   (*[8, 21, 23, 26, 28, 30, 35]*)
let q5 = add 17 q5;;   (* [8, 17, 21, 23, 26, 28, 30, 35]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[5, 7, 7, 8, 8, 8, 10, 10, 10, 10, 10, 11, 14, 15, 16, 16, 17, 18, 18, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 23, 25, 26, 26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39]*)
let (element, q) = delete_min q;;   (* 5 * [7, 7, 8, 8, 8, 10, 10, 10, 10, 10, 11, 14, 15, 16, 16, 17, 18, 18, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 23, 25, 26, 26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 7 * [7, 8, 8, 8, 10, 10, 10, 10, 10, 11, 14, 15, 16, 16, 17, 18, 18, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 23, 25, 26, 26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 7 * [8, 8, 8, 10, 10, 10, 10, 10, 11, 14, 15, 16, 16, 17, 18, 18, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 23, 25, 26, 26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 8 * [8, 8, 10, 10, 10, 10, 10, 11, 14, 15, 16, 16, 17, 18, 18, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 23, 25, 26, 26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 8 * [8, 10, 10, 10, 10, 10, 11, 14, 15, 16, 16, 17, 18, 18, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 23, 25, 26, 26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 8 * [10, 10, 10, 10, 10, 11, 14, 15, 16, 16, 17, 18, 18, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 23, 25, 26, 26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 10 * [10, 10, 10, 10, 11, 14, 15, 16, 16, 17, 18, 18, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 23, 25, 26, 26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 10 * [10, 10, 10, 11, 14, 15, 16, 16, 17, 18, 18, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 23, 25, 26, 26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 10 * [10, 10, 11, 14, 15, 16, 16, 17, 18, 18, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 23, 25, 26, 26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 10 * [10, 11, 14, 15, 16, 16, 17, 18, 18, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 23, 25, 26, 26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 10 * [11, 14, 15, 16, 16, 17, 18, 18, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 23, 25, 26, 26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 11 * [14, 15, 16, 16, 17, 18, 18, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 23, 25, 26, 26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 14 * [15, 16, 16, 17, 18, 18, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 23, 25, 26, 26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [16, 16, 17, 18, 18, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 23, 25, 26, 26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [16, 17, 18, 18, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 23, 25, 26, 26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [17, 18, 18, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 23, 25, 26, 26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 17 * [18, 18, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 23, 25, 26, 26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [18, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 23, 25, 26, 26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 23, 25, 26, 26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 23, 25, 26, 26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 21, 21, 21, 22, 22, 23, 23, 23, 25, 26, 26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 21, 21, 21, 22, 22, 23, 23, 23, 25, 26, 26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [21, 21, 21, 22, 22, 23, 23, 23, 25, 26, 26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [21, 21, 22, 22, 23, 23, 23, 25, 26, 26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [21, 22, 22, 23, 23, 23, 25, 26, 26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [22, 22, 23, 23, 23, 25, 26, 26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [22, 23, 23, 23, 25, 26, 26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [23, 23, 23, 25, 26, 26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [23, 23, 25, 26, 26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [23, 25, 26, 26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [25, 26, 26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 25 * [26, 26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [26, 27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [27, 28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [28, 29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [29, 29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [29, 30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [30, 31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [31, 32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [32, 33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [33, 33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [37, 38, 38, 38, 38, 38, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [38, 38, 38, 38, 38, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 38, 38, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 38, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST81----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 9 q1;;   (* [9]*)
let (element, q1) = delete_min q1;;   (* 9 * []*)
assert(element = 9);;
assert(is_empty q1 = true);;   (*[]*)
let q1 = add 1 q1;;   (* [1]*)
let q1 = add 21 q1;;   (* [1, 21]*)
let q1 = add 11 q1;;   (* [1, 11, 21]*)
let (element, q1) = delete_min q1;;   (* 1 * [11, 21]*)
assert(element = 1);;
let q1 = add 20 q1;;   (* [11, 20, 21]*)
let q1 = add 12 q1;;   (* [11, 12, 20, 21]*)
let q1 = add 10 q1;;   (* [10, 11, 12, 20, 21]*)
assert(is_empty q1 = false);;   (*[10, 11, 12, 20, 21]*)
let (element, q1) = delete_min q1;;   (* 10 * [11, 12, 20, 21]*)
assert(element = 10);;
let q1 = add 38 q1;;   (* [11, 12, 20, 21, 38]*)
let q1 = add 9 q1;;   (* [9, 11, 12, 20, 21, 38]*)
assert(is_empty q1 = false);;   (*[9, 11, 12, 20, 21, 38]*)
assert(is_empty q1 = false);;   (*[9, 11, 12, 20, 21, 38]*)
let q1 = add 38 q1;;   (* [9, 11, 12, 20, 21, 38, 38]*)
let q1 = add 17 q1;;   (* [9, 11, 12, 17, 20, 21, 38, 38]*)
let (element, q1) = delete_min q1;;   (* 9 * [11, 12, 17, 20, 21, 38, 38]*)
assert(element = 9);;
let q1 = add 38 q1;;   (* [11, 12, 17, 20, 21, 38, 38, 38]*)
let (element, q1) = delete_min q1;;   (* 11 * [12, 17, 20, 21, 38, 38, 38]*)
assert(element = 11);;
let q1 = add 31 q1;;   (* [12, 17, 20, 21, 31, 38, 38, 38]*)
let q1 = add 8 q1;;   (* [8, 12, 17, 20, 21, 31, 38, 38, 38]*)
let (element, q1) = delete_min q1;;   (* 8 * [12, 17, 20, 21, 31, 38, 38, 38]*)
assert(element = 8);;
let q1 = add 2 q1;;   (* [2, 12, 17, 20, 21, 31, 38, 38, 38]*)
let (element, q1) = delete_min q1;;   (* 2 * [12, 17, 20, 21, 31, 38, 38, 38]*)
assert(element = 2);;
assert(is_empty q1 = false);;   (*[12, 17, 20, 21, 31, 38, 38, 38]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 2 q2;;   (* [2]*)
let q2 = add 6 q2;;   (* [2, 6]*)
let q2 = add 18 q2;;   (* [2, 6, 18]*)
let q2 = add 15 q2;;   (* [2, 6, 15, 18]*)
let (element, q2) = delete_min q2;;   (* 2 * [6, 15, 18]*)
assert(element = 2);;
let (element, q2) = delete_min q2;;   (* 6 * [15, 18]*)
assert(element = 6);;
let (element, q2) = delete_min q2;;   (* 15 * [18]*)
assert(element = 15);;
let (element, q2) = delete_min q2;;   (* 18 * []*)
assert(element = 18);;
let q2 = add 9 q2;;   (* [9]*)
let q2 = add 8 q2;;   (* [8, 9]*)
let (element, q2) = delete_min q2;;   (* 8 * [9]*)
assert(element = 8);;
let q2 = add 23 q2;;   (* [9, 23]*)
let q2 = add 31 q2;;   (* [9, 23, 31]*)
let q2 = add 3 q2;;   (* [3, 9, 23, 31]*)
let q2 = add 27 q2;;   (* [3, 9, 23, 27, 31]*)
let (element, q2) = delete_min q2;;   (* 3 * [9, 23, 27, 31]*)
assert(element = 3);;
let q2 = add 4 q2;;   (* [4, 9, 23, 27, 31]*)
let q2 = add 20 q2;;   (* [4, 9, 20, 23, 27, 31]*)
let q2 = add 14 q2;;   (* [4, 9, 14, 20, 23, 27, 31]*)
let q2 = add 1 q2;;   (* [1, 4, 9, 14, 20, 23, 27, 31]*)
let q2 = add 4 q2;;   (* [1, 4, 4, 9, 14, 20, 23, 27, 31]*)
let (element, q2) = delete_min q2;;   (* 1 * [4, 4, 9, 14, 20, 23, 27, 31]*)
assert(element = 1);;
let q2 = add 9 q2;;   (* [4, 4, 9, 9, 14, 20, 23, 27, 31]*)
assert(is_empty q2 = false);;   (*[4, 4, 9, 9, 14, 20, 23, 27, 31]*)
let q2 = add 38 q2;;   (* [4, 4, 9, 9, 14, 20, 23, 27, 31, 38]*)
let q2 = add 3 q2;;   (* [3, 4, 4, 9, 9, 14, 20, 23, 27, 31, 38]*)
let q2 = add 15 q2;;   (* [3, 4, 4, 9, 9, 14, 15, 20, 23, 27, 31, 38]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 1 q3;;   (* [1]*)
let q3 = add 36 q3;;   (* [1, 36]*)
let q3 = add 2 q3;;   (* [1, 2, 36]*)
let q3 = add 30 q3;;   (* [1, 2, 30, 36]*)
let q3 = add 33 q3;;   (* [1, 2, 30, 33, 36]*)
let (element, q3) = delete_min q3;;   (* 1 * [2, 30, 33, 36]*)
assert(element = 1);;
let (element, q3) = delete_min q3;;   (* 2 * [30, 33, 36]*)
assert(element = 2);;
let q3 = add 39 q3;;   (* [30, 33, 36, 39]*)
let q3 = add 7 q3;;   (* [7, 30, 33, 36, 39]*)
let q3 = add 23 q3;;   (* [7, 23, 30, 33, 36, 39]*)
let q3 = add 15 q3;;   (* [7, 15, 23, 30, 33, 36, 39]*)
let (element, q3) = delete_min q3;;   (* 7 * [15, 23, 30, 33, 36, 39]*)
assert(element = 7);;
let q3 = add 1 q3;;   (* [1, 15, 23, 30, 33, 36, 39]*)
let q3 = add 4 q3;;   (* [1, 4, 15, 23, 30, 33, 36, 39]*)
let (element, q3) = delete_min q3;;   (* 1 * [4, 15, 23, 30, 33, 36, 39]*)
assert(element = 1);;
let q3 = add 11 q3;;   (* [4, 11, 15, 23, 30, 33, 36, 39]*)
let q3 = add 12 q3;;   (* [4, 11, 12, 15, 23, 30, 33, 36, 39]*)
let q3 = add 3 q3;;   (* [3, 4, 11, 12, 15, 23, 30, 33, 36, 39]*)
let q3 = add 4 q3;;   (* [3, 4, 4, 11, 12, 15, 23, 30, 33, 36, 39]*)
let (element, q3) = delete_min q3;;   (* 3 * [4, 4, 11, 12, 15, 23, 30, 33, 36, 39]*)
assert(element = 3);;
let (element, q3) = delete_min q3;;   (* 4 * [4, 11, 12, 15, 23, 30, 33, 36, 39]*)
assert(element = 4);;
let q3 = add 0 q3;;   (* [0, 4, 11, 12, 15, 23, 30, 33, 36, 39]*)
let (element, q3) = delete_min q3;;   (* 0 * [4, 11, 12, 15, 23, 30, 33, 36, 39]*)
assert(element = 0);;
assert(is_empty q3 = false);;   (*[4, 11, 12, 15, 23, 30, 33, 36, 39]*)
let q3 = add 11 q3;;   (* [4, 11, 11, 12, 15, 23, 30, 33, 36, 39]*)
let (element, q3) = delete_min q3;;   (* 4 * [11, 11, 12, 15, 23, 30, 33, 36, 39]*)
assert(element = 4);;
let (element, q3) = delete_min q3;;   (* 11 * [11, 12, 15, 23, 30, 33, 36, 39]*)
assert(element = 11);;

(* -------q4------ *)
let q4 = empty;;
assert(is_empty q4 = true);;   (*[]*)
let q4 = add 16 q4;;   (* [16]*)
let q4 = add 26 q4;;   (* [16, 26]*)
assert(is_empty q4 = false);;   (*[16, 26]*)
let (element, q4) = delete_min q4;;   (* 16 * [26]*)
assert(element = 16);;
let q4 = add 4 q4;;   (* [4, 26]*)
let q4 = add 36 q4;;   (* [4, 26, 36]*)
let q4 = add 25 q4;;   (* [4, 25, 26, 36]*)
let q4 = add 35 q4;;   (* [4, 25, 26, 35, 36]*)
assert(is_empty q4 = false);;   (*[4, 25, 26, 35, 36]*)
let q4 = add 13 q4;;   (* [4, 13, 25, 26, 35, 36]*)
let (element, q4) = delete_min q4;;   (* 4 * [13, 25, 26, 35, 36]*)
assert(element = 4);;
let q4 = add 26 q4;;   (* [13, 25, 26, 26, 35, 36]*)
let (element, q4) = delete_min q4;;   (* 13 * [25, 26, 26, 35, 36]*)
assert(element = 13);;
let (element, q4) = delete_min q4;;   (* 25 * [26, 26, 35, 36]*)
assert(element = 25);;
let (element, q4) = delete_min q4;;   (* 26 * [26, 35, 36]*)
assert(element = 26);;
assert(is_empty q4 = false);;   (*[26, 35, 36]*)
let (element, q4) = delete_min q4;;   (* 26 * [35, 36]*)
assert(element = 26);;
let q4 = add 2 q4;;   (* [2, 35, 36]*)
let q4 = add 35 q4;;   (* [2, 35, 35, 36]*)
let (element, q4) = delete_min q4;;   (* 2 * [35, 35, 36]*)
assert(element = 2);;
let (element, q4) = delete_min q4;;   (* 35 * [35, 36]*)
assert(element = 35);;
let q4 = add 9 q4;;   (* [9, 35, 36]*)
let q4 = add 35 q4;;   (* [9, 35, 35, 36]*)
let q4 = add 19 q4;;   (* [9, 19, 35, 35, 36]*)
let q4 = add 9 q4;;   (* [9, 9, 19, 35, 35, 36]*)
let q4 = add 2 q4;;   (* [2, 9, 9, 19, 35, 35, 36]*)

(* -------q5------ *)
let q5 = empty;;
let q5 = add 14 q5;;   (* [14]*)
let (element, q5) = delete_min q5;;   (* 14 * []*)
assert(element = 14);;
let q5 = add 29 q5;;   (* [29]*)
let (element, q5) = delete_min q5;;   (* 29 * []*)
assert(element = 29);;
let q5 = add 16 q5;;   (* [16]*)
let q5 = add 20 q5;;   (* [16, 20]*)
let q5 = add 17 q5;;   (* [16, 17, 20]*)
assert(is_empty q5 = false);;   (*[16, 17, 20]*)
let q5 = add 10 q5;;   (* [10, 16, 17, 20]*)
let q5 = add 34 q5;;   (* [10, 16, 17, 20, 34]*)
let q5 = add 33 q5;;   (* [10, 16, 17, 20, 33, 34]*)
let q5 = add 22 q5;;   (* [10, 16, 17, 20, 22, 33, 34]*)
let (element, q5) = delete_min q5;;   (* 10 * [16, 17, 20, 22, 33, 34]*)
assert(element = 10);;
let q5 = add 5 q5;;   (* [5, 16, 17, 20, 22, 33, 34]*)
let q5 = add 1 q5;;   (* [1, 5, 16, 17, 20, 22, 33, 34]*)
let (element, q5) = delete_min q5;;   (* 1 * [5, 16, 17, 20, 22, 33, 34]*)
assert(element = 1);;
let q5 = add 0 q5;;   (* [0, 5, 16, 17, 20, 22, 33, 34]*)
let (element, q5) = delete_min q5;;   (* 0 * [5, 16, 17, 20, 22, 33, 34]*)
assert(element = 0);;
let q5 = add 27 q5;;   (* [5, 16, 17, 20, 22, 27, 33, 34]*)
let (element, q5) = delete_min q5;;   (* 5 * [16, 17, 20, 22, 27, 33, 34]*)
assert(element = 5);;
let (element, q5) = delete_min q5;;   (* 16 * [17, 20, 22, 27, 33, 34]*)
assert(element = 16);;
let q5 = add 14 q5;;   (* [14, 17, 20, 22, 27, 33, 34]*)
let q5 = add 33 q5;;   (* [14, 17, 20, 22, 27, 33, 33, 34]*)
let q5 = add 25 q5;;   (* [14, 17, 20, 22, 25, 27, 33, 33, 34]*)
let q5 = add 1 q5;;   (* [1, 14, 17, 20, 22, 25, 27, 33, 33, 34]*)
let q5 = add 19 q5;;   (* [1, 14, 17, 19, 20, 22, 25, 27, 33, 33, 34]*)
let q5 = add 1 q5;;   (* [1, 1, 14, 17, 19, 20, 22, 25, 27, 33, 33, 34]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[1, 1, 2, 3, 4, 4, 9, 9, 9, 9, 11, 12, 12, 14, 14, 15, 15, 17, 17, 19, 19, 20, 20, 20, 21, 22, 23, 23, 25, 27, 27, 30, 31, 31, 33, 33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38]*)
let (element, q) = delete_min q;;   (* 1 * [1, 2, 3, 4, 4, 9, 9, 9, 9, 11, 12, 12, 14, 14, 15, 15, 17, 17, 19, 19, 20, 20, 20, 21, 22, 23, 23, 25, 27, 27, 30, 31, 31, 33, 33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 1);;
let (element, q) = delete_min q;;   (* 1 * [2, 3, 4, 4, 9, 9, 9, 9, 11, 12, 12, 14, 14, 15, 15, 17, 17, 19, 19, 20, 20, 20, 21, 22, 23, 23, 25, 27, 27, 30, 31, 31, 33, 33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 1);;
let (element, q) = delete_min q;;   (* 2 * [3, 4, 4, 9, 9, 9, 9, 11, 12, 12, 14, 14, 15, 15, 17, 17, 19, 19, 20, 20, 20, 21, 22, 23, 23, 25, 27, 27, 30, 31, 31, 33, 33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 2);;
let (element, q) = delete_min q;;   (* 3 * [4, 4, 9, 9, 9, 9, 11, 12, 12, 14, 14, 15, 15, 17, 17, 19, 19, 20, 20, 20, 21, 22, 23, 23, 25, 27, 27, 30, 31, 31, 33, 33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 3);;
let (element, q) = delete_min q;;   (* 4 * [4, 9, 9, 9, 9, 11, 12, 12, 14, 14, 15, 15, 17, 17, 19, 19, 20, 20, 20, 21, 22, 23, 23, 25, 27, 27, 30, 31, 31, 33, 33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 4 * [9, 9, 9, 9, 11, 12, 12, 14, 14, 15, 15, 17, 17, 19, 19, 20, 20, 20, 21, 22, 23, 23, 25, 27, 27, 30, 31, 31, 33, 33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 9 * [9, 9, 9, 11, 12, 12, 14, 14, 15, 15, 17, 17, 19, 19, 20, 20, 20, 21, 22, 23, 23, 25, 27, 27, 30, 31, 31, 33, 33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 9 * [9, 9, 11, 12, 12, 14, 14, 15, 15, 17, 17, 19, 19, 20, 20, 20, 21, 22, 23, 23, 25, 27, 27, 30, 31, 31, 33, 33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 9 * [9, 11, 12, 12, 14, 14, 15, 15, 17, 17, 19, 19, 20, 20, 20, 21, 22, 23, 23, 25, 27, 27, 30, 31, 31, 33, 33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 9 * [11, 12, 12, 14, 14, 15, 15, 17, 17, 19, 19, 20, 20, 20, 21, 22, 23, 23, 25, 27, 27, 30, 31, 31, 33, 33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 11 * [12, 12, 14, 14, 15, 15, 17, 17, 19, 19, 20, 20, 20, 21, 22, 23, 23, 25, 27, 27, 30, 31, 31, 33, 33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 12 * [12, 14, 14, 15, 15, 17, 17, 19, 19, 20, 20, 20, 21, 22, 23, 23, 25, 27, 27, 30, 31, 31, 33, 33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 12 * [14, 14, 15, 15, 17, 17, 19, 19, 20, 20, 20, 21, 22, 23, 23, 25, 27, 27, 30, 31, 31, 33, 33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 14 * [14, 15, 15, 17, 17, 19, 19, 20, 20, 20, 21, 22, 23, 23, 25, 27, 27, 30, 31, 31, 33, 33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [15, 15, 17, 17, 19, 19, 20, 20, 20, 21, 22, 23, 23, 25, 27, 27, 30, 31, 31, 33, 33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [15, 17, 17, 19, 19, 20, 20, 20, 21, 22, 23, 23, 25, 27, 27, 30, 31, 31, 33, 33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [17, 17, 19, 19, 20, 20, 20, 21, 22, 23, 23, 25, 27, 27, 30, 31, 31, 33, 33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 17 * [17, 19, 19, 20, 20, 20, 21, 22, 23, 23, 25, 27, 27, 30, 31, 31, 33, 33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [19, 19, 20, 20, 20, 21, 22, 23, 23, 25, 27, 27, 30, 31, 31, 33, 33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 19 * [19, 20, 20, 20, 21, 22, 23, 23, 25, 27, 27, 30, 31, 31, 33, 33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [20, 20, 20, 21, 22, 23, 23, 25, 27, 27, 30, 31, 31, 33, 33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 21, 22, 23, 23, 25, 27, 27, 30, 31, 31, 33, 33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 21, 22, 23, 23, 25, 27, 27, 30, 31, 31, 33, 33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [21, 22, 23, 23, 25, 27, 27, 30, 31, 31, 33, 33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [22, 23, 23, 25, 27, 27, 30, 31, 31, 33, 33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [23, 23, 25, 27, 27, 30, 31, 31, 33, 33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [23, 25, 27, 27, 30, 31, 31, 33, 33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [25, 27, 27, 30, 31, 31, 33, 33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 25 * [27, 27, 30, 31, 31, 33, 33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 27 * [27, 30, 31, 31, 33, 33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [30, 31, 31, 33, 33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 33, 33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 33, 33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [33, 33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [34, 35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 36, 38, 38, 38, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 38, 38, 38, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 38, 38, 38, 38, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [38, 38, 38, 38, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 38, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST82----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 34 q1;;   (* [34]*)
let q1 = add 1 q1;;   (* [1, 34]*)
let (element, q1) = delete_min q1;;   (* 1 * [34]*)
assert(element = 1);;
let (element, q1) = delete_min q1;;   (* 34 * []*)
assert(element = 34);;
let q1 = add 2 q1;;   (* [2]*)
let q1 = add 14 q1;;   (* [2, 14]*)
let (element, q1) = delete_min q1;;   (* 2 * [14]*)
assert(element = 2);;
let (element, q1) = delete_min q1;;   (* 14 * []*)
assert(element = 14);;
assert(is_empty q1 = true);;   (*[]*)
let q1 = add 2 q1;;   (* [2]*)
let (element, q1) = delete_min q1;;   (* 2 * []*)
assert(element = 2);;
let q1 = add 11 q1;;   (* [11]*)
let q1 = add 38 q1;;   (* [11, 38]*)
let q1 = add 37 q1;;   (* [11, 37, 38]*)
assert(is_empty q1 = false);;   (*[11, 37, 38]*)
let q1 = add 36 q1;;   (* [11, 36, 37, 38]*)
let (element, q1) = delete_min q1;;   (* 11 * [36, 37, 38]*)
assert(element = 11);;
let q1 = add 25 q1;;   (* [25, 36, 37, 38]*)
let q1 = add 16 q1;;   (* [16, 25, 36, 37, 38]*)
let (element, q1) = delete_min q1;;   (* 16 * [25, 36, 37, 38]*)
assert(element = 16);;
let q1 = add 27 q1;;   (* [25, 27, 36, 37, 38]*)
let q1 = add 6 q1;;   (* [6, 25, 27, 36, 37, 38]*)
let q1 = add 25 q1;;   (* [6, 25, 25, 27, 36, 37, 38]*)
let q1 = add 32 q1;;   (* [6, 25, 25, 27, 32, 36, 37, 38]*)
let q1 = add 34 q1;;   (* [6, 25, 25, 27, 32, 34, 36, 37, 38]*)
assert(is_empty q1 = false);;   (*[6, 25, 25, 27, 32, 34, 36, 37, 38]*)
let q1 = add 25 q1;;   (* [6, 25, 25, 25, 27, 32, 34, 36, 37, 38]*)
assert(is_empty q1 = false);;   (*[6, 25, 25, 25, 27, 32, 34, 36, 37, 38]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 31 q2;;   (* [31]*)
let q2 = add 6 q2;;   (* [6, 31]*)
let q2 = add 24 q2;;   (* [6, 24, 31]*)
let q2 = add 5 q2;;   (* [5, 6, 24, 31]*)
let q2 = add 16 q2;;   (* [5, 6, 16, 24, 31]*)
let q2 = add 26 q2;;   (* [5, 6, 16, 24, 26, 31]*)
let (element, q2) = delete_min q2;;   (* 5 * [6, 16, 24, 26, 31]*)
assert(element = 5);;
let q2 = add 19 q2;;   (* [6, 16, 19, 24, 26, 31]*)
let (element, q2) = delete_min q2;;   (* 6 * [16, 19, 24, 26, 31]*)
assert(element = 6);;
let q2 = add 23 q2;;   (* [16, 19, 23, 24, 26, 31]*)
let q2 = add 3 q2;;   (* [3, 16, 19, 23, 24, 26, 31]*)
let q2 = add 26 q2;;   (* [3, 16, 19, 23, 24, 26, 26, 31]*)
let (element, q2) = delete_min q2;;   (* 3 * [16, 19, 23, 24, 26, 26, 31]*)
assert(element = 3);;
let q2 = add 19 q2;;   (* [16, 19, 19, 23, 24, 26, 26, 31]*)
let (element, q2) = delete_min q2;;   (* 16 * [19, 19, 23, 24, 26, 26, 31]*)
assert(element = 16);;
let (element, q2) = delete_min q2;;   (* 19 * [19, 23, 24, 26, 26, 31]*)
assert(element = 19);;
let q2 = add 26 q2;;   (* [19, 23, 24, 26, 26, 26, 31]*)
let q2 = add 10 q2;;   (* [10, 19, 23, 24, 26, 26, 26, 31]*)
let (element, q2) = delete_min q2;;   (* 10 * [19, 23, 24, 26, 26, 26, 31]*)
assert(element = 10);;
let q2 = add 16 q2;;   (* [16, 19, 23, 24, 26, 26, 26, 31]*)
let q2 = add 19 q2;;   (* [16, 19, 19, 23, 24, 26, 26, 26, 31]*)
let q2 = add 2 q2;;   (* [2, 16, 19, 19, 23, 24, 26, 26, 26, 31]*)
let (element, q2) = delete_min q2;;   (* 2 * [16, 19, 19, 23, 24, 26, 26, 26, 31]*)
assert(element = 2);;
let (element, q2) = delete_min q2;;   (* 16 * [19, 19, 23, 24, 26, 26, 26, 31]*)
assert(element = 16);;
let q2 = add 9 q2;;   (* [9, 19, 19, 23, 24, 26, 26, 26, 31]*)
let q2 = add 31 q2;;   (* [9, 19, 19, 23, 24, 26, 26, 26, 31, 31]*)
let (element, q2) = delete_min q2;;   (* 9 * [19, 19, 23, 24, 26, 26, 26, 31, 31]*)
assert(element = 9);;
let q2 = add 9 q2;;   (* [9, 19, 19, 23, 24, 26, 26, 26, 31, 31]*)

(* -------q3------ *)
let q3 = empty;;
assert(is_empty q3 = true);;   (*[]*)
let q3 = add 39 q3;;   (* [39]*)
let q3 = add 10 q3;;   (* [10, 39]*)
let (element, q3) = delete_min q3;;   (* 10 * [39]*)
assert(element = 10);;
assert(is_empty q3 = false);;   (*[39]*)
let q3 = add 31 q3;;   (* [31, 39]*)
assert(is_empty q3 = false);;   (*[31, 39]*)
let (element, q3) = delete_min q3;;   (* 31 * [39]*)
assert(element = 31);;
let q3 = add 37 q3;;   (* [37, 39]*)
let q3 = add 12 q3;;   (* [12, 37, 39]*)
let q3 = add 13 q3;;   (* [12, 13, 37, 39]*)
let (element, q3) = delete_min q3;;   (* 12 * [13, 37, 39]*)
assert(element = 12);;
let (element, q3) = delete_min q3;;   (* 13 * [37, 39]*)
assert(element = 13);;
let q3 = add 2 q3;;   (* [2, 37, 39]*)
let q3 = add 21 q3;;   (* [2, 21, 37, 39]*)
let q3 = add 29 q3;;   (* [2, 21, 29, 37, 39]*)
let q3 = add 36 q3;;   (* [2, 21, 29, 36, 37, 39]*)
let q3 = add 13 q3;;   (* [2, 13, 21, 29, 36, 37, 39]*)
let (element, q3) = delete_min q3;;   (* 2 * [13, 21, 29, 36, 37, 39]*)
assert(element = 2);;
let q3 = add 31 q3;;   (* [13, 21, 29, 31, 36, 37, 39]*)
let q3 = add 20 q3;;   (* [13, 20, 21, 29, 31, 36, 37, 39]*)
assert(is_empty q3 = false);;   (*[13, 20, 21, 29, 31, 36, 37, 39]*)
let q3 = add 34 q3;;   (* [13, 20, 21, 29, 31, 34, 36, 37, 39]*)
let (element, q3) = delete_min q3;;   (* 13 * [20, 21, 29, 31, 34, 36, 37, 39]*)
assert(element = 13);;
assert(is_empty q3 = false);;   (*[20, 21, 29, 31, 34, 36, 37, 39]*)
let (element, q3) = delete_min q3;;   (* 20 * [21, 29, 31, 34, 36, 37, 39]*)
assert(element = 20);;
let (element, q3) = delete_min q3;;   (* 21 * [29, 31, 34, 36, 37, 39]*)
assert(element = 21);;
let q3 = add 29 q3;;   (* [29, 29, 31, 34, 36, 37, 39]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 32 q4;;   (* [32]*)
let q4 = add 13 q4;;   (* [13, 32]*)
let q4 = add 21 q4;;   (* [13, 21, 32]*)
let q4 = add 25 q4;;   (* [13, 21, 25, 32]*)
let q4 = add 25 q4;;   (* [13, 21, 25, 25, 32]*)
let (element, q4) = delete_min q4;;   (* 13 * [21, 25, 25, 32]*)
assert(element = 13);;
let q4 = add 8 q4;;   (* [8, 21, 25, 25, 32]*)
let q4 = add 21 q4;;   (* [8, 21, 21, 25, 25, 32]*)
let q4 = add 13 q4;;   (* [8, 13, 21, 21, 25, 25, 32]*)
assert(is_empty q4 = false);;   (*[8, 13, 21, 21, 25, 25, 32]*)
let q4 = add 13 q4;;   (* [8, 13, 13, 21, 21, 25, 25, 32]*)
let (element, q4) = delete_min q4;;   (* 8 * [13, 13, 21, 21, 25, 25, 32]*)
assert(element = 8);;
let q4 = add 16 q4;;   (* [13, 13, 16, 21, 21, 25, 25, 32]*)
let (element, q4) = delete_min q4;;   (* 13 * [13, 16, 21, 21, 25, 25, 32]*)
assert(element = 13);;
let q4 = add 31 q4;;   (* [13, 16, 21, 21, 25, 25, 31, 32]*)
let (element, q4) = delete_min q4;;   (* 13 * [16, 21, 21, 25, 25, 31, 32]*)
assert(element = 13);;
assert(is_empty q4 = false);;   (*[16, 21, 21, 25, 25, 31, 32]*)
let q4 = add 10 q4;;   (* [10, 16, 21, 21, 25, 25, 31, 32]*)
let (element, q4) = delete_min q4;;   (* 10 * [16, 21, 21, 25, 25, 31, 32]*)
assert(element = 10);;
let q4 = add 19 q4;;   (* [16, 19, 21, 21, 25, 25, 31, 32]*)
assert(is_empty q4 = false);;   (*[16, 19, 21, 21, 25, 25, 31, 32]*)
let (element, q4) = delete_min q4;;   (* 16 * [19, 21, 21, 25, 25, 31, 32]*)
assert(element = 16);;
let q4 = add 21 q4;;   (* [19, 21, 21, 21, 25, 25, 31, 32]*)
let q4 = add 8 q4;;   (* [8, 19, 21, 21, 21, 25, 25, 31, 32]*)
let q4 = add 7 q4;;   (* [7, 8, 19, 21, 21, 21, 25, 25, 31, 32]*)
let q4 = add 3 q4;;   (* [3, 7, 8, 19, 21, 21, 21, 25, 25, 31, 32]*)
assert(is_empty q4 = false);;   (*[3, 7, 8, 19, 21, 21, 21, 25, 25, 31, 32]*)
let q4 = add 35 q4;;   (* [3, 7, 8, 19, 21, 21, 21, 25, 25, 31, 32, 35]*)

(* -------q5------ *)
let q5 = empty;;
let q5 = add 11 q5;;   (* [11]*)
let q5 = add 25 q5;;   (* [11, 25]*)
assert(is_empty q5 = false);;   (*[11, 25]*)
assert(is_empty q5 = false);;   (*[11, 25]*)
let q5 = add 34 q5;;   (* [11, 25, 34]*)
let q5 = add 18 q5;;   (* [11, 18, 25, 34]*)
let (element, q5) = delete_min q5;;   (* 11 * [18, 25, 34]*)
assert(element = 11);;
let q5 = add 30 q5;;   (* [18, 25, 30, 34]*)
let q5 = add 9 q5;;   (* [9, 18, 25, 30, 34]*)
let q5 = add 36 q5;;   (* [9, 18, 25, 30, 34, 36]*)
let q5 = add 4 q5;;   (* [4, 9, 18, 25, 30, 34, 36]*)
let q5 = add 0 q5;;   (* [0, 4, 9, 18, 25, 30, 34, 36]*)
let (element, q5) = delete_min q5;;   (* 0 * [4, 9, 18, 25, 30, 34, 36]*)
assert(element = 0);;
let q5 = add 33 q5;;   (* [4, 9, 18, 25, 30, 33, 34, 36]*)
let (element, q5) = delete_min q5;;   (* 4 * [9, 18, 25, 30, 33, 34, 36]*)
assert(element = 4);;
let (element, q5) = delete_min q5;;   (* 9 * [18, 25, 30, 33, 34, 36]*)
assert(element = 9);;
let q5 = add 35 q5;;   (* [18, 25, 30, 33, 34, 35, 36]*)
let q5 = add 5 q5;;   (* [5, 18, 25, 30, 33, 34, 35, 36]*)
let q5 = add 16 q5;;   (* [5, 16, 18, 25, 30, 33, 34, 35, 36]*)
let q5 = add 15 q5;;   (* [5, 15, 16, 18, 25, 30, 33, 34, 35, 36]*)
let (element, q5) = delete_min q5;;   (* 5 * [15, 16, 18, 25, 30, 33, 34, 35, 36]*)
assert(element = 5);;
let q5 = add 35 q5;;   (* [15, 16, 18, 25, 30, 33, 34, 35, 35, 36]*)
let (element, q5) = delete_min q5;;   (* 15 * [16, 18, 25, 30, 33, 34, 35, 35, 36]*)
assert(element = 15);;
let q5 = add 37 q5;;   (* [16, 18, 25, 30, 33, 34, 35, 35, 36, 37]*)
assert(is_empty q5 = false);;   (*[16, 18, 25, 30, 33, 34, 35, 35, 36, 37]*)
let (element, q5) = delete_min q5;;   (* 16 * [18, 25, 30, 33, 34, 35, 35, 36, 37]*)
assert(element = 16);;
let q5 = add 17 q5;;   (* [17, 18, 25, 30, 33, 34, 35, 35, 36, 37]*)
let (element, q5) = delete_min q5;;   (* 17 * [18, 25, 30, 33, 34, 35, 35, 36, 37]*)
assert(element = 17);;

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[3, 6, 7, 8, 9, 18, 19, 19, 19, 21, 21, 21, 23, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 27, 29, 29, 30, 31, 31, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38]*)
let (element, q) = delete_min q;;   (* 3 * [6, 7, 8, 9, 18, 19, 19, 19, 21, 21, 21, 23, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 27, 29, 29, 30, 31, 31, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 3);;
let (element, q) = delete_min q;;   (* 6 * [7, 8, 9, 18, 19, 19, 19, 21, 21, 21, 23, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 27, 29, 29, 30, 31, 31, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 7 * [8, 9, 18, 19, 19, 19, 21, 21, 21, 23, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 27, 29, 29, 30, 31, 31, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 8 * [9, 18, 19, 19, 19, 21, 21, 21, 23, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 27, 29, 29, 30, 31, 31, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 9 * [18, 19, 19, 19, 21, 21, 21, 23, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 27, 29, 29, 30, 31, 31, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 18 * [19, 19, 19, 21, 21, 21, 23, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 27, 29, 29, 30, 31, 31, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [19, 19, 21, 21, 21, 23, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 27, 29, 29, 30, 31, 31, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [19, 21, 21, 21, 23, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 27, 29, 29, 30, 31, 31, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [21, 21, 21, 23, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 27, 29, 29, 30, 31, 31, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 21 * [21, 21, 23, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 27, 29, 29, 30, 31, 31, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [21, 23, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 27, 29, 29, 30, 31, 31, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [23, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 27, 29, 29, 30, 31, 31, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 23 * [24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 27, 29, 29, 30, 31, 31, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [25, 25, 25, 25, 25, 25, 26, 26, 26, 27, 29, 29, 30, 31, 31, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [25, 25, 25, 25, 25, 26, 26, 26, 27, 29, 29, 30, 31, 31, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [25, 25, 25, 25, 26, 26, 26, 27, 29, 29, 30, 31, 31, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [25, 25, 25, 26, 26, 26, 27, 29, 29, 30, 31, 31, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [25, 25, 26, 26, 26, 27, 29, 29, 30, 31, 31, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [25, 26, 26, 26, 27, 29, 29, 30, 31, 31, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [26, 26, 26, 27, 29, 29, 30, 31, 31, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [26, 26, 27, 29, 29, 30, 31, 31, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [26, 27, 29, 29, 30, 31, 31, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [27, 29, 29, 30, 31, 31, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [29, 29, 30, 31, 31, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 29 * [29, 30, 31, 31, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [30, 31, 31, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [31, 31, 32, 32, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [31, 32, 32, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 36, 37, 37, 37, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 37, 37, 37, 38, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 37, 37, 38, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 37, 37, 38, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [37, 37, 38, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [37, 38, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [38, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST83----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 12 q1;;   (* [12]*)
let (element, q1) = delete_min q1;;   (* 12 * []*)
assert(element = 12);;
let q1 = add 5 q1;;   (* [5]*)
let (element, q1) = delete_min q1;;   (* 5 * []*)
assert(element = 5);;
let q1 = add 8 q1;;   (* [8]*)
let (element, q1) = delete_min q1;;   (* 8 * []*)
assert(element = 8);;
let q1 = add 26 q1;;   (* [26]*)
let q1 = add 3 q1;;   (* [3, 26]*)
let q1 = add 5 q1;;   (* [3, 5, 26]*)
let q1 = add 23 q1;;   (* [3, 5, 23, 26]*)
let (element, q1) = delete_min q1;;   (* 3 * [5, 23, 26]*)
assert(element = 3);;
let q1 = add 39 q1;;   (* [5, 23, 26, 39]*)
let q1 = add 5 q1;;   (* [5, 5, 23, 26, 39]*)
let (element, q1) = delete_min q1;;   (* 5 * [5, 23, 26, 39]*)
assert(element = 5);;
let q1 = add 25 q1;;   (* [5, 23, 25, 26, 39]*)
let q1 = add 2 q1;;   (* [2, 5, 23, 25, 26, 39]*)
let q1 = add 37 q1;;   (* [2, 5, 23, 25, 26, 37, 39]*)
let (element, q1) = delete_min q1;;   (* 2 * [5, 23, 25, 26, 37, 39]*)
assert(element = 2);;
let (element, q1) = delete_min q1;;   (* 5 * [23, 25, 26, 37, 39]*)
assert(element = 5);;
let q1 = add 33 q1;;   (* [23, 25, 26, 33, 37, 39]*)
let q1 = add 35 q1;;   (* [23, 25, 26, 33, 35, 37, 39]*)
let (element, q1) = delete_min q1;;   (* 23 * [25, 26, 33, 35, 37, 39]*)
assert(element = 23);;
let q1 = add 27 q1;;   (* [25, 26, 27, 33, 35, 37, 39]*)
let (element, q1) = delete_min q1;;   (* 25 * [26, 27, 33, 35, 37, 39]*)
assert(element = 25);;
let q1 = add 4 q1;;   (* [4, 26, 27, 33, 35, 37, 39]*)
let (element, q1) = delete_min q1;;   (* 4 * [26, 27, 33, 35, 37, 39]*)
assert(element = 4);;
let q1 = add 7 q1;;   (* [7, 26, 27, 33, 35, 37, 39]*)
let (element, q1) = delete_min q1;;   (* 7 * [26, 27, 33, 35, 37, 39]*)
assert(element = 7);;
let q1 = add 29 q1;;   (* [26, 27, 29, 33, 35, 37, 39]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 13 q2;;   (* [13]*)
let (element, q2) = delete_min q2;;   (* 13 * []*)
assert(element = 13);;
let q2 = add 6 q2;;   (* [6]*)
let q2 = add 26 q2;;   (* [6, 26]*)
let q2 = add 16 q2;;   (* [6, 16, 26]*)
let q2 = add 4 q2;;   (* [4, 6, 16, 26]*)
assert(is_empty q2 = false);;   (*[4, 6, 16, 26]*)
let q2 = add 14 q2;;   (* [4, 6, 14, 16, 26]*)
let (element, q2) = delete_min q2;;   (* 4 * [6, 14, 16, 26]*)
assert(element = 4);;
let q2 = add 17 q2;;   (* [6, 14, 16, 17, 26]*)
let q2 = add 28 q2;;   (* [6, 14, 16, 17, 26, 28]*)
assert(is_empty q2 = false);;   (*[6, 14, 16, 17, 26, 28]*)
let (element, q2) = delete_min q2;;   (* 6 * [14, 16, 17, 26, 28]*)
assert(element = 6);;
let q2 = add 30 q2;;   (* [14, 16, 17, 26, 28, 30]*)
let (element, q2) = delete_min q2;;   (* 14 * [16, 17, 26, 28, 30]*)
assert(element = 14);;
let q2 = add 25 q2;;   (* [16, 17, 25, 26, 28, 30]*)
let q2 = add 15 q2;;   (* [15, 16, 17, 25, 26, 28, 30]*)
let q2 = add 5 q2;;   (* [5, 15, 16, 17, 25, 26, 28, 30]*)
let q2 = add 1 q2;;   (* [1, 5, 15, 16, 17, 25, 26, 28, 30]*)
let q2 = add 19 q2;;   (* [1, 5, 15, 16, 17, 19, 25, 26, 28, 30]*)
let q2 = add 21 q2;;   (* [1, 5, 15, 16, 17, 19, 21, 25, 26, 28, 30]*)
let q2 = add 38 q2;;   (* [1, 5, 15, 16, 17, 19, 21, 25, 26, 28, 30, 38]*)
let (element, q2) = delete_min q2;;   (* 1 * [5, 15, 16, 17, 19, 21, 25, 26, 28, 30, 38]*)
assert(element = 1);;
let q2 = add 37 q2;;   (* [5, 15, 16, 17, 19, 21, 25, 26, 28, 30, 37, 38]*)
let (element, q2) = delete_min q2;;   (* 5 * [15, 16, 17, 19, 21, 25, 26, 28, 30, 37, 38]*)
assert(element = 5);;
assert(is_empty q2 = false);;   (*[15, 16, 17, 19, 21, 25, 26, 28, 30, 37, 38]*)
let q2 = add 2 q2;;   (* [2, 15, 16, 17, 19, 21, 25, 26, 28, 30, 37, 38]*)
let (element, q2) = delete_min q2;;   (* 2 * [15, 16, 17, 19, 21, 25, 26, 28, 30, 37, 38]*)
assert(element = 2);;
assert(is_empty q2 = false);;   (*[15, 16, 17, 19, 21, 25, 26, 28, 30, 37, 38]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 36 q3;;   (* [36]*)
let q3 = add 28 q3;;   (* [28, 36]*)
let (element, q3) = delete_min q3;;   (* 28 * [36]*)
assert(element = 28);;
let q3 = add 31 q3;;   (* [31, 36]*)
let q3 = add 7 q3;;   (* [7, 31, 36]*)
let q3 = add 29 q3;;   (* [7, 29, 31, 36]*)
let q3 = add 10 q3;;   (* [7, 10, 29, 31, 36]*)
let q3 = add 2 q3;;   (* [2, 7, 10, 29, 31, 36]*)
let (element, q3) = delete_min q3;;   (* 2 * [7, 10, 29, 31, 36]*)
assert(element = 2);;
let q3 = add 10 q3;;   (* [7, 10, 10, 29, 31, 36]*)
let q3 = add 32 q3;;   (* [7, 10, 10, 29, 31, 32, 36]*)
let (element, q3) = delete_min q3;;   (* 7 * [10, 10, 29, 31, 32, 36]*)
assert(element = 7);;
let q3 = add 31 q3;;   (* [10, 10, 29, 31, 31, 32, 36]*)
let q3 = add 19 q3;;   (* [10, 10, 19, 29, 31, 31, 32, 36]*)
let q3 = add 36 q3;;   (* [10, 10, 19, 29, 31, 31, 32, 36, 36]*)
let q3 = add 23 q3;;   (* [10, 10, 19, 23, 29, 31, 31, 32, 36, 36]*)
assert(is_empty q3 = false);;   (*[10, 10, 19, 23, 29, 31, 31, 32, 36, 36]*)
let q3 = add 21 q3;;   (* [10, 10, 19, 21, 23, 29, 31, 31, 32, 36, 36]*)
assert(is_empty q3 = false);;   (*[10, 10, 19, 21, 23, 29, 31, 31, 32, 36, 36]*)
let q3 = add 7 q3;;   (* [7, 10, 10, 19, 21, 23, 29, 31, 31, 32, 36, 36]*)
let q3 = add 10 q3;;   (* [7, 10, 10, 10, 19, 21, 23, 29, 31, 31, 32, 36, 36]*)
let q3 = add 28 q3;;   (* [7, 10, 10, 10, 19, 21, 23, 28, 29, 31, 31, 32, 36, 36]*)
let q3 = add 18 q3;;   (* [7, 10, 10, 10, 18, 19, 21, 23, 28, 29, 31, 31, 32, 36, 36]*)
let q3 = add 4 q3;;   (* [4, 7, 10, 10, 10, 18, 19, 21, 23, 28, 29, 31, 31, 32, 36, 36]*)
let (element, q3) = delete_min q3;;   (* 4 * [7, 10, 10, 10, 18, 19, 21, 23, 28, 29, 31, 31, 32, 36, 36]*)
assert(element = 4);;
let (element, q3) = delete_min q3;;   (* 7 * [10, 10, 10, 18, 19, 21, 23, 28, 29, 31, 31, 32, 36, 36]*)
assert(element = 7);;
let q3 = add 14 q3;;   (* [10, 10, 10, 14, 18, 19, 21, 23, 28, 29, 31, 31, 32, 36, 36]*)
let q3 = add 32 q3;;   (* [10, 10, 10, 14, 18, 19, 21, 23, 28, 29, 31, 31, 32, 32, 36, 36]*)
let (element, q3) = delete_min q3;;   (* 10 * [10, 10, 14, 18, 19, 21, 23, 28, 29, 31, 31, 32, 32, 36, 36]*)
assert(element = 10);;

(* -------q4------ *)
let q4 = empty;;
let q4 = add 38 q4;;   (* [38]*)
let q4 = add 33 q4;;   (* [33, 38]*)
let q4 = add 21 q4;;   (* [21, 33, 38]*)
let (element, q4) = delete_min q4;;   (* 21 * [33, 38]*)
assert(element = 21);;
let q4 = add 25 q4;;   (* [25, 33, 38]*)
let q4 = add 34 q4;;   (* [25, 33, 34, 38]*)
let q4 = add 26 q4;;   (* [25, 26, 33, 34, 38]*)
let q4 = add 22 q4;;   (* [22, 25, 26, 33, 34, 38]*)
let q4 = add 1 q4;;   (* [1, 22, 25, 26, 33, 34, 38]*)
let q4 = add 20 q4;;   (* [1, 20, 22, 25, 26, 33, 34, 38]*)
let q4 = add 2 q4;;   (* [1, 2, 20, 22, 25, 26, 33, 34, 38]*)
let (element, q4) = delete_min q4;;   (* 1 * [2, 20, 22, 25, 26, 33, 34, 38]*)
assert(element = 1);;
let (element, q4) = delete_min q4;;   (* 2 * [20, 22, 25, 26, 33, 34, 38]*)
assert(element = 2);;
let q4 = add 4 q4;;   (* [4, 20, 22, 25, 26, 33, 34, 38]*)
let q4 = add 5 q4;;   (* [4, 5, 20, 22, 25, 26, 33, 34, 38]*)
let q4 = add 13 q4;;   (* [4, 5, 13, 20, 22, 25, 26, 33, 34, 38]*)
let q4 = add 16 q4;;   (* [4, 5, 13, 16, 20, 22, 25, 26, 33, 34, 38]*)
let (element, q4) = delete_min q4;;   (* 4 * [5, 13, 16, 20, 22, 25, 26, 33, 34, 38]*)
assert(element = 4);;
let (element, q4) = delete_min q4;;   (* 5 * [13, 16, 20, 22, 25, 26, 33, 34, 38]*)
assert(element = 5);;
let q4 = add 20 q4;;   (* [13, 16, 20, 20, 22, 25, 26, 33, 34, 38]*)
let (element, q4) = delete_min q4;;   (* 13 * [16, 20, 20, 22, 25, 26, 33, 34, 38]*)
assert(element = 13);;
let (element, q4) = delete_min q4;;   (* 16 * [20, 20, 22, 25, 26, 33, 34, 38]*)
assert(element = 16);;
assert(is_empty q4 = false);;   (*[20, 20, 22, 25, 26, 33, 34, 38]*)
let q4 = add 20 q4;;   (* [20, 20, 20, 22, 25, 26, 33, 34, 38]*)
let (element, q4) = delete_min q4;;   (* 20 * [20, 20, 22, 25, 26, 33, 34, 38]*)
assert(element = 20);;
let q4 = add 25 q4;;   (* [20, 20, 22, 25, 25, 26, 33, 34, 38]*)
let (element, q4) = delete_min q4;;   (* 20 * [20, 22, 25, 25, 26, 33, 34, 38]*)
assert(element = 20);;
let q4 = add 16 q4;;   (* [16, 20, 22, 25, 25, 26, 33, 34, 38]*)
let q4 = add 16 q4;;   (* [16, 16, 20, 22, 25, 25, 26, 33, 34, 38]*)

(* -------q5------ *)
let q5 = empty;;
let q5 = add 36 q5;;   (* [36]*)
let (element, q5) = delete_min q5;;   (* 36 * []*)
assert(element = 36);;
let q5 = add 35 q5;;   (* [35]*)
let (element, q5) = delete_min q5;;   (* 35 * []*)
assert(element = 35);;
let q5 = add 33 q5;;   (* [33]*)
let q5 = add 31 q5;;   (* [31, 33]*)
let q5 = add 0 q5;;   (* [0, 31, 33]*)
let (element, q5) = delete_min q5;;   (* 0 * [31, 33]*)
assert(element = 0);;
let q5 = add 2 q5;;   (* [2, 31, 33]*)
let q5 = add 5 q5;;   (* [2, 5, 31, 33]*)
let q5 = add 7 q5;;   (* [2, 5, 7, 31, 33]*)
let q5 = add 36 q5;;   (* [2, 5, 7, 31, 33, 36]*)
let q5 = add 38 q5;;   (* [2, 5, 7, 31, 33, 36, 38]*)
let q5 = add 35 q5;;   (* [2, 5, 7, 31, 33, 35, 36, 38]*)
let q5 = add 17 q5;;   (* [2, 5, 7, 17, 31, 33, 35, 36, 38]*)
let q5 = add 13 q5;;   (* [2, 5, 7, 13, 17, 31, 33, 35, 36, 38]*)
let q5 = add 20 q5;;   (* [2, 5, 7, 13, 17, 20, 31, 33, 35, 36, 38]*)
let q5 = add 21 q5;;   (* [2, 5, 7, 13, 17, 20, 21, 31, 33, 35, 36, 38]*)
let q5 = add 15 q5;;   (* [2, 5, 7, 13, 15, 17, 20, 21, 31, 33, 35, 36, 38]*)
let q5 = add 24 q5;;   (* [2, 5, 7, 13, 15, 17, 20, 21, 24, 31, 33, 35, 36, 38]*)
let q5 = add 39 q5;;   (* [2, 5, 7, 13, 15, 17, 20, 21, 24, 31, 33, 35, 36, 38, 39]*)
let q5 = add 7 q5;;   (* [2, 5, 7, 7, 13, 15, 17, 20, 21, 24, 31, 33, 35, 36, 38, 39]*)
let q5 = add 36 q5;;   (* [2, 5, 7, 7, 13, 15, 17, 20, 21, 24, 31, 33, 35, 36, 36, 38, 39]*)
let (element, q5) = delete_min q5;;   (* 2 * [5, 7, 7, 13, 15, 17, 20, 21, 24, 31, 33, 35, 36, 36, 38, 39]*)
assert(element = 2);;
let (element, q5) = delete_min q5;;   (* 5 * [7, 7, 13, 15, 17, 20, 21, 24, 31, 33, 35, 36, 36, 38, 39]*)
assert(element = 5);;
let (element, q5) = delete_min q5;;   (* 7 * [7, 13, 15, 17, 20, 21, 24, 31, 33, 35, 36, 36, 38, 39]*)
assert(element = 7);;
let q5 = add 4 q5;;   (* [4, 7, 13, 15, 17, 20, 21, 24, 31, 33, 35, 36, 36, 38, 39]*)
let q5 = add 10 q5;;   (* [4, 7, 10, 13, 15, 17, 20, 21, 24, 31, 33, 35, 36, 36, 38, 39]*)
let (element, q5) = delete_min q5;;   (* 4 * [7, 10, 13, 15, 17, 20, 21, 24, 31, 33, 35, 36, 36, 38, 39]*)
assert(element = 4);;

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[7, 10, 10, 10, 13, 14, 15, 15, 16, 16, 16, 17, 17, 18, 19, 19, 20, 20, 21, 21, 21, 22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39]*)
let (element, q) = delete_min q;;   (* 7 * [10, 10, 10, 13, 14, 15, 15, 16, 16, 16, 17, 17, 18, 19, 19, 20, 20, 21, 21, 21, 22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 10 * [10, 10, 13, 14, 15, 15, 16, 16, 16, 17, 17, 18, 19, 19, 20, 20, 21, 21, 21, 22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 10 * [10, 13, 14, 15, 15, 16, 16, 16, 17, 17, 18, 19, 19, 20, 20, 21, 21, 21, 22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 10 * [13, 14, 15, 15, 16, 16, 16, 17, 17, 18, 19, 19, 20, 20, 21, 21, 21, 22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 13 * [14, 15, 15, 16, 16, 16, 17, 17, 18, 19, 19, 20, 20, 21, 21, 21, 22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 14 * [15, 15, 16, 16, 16, 17, 17, 18, 19, 19, 20, 20, 21, 21, 21, 22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [15, 16, 16, 16, 17, 17, 18, 19, 19, 20, 20, 21, 21, 21, 22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [16, 16, 16, 17, 17, 18, 19, 19, 20, 20, 21, 21, 21, 22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [16, 16, 17, 17, 18, 19, 19, 20, 20, 21, 21, 21, 22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [16, 17, 17, 18, 19, 19, 20, 20, 21, 21, 21, 22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [17, 17, 18, 19, 19, 20, 20, 21, 21, 21, 22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 17 * [17, 18, 19, 19, 20, 20, 21, 21, 21, 22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [18, 19, 19, 20, 20, 21, 21, 21, 22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [19, 19, 20, 20, 21, 21, 21, 22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [19, 20, 20, 21, 21, 21, 22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [20, 20, 21, 21, 21, 22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [20, 21, 21, 21, 22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [21, 21, 21, 22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [21, 21, 22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [21, 22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [22, 23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [23, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [25, 25, 26, 26, 26, 27, 28, 28, 29, 29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [25, 26, 26, 26, 27, 28, 28, 29, 29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [26, 26, 26, 27, 28, 28, 29, 29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [26, 26, 27, 28, 28, 29, 29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [26, 27, 28, 28, 29, 29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [27, 28, 28, 29, 29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [28, 28, 29, 29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [28, 29, 29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [29, 29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [29, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 37, 38, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [37, 38, 38, 38, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [38, 38, 38, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST84----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 19 q1;;   (* [19]*)
let q1 = add 5 q1;;   (* [5, 19]*)
let q1 = add 5 q1;;   (* [5, 5, 19]*)
let q1 = add 35 q1;;   (* [5, 5, 19, 35]*)
assert(is_empty q1 = false);;   (*[5, 5, 19, 35]*)
let q1 = add 13 q1;;   (* [5, 5, 13, 19, 35]*)
let q1 = add 37 q1;;   (* [5, 5, 13, 19, 35, 37]*)
let q1 = add 0 q1;;   (* [0, 5, 5, 13, 19, 35, 37]*)
let q1 = add 10 q1;;   (* [0, 5, 5, 10, 13, 19, 35, 37]*)
let (element, q1) = delete_min q1;;   (* 0 * [5, 5, 10, 13, 19, 35, 37]*)
assert(element = 0);;
let q1 = add 23 q1;;   (* [5, 5, 10, 13, 19, 23, 35, 37]*)
let q1 = add 34 q1;;   (* [5, 5, 10, 13, 19, 23, 34, 35, 37]*)
let (element, q1) = delete_min q1;;   (* 5 * [5, 10, 13, 19, 23, 34, 35, 37]*)
assert(element = 5);;
let (element, q1) = delete_min q1;;   (* 5 * [10, 13, 19, 23, 34, 35, 37]*)
assert(element = 5);;
let q1 = add 17 q1;;   (* [10, 13, 17, 19, 23, 34, 35, 37]*)
let q1 = add 21 q1;;   (* [10, 13, 17, 19, 21, 23, 34, 35, 37]*)
let q1 = add 18 q1;;   (* [10, 13, 17, 18, 19, 21, 23, 34, 35, 37]*)
let q1 = add 3 q1;;   (* [3, 10, 13, 17, 18, 19, 21, 23, 34, 35, 37]*)
let (element, q1) = delete_min q1;;   (* 3 * [10, 13, 17, 18, 19, 21, 23, 34, 35, 37]*)
assert(element = 3);;
let (element, q1) = delete_min q1;;   (* 10 * [13, 17, 18, 19, 21, 23, 34, 35, 37]*)
assert(element = 10);;
let (element, q1) = delete_min q1;;   (* 13 * [17, 18, 19, 21, 23, 34, 35, 37]*)
assert(element = 13);;
let q1 = add 10 q1;;   (* [10, 17, 18, 19, 21, 23, 34, 35, 37]*)
let q1 = add 26 q1;;   (* [10, 17, 18, 19, 21, 23, 26, 34, 35, 37]*)
let q1 = add 37 q1;;   (* [10, 17, 18, 19, 21, 23, 26, 34, 35, 37, 37]*)
let (element, q1) = delete_min q1;;   (* 10 * [17, 18, 19, 21, 23, 26, 34, 35, 37, 37]*)
assert(element = 10);;
let q1 = add 23 q1;;   (* [17, 18, 19, 21, 23, 23, 26, 34, 35, 37, 37]*)
let q1 = add 5 q1;;   (* [5, 17, 18, 19, 21, 23, 23, 26, 34, 35, 37, 37]*)
assert(is_empty q1 = false);;   (*[5, 17, 18, 19, 21, 23, 23, 26, 34, 35, 37, 37]*)
assert(is_empty q1 = false);;   (*[5, 17, 18, 19, 21, 23, 23, 26, 34, 35, 37, 37]*)
let (element, q1) = delete_min q1;;   (* 5 * [17, 18, 19, 21, 23, 23, 26, 34, 35, 37, 37]*)
assert(element = 5);;

(* -------q2------ *)
let q2 = empty;;
assert(is_empty q2 = true);;   (*[]*)
let q2 = add 39 q2;;   (* [39]*)
let q2 = add 12 q2;;   (* [12, 39]*)
let q2 = add 30 q2;;   (* [12, 30, 39]*)
assert(is_empty q2 = false);;   (*[12, 30, 39]*)
let q2 = add 5 q2;;   (* [5, 12, 30, 39]*)
assert(is_empty q2 = false);;   (*[5, 12, 30, 39]*)
let q2 = add 20 q2;;   (* [5, 12, 20, 30, 39]*)
let q2 = add 12 q2;;   (* [5, 12, 12, 20, 30, 39]*)
let q2 = add 21 q2;;   (* [5, 12, 12, 20, 21, 30, 39]*)
let (element, q2) = delete_min q2;;   (* 5 * [12, 12, 20, 21, 30, 39]*)
assert(element = 5);;
let (element, q2) = delete_min q2;;   (* 12 * [12, 20, 21, 30, 39]*)
assert(element = 12);;
let q2 = add 25 q2;;   (* [12, 20, 21, 25, 30, 39]*)
let q2 = add 9 q2;;   (* [9, 12, 20, 21, 25, 30, 39]*)
let (element, q2) = delete_min q2;;   (* 9 * [12, 20, 21, 25, 30, 39]*)
assert(element = 9);;
let q2 = add 33 q2;;   (* [12, 20, 21, 25, 30, 33, 39]*)
let q2 = add 22 q2;;   (* [12, 20, 21, 22, 25, 30, 33, 39]*)
let q2 = add 20 q2;;   (* [12, 20, 20, 21, 22, 25, 30, 33, 39]*)
let q2 = add 28 q2;;   (* [12, 20, 20, 21, 22, 25, 28, 30, 33, 39]*)
let q2 = add 25 q2;;   (* [12, 20, 20, 21, 22, 25, 25, 28, 30, 33, 39]*)
let q2 = add 4 q2;;   (* [4, 12, 20, 20, 21, 22, 25, 25, 28, 30, 33, 39]*)
assert(is_empty q2 = false);;   (*[4, 12, 20, 20, 21, 22, 25, 25, 28, 30, 33, 39]*)
let (element, q2) = delete_min q2;;   (* 4 * [12, 20, 20, 21, 22, 25, 25, 28, 30, 33, 39]*)
assert(element = 4);;
let q2 = add 38 q2;;   (* [12, 20, 20, 21, 22, 25, 25, 28, 30, 33, 38, 39]*)
let q2 = add 20 q2;;   (* [12, 20, 20, 20, 21, 22, 25, 25, 28, 30, 33, 38, 39]*)
let q2 = add 34 q2;;   (* [12, 20, 20, 20, 21, 22, 25, 25, 28, 30, 33, 34, 38, 39]*)
let q2 = add 15 q2;;   (* [12, 15, 20, 20, 20, 21, 22, 25, 25, 28, 30, 33, 34, 38, 39]*)
let q2 = add 7 q2;;   (* [7, 12, 15, 20, 20, 20, 21, 22, 25, 25, 28, 30, 33, 34, 38, 39]*)
let (element, q2) = delete_min q2;;   (* 7 * [12, 15, 20, 20, 20, 21, 22, 25, 25, 28, 30, 33, 34, 38, 39]*)
assert(element = 7);;
assert(is_empty q2 = false);;   (*[12, 15, 20, 20, 20, 21, 22, 25, 25, 28, 30, 33, 34, 38, 39]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 16 q3;;   (* [16]*)
let (element, q3) = delete_min q3;;   (* 16 * []*)
assert(element = 16);;
let q3 = add 12 q3;;   (* [12]*)
let q3 = add 37 q3;;   (* [12, 37]*)
let q3 = add 15 q3;;   (* [12, 15, 37]*)
let q3 = add 26 q3;;   (* [12, 15, 26, 37]*)
let q3 = add 27 q3;;   (* [12, 15, 26, 27, 37]*)
let q3 = add 22 q3;;   (* [12, 15, 22, 26, 27, 37]*)
let q3 = add 24 q3;;   (* [12, 15, 22, 24, 26, 27, 37]*)
let q3 = add 5 q3;;   (* [5, 12, 15, 22, 24, 26, 27, 37]*)
let q3 = add 18 q3;;   (* [5, 12, 15, 18, 22, 24, 26, 27, 37]*)
let q3 = add 4 q3;;   (* [4, 5, 12, 15, 18, 22, 24, 26, 27, 37]*)
let q3 = add 18 q3;;   (* [4, 5, 12, 15, 18, 18, 22, 24, 26, 27, 37]*)
let (element, q3) = delete_min q3;;   (* 4 * [5, 12, 15, 18, 18, 22, 24, 26, 27, 37]*)
assert(element = 4);;
let q3 = add 36 q3;;   (* [5, 12, 15, 18, 18, 22, 24, 26, 27, 36, 37]*)
let (element, q3) = delete_min q3;;   (* 5 * [12, 15, 18, 18, 22, 24, 26, 27, 36, 37]*)
assert(element = 5);;
let q3 = add 10 q3;;   (* [10, 12, 15, 18, 18, 22, 24, 26, 27, 36, 37]*)
let q3 = add 39 q3;;   (* [10, 12, 15, 18, 18, 22, 24, 26, 27, 36, 37, 39]*)
let (element, q3) = delete_min q3;;   (* 10 * [12, 15, 18, 18, 22, 24, 26, 27, 36, 37, 39]*)
assert(element = 10);;
let (element, q3) = delete_min q3;;   (* 12 * [15, 18, 18, 22, 24, 26, 27, 36, 37, 39]*)
assert(element = 12);;
let q3 = add 6 q3;;   (* [6, 15, 18, 18, 22, 24, 26, 27, 36, 37, 39]*)
let (element, q3) = delete_min q3;;   (* 6 * [15, 18, 18, 22, 24, 26, 27, 36, 37, 39]*)
assert(element = 6);;
let q3 = add 4 q3;;   (* [4, 15, 18, 18, 22, 24, 26, 27, 36, 37, 39]*)
let q3 = add 16 q3;;   (* [4, 15, 16, 18, 18, 22, 24, 26, 27, 36, 37, 39]*)
let q3 = add 36 q3;;   (* [4, 15, 16, 18, 18, 22, 24, 26, 27, 36, 36, 37, 39]*)
let (element, q3) = delete_min q3;;   (* 4 * [15, 16, 18, 18, 22, 24, 26, 27, 36, 36, 37, 39]*)
assert(element = 4);;
let q3 = add 36 q3;;   (* [15, 16, 18, 18, 22, 24, 26, 27, 36, 36, 36, 37, 39]*)
let q3 = add 17 q3;;   (* [15, 16, 17, 18, 18, 22, 24, 26, 27, 36, 36, 36, 37, 39]*)
let q3 = add 28 q3;;   (* [15, 16, 17, 18, 18, 22, 24, 26, 27, 28, 36, 36, 36, 37, 39]*)
let (element, q3) = delete_min q3;;   (* 15 * [16, 17, 18, 18, 22, 24, 26, 27, 28, 36, 36, 36, 37, 39]*)
assert(element = 15);;

(* -------q4------ *)
let q4 = empty;;
let q4 = add 28 q4;;   (* [28]*)
let (element, q4) = delete_min q4;;   (* 28 * []*)
assert(element = 28);;
let q4 = add 12 q4;;   (* [12]*)
let q4 = add 15 q4;;   (* [12, 15]*)
let (element, q4) = delete_min q4;;   (* 12 * [15]*)
assert(element = 12);;
let q4 = add 0 q4;;   (* [0, 15]*)
let q4 = add 15 q4;;   (* [0, 15, 15]*)
let (element, q4) = delete_min q4;;   (* 0 * [15, 15]*)
assert(element = 0);;
let q4 = add 4 q4;;   (* [4, 15, 15]*)
let q4 = add 16 q4;;   (* [4, 15, 15, 16]*)
let q4 = add 34 q4;;   (* [4, 15, 15, 16, 34]*)
let q4 = add 20 q4;;   (* [4, 15, 15, 16, 20, 34]*)
let q4 = add 20 q4;;   (* [4, 15, 15, 16, 20, 20, 34]*)
let q4 = add 10 q4;;   (* [4, 10, 15, 15, 16, 20, 20, 34]*)
let (element, q4) = delete_min q4;;   (* 4 * [10, 15, 15, 16, 20, 20, 34]*)
assert(element = 4);;
let q4 = add 20 q4;;   (* [10, 15, 15, 16, 20, 20, 20, 34]*)
let q4 = add 31 q4;;   (* [10, 15, 15, 16, 20, 20, 20, 31, 34]*)
let (element, q4) = delete_min q4;;   (* 10 * [15, 15, 16, 20, 20, 20, 31, 34]*)
assert(element = 10);;
let (element, q4) = delete_min q4;;   (* 15 * [15, 16, 20, 20, 20, 31, 34]*)
assert(element = 15);;
let (element, q4) = delete_min q4;;   (* 15 * [16, 20, 20, 20, 31, 34]*)
assert(element = 15);;
let q4 = add 35 q4;;   (* [16, 20, 20, 20, 31, 34, 35]*)
let (element, q4) = delete_min q4;;   (* 16 * [20, 20, 20, 31, 34, 35]*)
assert(element = 16);;
let q4 = add 8 q4;;   (* [8, 20, 20, 20, 31, 34, 35]*)
let q4 = add 21 q4;;   (* [8, 20, 20, 20, 21, 31, 34, 35]*)
let q4 = add 16 q4;;   (* [8, 16, 20, 20, 20, 21, 31, 34, 35]*)
let q4 = add 28 q4;;   (* [8, 16, 20, 20, 20, 21, 28, 31, 34, 35]*)
let q4 = add 38 q4;;   (* [8, 16, 20, 20, 20, 21, 28, 31, 34, 35, 38]*)
assert(is_empty q4 = false);;   (*[8, 16, 20, 20, 20, 21, 28, 31, 34, 35, 38]*)
let q4 = add 1 q4;;   (* [1, 8, 16, 20, 20, 20, 21, 28, 31, 34, 35, 38]*)
let q4 = add 1 q4;;   (* [1, 1, 8, 16, 20, 20, 20, 21, 28, 31, 34, 35, 38]*)

(* -------q5------ *)
let q5 = empty;;
let q5 = add 21 q5;;   (* [21]*)
let (element, q5) = delete_min q5;;   (* 21 * []*)
assert(element = 21);;
let q5 = add 3 q5;;   (* [3]*)
let (element, q5) = delete_min q5;;   (* 3 * []*)
assert(element = 3);;
let q5 = add 22 q5;;   (* [22]*)
let q5 = add 33 q5;;   (* [22, 33]*)
let (element, q5) = delete_min q5;;   (* 22 * [33]*)
assert(element = 22);;
let q5 = add 28 q5;;   (* [28, 33]*)
let q5 = add 12 q5;;   (* [12, 28, 33]*)
let q5 = add 22 q5;;   (* [12, 22, 28, 33]*)
let (element, q5) = delete_min q5;;   (* 12 * [22, 28, 33]*)
assert(element = 12);;
assert(is_empty q5 = false);;   (*[22, 28, 33]*)
let q5 = add 2 q5;;   (* [2, 22, 28, 33]*)
let q5 = add 28 q5;;   (* [2, 22, 28, 28, 33]*)
let q5 = add 5 q5;;   (* [2, 5, 22, 28, 28, 33]*)
let (element, q5) = delete_min q5;;   (* 2 * [5, 22, 28, 28, 33]*)
assert(element = 2);;
let q5 = add 25 q5;;   (* [5, 22, 25, 28, 28, 33]*)
let (element, q5) = delete_min q5;;   (* 5 * [22, 25, 28, 28, 33]*)
assert(element = 5);;
assert(is_empty q5 = false);;   (*[22, 25, 28, 28, 33]*)
let q5 = add 8 q5;;   (* [8, 22, 25, 28, 28, 33]*)
let q5 = add 16 q5;;   (* [8, 16, 22, 25, 28, 28, 33]*)
let (element, q5) = delete_min q5;;   (* 8 * [16, 22, 25, 28, 28, 33]*)
assert(element = 8);;
let q5 = add 37 q5;;   (* [16, 22, 25, 28, 28, 33, 37]*)
let (element, q5) = delete_min q5;;   (* 16 * [22, 25, 28, 28, 33, 37]*)
assert(element = 16);;
let q5 = add 5 q5;;   (* [5, 22, 25, 28, 28, 33, 37]*)
let (element, q5) = delete_min q5;;   (* 5 * [22, 25, 28, 28, 33, 37]*)
assert(element = 5);;
let q5 = add 21 q5;;   (* [21, 22, 25, 28, 28, 33, 37]*)
let (element, q5) = delete_min q5;;   (* 21 * [22, 25, 28, 28, 33, 37]*)
assert(element = 21);;
assert(is_empty q5 = false);;   (*[22, 25, 28, 28, 33, 37]*)
let (element, q5) = delete_min q5;;   (* 22 * [25, 28, 28, 33, 37]*)
assert(element = 22);;

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[1, 1, 8, 12, 15, 16, 16, 17, 17, 18, 18, 18, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 25, 25, 25, 26, 26, 27, 28, 28, 28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39]*)
let (element, q) = delete_min q;;   (* 1 * [1, 8, 12, 15, 16, 16, 17, 17, 18, 18, 18, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 25, 25, 25, 26, 26, 27, 28, 28, 28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 1);;
let (element, q) = delete_min q;;   (* 1 * [8, 12, 15, 16, 16, 17, 17, 18, 18, 18, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 25, 25, 25, 26, 26, 27, 28, 28, 28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 1);;
let (element, q) = delete_min q;;   (* 8 * [12, 15, 16, 16, 17, 17, 18, 18, 18, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 25, 25, 25, 26, 26, 27, 28, 28, 28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 12 * [15, 16, 16, 17, 17, 18, 18, 18, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 25, 25, 25, 26, 26, 27, 28, 28, 28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 15 * [16, 16, 17, 17, 18, 18, 18, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 25, 25, 25, 26, 26, 27, 28, 28, 28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [16, 17, 17, 18, 18, 18, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 25, 25, 25, 26, 26, 27, 28, 28, 28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [17, 17, 18, 18, 18, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 25, 25, 25, 26, 26, 27, 28, 28, 28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 17 * [17, 18, 18, 18, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 25, 25, 25, 26, 26, 27, 28, 28, 28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [18, 18, 18, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 25, 25, 25, 26, 26, 27, 28, 28, 28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [18, 18, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 25, 25, 25, 26, 26, 27, 28, 28, 28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [18, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 25, 25, 25, 26, 26, 27, 28, 28, 28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 25, 25, 25, 26, 26, 27, 28, 28, 28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [20, 20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 25, 25, 25, 26, 26, 27, 28, 28, 28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 25, 25, 25, 26, 26, 27, 28, 28, 28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 25, 25, 25, 26, 26, 27, 28, 28, 28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 25, 25, 25, 26, 26, 27, 28, 28, 28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 25, 25, 25, 26, 26, 27, 28, 28, 28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 21, 21, 21, 22, 22, 23, 23, 24, 25, 25, 25, 26, 26, 27, 28, 28, 28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [21, 21, 21, 22, 22, 23, 23, 24, 25, 25, 25, 26, 26, 27, 28, 28, 28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [21, 21, 22, 22, 23, 23, 24, 25, 25, 25, 26, 26, 27, 28, 28, 28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [21, 22, 22, 23, 23, 24, 25, 25, 25, 26, 26, 27, 28, 28, 28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [22, 22, 23, 23, 24, 25, 25, 25, 26, 26, 27, 28, 28, 28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [22, 23, 23, 24, 25, 25, 25, 26, 26, 27, 28, 28, 28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [23, 23, 24, 25, 25, 25, 26, 26, 27, 28, 28, 28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [23, 24, 25, 25, 25, 26, 26, 27, 28, 28, 28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [24, 25, 25, 25, 26, 26, 27, 28, 28, 28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [25, 25, 25, 26, 26, 27, 28, 28, 28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [25, 25, 26, 26, 27, 28, 28, 28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [25, 26, 26, 27, 28, 28, 28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [26, 26, 27, 28, 28, 28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [26, 27, 28, 28, 28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [27, 28, 28, 28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [28, 28, 28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [30, 31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 30 * [31, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 33 * [33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 37, 37, 37, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [37, 37, 37, 38, 38, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [37, 37, 38, 38, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [37, 38, 38, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [38, 38, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST85----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 1 q1;;   (* [1]*)
let (element, q1) = delete_min q1;;   (* 1 * []*)
assert(element = 1);;
let q1 = add 11 q1;;   (* [11]*)
let q1 = add 39 q1;;   (* [11, 39]*)
let (element, q1) = delete_min q1;;   (* 11 * [39]*)
assert(element = 11);;
let q1 = add 2 q1;;   (* [2, 39]*)
let q1 = add 31 q1;;   (* [2, 31, 39]*)
let q1 = add 6 q1;;   (* [2, 6, 31, 39]*)
let q1 = add 23 q1;;   (* [2, 6, 23, 31, 39]*)
let q1 = add 7 q1;;   (* [2, 6, 7, 23, 31, 39]*)
let q1 = add 20 q1;;   (* [2, 6, 7, 20, 23, 31, 39]*)
let q1 = add 37 q1;;   (* [2, 6, 7, 20, 23, 31, 37, 39]*)
let q1 = add 35 q1;;   (* [2, 6, 7, 20, 23, 31, 35, 37, 39]*)
let q1 = add 33 q1;;   (* [2, 6, 7, 20, 23, 31, 33, 35, 37, 39]*)
let q1 = add 22 q1;;   (* [2, 6, 7, 20, 22, 23, 31, 33, 35, 37, 39]*)
let q1 = add 4 q1;;   (* [2, 4, 6, 7, 20, 22, 23, 31, 33, 35, 37, 39]*)
let (element, q1) = delete_min q1;;   (* 2 * [4, 6, 7, 20, 22, 23, 31, 33, 35, 37, 39]*)
assert(element = 2);;
let (element, q1) = delete_min q1;;   (* 4 * [6, 7, 20, 22, 23, 31, 33, 35, 37, 39]*)
assert(element = 4);;
let q1 = add 16 q1;;   (* [6, 7, 16, 20, 22, 23, 31, 33, 35, 37, 39]*)
let q1 = add 15 q1;;   (* [6, 7, 15, 16, 20, 22, 23, 31, 33, 35, 37, 39]*)
let (element, q1) = delete_min q1;;   (* 6 * [7, 15, 16, 20, 22, 23, 31, 33, 35, 37, 39]*)
assert(element = 6);;
assert(is_empty q1 = false);;   (*[7, 15, 16, 20, 22, 23, 31, 33, 35, 37, 39]*)
assert(is_empty q1 = false);;   (*[7, 15, 16, 20, 22, 23, 31, 33, 35, 37, 39]*)
let q1 = add 11 q1;;   (* [7, 11, 15, 16, 20, 22, 23, 31, 33, 35, 37, 39]*)
let q1 = add 2 q1;;   (* [2, 7, 11, 15, 16, 20, 22, 23, 31, 33, 35, 37, 39]*)
assert(is_empty q1 = false);;   (*[2, 7, 11, 15, 16, 20, 22, 23, 31, 33, 35, 37, 39]*)
assert(is_empty q1 = false);;   (*[2, 7, 11, 15, 16, 20, 22, 23, 31, 33, 35, 37, 39]*)
let (element, q1) = delete_min q1;;   (* 2 * [7, 11, 15, 16, 20, 22, 23, 31, 33, 35, 37, 39]*)
assert(element = 2);;
let q1 = add 29 q1;;   (* [7, 11, 15, 16, 20, 22, 23, 29, 31, 33, 35, 37, 39]*)
let q1 = add 7 q1;;   (* [7, 7, 11, 15, 16, 20, 22, 23, 29, 31, 33, 35, 37, 39]*)
let q1 = add 16 q1;;   (* [7, 7, 11, 15, 16, 16, 20, 22, 23, 29, 31, 33, 35, 37, 39]*)

(* -------q2------ *)
let q2 = empty;;
assert(is_empty q2 = true);;   (*[]*)
let q2 = add 9 q2;;   (* [9]*)
let q2 = add 28 q2;;   (* [9, 28]*)
let (element, q2) = delete_min q2;;   (* 9 * [28]*)
assert(element = 9);;
let q2 = add 24 q2;;   (* [24, 28]*)
let q2 = add 13 q2;;   (* [13, 24, 28]*)
let (element, q2) = delete_min q2;;   (* 13 * [24, 28]*)
assert(element = 13);;
let q2 = add 18 q2;;   (* [18, 24, 28]*)
let q2 = add 8 q2;;   (* [8, 18, 24, 28]*)
let q2 = add 38 q2;;   (* [8, 18, 24, 28, 38]*)
let q2 = add 24 q2;;   (* [8, 18, 24, 24, 28, 38]*)
let q2 = add 21 q2;;   (* [8, 18, 21, 24, 24, 28, 38]*)
let q2 = add 15 q2;;   (* [8, 15, 18, 21, 24, 24, 28, 38]*)
let q2 = add 32 q2;;   (* [8, 15, 18, 21, 24, 24, 28, 32, 38]*)
let q2 = add 14 q2;;   (* [8, 14, 15, 18, 21, 24, 24, 28, 32, 38]*)
assert(is_empty q2 = false);;   (*[8, 14, 15, 18, 21, 24, 24, 28, 32, 38]*)
let (element, q2) = delete_min q2;;   (* 8 * [14, 15, 18, 21, 24, 24, 28, 32, 38]*)
assert(element = 8);;
let q2 = add 26 q2;;   (* [14, 15, 18, 21, 24, 24, 26, 28, 32, 38]*)
let q2 = add 32 q2;;   (* [14, 15, 18, 21, 24, 24, 26, 28, 32, 32, 38]*)
assert(is_empty q2 = false);;   (*[14, 15, 18, 21, 24, 24, 26, 28, 32, 32, 38]*)
let q2 = add 24 q2;;   (* [14, 15, 18, 21, 24, 24, 24, 26, 28, 32, 32, 38]*)
let q2 = add 6 q2;;   (* [6, 14, 15, 18, 21, 24, 24, 24, 26, 28, 32, 32, 38]*)
let (element, q2) = delete_min q2;;   (* 6 * [14, 15, 18, 21, 24, 24, 24, 26, 28, 32, 32, 38]*)
assert(element = 6);;
let q2 = add 31 q2;;   (* [14, 15, 18, 21, 24, 24, 24, 26, 28, 31, 32, 32, 38]*)
let q2 = add 31 q2;;   (* [14, 15, 18, 21, 24, 24, 24, 26, 28, 31, 31, 32, 32, 38]*)
let (element, q2) = delete_min q2;;   (* 14 * [15, 18, 21, 24, 24, 24, 26, 28, 31, 31, 32, 32, 38]*)
assert(element = 14);;
let q2 = add 2 q2;;   (* [2, 15, 18, 21, 24, 24, 24, 26, 28, 31, 31, 32, 32, 38]*)
let (element, q2) = delete_min q2;;   (* 2 * [15, 18, 21, 24, 24, 24, 26, 28, 31, 31, 32, 32, 38]*)
assert(element = 2);;
let q2 = add 7 q2;;   (* [7, 15, 18, 21, 24, 24, 24, 26, 28, 31, 31, 32, 32, 38]*)
let q2 = add 35 q2;;   (* [7, 15, 18, 21, 24, 24, 24, 26, 28, 31, 31, 32, 32, 35, 38]*)
assert(is_empty q2 = false);;   (*[7, 15, 18, 21, 24, 24, 24, 26, 28, 31, 31, 32, 32, 35, 38]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 9 q3;;   (* [9]*)
let q3 = add 30 q3;;   (* [9, 30]*)
let (element, q3) = delete_min q3;;   (* 9 * [30]*)
assert(element = 9);;
let q3 = add 34 q3;;   (* [30, 34]*)
let q3 = add 1 q3;;   (* [1, 30, 34]*)
let q3 = add 31 q3;;   (* [1, 30, 31, 34]*)
let q3 = add 9 q3;;   (* [1, 9, 30, 31, 34]*)
assert(is_empty q3 = false);;   (*[1, 9, 30, 31, 34]*)
let (element, q3) = delete_min q3;;   (* 1 * [9, 30, 31, 34]*)
assert(element = 1);;
let q3 = add 31 q3;;   (* [9, 30, 31, 31, 34]*)
let (element, q3) = delete_min q3;;   (* 9 * [30, 31, 31, 34]*)
assert(element = 9);;
let q3 = add 14 q3;;   (* [14, 30, 31, 31, 34]*)
let q3 = add 21 q3;;   (* [14, 21, 30, 31, 31, 34]*)
let q3 = add 21 q3;;   (* [14, 21, 21, 30, 31, 31, 34]*)
let q3 = add 29 q3;;   (* [14, 21, 21, 29, 30, 31, 31, 34]*)
let (element, q3) = delete_min q3;;   (* 14 * [21, 21, 29, 30, 31, 31, 34]*)
assert(element = 14);;
let q3 = add 18 q3;;   (* [18, 21, 21, 29, 30, 31, 31, 34]*)
let q3 = add 28 q3;;   (* [18, 21, 21, 28, 29, 30, 31, 31, 34]*)
let (element, q3) = delete_min q3;;   (* 18 * [21, 21, 28, 29, 30, 31, 31, 34]*)
assert(element = 18);;
let q3 = add 11 q3;;   (* [11, 21, 21, 28, 29, 30, 31, 31, 34]*)
assert(is_empty q3 = false);;   (*[11, 21, 21, 28, 29, 30, 31, 31, 34]*)
let q3 = add 19 q3;;   (* [11, 19, 21, 21, 28, 29, 30, 31, 31, 34]*)
let q3 = add 20 q3;;   (* [11, 19, 20, 21, 21, 28, 29, 30, 31, 31, 34]*)
let q3 = add 27 q3;;   (* [11, 19, 20, 21, 21, 27, 28, 29, 30, 31, 31, 34]*)
let q3 = add 1 q3;;   (* [1, 11, 19, 20, 21, 21, 27, 28, 29, 30, 31, 31, 34]*)
let q3 = add 18 q3;;   (* [1, 11, 18, 19, 20, 21, 21, 27, 28, 29, 30, 31, 31, 34]*)
let q3 = add 1 q3;;   (* [1, 1, 11, 18, 19, 20, 21, 21, 27, 28, 29, 30, 31, 31, 34]*)
let q3 = add 34 q3;;   (* [1, 1, 11, 18, 19, 20, 21, 21, 27, 28, 29, 30, 31, 31, 34, 34]*)
let q3 = add 28 q3;;   (* [1, 1, 11, 18, 19, 20, 21, 21, 27, 28, 28, 29, 30, 31, 31, 34, 34]*)
let (element, q3) = delete_min q3;;   (* 1 * [1, 11, 18, 19, 20, 21, 21, 27, 28, 28, 29, 30, 31, 31, 34, 34]*)
assert(element = 1);;
let q3 = add 28 q3;;   (* [1, 11, 18, 19, 20, 21, 21, 27, 28, 28, 28, 29, 30, 31, 31, 34, 34]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 12 q4;;   (* [12]*)
let q4 = add 8 q4;;   (* [8, 12]*)
let (element, q4) = delete_min q4;;   (* 8 * [12]*)
assert(element = 8);;
let (element, q4) = delete_min q4;;   (* 12 * []*)
assert(element = 12);;
let q4 = add 36 q4;;   (* [36]*)
let q4 = add 3 q4;;   (* [3, 36]*)
let q4 = add 37 q4;;   (* [3, 36, 37]*)
let q4 = add 28 q4;;   (* [3, 28, 36, 37]*)
let (element, q4) = delete_min q4;;   (* 3 * [28, 36, 37]*)
assert(element = 3);;
let (element, q4) = delete_min q4;;   (* 28 * [36, 37]*)
assert(element = 28);;
let (element, q4) = delete_min q4;;   (* 36 * [37]*)
assert(element = 36);;
let (element, q4) = delete_min q4;;   (* 37 * []*)
assert(element = 37);;
let q4 = add 37 q4;;   (* [37]*)
let q4 = add 30 q4;;   (* [30, 37]*)
let q4 = add 36 q4;;   (* [30, 36, 37]*)
let q4 = add 17 q4;;   (* [17, 30, 36, 37]*)
let q4 = add 33 q4;;   (* [17, 30, 33, 36, 37]*)
let q4 = add 32 q4;;   (* [17, 30, 32, 33, 36, 37]*)
let q4 = add 24 q4;;   (* [17, 24, 30, 32, 33, 36, 37]*)
let (element, q4) = delete_min q4;;   (* 17 * [24, 30, 32, 33, 36, 37]*)
assert(element = 17);;
let q4 = add 35 q4;;   (* [24, 30, 32, 33, 35, 36, 37]*)
let q4 = add 35 q4;;   (* [24, 30, 32, 33, 35, 35, 36, 37]*)
let (element, q4) = delete_min q4;;   (* 24 * [30, 32, 33, 35, 35, 36, 37]*)
assert(element = 24);;
let (element, q4) = delete_min q4;;   (* 30 * [32, 33, 35, 35, 36, 37]*)
assert(element = 30);;
let q4 = add 30 q4;;   (* [30, 32, 33, 35, 35, 36, 37]*)
let q4 = add 13 q4;;   (* [13, 30, 32, 33, 35, 35, 36, 37]*)
let q4 = add 7 q4;;   (* [7, 13, 30, 32, 33, 35, 35, 36, 37]*)
assert(is_empty q4 = false);;   (*[7, 13, 30, 32, 33, 35, 35, 36, 37]*)
let q4 = add 15 q4;;   (* [7, 13, 15, 30, 32, 33, 35, 35, 36, 37]*)
let q4 = add 28 q4;;   (* [7, 13, 15, 28, 30, 32, 33, 35, 35, 36, 37]*)
let q4 = add 24 q4;;   (* [7, 13, 15, 24, 28, 30, 32, 33, 35, 35, 36, 37]*)

(* -------q5------ *)
let q5 = empty;;
assert(is_empty q5 = true);;   (*[]*)
let q5 = add 39 q5;;   (* [39]*)
let (element, q5) = delete_min q5;;   (* 39 * []*)
assert(element = 39);;
assert(is_empty q5 = true);;   (*[]*)
let q5 = add 31 q5;;   (* [31]*)
let q5 = add 30 q5;;   (* [30, 31]*)
let q5 = add 15 q5;;   (* [15, 30, 31]*)
let (element, q5) = delete_min q5;;   (* 15 * [30, 31]*)
assert(element = 15);;
let q5 = add 28 q5;;   (* [28, 30, 31]*)
let (element, q5) = delete_min q5;;   (* 28 * [30, 31]*)
assert(element = 28);;
let q5 = add 21 q5;;   (* [21, 30, 31]*)
let q5 = add 8 q5;;   (* [8, 21, 30, 31]*)
let q5 = add 5 q5;;   (* [5, 8, 21, 30, 31]*)
let q5 = add 1 q5;;   (* [1, 5, 8, 21, 30, 31]*)
let q5 = add 24 q5;;   (* [1, 5, 8, 21, 24, 30, 31]*)
let (element, q5) = delete_min q5;;   (* 1 * [5, 8, 21, 24, 30, 31]*)
assert(element = 1);;
let q5 = add 24 q5;;   (* [5, 8, 21, 24, 24, 30, 31]*)
let q5 = add 10 q5;;   (* [5, 8, 10, 21, 24, 24, 30, 31]*)
let q5 = add 27 q5;;   (* [5, 8, 10, 21, 24, 24, 27, 30, 31]*)
let q5 = add 14 q5;;   (* [5, 8, 10, 14, 21, 24, 24, 27, 30, 31]*)
let q5 = add 30 q5;;   (* [5, 8, 10, 14, 21, 24, 24, 27, 30, 30, 31]*)
let q5 = add 30 q5;;   (* [5, 8, 10, 14, 21, 24, 24, 27, 30, 30, 30, 31]*)
let q5 = add 5 q5;;   (* [5, 5, 8, 10, 14, 21, 24, 24, 27, 30, 30, 30, 31]*)
let q5 = add 5 q5;;   (* [5, 5, 5, 8, 10, 14, 21, 24, 24, 27, 30, 30, 30, 31]*)
let (element, q5) = delete_min q5;;   (* 5 * [5, 5, 8, 10, 14, 21, 24, 24, 27, 30, 30, 30, 31]*)
assert(element = 5);;
let q5 = add 19 q5;;   (* [5, 5, 8, 10, 14, 19, 21, 24, 24, 27, 30, 30, 30, 31]*)
assert(is_empty q5 = false);;   (*[5, 5, 8, 10, 14, 19, 21, 24, 24, 27, 30, 30, 30, 31]*)
assert(is_empty q5 = false);;   (*[5, 5, 8, 10, 14, 19, 21, 24, 24, 27, 30, 30, 30, 31]*)
let q5 = add 15 q5;;   (* [5, 5, 8, 10, 14, 15, 19, 21, 24, 24, 27, 30, 30, 30, 31]*)
let q5 = add 3 q5;;   (* [3, 5, 5, 8, 10, 14, 15, 19, 21, 24, 24, 27, 30, 30, 30, 31]*)
let q5 = add 5 q5;;   (* [3, 5, 5, 5, 8, 10, 14, 15, 19, 21, 24, 24, 27, 30, 30, 30, 31]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[1, 3, 5, 5, 5, 7, 7, 7, 7, 8, 10, 11, 11, 13, 14, 15, 15, 15, 15, 16, 16, 18, 18, 19, 19, 20, 20, 21, 21, 21, 21, 22, 23, 24, 24, 24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38]*)
let (element, q) = delete_min q;;   (* 1 * [3, 5, 5, 5, 7, 7, 7, 7, 8, 10, 11, 11, 13, 14, 15, 15, 15, 15, 16, 16, 18, 18, 19, 19, 20, 20, 21, 21, 21, 21, 22, 23, 24, 24, 24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 1);;
let (element, q) = delete_min q;;   (* 3 * [5, 5, 5, 7, 7, 7, 7, 8, 10, 11, 11, 13, 14, 15, 15, 15, 15, 16, 16, 18, 18, 19, 19, 20, 20, 21, 21, 21, 21, 22, 23, 24, 24, 24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 3);;
let (element, q) = delete_min q;;   (* 5 * [5, 5, 7, 7, 7, 7, 8, 10, 11, 11, 13, 14, 15, 15, 15, 15, 16, 16, 18, 18, 19, 19, 20, 20, 21, 21, 21, 21, 22, 23, 24, 24, 24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 5 * [5, 7, 7, 7, 7, 8, 10, 11, 11, 13, 14, 15, 15, 15, 15, 16, 16, 18, 18, 19, 19, 20, 20, 21, 21, 21, 21, 22, 23, 24, 24, 24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 5 * [7, 7, 7, 7, 8, 10, 11, 11, 13, 14, 15, 15, 15, 15, 16, 16, 18, 18, 19, 19, 20, 20, 21, 21, 21, 21, 22, 23, 24, 24, 24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 7 * [7, 7, 7, 8, 10, 11, 11, 13, 14, 15, 15, 15, 15, 16, 16, 18, 18, 19, 19, 20, 20, 21, 21, 21, 21, 22, 23, 24, 24, 24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 7 * [7, 7, 8, 10, 11, 11, 13, 14, 15, 15, 15, 15, 16, 16, 18, 18, 19, 19, 20, 20, 21, 21, 21, 21, 22, 23, 24, 24, 24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 7 * [7, 8, 10, 11, 11, 13, 14, 15, 15, 15, 15, 16, 16, 18, 18, 19, 19, 20, 20, 21, 21, 21, 21, 22, 23, 24, 24, 24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 7 * [8, 10, 11, 11, 13, 14, 15, 15, 15, 15, 16, 16, 18, 18, 19, 19, 20, 20, 21, 21, 21, 21, 22, 23, 24, 24, 24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 8 * [10, 11, 11, 13, 14, 15, 15, 15, 15, 16, 16, 18, 18, 19, 19, 20, 20, 21, 21, 21, 21, 22, 23, 24, 24, 24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 10 * [11, 11, 13, 14, 15, 15, 15, 15, 16, 16, 18, 18, 19, 19, 20, 20, 21, 21, 21, 21, 22, 23, 24, 24, 24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 11 * [11, 13, 14, 15, 15, 15, 15, 16, 16, 18, 18, 19, 19, 20, 20, 21, 21, 21, 21, 22, 23, 24, 24, 24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 11 * [13, 14, 15, 15, 15, 15, 16, 16, 18, 18, 19, 19, 20, 20, 21, 21, 21, 21, 22, 23, 24, 24, 24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 13 * [14, 15, 15, 15, 15, 16, 16, 18, 18, 19, 19, 20, 20, 21, 21, 21, 21, 22, 23, 24, 24, 24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 14 * [15, 15, 15, 15, 16, 16, 18, 18, 19, 19, 20, 20, 21, 21, 21, 21, 22, 23, 24, 24, 24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [15, 15, 15, 16, 16, 18, 18, 19, 19, 20, 20, 21, 21, 21, 21, 22, 23, 24, 24, 24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [15, 15, 16, 16, 18, 18, 19, 19, 20, 20, 21, 21, 21, 21, 22, 23, 24, 24, 24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [15, 16, 16, 18, 18, 19, 19, 20, 20, 21, 21, 21, 21, 22, 23, 24, 24, 24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [16, 16, 18, 18, 19, 19, 20, 20, 21, 21, 21, 21, 22, 23, 24, 24, 24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [16, 18, 18, 19, 19, 20, 20, 21, 21, 21, 21, 22, 23, 24, 24, 24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [18, 18, 19, 19, 20, 20, 21, 21, 21, 21, 22, 23, 24, 24, 24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 18 * [18, 19, 19, 20, 20, 21, 21, 21, 21, 22, 23, 24, 24, 24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [19, 19, 20, 20, 21, 21, 21, 21, 22, 23, 24, 24, 24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [19, 20, 20, 21, 21, 21, 21, 22, 23, 24, 24, 24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [20, 20, 21, 21, 21, 21, 22, 23, 24, 24, 24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [20, 21, 21, 21, 21, 22, 23, 24, 24, 24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [21, 21, 21, 21, 22, 23, 24, 24, 24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [21, 21, 21, 22, 23, 24, 24, 24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [21, 21, 22, 23, 24, 24, 24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [21, 22, 23, 24, 24, 24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [22, 23, 24, 24, 24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [23, 24, 24, 24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [24, 24, 24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [24, 24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [24, 24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [24, 24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [24, 24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [24, 26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [26, 27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 26 * [27, 27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [27, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [29, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [31, 31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [31, 31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [31, 31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [31, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [33, 34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [34, 34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 35, 36, 37, 37, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 36, 37, 37, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 37, 37, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 37, 37, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [37, 37, 38, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [37, 38, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [38, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST86----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 10 q1;;   (* [10]*)
let q1 = add 39 q1;;   (* [10, 39]*)
assert(is_empty q1 = false);;   (*[10, 39]*)
let (element, q1) = delete_min q1;;   (* 10 * [39]*)
assert(element = 10);;
let q1 = add 34 q1;;   (* [34, 39]*)
let q1 = add 12 q1;;   (* [12, 34, 39]*)
let q1 = add 34 q1;;   (* [12, 34, 34, 39]*)
assert(is_empty q1 = false);;   (*[12, 34, 34, 39]*)
let q1 = add 34 q1;;   (* [12, 34, 34, 34, 39]*)
let (element, q1) = delete_min q1;;   (* 12 * [34, 34, 34, 39]*)
assert(element = 12);;
let q1 = add 19 q1;;   (* [19, 34, 34, 34, 39]*)
assert(is_empty q1 = false);;   (*[19, 34, 34, 34, 39]*)
let q1 = add 30 q1;;   (* [19, 30, 34, 34, 34, 39]*)
let (element, q1) = delete_min q1;;   (* 19 * [30, 34, 34, 34, 39]*)
assert(element = 19);;
let (element, q1) = delete_min q1;;   (* 30 * [34, 34, 34, 39]*)
assert(element = 30);;
let q1 = add 17 q1;;   (* [17, 34, 34, 34, 39]*)
let (element, q1) = delete_min q1;;   (* 17 * [34, 34, 34, 39]*)
assert(element = 17);;
let (element, q1) = delete_min q1;;   (* 34 * [34, 34, 39]*)
assert(element = 34);;
let (element, q1) = delete_min q1;;   (* 34 * [34, 39]*)
assert(element = 34);;
let q1 = add 25 q1;;   (* [25, 34, 39]*)
let q1 = add 37 q1;;   (* [25, 34, 37, 39]*)
let q1 = add 26 q1;;   (* [25, 26, 34, 37, 39]*)
let q1 = add 38 q1;;   (* [25, 26, 34, 37, 38, 39]*)
let q1 = add 22 q1;;   (* [22, 25, 26, 34, 37, 38, 39]*)
let q1 = add 7 q1;;   (* [7, 22, 25, 26, 34, 37, 38, 39]*)
let q1 = add 5 q1;;   (* [5, 7, 22, 25, 26, 34, 37, 38, 39]*)
let (element, q1) = delete_min q1;;   (* 5 * [7, 22, 25, 26, 34, 37, 38, 39]*)
assert(element = 5);;
let q1 = add 32 q1;;   (* [7, 22, 25, 26, 32, 34, 37, 38, 39]*)
assert(is_empty q1 = false);;   (*[7, 22, 25, 26, 32, 34, 37, 38, 39]*)
let q1 = add 31 q1;;   (* [7, 22, 25, 26, 31, 32, 34, 37, 38, 39]*)
assert(is_empty q1 = false);;   (*[7, 22, 25, 26, 31, 32, 34, 37, 38, 39]*)
let q1 = add 37 q1;;   (* [7, 22, 25, 26, 31, 32, 34, 37, 37, 38, 39]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 7 q2;;   (* [7]*)
let q2 = add 10 q2;;   (* [7, 10]*)
let q2 = add 32 q2;;   (* [7, 10, 32]*)
let q2 = add 27 q2;;   (* [7, 10, 27, 32]*)
let (element, q2) = delete_min q2;;   (* 7 * [10, 27, 32]*)
assert(element = 7);;
let (element, q2) = delete_min q2;;   (* 10 * [27, 32]*)
assert(element = 10);;
assert(is_empty q2 = false);;   (*[27, 32]*)
let q2 = add 31 q2;;   (* [27, 31, 32]*)
let q2 = add 25 q2;;   (* [25, 27, 31, 32]*)
let q2 = add 33 q2;;   (* [25, 27, 31, 32, 33]*)
let q2 = add 34 q2;;   (* [25, 27, 31, 32, 33, 34]*)
assert(is_empty q2 = false);;   (*[25, 27, 31, 32, 33, 34]*)
let q2 = add 20 q2;;   (* [20, 25, 27, 31, 32, 33, 34]*)
let q2 = add 25 q2;;   (* [20, 25, 25, 27, 31, 32, 33, 34]*)
let (element, q2) = delete_min q2;;   (* 20 * [25, 25, 27, 31, 32, 33, 34]*)
assert(element = 20);;
let (element, q2) = delete_min q2;;   (* 25 * [25, 27, 31, 32, 33, 34]*)
assert(element = 25);;
let (element, q2) = delete_min q2;;   (* 25 * [27, 31, 32, 33, 34]*)
assert(element = 25);;
let q2 = add 18 q2;;   (* [18, 27, 31, 32, 33, 34]*)
assert(is_empty q2 = false);;   (*[18, 27, 31, 32, 33, 34]*)
let q2 = add 38 q2;;   (* [18, 27, 31, 32, 33, 34, 38]*)
let q2 = add 39 q2;;   (* [18, 27, 31, 32, 33, 34, 38, 39]*)
let q2 = add 16 q2;;   (* [16, 18, 27, 31, 32, 33, 34, 38, 39]*)
let q2 = add 8 q2;;   (* [8, 16, 18, 27, 31, 32, 33, 34, 38, 39]*)
let (element, q2) = delete_min q2;;   (* 8 * [16, 18, 27, 31, 32, 33, 34, 38, 39]*)
assert(element = 8);;
assert(is_empty q2 = false);;   (*[16, 18, 27, 31, 32, 33, 34, 38, 39]*)
let (element, q2) = delete_min q2;;   (* 16 * [18, 27, 31, 32, 33, 34, 38, 39]*)
assert(element = 16);;
let q2 = add 6 q2;;   (* [6, 18, 27, 31, 32, 33, 34, 38, 39]*)
let q2 = add 20 q2;;   (* [6, 18, 20, 27, 31, 32, 33, 34, 38, 39]*)
assert(is_empty q2 = false);;   (*[6, 18, 20, 27, 31, 32, 33, 34, 38, 39]*)
let q2 = add 21 q2;;   (* [6, 18, 20, 21, 27, 31, 32, 33, 34, 38, 39]*)
let q2 = add 33 q2;;   (* [6, 18, 20, 21, 27, 31, 32, 33, 33, 34, 38, 39]*)
let q2 = add 21 q2;;   (* [6, 18, 20, 21, 21, 27, 31, 32, 33, 33, 34, 38, 39]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 28 q3;;   (* [28]*)
let (element, q3) = delete_min q3;;   (* 28 * []*)
assert(element = 28);;
let q3 = add 24 q3;;   (* [24]*)
let q3 = add 0 q3;;   (* [0, 24]*)
let q3 = add 8 q3;;   (* [0, 8, 24]*)
let q3 = add 21 q3;;   (* [0, 8, 21, 24]*)
let (element, q3) = delete_min q3;;   (* 0 * [8, 21, 24]*)
assert(element = 0);;
let q3 = add 33 q3;;   (* [8, 21, 24, 33]*)
let (element, q3) = delete_min q3;;   (* 8 * [21, 24, 33]*)
assert(element = 8);;
let (element, q3) = delete_min q3;;   (* 21 * [24, 33]*)
assert(element = 21);;
let (element, q3) = delete_min q3;;   (* 24 * [33]*)
assert(element = 24);;
let q3 = add 25 q3;;   (* [25, 33]*)
let q3 = add 24 q3;;   (* [24, 25, 33]*)
let q3 = add 33 q3;;   (* [24, 25, 33, 33]*)
let q3 = add 25 q3;;   (* [24, 25, 25, 33, 33]*)
let (element, q3) = delete_min q3;;   (* 24 * [25, 25, 33, 33]*)
assert(element = 24);;
let q3 = add 16 q3;;   (* [16, 25, 25, 33, 33]*)
let (element, q3) = delete_min q3;;   (* 16 * [25, 25, 33, 33]*)
assert(element = 16);;
let q3 = add 11 q3;;   (* [11, 25, 25, 33, 33]*)
let q3 = add 4 q3;;   (* [4, 11, 25, 25, 33, 33]*)
let q3 = add 19 q3;;   (* [4, 11, 19, 25, 25, 33, 33]*)
let q3 = add 26 q3;;   (* [4, 11, 19, 25, 25, 26, 33, 33]*)
let (element, q3) = delete_min q3;;   (* 4 * [11, 19, 25, 25, 26, 33, 33]*)
assert(element = 4);;
let q3 = add 29 q3;;   (* [11, 19, 25, 25, 26, 29, 33, 33]*)
let (element, q3) = delete_min q3;;   (* 11 * [19, 25, 25, 26, 29, 33, 33]*)
assert(element = 11);;
let q3 = add 23 q3;;   (* [19, 23, 25, 25, 26, 29, 33, 33]*)
let (element, q3) = delete_min q3;;   (* 19 * [23, 25, 25, 26, 29, 33, 33]*)
assert(element = 19);;
assert(is_empty q3 = false);;   (*[23, 25, 25, 26, 29, 33, 33]*)
let q3 = add 33 q3;;   (* [23, 25, 25, 26, 29, 33, 33, 33]*)
assert(is_empty q3 = false);;   (*[23, 25, 25, 26, 29, 33, 33, 33]*)
let q3 = add 4 q3;;   (* [4, 23, 25, 25, 26, 29, 33, 33, 33]*)
let q3 = add 0 q3;;   (* [0, 4, 23, 25, 25, 26, 29, 33, 33, 33]*)

(* -------q4------ *)
let q4 = empty;;
assert(is_empty q4 = true);;   (*[]*)
let q4 = add 37 q4;;   (* [37]*)
let q4 = add 22 q4;;   (* [22, 37]*)
let q4 = add 1 q4;;   (* [1, 22, 37]*)
let q4 = add 35 q4;;   (* [1, 22, 35, 37]*)
let q4 = add 13 q4;;   (* [1, 13, 22, 35, 37]*)
let (element, q4) = delete_min q4;;   (* 1 * [13, 22, 35, 37]*)
assert(element = 1);;
let q4 = add 13 q4;;   (* [13, 13, 22, 35, 37]*)
let (element, q4) = delete_min q4;;   (* 13 * [13, 22, 35, 37]*)
assert(element = 13);;
let q4 = add 9 q4;;   (* [9, 13, 22, 35, 37]*)
let (element, q4) = delete_min q4;;   (* 9 * [13, 22, 35, 37]*)
assert(element = 9);;
let q4 = add 5 q4;;   (* [5, 13, 22, 35, 37]*)
let q4 = add 3 q4;;   (* [3, 5, 13, 22, 35, 37]*)
assert(is_empty q4 = false);;   (*[3, 5, 13, 22, 35, 37]*)
let q4 = add 21 q4;;   (* [3, 5, 13, 21, 22, 35, 37]*)
let q4 = add 9 q4;;   (* [3, 5, 9, 13, 21, 22, 35, 37]*)
let q4 = add 32 q4;;   (* [3, 5, 9, 13, 21, 22, 32, 35, 37]*)
let q4 = add 20 q4;;   (* [3, 5, 9, 13, 20, 21, 22, 32, 35, 37]*)
let q4 = add 17 q4;;   (* [3, 5, 9, 13, 17, 20, 21, 22, 32, 35, 37]*)
let q4 = add 28 q4;;   (* [3, 5, 9, 13, 17, 20, 21, 22, 28, 32, 35, 37]*)
let q4 = add 5 q4;;   (* [3, 5, 5, 9, 13, 17, 20, 21, 22, 28, 32, 35, 37]*)
let q4 = add 11 q4;;   (* [3, 5, 5, 9, 11, 13, 17, 20, 21, 22, 28, 32, 35, 37]*)
let q4 = add 27 q4;;   (* [3, 5, 5, 9, 11, 13, 17, 20, 21, 22, 27, 28, 32, 35, 37]*)
let q4 = add 9 q4;;   (* [3, 5, 5, 9, 9, 11, 13, 17, 20, 21, 22, 27, 28, 32, 35, 37]*)
let (element, q4) = delete_min q4;;   (* 3 * [5, 5, 9, 9, 11, 13, 17, 20, 21, 22, 27, 28, 32, 35, 37]*)
assert(element = 3);;
let (element, q4) = delete_min q4;;   (* 5 * [5, 9, 9, 11, 13, 17, 20, 21, 22, 27, 28, 32, 35, 37]*)
assert(element = 5);;
let (element, q4) = delete_min q4;;   (* 5 * [9, 9, 11, 13, 17, 20, 21, 22, 27, 28, 32, 35, 37]*)
assert(element = 5);;
let (element, q4) = delete_min q4;;   (* 9 * [9, 11, 13, 17, 20, 21, 22, 27, 28, 32, 35, 37]*)
assert(element = 9);;
let q4 = add 20 q4;;   (* [9, 11, 13, 17, 20, 20, 21, 22, 27, 28, 32, 35, 37]*)
let q4 = add 3 q4;;   (* [3, 9, 11, 13, 17, 20, 20, 21, 22, 27, 28, 32, 35, 37]*)
let (element, q4) = delete_min q4;;   (* 3 * [9, 11, 13, 17, 20, 20, 21, 22, 27, 28, 32, 35, 37]*)
assert(element = 3);;
let q4 = add 7 q4;;   (* [7, 9, 11, 13, 17, 20, 20, 21, 22, 27, 28, 32, 35, 37]*)

(* -------q5------ *)
let q5 = empty;;
let q5 = add 39 q5;;   (* [39]*)
assert(is_empty q5 = false);;   (*[39]*)
let q5 = add 21 q5;;   (* [21, 39]*)
let q5 = add 39 q5;;   (* [21, 39, 39]*)
let (element, q5) = delete_min q5;;   (* 21 * [39, 39]*)
assert(element = 21);;
let q5 = add 37 q5;;   (* [37, 39, 39]*)
let q5 = add 14 q5;;   (* [14, 37, 39, 39]*)
let (element, q5) = delete_min q5;;   (* 14 * [37, 39, 39]*)
assert(element = 14);;
let (element, q5) = delete_min q5;;   (* 37 * [39, 39]*)
assert(element = 37);;
let q5 = add 12 q5;;   (* [12, 39, 39]*)
let (element, q5) = delete_min q5;;   (* 12 * [39, 39]*)
assert(element = 12);;
let q5 = add 11 q5;;   (* [11, 39, 39]*)
let q5 = add 8 q5;;   (* [8, 11, 39, 39]*)
let q5 = add 6 q5;;   (* [6, 8, 11, 39, 39]*)
let q5 = add 38 q5;;   (* [6, 8, 11, 38, 39, 39]*)
let q5 = add 17 q5;;   (* [6, 8, 11, 17, 38, 39, 39]*)
assert(is_empty q5 = false);;   (*[6, 8, 11, 17, 38, 39, 39]*)
let (element, q5) = delete_min q5;;   (* 6 * [8, 11, 17, 38, 39, 39]*)
assert(element = 6);;
let q5 = add 2 q5;;   (* [2, 8, 11, 17, 38, 39, 39]*)
assert(is_empty q5 = false);;   (*[2, 8, 11, 17, 38, 39, 39]*)
let q5 = add 37 q5;;   (* [2, 8, 11, 17, 37, 38, 39, 39]*)
assert(is_empty q5 = false);;   (*[2, 8, 11, 17, 37, 38, 39, 39]*)
let (element, q5) = delete_min q5;;   (* 2 * [8, 11, 17, 37, 38, 39, 39]*)
assert(element = 2);;
let q5 = add 5 q5;;   (* [5, 8, 11, 17, 37, 38, 39, 39]*)
let (element, q5) = delete_min q5;;   (* 5 * [8, 11, 17, 37, 38, 39, 39]*)
assert(element = 5);;
let q5 = add 2 q5;;   (* [2, 8, 11, 17, 37, 38, 39, 39]*)
let q5 = add 37 q5;;   (* [2, 8, 11, 17, 37, 37, 38, 39, 39]*)
let (element, q5) = delete_min q5;;   (* 2 * [8, 11, 17, 37, 37, 38, 39, 39]*)
assert(element = 2);;
let q5 = add 21 q5;;   (* [8, 11, 17, 21, 37, 37, 38, 39, 39]*)
let (element, q5) = delete_min q5;;   (* 8 * [11, 17, 21, 37, 37, 38, 39, 39]*)
assert(element = 8);;
let q5 = add 25 q5;;   (* [11, 17, 21, 25, 37, 37, 38, 39, 39]*)
assert(is_empty q5 = false);;   (*[11, 17, 21, 25, 37, 37, 38, 39, 39]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[0, 4, 6, 7, 7, 9, 11, 11, 13, 17, 17, 18, 20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 25, 25, 25, 25, 26, 26, 27, 27, 28, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
let (element, q) = delete_min q;;   (* 0 * [4, 6, 7, 7, 9, 11, 11, 13, 17, 17, 18, 20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 25, 25, 25, 25, 26, 26, 27, 27, 28, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 0);;
let (element, q) = delete_min q;;   (* 4 * [6, 7, 7, 9, 11, 11, 13, 17, 17, 18, 20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 25, 25, 25, 25, 26, 26, 27, 27, 28, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 6 * [7, 7, 9, 11, 11, 13, 17, 17, 18, 20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 25, 25, 25, 25, 26, 26, 27, 27, 28, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 7 * [7, 9, 11, 11, 13, 17, 17, 18, 20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 25, 25, 25, 25, 26, 26, 27, 27, 28, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 7 * [9, 11, 11, 13, 17, 17, 18, 20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 25, 25, 25, 25, 26, 26, 27, 27, 28, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 9 * [11, 11, 13, 17, 17, 18, 20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 25, 25, 25, 25, 26, 26, 27, 27, 28, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 11 * [11, 13, 17, 17, 18, 20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 25, 25, 25, 25, 26, 26, 27, 27, 28, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 11 * [13, 17, 17, 18, 20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 25, 25, 25, 25, 26, 26, 27, 27, 28, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 13 * [17, 17, 18, 20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 25, 25, 25, 25, 26, 26, 27, 27, 28, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 17 * [17, 18, 20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 25, 25, 25, 25, 26, 26, 27, 27, 28, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [18, 20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 25, 25, 25, 25, 26, 26, 27, 27, 28, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 25, 25, 25, 25, 26, 26, 27, 27, 28, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 21, 21, 21, 21, 22, 22, 23, 25, 25, 25, 25, 26, 26, 27, 27, 28, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 21, 21, 21, 21, 22, 22, 23, 25, 25, 25, 25, 26, 26, 27, 27, 28, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [21, 21, 21, 21, 22, 22, 23, 25, 25, 25, 25, 26, 26, 27, 27, 28, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [21, 21, 21, 22, 22, 23, 25, 25, 25, 25, 26, 26, 27, 27, 28, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [21, 21, 22, 22, 23, 25, 25, 25, 25, 26, 26, 27, 27, 28, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [21, 22, 22, 23, 25, 25, 25, 25, 26, 26, 27, 27, 28, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [22, 22, 23, 25, 25, 25, 25, 26, 26, 27, 27, 28, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [22, 23, 25, 25, 25, 25, 26, 26, 27, 27, 28, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [23, 25, 25, 25, 25, 26, 26, 27, 27, 28, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [25, 25, 25, 25, 26, 26, 27, 27, 28, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 25 * [25, 25, 25, 26, 26, 27, 27, 28, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [25, 25, 26, 26, 27, 27, 28, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [25, 26, 26, 27, 27, 28, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [26, 26, 27, 27, 28, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [26, 27, 27, 28, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [27, 27, 28, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [27, 28, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [28, 29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [29, 31, 31, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [31, 31, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 31 * [31, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [34, 34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 37 * [37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [37, 37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [37, 38, 38, 38, 39, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [38, 38, 38, 39, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 39, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 39, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39, 39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST87----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 12 q1;;   (* [12]*)
let q1 = add 26 q1;;   (* [12, 26]*)
let q1 = add 33 q1;;   (* [12, 26, 33]*)
let q1 = add 33 q1;;   (* [12, 26, 33, 33]*)
let q1 = add 38 q1;;   (* [12, 26, 33, 33, 38]*)
assert(is_empty q1 = false);;   (*[12, 26, 33, 33, 38]*)
let q1 = add 32 q1;;   (* [12, 26, 32, 33, 33, 38]*)
let (element, q1) = delete_min q1;;   (* 12 * [26, 32, 33, 33, 38]*)
assert(element = 12);;
let q1 = add 34 q1;;   (* [26, 32, 33, 33, 34, 38]*)
let q1 = add 17 q1;;   (* [17, 26, 32, 33, 33, 34, 38]*)
let q1 = add 33 q1;;   (* [17, 26, 32, 33, 33, 33, 34, 38]*)
let (element, q1) = delete_min q1;;   (* 17 * [26, 32, 33, 33, 33, 34, 38]*)
assert(element = 17);;
assert(is_empty q1 = false);;   (*[26, 32, 33, 33, 33, 34, 38]*)
let q1 = add 8 q1;;   (* [8, 26, 32, 33, 33, 33, 34, 38]*)
let q1 = add 7 q1;;   (* [7, 8, 26, 32, 33, 33, 33, 34, 38]*)
let q1 = add 38 q1;;   (* [7, 8, 26, 32, 33, 33, 33, 34, 38, 38]*)
let (element, q1) = delete_min q1;;   (* 7 * [8, 26, 32, 33, 33, 33, 34, 38, 38]*)
assert(element = 7);;
let q1 = add 11 q1;;   (* [8, 11, 26, 32, 33, 33, 33, 34, 38, 38]*)
let (element, q1) = delete_min q1;;   (* 8 * [11, 26, 32, 33, 33, 33, 34, 38, 38]*)
assert(element = 8);;
let q1 = add 22 q1;;   (* [11, 22, 26, 32, 33, 33, 33, 34, 38, 38]*)
let (element, q1) = delete_min q1;;   (* 11 * [22, 26, 32, 33, 33, 33, 34, 38, 38]*)
assert(element = 11);;
let (element, q1) = delete_min q1;;   (* 22 * [26, 32, 33, 33, 33, 34, 38, 38]*)
assert(element = 22);;
let q1 = add 7 q1;;   (* [7, 26, 32, 33, 33, 33, 34, 38, 38]*)
let q1 = add 33 q1;;   (* [7, 26, 32, 33, 33, 33, 33, 34, 38, 38]*)
let (element, q1) = delete_min q1;;   (* 7 * [26, 32, 33, 33, 33, 33, 34, 38, 38]*)
assert(element = 7);;
let q1 = add 2 q1;;   (* [2, 26, 32, 33, 33, 33, 33, 34, 38, 38]*)
let q1 = add 17 q1;;   (* [2, 17, 26, 32, 33, 33, 33, 33, 34, 38, 38]*)
let (element, q1) = delete_min q1;;   (* 2 * [17, 26, 32, 33, 33, 33, 33, 34, 38, 38]*)
assert(element = 2);;
let q1 = add 34 q1;;   (* [17, 26, 32, 33, 33, 33, 33, 34, 34, 38, 38]*)
let q1 = add 39 q1;;   (* [17, 26, 32, 33, 33, 33, 33, 34, 34, 38, 38, 39]*)
let q1 = add 35 q1;;   (* [17, 26, 32, 33, 33, 33, 33, 34, 34, 35, 38, 38, 39]*)
let q1 = add 35 q1;;   (* [17, 26, 32, 33, 33, 33, 33, 34, 34, 35, 35, 38, 38, 39]*)
let q1 = add 33 q1;;   (* [17, 26, 32, 33, 33, 33, 33, 33, 34, 34, 35, 35, 38, 38, 39]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 6 q2;;   (* [6]*)
assert(is_empty q2 = false);;   (*[6]*)
let q2 = add 15 q2;;   (* [6, 15]*)
let q2 = add 7 q2;;   (* [6, 7, 15]*)
let (element, q2) = delete_min q2;;   (* 6 * [7, 15]*)
assert(element = 6);;
let q2 = add 35 q2;;   (* [7, 15, 35]*)
let (element, q2) = delete_min q2;;   (* 7 * [15, 35]*)
assert(element = 7);;
let (element, q2) = delete_min q2;;   (* 15 * [35]*)
assert(element = 15);;
let q2 = add 20 q2;;   (* [20, 35]*)
let q2 = add 15 q2;;   (* [15, 20, 35]*)
let q2 = add 9 q2;;   (* [9, 15, 20, 35]*)
let q2 = add 18 q2;;   (* [9, 15, 18, 20, 35]*)
let q2 = add 25 q2;;   (* [9, 15, 18, 20, 25, 35]*)
let q2 = add 13 q2;;   (* [9, 13, 15, 18, 20, 25, 35]*)
let q2 = add 4 q2;;   (* [4, 9, 13, 15, 18, 20, 25, 35]*)
let q2 = add 3 q2;;   (* [3, 4, 9, 13, 15, 18, 20, 25, 35]*)
let q2 = add 6 q2;;   (* [3, 4, 6, 9, 13, 15, 18, 20, 25, 35]*)
let (element, q2) = delete_min q2;;   (* 3 * [4, 6, 9, 13, 15, 18, 20, 25, 35]*)
assert(element = 3);;
let (element, q2) = delete_min q2;;   (* 4 * [6, 9, 13, 15, 18, 20, 25, 35]*)
assert(element = 4);;
let (element, q2) = delete_min q2;;   (* 6 * [9, 13, 15, 18, 20, 25, 35]*)
assert(element = 6);;
assert(is_empty q2 = false);;   (*[9, 13, 15, 18, 20, 25, 35]*)
let (element, q2) = delete_min q2;;   (* 9 * [13, 15, 18, 20, 25, 35]*)
assert(element = 9);;
let q2 = add 32 q2;;   (* [13, 15, 18, 20, 25, 32, 35]*)
let q2 = add 22 q2;;   (* [13, 15, 18, 20, 22, 25, 32, 35]*)
let q2 = add 11 q2;;   (* [11, 13, 15, 18, 20, 22, 25, 32, 35]*)
let (element, q2) = delete_min q2;;   (* 11 * [13, 15, 18, 20, 22, 25, 32, 35]*)
assert(element = 11);;
let q2 = add 14 q2;;   (* [13, 14, 15, 18, 20, 22, 25, 32, 35]*)
let q2 = add 4 q2;;   (* [4, 13, 14, 15, 18, 20, 22, 25, 32, 35]*)
let q2 = add 6 q2;;   (* [4, 6, 13, 14, 15, 18, 20, 22, 25, 32, 35]*)
assert(is_empty q2 = false);;   (*[4, 6, 13, 14, 15, 18, 20, 22, 25, 32, 35]*)
let q2 = add 7 q2;;   (* [4, 6, 7, 13, 14, 15, 18, 20, 22, 25, 32, 35]*)
let (element, q2) = delete_min q2;;   (* 4 * [6, 7, 13, 14, 15, 18, 20, 22, 25, 32, 35]*)
assert(element = 4);;
let q2 = add 27 q2;;   (* [6, 7, 13, 14, 15, 18, 20, 22, 25, 27, 32, 35]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 26 q3;;   (* [26]*)
let (element, q3) = delete_min q3;;   (* 26 * []*)
assert(element = 26);;
let q3 = add 3 q3;;   (* [3]*)
let q3 = add 37 q3;;   (* [3, 37]*)
let (element, q3) = delete_min q3;;   (* 3 * [37]*)
assert(element = 3);;
let q3 = add 0 q3;;   (* [0, 37]*)
let q3 = add 12 q3;;   (* [0, 12, 37]*)
let q3 = add 10 q3;;   (* [0, 10, 12, 37]*)
let q3 = add 5 q3;;   (* [0, 5, 10, 12, 37]*)
let q3 = add 30 q3;;   (* [0, 5, 10, 12, 30, 37]*)
let q3 = add 15 q3;;   (* [0, 5, 10, 12, 15, 30, 37]*)
let q3 = add 29 q3;;   (* [0, 5, 10, 12, 15, 29, 30, 37]*)
let (element, q3) = delete_min q3;;   (* 0 * [5, 10, 12, 15, 29, 30, 37]*)
assert(element = 0);;
let q3 = add 33 q3;;   (* [5, 10, 12, 15, 29, 30, 33, 37]*)
assert(is_empty q3 = false);;   (*[5, 10, 12, 15, 29, 30, 33, 37]*)
let q3 = add 16 q3;;   (* [5, 10, 12, 15, 16, 29, 30, 33, 37]*)
let (element, q3) = delete_min q3;;   (* 5 * [10, 12, 15, 16, 29, 30, 33, 37]*)
assert(element = 5);;
let (element, q3) = delete_min q3;;   (* 10 * [12, 15, 16, 29, 30, 33, 37]*)
assert(element = 10);;
assert(is_empty q3 = false);;   (*[12, 15, 16, 29, 30, 33, 37]*)
let q3 = add 7 q3;;   (* [7, 12, 15, 16, 29, 30, 33, 37]*)
let (element, q3) = delete_min q3;;   (* 7 * [12, 15, 16, 29, 30, 33, 37]*)
assert(element = 7);;
let q3 = add 21 q3;;   (* [12, 15, 16, 21, 29, 30, 33, 37]*)
let q3 = add 33 q3;;   (* [12, 15, 16, 21, 29, 30, 33, 33, 37]*)
let q3 = add 14 q3;;   (* [12, 14, 15, 16, 21, 29, 30, 33, 33, 37]*)
let q3 = add 34 q3;;   (* [12, 14, 15, 16, 21, 29, 30, 33, 33, 34, 37]*)
let (element, q3) = delete_min q3;;   (* 12 * [14, 15, 16, 21, 29, 30, 33, 33, 34, 37]*)
assert(element = 12);;
let q3 = add 6 q3;;   (* [6, 14, 15, 16, 21, 29, 30, 33, 33, 34, 37]*)
let q3 = add 26 q3;;   (* [6, 14, 15, 16, 21, 26, 29, 30, 33, 33, 34, 37]*)
let q3 = add 31 q3;;   (* [6, 14, 15, 16, 21, 26, 29, 30, 31, 33, 33, 34, 37]*)
let q3 = add 33 q3;;   (* [6, 14, 15, 16, 21, 26, 29, 30, 31, 33, 33, 33, 34, 37]*)
let (element, q3) = delete_min q3;;   (* 6 * [14, 15, 16, 21, 26, 29, 30, 31, 33, 33, 33, 34, 37]*)
assert(element = 6);;
let q3 = add 39 q3;;   (* [14, 15, 16, 21, 26, 29, 30, 31, 33, 33, 33, 34, 37, 39]*)
assert(is_empty q3 = false);;   (*[14, 15, 16, 21, 26, 29, 30, 31, 33, 33, 33, 34, 37, 39]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 36 q4;;   (* [36]*)
let q4 = add 5 q4;;   (* [5, 36]*)
let q4 = add 8 q4;;   (* [5, 8, 36]*)
let (element, q4) = delete_min q4;;   (* 5 * [8, 36]*)
assert(element = 5);;
let (element, q4) = delete_min q4;;   (* 8 * [36]*)
assert(element = 8);;
let q4 = add 32 q4;;   (* [32, 36]*)
let q4 = add 36 q4;;   (* [32, 36, 36]*)
let q4 = add 27 q4;;   (* [27, 32, 36, 36]*)
let q4 = add 22 q4;;   (* [22, 27, 32, 36, 36]*)
let q4 = add 0 q4;;   (* [0, 22, 27, 32, 36, 36]*)
let q4 = add 7 q4;;   (* [0, 7, 22, 27, 32, 36, 36]*)
let (element, q4) = delete_min q4;;   (* 0 * [7, 22, 27, 32, 36, 36]*)
assert(element = 0);;
let (element, q4) = delete_min q4;;   (* 7 * [22, 27, 32, 36, 36]*)
assert(element = 7);;
let q4 = add 33 q4;;   (* [22, 27, 32, 33, 36, 36]*)
let q4 = add 13 q4;;   (* [13, 22, 27, 32, 33, 36, 36]*)
assert(is_empty q4 = false);;   (*[13, 22, 27, 32, 33, 36, 36]*)
let q4 = add 37 q4;;   (* [13, 22, 27, 32, 33, 36, 36, 37]*)
let q4 = add 4 q4;;   (* [4, 13, 22, 27, 32, 33, 36, 36, 37]*)
let q4 = add 11 q4;;   (* [4, 11, 13, 22, 27, 32, 33, 36, 36, 37]*)
let q4 = add 23 q4;;   (* [4, 11, 13, 22, 23, 27, 32, 33, 36, 36, 37]*)
let (element, q4) = delete_min q4;;   (* 4 * [11, 13, 22, 23, 27, 32, 33, 36, 36, 37]*)
assert(element = 4);;
let q4 = add 18 q4;;   (* [11, 13, 18, 22, 23, 27, 32, 33, 36, 36, 37]*)
let q4 = add 0 q4;;   (* [0, 11, 13, 18, 22, 23, 27, 32, 33, 36, 36, 37]*)
let q4 = add 25 q4;;   (* [0, 11, 13, 18, 22, 23, 25, 27, 32, 33, 36, 36, 37]*)
let q4 = add 17 q4;;   (* [0, 11, 13, 17, 18, 22, 23, 25, 27, 32, 33, 36, 36, 37]*)
let q4 = add 36 q4;;   (* [0, 11, 13, 17, 18, 22, 23, 25, 27, 32, 33, 36, 36, 36, 37]*)
let q4 = add 1 q4;;   (* [0, 1, 11, 13, 17, 18, 22, 23, 25, 27, 32, 33, 36, 36, 36, 37]*)
let (element, q4) = delete_min q4;;   (* 0 * [1, 11, 13, 17, 18, 22, 23, 25, 27, 32, 33, 36, 36, 36, 37]*)
assert(element = 0);;
let (element, q4) = delete_min q4;;   (* 1 * [11, 13, 17, 18, 22, 23, 25, 27, 32, 33, 36, 36, 36, 37]*)
assert(element = 1);;
let q4 = add 7 q4;;   (* [7, 11, 13, 17, 18, 22, 23, 25, 27, 32, 33, 36, 36, 36, 37]*)
let q4 = add 34 q4;;   (* [7, 11, 13, 17, 18, 22, 23, 25, 27, 32, 33, 34, 36, 36, 36, 37]*)
assert(is_empty q4 = false);;   (*[7, 11, 13, 17, 18, 22, 23, 25, 27, 32, 33, 34, 36, 36, 36, 37]*)
let (element, q4) = delete_min q4;;   (* 7 * [11, 13, 17, 18, 22, 23, 25, 27, 32, 33, 34, 36, 36, 36, 37]*)
assert(element = 7);;

(* -------q5------ *)
let q5 = empty;;
let q5 = add 9 q5;;   (* [9]*)
let q5 = add 6 q5;;   (* [6, 9]*)
let q5 = add 28 q5;;   (* [6, 9, 28]*)
let q5 = add 18 q5;;   (* [6, 9, 18, 28]*)
let q5 = add 12 q5;;   (* [6, 9, 12, 18, 28]*)
assert(is_empty q5 = false);;   (*[6, 9, 12, 18, 28]*)
let q5 = add 15 q5;;   (* [6, 9, 12, 15, 18, 28]*)
let q5 = add 38 q5;;   (* [6, 9, 12, 15, 18, 28, 38]*)
let q5 = add 35 q5;;   (* [6, 9, 12, 15, 18, 28, 35, 38]*)
let q5 = add 10 q5;;   (* [6, 9, 10, 12, 15, 18, 28, 35, 38]*)
let q5 = add 34 q5;;   (* [6, 9, 10, 12, 15, 18, 28, 34, 35, 38]*)
let (element, q5) = delete_min q5;;   (* 6 * [9, 10, 12, 15, 18, 28, 34, 35, 38]*)
assert(element = 6);;
let q5 = add 21 q5;;   (* [9, 10, 12, 15, 18, 21, 28, 34, 35, 38]*)
let q5 = add 24 q5;;   (* [9, 10, 12, 15, 18, 21, 24, 28, 34, 35, 38]*)
let q5 = add 25 q5;;   (* [9, 10, 12, 15, 18, 21, 24, 25, 28, 34, 35, 38]*)
let q5 = add 20 q5;;   (* [9, 10, 12, 15, 18, 20, 21, 24, 25, 28, 34, 35, 38]*)
let q5 = add 21 q5;;   (* [9, 10, 12, 15, 18, 20, 21, 21, 24, 25, 28, 34, 35, 38]*)
let q5 = add 35 q5;;   (* [9, 10, 12, 15, 18, 20, 21, 21, 24, 25, 28, 34, 35, 35, 38]*)
let q5 = add 25 q5;;   (* [9, 10, 12, 15, 18, 20, 21, 21, 24, 25, 25, 28, 34, 35, 35, 38]*)
let (element, q5) = delete_min q5;;   (* 9 * [10, 12, 15, 18, 20, 21, 21, 24, 25, 25, 28, 34, 35, 35, 38]*)
assert(element = 9);;
let q5 = add 33 q5;;   (* [10, 12, 15, 18, 20, 21, 21, 24, 25, 25, 28, 33, 34, 35, 35, 38]*)
let q5 = add 29 q5;;   (* [10, 12, 15, 18, 20, 21, 21, 24, 25, 25, 28, 29, 33, 34, 35, 35, 38]*)
let q5 = add 37 q5;;   (* [10, 12, 15, 18, 20, 21, 21, 24, 25, 25, 28, 29, 33, 34, 35, 35, 37, 38]*)
let (element, q5) = delete_min q5;;   (* 10 * [12, 15, 18, 20, 21, 21, 24, 25, 25, 28, 29, 33, 34, 35, 35, 37, 38]*)
assert(element = 10);;
let (element, q5) = delete_min q5;;   (* 12 * [15, 18, 20, 21, 21, 24, 25, 25, 28, 29, 33, 34, 35, 35, 37, 38]*)
assert(element = 12);;
let q5 = add 19 q5;;   (* [15, 18, 19, 20, 21, 21, 24, 25, 25, 28, 29, 33, 34, 35, 35, 37, 38]*)
let (element, q5) = delete_min q5;;   (* 15 * [18, 19, 20, 21, 21, 24, 25, 25, 28, 29, 33, 34, 35, 35, 37, 38]*)
assert(element = 15);;
assert(is_empty q5 = false);;   (*[18, 19, 20, 21, 21, 24, 25, 25, 28, 29, 33, 34, 35, 35, 37, 38]*)
let q5 = add 34 q5;;   (* [18, 19, 20, 21, 21, 24, 25, 25, 28, 29, 33, 34, 34, 35, 35, 37, 38]*)
let q5 = add 28 q5;;   (* [18, 19, 20, 21, 21, 24, 25, 25, 28, 28, 29, 33, 34, 34, 35, 35, 37, 38]*)
let q5 = add 6 q5;;   (* [6, 18, 19, 20, 21, 21, 24, 25, 25, 28, 28, 29, 33, 34, 34, 35, 35, 37, 38]*)
let q5 = add 15 q5;;   (* [6, 15, 18, 19, 20, 21, 21, 24, 25, 25, 28, 28, 29, 33, 34, 34, 35, 35, 37, 38]*)
let (element, q5) = delete_min q5;;   (* 6 * [15, 18, 19, 20, 21, 21, 24, 25, 25, 28, 28, 29, 33, 34, 34, 35, 35, 37, 38]*)
assert(element = 6);;

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[6, 7, 11, 13, 13, 14, 14, 15, 15, 15, 16, 17, 17, 18, 18, 18, 19, 20, 20, 21, 21, 21, 22, 22, 23, 24, 25, 25, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39]*)
let (element, q) = delete_min q;;   (* 6 * [7, 11, 13, 13, 14, 14, 15, 15, 15, 16, 17, 17, 18, 18, 18, 19, 20, 20, 21, 21, 21, 22, 22, 23, 24, 25, 25, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 7 * [11, 13, 13, 14, 14, 15, 15, 15, 16, 17, 17, 18, 18, 18, 19, 20, 20, 21, 21, 21, 22, 22, 23, 24, 25, 25, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 11 * [13, 13, 14, 14, 15, 15, 15, 16, 17, 17, 18, 18, 18, 19, 20, 20, 21, 21, 21, 22, 22, 23, 24, 25, 25, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 13 * [13, 14, 14, 15, 15, 15, 16, 17, 17, 18, 18, 18, 19, 20, 20, 21, 21, 21, 22, 22, 23, 24, 25, 25, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 13 * [14, 14, 15, 15, 15, 16, 17, 17, 18, 18, 18, 19, 20, 20, 21, 21, 21, 22, 22, 23, 24, 25, 25, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 14 * [14, 15, 15, 15, 16, 17, 17, 18, 18, 18, 19, 20, 20, 21, 21, 21, 22, 22, 23, 24, 25, 25, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [15, 15, 15, 16, 17, 17, 18, 18, 18, 19, 20, 20, 21, 21, 21, 22, 22, 23, 24, 25, 25, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [15, 15, 16, 17, 17, 18, 18, 18, 19, 20, 20, 21, 21, 21, 22, 22, 23, 24, 25, 25, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [15, 16, 17, 17, 18, 18, 18, 19, 20, 20, 21, 21, 21, 22, 22, 23, 24, 25, 25, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [16, 17, 17, 18, 18, 18, 19, 20, 20, 21, 21, 21, 22, 22, 23, 24, 25, 25, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [17, 17, 18, 18, 18, 19, 20, 20, 21, 21, 21, 22, 22, 23, 24, 25, 25, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 17 * [17, 18, 18, 18, 19, 20, 20, 21, 21, 21, 22, 22, 23, 24, 25, 25, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [18, 18, 18, 19, 20, 20, 21, 21, 21, 22, 22, 23, 24, 25, 25, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [18, 18, 19, 20, 20, 21, 21, 21, 22, 22, 23, 24, 25, 25, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [18, 19, 20, 20, 21, 21, 21, 22, 22, 23, 24, 25, 25, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [19, 20, 20, 21, 21, 21, 22, 22, 23, 24, 25, 25, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [20, 20, 21, 21, 21, 22, 22, 23, 24, 25, 25, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [20, 21, 21, 21, 22, 22, 23, 24, 25, 25, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [21, 21, 21, 22, 22, 23, 24, 25, 25, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [21, 21, 22, 22, 23, 24, 25, 25, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [21, 22, 22, 23, 24, 25, 25, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [22, 22, 23, 24, 25, 25, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [22, 23, 24, 25, 25, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [23, 24, 25, 25, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [24, 25, 25, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [25, 25, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [25, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [26, 26, 27, 27, 28, 28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [26, 27, 27, 28, 28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [27, 27, 28, 28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [27, 28, 28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [28, 28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [28, 29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [29, 29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [29, 30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [30, 31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [31, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 37, 37, 38, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [37, 37, 38, 38, 38, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [37, 38, 38, 38, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [38, 38, 38, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST88----*)

(* -------q1------ *)
let q1 = empty;;
assert(is_empty q1 = true);;   (*[]*)
let q1 = add 2 q1;;   (* [2]*)
let q1 = add 31 q1;;   (* [2, 31]*)
let q1 = add 3 q1;;   (* [2, 3, 31]*)
let (element, q1) = delete_min q1;;   (* 2 * [3, 31]*)
assert(element = 2);;
let q1 = add 27 q1;;   (* [3, 27, 31]*)
let (element, q1) = delete_min q1;;   (* 3 * [27, 31]*)
assert(element = 3);;
let (element, q1) = delete_min q1;;   (* 27 * [31]*)
assert(element = 27);;
let (element, q1) = delete_min q1;;   (* 31 * []*)
assert(element = 31);;
assert(is_empty q1 = true);;   (*[]*)
assert(is_empty q1 = true);;   (*[]*)
let q1 = add 6 q1;;   (* [6]*)
let q1 = add 15 q1;;   (* [6, 15]*)
let q1 = add 9 q1;;   (* [6, 9, 15]*)
let q1 = add 30 q1;;   (* [6, 9, 15, 30]*)
let q1 = add 38 q1;;   (* [6, 9, 15, 30, 38]*)
assert(is_empty q1 = false);;   (*[6, 9, 15, 30, 38]*)
assert(is_empty q1 = false);;   (*[6, 9, 15, 30, 38]*)
let q1 = add 17 q1;;   (* [6, 9, 15, 17, 30, 38]*)
let q1 = add 19 q1;;   (* [6, 9, 15, 17, 19, 30, 38]*)
let q1 = add 39 q1;;   (* [6, 9, 15, 17, 19, 30, 38, 39]*)
let (element, q1) = delete_min q1;;   (* 6 * [9, 15, 17, 19, 30, 38, 39]*)
assert(element = 6);;
let (element, q1) = delete_min q1;;   (* 9 * [15, 17, 19, 30, 38, 39]*)
assert(element = 9);;
let q1 = add 33 q1;;   (* [15, 17, 19, 30, 33, 38, 39]*)
let q1 = add 1 q1;;   (* [1, 15, 17, 19, 30, 33, 38, 39]*)
let q1 = add 15 q1;;   (* [1, 15, 15, 17, 19, 30, 33, 38, 39]*)
let (element, q1) = delete_min q1;;   (* 1 * [15, 15, 17, 19, 30, 33, 38, 39]*)
assert(element = 1);;
let q1 = add 29 q1;;   (* [15, 15, 17, 19, 29, 30, 33, 38, 39]*)
let q1 = add 9 q1;;   (* [9, 15, 15, 17, 19, 29, 30, 33, 38, 39]*)
let (element, q1) = delete_min q1;;   (* 9 * [15, 15, 17, 19, 29, 30, 33, 38, 39]*)
assert(element = 9);;
let q1 = add 31 q1;;   (* [15, 15, 17, 19, 29, 30, 31, 33, 38, 39]*)
let q1 = add 15 q1;;   (* [15, 15, 15, 17, 19, 29, 30, 31, 33, 38, 39]*)
let q1 = add 20 q1;;   (* [15, 15, 15, 17, 19, 20, 29, 30, 31, 33, 38, 39]*)
let (element, q1) = delete_min q1;;   (* 15 * [15, 15, 17, 19, 20, 29, 30, 31, 33, 38, 39]*)
assert(element = 15);;

(* -------q2------ *)
let q2 = empty;;
let q2 = add 18 q2;;   (* [18]*)
let (element, q2) = delete_min q2;;   (* 18 * []*)
assert(element = 18);;
let q2 = add 5 q2;;   (* [5]*)
let q2 = add 11 q2;;   (* [5, 11]*)
let q2 = add 10 q2;;   (* [5, 10, 11]*)
assert(is_empty q2 = false);;   (*[5, 10, 11]*)
assert(is_empty q2 = false);;   (*[5, 10, 11]*)
let q2 = add 32 q2;;   (* [5, 10, 11, 32]*)
assert(is_empty q2 = false);;   (*[5, 10, 11, 32]*)
let q2 = add 38 q2;;   (* [5, 10, 11, 32, 38]*)
let q2 = add 20 q2;;   (* [5, 10, 11, 20, 32, 38]*)
let (element, q2) = delete_min q2;;   (* 5 * [10, 11, 20, 32, 38]*)
assert(element = 5);;
let q2 = add 13 q2;;   (* [10, 11, 13, 20, 32, 38]*)
let (element, q2) = delete_min q2;;   (* 10 * [11, 13, 20, 32, 38]*)
assert(element = 10);;
let q2 = add 3 q2;;   (* [3, 11, 13, 20, 32, 38]*)
let q2 = add 16 q2;;   (* [3, 11, 13, 16, 20, 32, 38]*)
let q2 = add 9 q2;;   (* [3, 9, 11, 13, 16, 20, 32, 38]*)
let q2 = add 27 q2;;   (* [3, 9, 11, 13, 16, 20, 27, 32, 38]*)
let q2 = add 20 q2;;   (* [3, 9, 11, 13, 16, 20, 20, 27, 32, 38]*)
let (element, q2) = delete_min q2;;   (* 3 * [9, 11, 13, 16, 20, 20, 27, 32, 38]*)
assert(element = 3);;
let q2 = add 30 q2;;   (* [9, 11, 13, 16, 20, 20, 27, 30, 32, 38]*)
let q2 = add 32 q2;;   (* [9, 11, 13, 16, 20, 20, 27, 30, 32, 32, 38]*)
let q2 = add 36 q2;;   (* [9, 11, 13, 16, 20, 20, 27, 30, 32, 32, 36, 38]*)
let q2 = add 0 q2;;   (* [0, 9, 11, 13, 16, 20, 20, 27, 30, 32, 32, 36, 38]*)
let q2 = add 19 q2;;   (* [0, 9, 11, 13, 16, 19, 20, 20, 27, 30, 32, 32, 36, 38]*)
let q2 = add 22 q2;;   (* [0, 9, 11, 13, 16, 19, 20, 20, 22, 27, 30, 32, 32, 36, 38]*)
let q2 = add 35 q2;;   (* [0, 9, 11, 13, 16, 19, 20, 20, 22, 27, 30, 32, 32, 35, 36, 38]*)
let q2 = add 18 q2;;   (* [0, 9, 11, 13, 16, 18, 19, 20, 20, 22, 27, 30, 32, 32, 35, 36, 38]*)
let q2 = add 17 q2;;   (* [0, 9, 11, 13, 16, 17, 18, 19, 20, 20, 22, 27, 30, 32, 32, 35, 36, 38]*)
let (element, q2) = delete_min q2;;   (* 0 * [9, 11, 13, 16, 17, 18, 19, 20, 20, 22, 27, 30, 32, 32, 35, 36, 38]*)
assert(element = 0);;
let (element, q2) = delete_min q2;;   (* 9 * [11, 13, 16, 17, 18, 19, 20, 20, 22, 27, 30, 32, 32, 35, 36, 38]*)
assert(element = 9);;
let q2 = add 28 q2;;   (* [11, 13, 16, 17, 18, 19, 20, 20, 22, 27, 28, 30, 32, 32, 35, 36, 38]*)
let q2 = add 29 q2;;   (* [11, 13, 16, 17, 18, 19, 20, 20, 22, 27, 28, 29, 30, 32, 32, 35, 36, 38]*)
let (element, q2) = delete_min q2;;   (* 11 * [13, 16, 17, 18, 19, 20, 20, 22, 27, 28, 29, 30, 32, 32, 35, 36, 38]*)
assert(element = 11);;

(* -------q3------ *)
let q3 = empty;;
let q3 = add 34 q3;;   (* [34]*)
assert(is_empty q3 = false);;   (*[34]*)
let q3 = add 27 q3;;   (* [27, 34]*)
let (element, q3) = delete_min q3;;   (* 27 * [34]*)
assert(element = 27);;
let (element, q3) = delete_min q3;;   (* 34 * []*)
assert(element = 34);;
let q3 = add 31 q3;;   (* [31]*)
let (element, q3) = delete_min q3;;   (* 31 * []*)
assert(element = 31);;
let q3 = add 27 q3;;   (* [27]*)
let (element, q3) = delete_min q3;;   (* 27 * []*)
assert(element = 27);;
let q3 = add 27 q3;;   (* [27]*)
let q3 = add 9 q3;;   (* [9, 27]*)
let q3 = add 9 q3;;   (* [9, 9, 27]*)
let q3 = add 21 q3;;   (* [9, 9, 21, 27]*)
let q3 = add 22 q3;;   (* [9, 9, 21, 22, 27]*)
let q3 = add 38 q3;;   (* [9, 9, 21, 22, 27, 38]*)
let q3 = add 3 q3;;   (* [3, 9, 9, 21, 22, 27, 38]*)
let q3 = add 18 q3;;   (* [3, 9, 9, 18, 21, 22, 27, 38]*)
let (element, q3) = delete_min q3;;   (* 3 * [9, 9, 18, 21, 22, 27, 38]*)
assert(element = 3);;
let q3 = add 14 q3;;   (* [9, 9, 14, 18, 21, 22, 27, 38]*)
let q3 = add 8 q3;;   (* [8, 9, 9, 14, 18, 21, 22, 27, 38]*)
let (element, q3) = delete_min q3;;   (* 8 * [9, 9, 14, 18, 21, 22, 27, 38]*)
assert(element = 8);;
let q3 = add 29 q3;;   (* [9, 9, 14, 18, 21, 22, 27, 29, 38]*)
let q3 = add 10 q3;;   (* [9, 9, 10, 14, 18, 21, 22, 27, 29, 38]*)
let q3 = add 33 q3;;   (* [9, 9, 10, 14, 18, 21, 22, 27, 29, 33, 38]*)
let q3 = add 36 q3;;   (* [9, 9, 10, 14, 18, 21, 22, 27, 29, 33, 36, 38]*)
let q3 = add 36 q3;;   (* [9, 9, 10, 14, 18, 21, 22, 27, 29, 33, 36, 36, 38]*)
let q3 = add 24 q3;;   (* [9, 9, 10, 14, 18, 21, 22, 24, 27, 29, 33, 36, 36, 38]*)
let q3 = add 35 q3;;   (* [9, 9, 10, 14, 18, 21, 22, 24, 27, 29, 33, 35, 36, 36, 38]*)
let (element, q3) = delete_min q3;;   (* 9 * [9, 10, 14, 18, 21, 22, 24, 27, 29, 33, 35, 36, 36, 38]*)
assert(element = 9);;
let q3 = add 33 q3;;   (* [9, 10, 14, 18, 21, 22, 24, 27, 29, 33, 33, 35, 36, 36, 38]*)
let (element, q3) = delete_min q3;;   (* 9 * [10, 14, 18, 21, 22, 24, 27, 29, 33, 33, 35, 36, 36, 38]*)
assert(element = 9);;
let q3 = add 32 q3;;   (* [10, 14, 18, 21, 22, 24, 27, 29, 32, 33, 33, 35, 36, 36, 38]*)
let q3 = add 20 q3;;   (* [10, 14, 18, 20, 21, 22, 24, 27, 29, 32, 33, 33, 35, 36, 36, 38]*)
let (element, q3) = delete_min q3;;   (* 10 * [14, 18, 20, 21, 22, 24, 27, 29, 32, 33, 33, 35, 36, 36, 38]*)
assert(element = 10);;

(* -------q4------ *)
let q4 = empty;;
let q4 = add 0 q4;;   (* [0]*)
let (element, q4) = delete_min q4;;   (* 0 * []*)
assert(element = 0);;
let q4 = add 7 q4;;   (* [7]*)
let q4 = add 34 q4;;   (* [7, 34]*)
let q4 = add 38 q4;;   (* [7, 34, 38]*)
let q4 = add 25 q4;;   (* [7, 25, 34, 38]*)
let q4 = add 13 q4;;   (* [7, 13, 25, 34, 38]*)
let (element, q4) = delete_min q4;;   (* 7 * [13, 25, 34, 38]*)
assert(element = 7);;
let q4 = add 25 q4;;   (* [13, 25, 25, 34, 38]*)
let (element, q4) = delete_min q4;;   (* 13 * [25, 25, 34, 38]*)
assert(element = 13);;
let q4 = add 5 q4;;   (* [5, 25, 25, 34, 38]*)
let q4 = add 25 q4;;   (* [5, 25, 25, 25, 34, 38]*)
let q4 = add 16 q4;;   (* [5, 16, 25, 25, 25, 34, 38]*)
let q4 = add 10 q4;;   (* [5, 10, 16, 25, 25, 25, 34, 38]*)
let (element, q4) = delete_min q4;;   (* 5 * [10, 16, 25, 25, 25, 34, 38]*)
assert(element = 5);;
let q4 = add 17 q4;;   (* [10, 16, 17, 25, 25, 25, 34, 38]*)
let q4 = add 28 q4;;   (* [10, 16, 17, 25, 25, 25, 28, 34, 38]*)
let (element, q4) = delete_min q4;;   (* 10 * [16, 17, 25, 25, 25, 28, 34, 38]*)
assert(element = 10);;
let (element, q4) = delete_min q4;;   (* 16 * [17, 25, 25, 25, 28, 34, 38]*)
assert(element = 16);;
let q4 = add 39 q4;;   (* [17, 25, 25, 25, 28, 34, 38, 39]*)
let q4 = add 0 q4;;   (* [0, 17, 25, 25, 25, 28, 34, 38, 39]*)
let q4 = add 13 q4;;   (* [0, 13, 17, 25, 25, 25, 28, 34, 38, 39]*)
let q4 = add 35 q4;;   (* [0, 13, 17, 25, 25, 25, 28, 34, 35, 38, 39]*)
let q4 = add 2 q4;;   (* [0, 2, 13, 17, 25, 25, 25, 28, 34, 35, 38, 39]*)
assert(is_empty q4 = false);;   (*[0, 2, 13, 17, 25, 25, 25, 28, 34, 35, 38, 39]*)
let q4 = add 18 q4;;   (* [0, 2, 13, 17, 18, 25, 25, 25, 28, 34, 35, 38, 39]*)
let (element, q4) = delete_min q4;;   (* 0 * [2, 13, 17, 18, 25, 25, 25, 28, 34, 35, 38, 39]*)
assert(element = 0);;
let q4 = add 24 q4;;   (* [2, 13, 17, 18, 24, 25, 25, 25, 28, 34, 35, 38, 39]*)
let q4 = add 32 q4;;   (* [2, 13, 17, 18, 24, 25, 25, 25, 28, 32, 34, 35, 38, 39]*)
let (element, q4) = delete_min q4;;   (* 2 * [13, 17, 18, 24, 25, 25, 25, 28, 32, 34, 35, 38, 39]*)
assert(element = 2);;
assert(is_empty q4 = false);;   (*[13, 17, 18, 24, 25, 25, 25, 28, 32, 34, 35, 38, 39]*)
let q4 = add 11 q4;;   (* [11, 13, 17, 18, 24, 25, 25, 25, 28, 32, 34, 35, 38, 39]*)
let (element, q4) = delete_min q4;;   (* 11 * [13, 17, 18, 24, 25, 25, 25, 28, 32, 34, 35, 38, 39]*)
assert(element = 11);;
let q4 = add 15 q4;;   (* [13, 15, 17, 18, 24, 25, 25, 25, 28, 32, 34, 35, 38, 39]*)

(* -------q5------ *)
let q5 = empty;;
let q5 = add 25 q5;;   (* [25]*)
let (element, q5) = delete_min q5;;   (* 25 * []*)
assert(element = 25);;
let q5 = add 33 q5;;   (* [33]*)
let (element, q5) = delete_min q5;;   (* 33 * []*)
assert(element = 33);;
let q5 = add 33 q5;;   (* [33]*)
let q5 = add 34 q5;;   (* [33, 34]*)
assert(is_empty q5 = false);;   (*[33, 34]*)
let (element, q5) = delete_min q5;;   (* 33 * [34]*)
assert(element = 33);;
let q5 = add 10 q5;;   (* [10, 34]*)
let q5 = add 24 q5;;   (* [10, 24, 34]*)
let (element, q5) = delete_min q5;;   (* 10 * [24, 34]*)
assert(element = 10);;
let q5 = add 8 q5;;   (* [8, 24, 34]*)
let q5 = add 4 q5;;   (* [4, 8, 24, 34]*)
let q5 = add 37 q5;;   (* [4, 8, 24, 34, 37]*)
let (element, q5) = delete_min q5;;   (* 4 * [8, 24, 34, 37]*)
assert(element = 4);;
let (element, q5) = delete_min q5;;   (* 8 * [24, 34, 37]*)
assert(element = 8);;
let (element, q5) = delete_min q5;;   (* 24 * [34, 37]*)
assert(element = 24);;
let q5 = add 13 q5;;   (* [13, 34, 37]*)
assert(is_empty q5 = false);;   (*[13, 34, 37]*)
let (element, q5) = delete_min q5;;   (* 13 * [34, 37]*)
assert(element = 13);;
let q5 = add 34 q5;;   (* [34, 34, 37]*)
let q5 = add 33 q5;;   (* [33, 34, 34, 37]*)
let (element, q5) = delete_min q5;;   (* 33 * [34, 34, 37]*)
assert(element = 33);;
let q5 = add 33 q5;;   (* [33, 34, 34, 37]*)
let q5 = add 33 q5;;   (* [33, 33, 34, 34, 37]*)
let q5 = add 31 q5;;   (* [31, 33, 33, 34, 34, 37]*)
let (element, q5) = delete_min q5;;   (* 31 * [33, 33, 34, 34, 37]*)
assert(element = 31);;
let (element, q5) = delete_min q5;;   (* 33 * [33, 34, 34, 37]*)
assert(element = 33);;
let (element, q5) = delete_min q5;;   (* 33 * [34, 34, 37]*)
assert(element = 33);;
let q5 = add 18 q5;;   (* [18, 34, 34, 37]*)
let (element, q5) = delete_min q5;;   (* 18 * [34, 34, 37]*)
assert(element = 18);;
let q5 = add 29 q5;;   (* [29, 34, 34, 37]*)
let q5 = add 0 q5;;   (* [0, 29, 34, 34, 37]*)
let q5 = add 29 q5;;   (* [0, 29, 29, 34, 34, 37]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[0, 13, 13, 14, 15, 15, 15, 16, 17, 17, 17, 18, 18, 18, 19, 19, 20, 20, 20, 20, 21, 22, 22, 24, 24, 25, 25, 25, 27, 27, 28, 28, 29, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39]*)
let (element, q) = delete_min q;;   (* 0 * [13, 13, 14, 15, 15, 15, 16, 17, 17, 17, 18, 18, 18, 19, 19, 20, 20, 20, 20, 21, 22, 22, 24, 24, 25, 25, 25, 27, 27, 28, 28, 29, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 0);;
let (element, q) = delete_min q;;   (* 13 * [13, 14, 15, 15, 15, 16, 17, 17, 17, 18, 18, 18, 19, 19, 20, 20, 20, 20, 21, 22, 22, 24, 24, 25, 25, 25, 27, 27, 28, 28, 29, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 13 * [14, 15, 15, 15, 16, 17, 17, 17, 18, 18, 18, 19, 19, 20, 20, 20, 20, 21, 22, 22, 24, 24, 25, 25, 25, 27, 27, 28, 28, 29, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 14 * [15, 15, 15, 16, 17, 17, 17, 18, 18, 18, 19, 19, 20, 20, 20, 20, 21, 22, 22, 24, 24, 25, 25, 25, 27, 27, 28, 28, 29, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [15, 15, 16, 17, 17, 17, 18, 18, 18, 19, 19, 20, 20, 20, 20, 21, 22, 22, 24, 24, 25, 25, 25, 27, 27, 28, 28, 29, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [15, 16, 17, 17, 17, 18, 18, 18, 19, 19, 20, 20, 20, 20, 21, 22, 22, 24, 24, 25, 25, 25, 27, 27, 28, 28, 29, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [16, 17, 17, 17, 18, 18, 18, 19, 19, 20, 20, 20, 20, 21, 22, 22, 24, 24, 25, 25, 25, 27, 27, 28, 28, 29, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [17, 17, 17, 18, 18, 18, 19, 19, 20, 20, 20, 20, 21, 22, 22, 24, 24, 25, 25, 25, 27, 27, 28, 28, 29, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 17 * [17, 17, 18, 18, 18, 19, 19, 20, 20, 20, 20, 21, 22, 22, 24, 24, 25, 25, 25, 27, 27, 28, 28, 29, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [17, 18, 18, 18, 19, 19, 20, 20, 20, 20, 21, 22, 22, 24, 24, 25, 25, 25, 27, 27, 28, 28, 29, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [18, 18, 18, 19, 19, 20, 20, 20, 20, 21, 22, 22, 24, 24, 25, 25, 25, 27, 27, 28, 28, 29, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [18, 18, 19, 19, 20, 20, 20, 20, 21, 22, 22, 24, 24, 25, 25, 25, 27, 27, 28, 28, 29, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [18, 19, 19, 20, 20, 20, 20, 21, 22, 22, 24, 24, 25, 25, 25, 27, 27, 28, 28, 29, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [19, 19, 20, 20, 20, 20, 21, 22, 22, 24, 24, 25, 25, 25, 27, 27, 28, 28, 29, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [19, 20, 20, 20, 20, 21, 22, 22, 24, 24, 25, 25, 25, 27, 27, 28, 28, 29, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [20, 20, 20, 20, 21, 22, 22, 24, 24, 25, 25, 25, 27, 27, 28, 28, 29, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 20, 21, 22, 22, 24, 24, 25, 25, 25, 27, 27, 28, 28, 29, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 21, 22, 22, 24, 24, 25, 25, 25, 27, 27, 28, 28, 29, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 21, 22, 22, 24, 24, 25, 25, 25, 27, 27, 28, 28, 29, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [21, 22, 22, 24, 24, 25, 25, 25, 27, 27, 28, 28, 29, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [22, 22, 24, 24, 25, 25, 25, 27, 27, 28, 28, 29, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [22, 24, 24, 25, 25, 25, 27, 27, 28, 28, 29, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [24, 24, 25, 25, 25, 27, 27, 28, 28, 29, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 24 * [24, 25, 25, 25, 27, 27, 28, 28, 29, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [25, 25, 25, 27, 27, 28, 28, 29, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [25, 25, 27, 27, 28, 28, 29, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [25, 27, 27, 28, 28, 29, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [27, 27, 28, 28, 29, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 27 * [27, 28, 28, 29, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [28, 28, 29, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [28, 29, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [29, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [29, 29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [29, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 38, 38, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 38, 38, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [38, 38, 38, 38, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 38, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST89----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 26 q1;;   (* [26]*)
let q1 = add 12 q1;;   (* [12, 26]*)
let q1 = add 10 q1;;   (* [10, 12, 26]*)
let q1 = add 15 q1;;   (* [10, 12, 15, 26]*)
let q1 = add 1 q1;;   (* [1, 10, 12, 15, 26]*)
let (element, q1) = delete_min q1;;   (* 1 * [10, 12, 15, 26]*)
assert(element = 1);;
let (element, q1) = delete_min q1;;   (* 10 * [12, 15, 26]*)
assert(element = 10);;
let (element, q1) = delete_min q1;;   (* 12 * [15, 26]*)
assert(element = 12);;
let q1 = add 25 q1;;   (* [15, 25, 26]*)
let q1 = add 33 q1;;   (* [15, 25, 26, 33]*)
let q1 = add 7 q1;;   (* [7, 15, 25, 26, 33]*)
let q1 = add 1 q1;;   (* [1, 7, 15, 25, 26, 33]*)
let (element, q1) = delete_min q1;;   (* 1 * [7, 15, 25, 26, 33]*)
assert(element = 1);;
let q1 = add 18 q1;;   (* [7, 15, 18, 25, 26, 33]*)
let (element, q1) = delete_min q1;;   (* 7 * [15, 18, 25, 26, 33]*)
assert(element = 7);;
let q1 = add 14 q1;;   (* [14, 15, 18, 25, 26, 33]*)
let q1 = add 36 q1;;   (* [14, 15, 18, 25, 26, 33, 36]*)
let q1 = add 22 q1;;   (* [14, 15, 18, 22, 25, 26, 33, 36]*)
let q1 = add 2 q1;;   (* [2, 14, 15, 18, 22, 25, 26, 33, 36]*)
assert(is_empty q1 = false);;   (*[2, 14, 15, 18, 22, 25, 26, 33, 36]*)
let q1 = add 24 q1;;   (* [2, 14, 15, 18, 22, 24, 25, 26, 33, 36]*)
let (element, q1) = delete_min q1;;   (* 2 * [14, 15, 18, 22, 24, 25, 26, 33, 36]*)
assert(element = 2);;
let q1 = add 6 q1;;   (* [6, 14, 15, 18, 22, 24, 25, 26, 33, 36]*)
let q1 = add 12 q1;;   (* [6, 12, 14, 15, 18, 22, 24, 25, 26, 33, 36]*)
let (element, q1) = delete_min q1;;   (* 6 * [12, 14, 15, 18, 22, 24, 25, 26, 33, 36]*)
assert(element = 6);;
let q1 = add 26 q1;;   (* [12, 14, 15, 18, 22, 24, 25, 26, 26, 33, 36]*)
let (element, q1) = delete_min q1;;   (* 12 * [14, 15, 18, 22, 24, 25, 26, 26, 33, 36]*)
assert(element = 12);;
let q1 = add 27 q1;;   (* [14, 15, 18, 22, 24, 25, 26, 26, 27, 33, 36]*)
let q1 = add 21 q1;;   (* [14, 15, 18, 21, 22, 24, 25, 26, 26, 27, 33, 36]*)
let q1 = add 14 q1;;   (* [14, 14, 15, 18, 21, 22, 24, 25, 26, 26, 27, 33, 36]*)
let (element, q1) = delete_min q1;;   (* 14 * [14, 15, 18, 21, 22, 24, 25, 26, 26, 27, 33, 36]*)
assert(element = 14);;
let (element, q1) = delete_min q1;;   (* 14 * [15, 18, 21, 22, 24, 25, 26, 26, 27, 33, 36]*)
assert(element = 14);;
assert(is_empty q1 = false);;   (*[15, 18, 21, 22, 24, 25, 26, 26, 27, 33, 36]*)
let (element, q1) = delete_min q1;;   (* 15 * [18, 21, 22, 24, 25, 26, 26, 27, 33, 36]*)
assert(element = 15);;
let (element, q1) = delete_min q1;;   (* 18 * [21, 22, 24, 25, 26, 26, 27, 33, 36]*)
assert(element = 18);;

(* -------q2------ *)
let q2 = empty;;
let q2 = add 36 q2;;   (* [36]*)
let q2 = add 8 q2;;   (* [8, 36]*)
assert(is_empty q2 = false);;   (*[8, 36]*)
let q2 = add 32 q2;;   (* [8, 32, 36]*)
let q2 = add 35 q2;;   (* [8, 32, 35, 36]*)
let (element, q2) = delete_min q2;;   (* 8 * [32, 35, 36]*)
assert(element = 8);;
let (element, q2) = delete_min q2;;   (* 32 * [35, 36]*)
assert(element = 32);;
assert(is_empty q2 = false);;   (*[35, 36]*)
let q2 = add 38 q2;;   (* [35, 36, 38]*)
let (element, q2) = delete_min q2;;   (* 35 * [36, 38]*)
assert(element = 35);;
let (element, q2) = delete_min q2;;   (* 36 * [38]*)
assert(element = 36);;
let q2 = add 28 q2;;   (* [28, 38]*)
let (element, q2) = delete_min q2;;   (* 28 * [38]*)
assert(element = 28);;
let q2 = add 37 q2;;   (* [37, 38]*)
let q2 = add 7 q2;;   (* [7, 37, 38]*)
let (element, q2) = delete_min q2;;   (* 7 * [37, 38]*)
assert(element = 7);;
let (element, q2) = delete_min q2;;   (* 37 * [38]*)
assert(element = 37);;
let (element, q2) = delete_min q2;;   (* 38 * []*)
assert(element = 38);;
let q2 = add 1 q2;;   (* [1]*)
let q2 = add 14 q2;;   (* [1, 14]*)
let q2 = add 2 q2;;   (* [1, 2, 14]*)
let q2 = add 21 q2;;   (* [1, 2, 14, 21]*)
let (element, q2) = delete_min q2;;   (* 1 * [2, 14, 21]*)
assert(element = 1);;
let q2 = add 29 q2;;   (* [2, 14, 21, 29]*)
let q2 = add 10 q2;;   (* [2, 10, 14, 21, 29]*)
let q2 = add 32 q2;;   (* [2, 10, 14, 21, 29, 32]*)
let (element, q2) = delete_min q2;;   (* 2 * [10, 14, 21, 29, 32]*)
assert(element = 2);;
let (element, q2) = delete_min q2;;   (* 10 * [14, 21, 29, 32]*)
assert(element = 10);;
let q2 = add 35 q2;;   (* [14, 21, 29, 32, 35]*)
assert(is_empty q2 = false);;   (*[14, 21, 29, 32, 35]*)
let q2 = add 18 q2;;   (* [14, 18, 21, 29, 32, 35]*)
let q2 = add 36 q2;;   (* [14, 18, 21, 29, 32, 35, 36]*)
let q2 = add 36 q2;;   (* [14, 18, 21, 29, 32, 35, 36, 36]*)
let (element, q2) = delete_min q2;;   (* 14 * [18, 21, 29, 32, 35, 36, 36]*)
assert(element = 14);;
let (element, q2) = delete_min q2;;   (* 18 * [21, 29, 32, 35, 36, 36]*)
assert(element = 18);;

(* -------q3------ *)
let q3 = empty;;
let q3 = add 14 q3;;   (* [14]*)
let (element, q3) = delete_min q3;;   (* 14 * []*)
assert(element = 14);;
let q3 = add 11 q3;;   (* [11]*)
let q3 = add 30 q3;;   (* [11, 30]*)
let (element, q3) = delete_min q3;;   (* 11 * [30]*)
assert(element = 11);;
let q3 = add 32 q3;;   (* [30, 32]*)
let q3 = add 25 q3;;   (* [25, 30, 32]*)
assert(is_empty q3 = false);;   (*[25, 30, 32]*)
let q3 = add 30 q3;;   (* [25, 30, 30, 32]*)
let (element, q3) = delete_min q3;;   (* 25 * [30, 30, 32]*)
assert(element = 25);;
assert(is_empty q3 = false);;   (*[30, 30, 32]*)
assert(is_empty q3 = false);;   (*[30, 30, 32]*)
let q3 = add 0 q3;;   (* [0, 30, 30, 32]*)
let q3 = add 13 q3;;   (* [0, 13, 30, 30, 32]*)
let q3 = add 8 q3;;   (* [0, 8, 13, 30, 30, 32]*)
let (element, q3) = delete_min q3;;   (* 0 * [8, 13, 30, 30, 32]*)
assert(element = 0);;
let q3 = add 10 q3;;   (* [8, 10, 13, 30, 30, 32]*)
let (element, q3) = delete_min q3;;   (* 8 * [10, 13, 30, 30, 32]*)
assert(element = 8);;
let q3 = add 5 q3;;   (* [5, 10, 13, 30, 30, 32]*)
let q3 = add 24 q3;;   (* [5, 10, 13, 24, 30, 30, 32]*)
let (element, q3) = delete_min q3;;   (* 5 * [10, 13, 24, 30, 30, 32]*)
assert(element = 5);;
let q3 = add 22 q3;;   (* [10, 13, 22, 24, 30, 30, 32]*)
assert(is_empty q3 = false);;   (*[10, 13, 22, 24, 30, 30, 32]*)
let q3 = add 5 q3;;   (* [5, 10, 13, 22, 24, 30, 30, 32]*)
let (element, q3) = delete_min q3;;   (* 5 * [10, 13, 22, 24, 30, 30, 32]*)
assert(element = 5);;
let q3 = add 14 q3;;   (* [10, 13, 14, 22, 24, 30, 30, 32]*)
let q3 = add 11 q3;;   (* [10, 11, 13, 14, 22, 24, 30, 30, 32]*)
let (element, q3) = delete_min q3;;   (* 10 * [11, 13, 14, 22, 24, 30, 30, 32]*)
assert(element = 10);;
let q3 = add 18 q3;;   (* [11, 13, 14, 18, 22, 24, 30, 30, 32]*)
let (element, q3) = delete_min q3;;   (* 11 * [13, 14, 18, 22, 24, 30, 30, 32]*)
assert(element = 11);;
let q3 = add 8 q3;;   (* [8, 13, 14, 18, 22, 24, 30, 30, 32]*)
let q3 = add 23 q3;;   (* [8, 13, 14, 18, 22, 23, 24, 30, 30, 32]*)
let q3 = add 9 q3;;   (* [8, 9, 13, 14, 18, 22, 23, 24, 30, 30, 32]*)
let q3 = add 3 q3;;   (* [3, 8, 9, 13, 14, 18, 22, 23, 24, 30, 30, 32]*)
let q3 = add 3 q3;;   (* [3, 3, 8, 9, 13, 14, 18, 22, 23, 24, 30, 30, 32]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 32 q4;;   (* [32]*)
let (element, q4) = delete_min q4;;   (* 32 * []*)
assert(element = 32);;
let q4 = add 17 q4;;   (* [17]*)
let (element, q4) = delete_min q4;;   (* 17 * []*)
assert(element = 17);;
let q4 = add 29 q4;;   (* [29]*)
let q4 = add 21 q4;;   (* [21, 29]*)
assert(is_empty q4 = false);;   (*[21, 29]*)
let q4 = add 29 q4;;   (* [21, 29, 29]*)
let q4 = add 38 q4;;   (* [21, 29, 29, 38]*)
let q4 = add 9 q4;;   (* [9, 21, 29, 29, 38]*)
let q4 = add 29 q4;;   (* [9, 21, 29, 29, 29, 38]*)
let (element, q4) = delete_min q4;;   (* 9 * [21, 29, 29, 29, 38]*)
assert(element = 9);;
let (element, q4) = delete_min q4;;   (* 21 * [29, 29, 29, 38]*)
assert(element = 21);;
let q4 = add 0 q4;;   (* [0, 29, 29, 29, 38]*)
let q4 = add 18 q4;;   (* [0, 18, 29, 29, 29, 38]*)
let q4 = add 22 q4;;   (* [0, 18, 22, 29, 29, 29, 38]*)
let q4 = add 6 q4;;   (* [0, 6, 18, 22, 29, 29, 29, 38]*)
let q4 = add 25 q4;;   (* [0, 6, 18, 22, 25, 29, 29, 29, 38]*)
let q4 = add 16 q4;;   (* [0, 6, 16, 18, 22, 25, 29, 29, 29, 38]*)
let q4 = add 25 q4;;   (* [0, 6, 16, 18, 22, 25, 25, 29, 29, 29, 38]*)
let q4 = add 8 q4;;   (* [0, 6, 8, 16, 18, 22, 25, 25, 29, 29, 29, 38]*)
let q4 = add 11 q4;;   (* [0, 6, 8, 11, 16, 18, 22, 25, 25, 29, 29, 29, 38]*)
let q4 = add 30 q4;;   (* [0, 6, 8, 11, 16, 18, 22, 25, 25, 29, 29, 29, 30, 38]*)
let q4 = add 9 q4;;   (* [0, 6, 8, 9, 11, 16, 18, 22, 25, 25, 29, 29, 29, 30, 38]*)
let q4 = add 7 q4;;   (* [0, 6, 7, 8, 9, 11, 16, 18, 22, 25, 25, 29, 29, 29, 30, 38]*)
let (element, q4) = delete_min q4;;   (* 0 * [6, 7, 8, 9, 11, 16, 18, 22, 25, 25, 29, 29, 29, 30, 38]*)
assert(element = 0);;
let q4 = add 16 q4;;   (* [6, 7, 8, 9, 11, 16, 16, 18, 22, 25, 25, 29, 29, 29, 30, 38]*)
let q4 = add 18 q4;;   (* [6, 7, 8, 9, 11, 16, 16, 18, 18, 22, 25, 25, 29, 29, 29, 30, 38]*)
let (element, q4) = delete_min q4;;   (* 6 * [7, 8, 9, 11, 16, 16, 18, 18, 22, 25, 25, 29, 29, 29, 30, 38]*)
assert(element = 6);;
assert(is_empty q4 = false);;   (*[7, 8, 9, 11, 16, 16, 18, 18, 22, 25, 25, 29, 29, 29, 30, 38]*)
assert(is_empty q4 = false);;   (*[7, 8, 9, 11, 16, 16, 18, 18, 22, 25, 25, 29, 29, 29, 30, 38]*)
let q4 = add 13 q4;;   (* [7, 8, 9, 11, 13, 16, 16, 18, 18, 22, 25, 25, 29, 29, 29, 30, 38]*)
let q4 = add 22 q4;;   (* [7, 8, 9, 11, 13, 16, 16, 18, 18, 22, 22, 25, 25, 29, 29, 29, 30, 38]*)
let q4 = add 35 q4;;   (* [7, 8, 9, 11, 13, 16, 16, 18, 18, 22, 22, 25, 25, 29, 29, 29, 30, 35, 38]*)
let q4 = add 19 q4;;   (* [7, 8, 9, 11, 13, 16, 16, 18, 18, 19, 22, 22, 25, 25, 29, 29, 29, 30, 35, 38]*)

(* -------q5------ *)
let q5 = empty;;
let q5 = add 3 q5;;   (* [3]*)
assert(is_empty q5 = false);;   (*[3]*)
let q5 = add 16 q5;;   (* [3, 16]*)
let q5 = add 3 q5;;   (* [3, 3, 16]*)
let q5 = add 13 q5;;   (* [3, 3, 13, 16]*)
let q5 = add 33 q5;;   (* [3, 3, 13, 16, 33]*)
let q5 = add 34 q5;;   (* [3, 3, 13, 16, 33, 34]*)
let q5 = add 30 q5;;   (* [3, 3, 13, 16, 30, 33, 34]*)
let (element, q5) = delete_min q5;;   (* 3 * [3, 13, 16, 30, 33, 34]*)
assert(element = 3);;
let q5 = add 3 q5;;   (* [3, 3, 13, 16, 30, 33, 34]*)
let q5 = add 0 q5;;   (* [0, 3, 3, 13, 16, 30, 33, 34]*)
let q5 = add 24 q5;;   (* [0, 3, 3, 13, 16, 24, 30, 33, 34]*)
let (element, q5) = delete_min q5;;   (* 0 * [3, 3, 13, 16, 24, 30, 33, 34]*)
assert(element = 0);;
let (element, q5) = delete_min q5;;   (* 3 * [3, 13, 16, 24, 30, 33, 34]*)
assert(element = 3);;
let (element, q5) = delete_min q5;;   (* 3 * [13, 16, 24, 30, 33, 34]*)
assert(element = 3);;
let q5 = add 35 q5;;   (* [13, 16, 24, 30, 33, 34, 35]*)
let (element, q5) = delete_min q5;;   (* 13 * [16, 24, 30, 33, 34, 35]*)
assert(element = 13);;
let (element, q5) = delete_min q5;;   (* 16 * [24, 30, 33, 34, 35]*)
assert(element = 16);;
let q5 = add 3 q5;;   (* [3, 24, 30, 33, 34, 35]*)
let (element, q5) = delete_min q5;;   (* 3 * [24, 30, 33, 34, 35]*)
assert(element = 3);;
let q5 = add 7 q5;;   (* [7, 24, 30, 33, 34, 35]*)
let q5 = add 29 q5;;   (* [7, 24, 29, 30, 33, 34, 35]*)
let (element, q5) = delete_min q5;;   (* 7 * [24, 29, 30, 33, 34, 35]*)
assert(element = 7);;
let (element, q5) = delete_min q5;;   (* 24 * [29, 30, 33, 34, 35]*)
assert(element = 24);;
let (element, q5) = delete_min q5;;   (* 29 * [30, 33, 34, 35]*)
assert(element = 29);;
let q5 = add 24 q5;;   (* [24, 30, 33, 34, 35]*)
let q5 = add 24 q5;;   (* [24, 24, 30, 33, 34, 35]*)
let q5 = add 22 q5;;   (* [22, 24, 24, 30, 33, 34, 35]*)
let q5 = add 38 q5;;   (* [22, 24, 24, 30, 33, 34, 35, 38]*)
let (element, q5) = delete_min q5;;   (* 22 * [24, 24, 30, 33, 34, 35, 38]*)
assert(element = 22);;
let (element, q5) = delete_min q5;;   (* 24 * [24, 30, 33, 34, 35, 38]*)
assert(element = 24);;
let q5 = add 20 q5;;   (* [20, 24, 30, 33, 34, 35, 38]*)
let q5 = add 23 q5;;   (* [20, 23, 24, 30, 33, 34, 35, 38]*)
let q5 = add 14 q5;;   (* [14, 20, 23, 24, 30, 33, 34, 35, 38]*)
let (element, q5) = delete_min q5;;   (* 14 * [20, 23, 24, 30, 33, 34, 35, 38]*)
assert(element = 14);;

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[3, 3, 7, 8, 8, 9, 9, 11, 13, 13, 14, 16, 16, 18, 18, 18, 19, 20, 21, 21, 22, 22, 22, 22, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 27, 29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38]*)
let (element, q) = delete_min q;;   (* 3 * [3, 7, 8, 8, 9, 9, 11, 13, 13, 14, 16, 16, 18, 18, 18, 19, 20, 21, 21, 22, 22, 22, 22, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 27, 29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 3);;
let (element, q) = delete_min q;;   (* 3 * [7, 8, 8, 9, 9, 11, 13, 13, 14, 16, 16, 18, 18, 18, 19, 20, 21, 21, 22, 22, 22, 22, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 27, 29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 3);;
let (element, q) = delete_min q;;   (* 7 * [8, 8, 9, 9, 11, 13, 13, 14, 16, 16, 18, 18, 18, 19, 20, 21, 21, 22, 22, 22, 22, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 27, 29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 8 * [8, 9, 9, 11, 13, 13, 14, 16, 16, 18, 18, 18, 19, 20, 21, 21, 22, 22, 22, 22, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 27, 29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 8 * [9, 9, 11, 13, 13, 14, 16, 16, 18, 18, 18, 19, 20, 21, 21, 22, 22, 22, 22, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 27, 29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 9 * [9, 11, 13, 13, 14, 16, 16, 18, 18, 18, 19, 20, 21, 21, 22, 22, 22, 22, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 27, 29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 9 * [11, 13, 13, 14, 16, 16, 18, 18, 18, 19, 20, 21, 21, 22, 22, 22, 22, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 27, 29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 11 * [13, 13, 14, 16, 16, 18, 18, 18, 19, 20, 21, 21, 22, 22, 22, 22, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 27, 29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 13 * [13, 14, 16, 16, 18, 18, 18, 19, 20, 21, 21, 22, 22, 22, 22, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 27, 29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 13 * [14, 16, 16, 18, 18, 18, 19, 20, 21, 21, 22, 22, 22, 22, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 27, 29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 14 * [16, 16, 18, 18, 18, 19, 20, 21, 21, 22, 22, 22, 22, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 27, 29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 16 * [16, 18, 18, 18, 19, 20, 21, 21, 22, 22, 22, 22, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 27, 29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [18, 18, 18, 19, 20, 21, 21, 22, 22, 22, 22, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 27, 29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 18 * [18, 18, 19, 20, 21, 21, 22, 22, 22, 22, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 27, 29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [18, 19, 20, 21, 21, 22, 22, 22, 22, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 27, 29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [19, 20, 21, 21, 22, 22, 22, 22, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 27, 29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [20, 21, 21, 22, 22, 22, 22, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 27, 29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [21, 21, 22, 22, 22, 22, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 27, 29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [21, 22, 22, 22, 22, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 27, 29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [22, 22, 22, 22, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 27, 29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [22, 22, 22, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 27, 29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [22, 22, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 27, 29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [22, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 27, 29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 27, 29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [23, 24, 24, 24, 25, 25, 25, 26, 26, 27, 29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [24, 24, 24, 25, 25, 25, 26, 26, 27, 29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [24, 24, 25, 25, 25, 26, 26, 27, 29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [24, 25, 25, 25, 26, 26, 27, 29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [25, 25, 25, 26, 26, 27, 29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [25, 25, 26, 26, 27, 29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [25, 26, 26, 27, 29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [26, 26, 27, 29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [26, 27, 29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [27, 29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [29, 29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 29 * [29, 29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [29, 29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [29, 30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [30, 30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [30, 30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [30, 30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [30, 32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [32, 32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [33, 34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [34, 35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 35, 36, 36, 36, 38, 38]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 36, 36, 36, 38, 38]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 36, 36, 38, 38]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 36, 38, 38]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 38, 38]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 38, 38]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [38, 38]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 38 * [38]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * []*)
assert(element = 38);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST90----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 38 q1;;   (* [38]*)
let q1 = add 30 q1;;   (* [30, 38]*)
let (element, q1) = delete_min q1;;   (* 30 * [38]*)
assert(element = 30);;
let q1 = add 6 q1;;   (* [6, 38]*)
let (element, q1) = delete_min q1;;   (* 6 * [38]*)
assert(element = 6);;
let q1 = add 11 q1;;   (* [11, 38]*)
let (element, q1) = delete_min q1;;   (* 11 * [38]*)
assert(element = 11);;
assert(is_empty q1 = false);;   (*[38]*)
let q1 = add 33 q1;;   (* [33, 38]*)
let q1 = add 11 q1;;   (* [11, 33, 38]*)
assert(is_empty q1 = false);;   (*[11, 33, 38]*)
let q1 = add 5 q1;;   (* [5, 11, 33, 38]*)
let q1 = add 27 q1;;   (* [5, 11, 27, 33, 38]*)
let q1 = add 26 q1;;   (* [5, 11, 26, 27, 33, 38]*)
assert(is_empty q1 = false);;   (*[5, 11, 26, 27, 33, 38]*)
let q1 = add 32 q1;;   (* [5, 11, 26, 27, 32, 33, 38]*)
let q1 = add 20 q1;;   (* [5, 11, 20, 26, 27, 32, 33, 38]*)
let q1 = add 9 q1;;   (* [5, 9, 11, 20, 26, 27, 32, 33, 38]*)
assert(is_empty q1 = false);;   (*[5, 9, 11, 20, 26, 27, 32, 33, 38]*)
let q1 = add 33 q1;;   (* [5, 9, 11, 20, 26, 27, 32, 33, 33, 38]*)
let q1 = add 14 q1;;   (* [5, 9, 11, 14, 20, 26, 27, 32, 33, 33, 38]*)
let (element, q1) = delete_min q1;;   (* 5 * [9, 11, 14, 20, 26, 27, 32, 33, 33, 38]*)
assert(element = 5);;
let (element, q1) = delete_min q1;;   (* 9 * [11, 14, 20, 26, 27, 32, 33, 33, 38]*)
assert(element = 9);;
assert(is_empty q1 = false);;   (*[11, 14, 20, 26, 27, 32, 33, 33, 38]*)
let (element, q1) = delete_min q1;;   (* 11 * [14, 20, 26, 27, 32, 33, 33, 38]*)
assert(element = 11);;
let q1 = add 21 q1;;   (* [14, 20, 21, 26, 27, 32, 33, 33, 38]*)
let (element, q1) = delete_min q1;;   (* 14 * [20, 21, 26, 27, 32, 33, 33, 38]*)
assert(element = 14);;
let q1 = add 32 q1;;   (* [20, 21, 26, 27, 32, 32, 33, 33, 38]*)
let q1 = add 20 q1;;   (* [20, 20, 21, 26, 27, 32, 32, 33, 33, 38]*)
assert(is_empty q1 = false);;   (*[20, 20, 21, 26, 27, 32, 32, 33, 33, 38]*)
let q1 = add 36 q1;;   (* [20, 20, 21, 26, 27, 32, 32, 33, 33, 36, 38]*)
assert(is_empty q1 = false);;   (*[20, 20, 21, 26, 27, 32, 32, 33, 33, 36, 38]*)
let q1 = add 0 q1;;   (* [0, 20, 20, 21, 26, 27, 32, 32, 33, 33, 36, 38]*)
let q1 = add 27 q1;;   (* [0, 20, 20, 21, 26, 27, 27, 32, 32, 33, 33, 36, 38]*)
let (element, q1) = delete_min q1;;   (* 0 * [20, 20, 21, 26, 27, 27, 32, 32, 33, 33, 36, 38]*)
assert(element = 0);;
let q1 = add 31 q1;;   (* [20, 20, 21, 26, 27, 27, 31, 32, 32, 33, 33, 36, 38]*)

(* -------q2------ *)
let q2 = empty;;
assert(is_empty q2 = true);;   (*[]*)
let q2 = add 1 q2;;   (* [1]*)
let q2 = add 22 q2;;   (* [1, 22]*)
let q2 = add 1 q2;;   (* [1, 1, 22]*)
let q2 = add 29 q2;;   (* [1, 1, 22, 29]*)
let (element, q2) = delete_min q2;;   (* 1 * [1, 22, 29]*)
assert(element = 1);;
let q2 = add 27 q2;;   (* [1, 22, 27, 29]*)
let (element, q2) = delete_min q2;;   (* 1 * [22, 27, 29]*)
assert(element = 1);;
let q2 = add 35 q2;;   (* [22, 27, 29, 35]*)
let (element, q2) = delete_min q2;;   (* 22 * [27, 29, 35]*)
assert(element = 22);;
let q2 = add 30 q2;;   (* [27, 29, 30, 35]*)
let q2 = add 34 q2;;   (* [27, 29, 30, 34, 35]*)
let q2 = add 38 q2;;   (* [27, 29, 30, 34, 35, 38]*)
assert(is_empty q2 = false);;   (*[27, 29, 30, 34, 35, 38]*)
let q2 = add 13 q2;;   (* [13, 27, 29, 30, 34, 35, 38]*)
let q2 = add 23 q2;;   (* [13, 23, 27, 29, 30, 34, 35, 38]*)
let q2 = add 25 q2;;   (* [13, 23, 25, 27, 29, 30, 34, 35, 38]*)
let q2 = add 38 q2;;   (* [13, 23, 25, 27, 29, 30, 34, 35, 38, 38]*)
let (element, q2) = delete_min q2;;   (* 13 * [23, 25, 27, 29, 30, 34, 35, 38, 38]*)
assert(element = 13);;
let (element, q2) = delete_min q2;;   (* 23 * [25, 27, 29, 30, 34, 35, 38, 38]*)
assert(element = 23);;
let (element, q2) = delete_min q2;;   (* 25 * [27, 29, 30, 34, 35, 38, 38]*)
assert(element = 25);;
let q2 = add 27 q2;;   (* [27, 27, 29, 30, 34, 35, 38, 38]*)
let q2 = add 24 q2;;   (* [24, 27, 27, 29, 30, 34, 35, 38, 38]*)
let q2 = add 16 q2;;   (* [16, 24, 27, 27, 29, 30, 34, 35, 38, 38]*)
let q2 = add 23 q2;;   (* [16, 23, 24, 27, 27, 29, 30, 34, 35, 38, 38]*)
let (element, q2) = delete_min q2;;   (* 16 * [23, 24, 27, 27, 29, 30, 34, 35, 38, 38]*)
assert(element = 16);;
let (element, q2) = delete_min q2;;   (* 23 * [24, 27, 27, 29, 30, 34, 35, 38, 38]*)
assert(element = 23);;
assert(is_empty q2 = false);;   (*[24, 27, 27, 29, 30, 34, 35, 38, 38]*)
let q2 = add 39 q2;;   (* [24, 27, 27, 29, 30, 34, 35, 38, 38, 39]*)
let (element, q2) = delete_min q2;;   (* 24 * [27, 27, 29, 30, 34, 35, 38, 38, 39]*)
assert(element = 24);;
let q2 = add 14 q2;;   (* [14, 27, 27, 29, 30, 34, 35, 38, 38, 39]*)
let (element, q2) = delete_min q2;;   (* 14 * [27, 27, 29, 30, 34, 35, 38, 38, 39]*)
assert(element = 14);;
assert(is_empty q2 = false);;   (*[27, 27, 29, 30, 34, 35, 38, 38, 39]*)
let (element, q2) = delete_min q2;;   (* 27 * [27, 29, 30, 34, 35, 38, 38, 39]*)
assert(element = 27);;
let (element, q2) = delete_min q2;;   (* 27 * [29, 30, 34, 35, 38, 38, 39]*)
assert(element = 27);;
let q2 = add 31 q2;;   (* [29, 30, 31, 34, 35, 38, 38, 39]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 13 q3;;   (* [13]*)
let (element, q3) = delete_min q3;;   (* 13 * []*)
assert(element = 13);;
let q3 = add 39 q3;;   (* [39]*)
let q3 = add 12 q3;;   (* [12, 39]*)
let q3 = add 17 q3;;   (* [12, 17, 39]*)
let q3 = add 3 q3;;   (* [3, 12, 17, 39]*)
let (element, q3) = delete_min q3;;   (* 3 * [12, 17, 39]*)
assert(element = 3);;
let (element, q3) = delete_min q3;;   (* 12 * [17, 39]*)
assert(element = 12);;
let (element, q3) = delete_min q3;;   (* 17 * [39]*)
assert(element = 17);;
let q3 = add 16 q3;;   (* [16, 39]*)
let (element, q3) = delete_min q3;;   (* 16 * [39]*)
assert(element = 16);;
let (element, q3) = delete_min q3;;   (* 39 * []*)
assert(element = 39);;
let q3 = add 20 q3;;   (* [20]*)
let q3 = add 7 q3;;   (* [7, 20]*)
let (element, q3) = delete_min q3;;   (* 7 * [20]*)
assert(element = 7);;
let q3 = add 2 q3;;   (* [2, 20]*)
let (element, q3) = delete_min q3;;   (* 2 * [20]*)
assert(element = 2);;
let (element, q3) = delete_min q3;;   (* 20 * []*)
assert(element = 20);;
let q3 = add 10 q3;;   (* [10]*)
let q3 = add 34 q3;;   (* [10, 34]*)
let (element, q3) = delete_min q3;;   (* 10 * [34]*)
assert(element = 10);;
let q3 = add 16 q3;;   (* [16, 34]*)
assert(is_empty q3 = false);;   (*[16, 34]*)
assert(is_empty q3 = false);;   (*[16, 34]*)
let (element, q3) = delete_min q3;;   (* 16 * [34]*)
assert(element = 16);;
let q3 = add 4 q3;;   (* [4, 34]*)
let (element, q3) = delete_min q3;;   (* 4 * [34]*)
assert(element = 4);;
assert(is_empty q3 = false);;   (*[34]*)
let q3 = add 3 q3;;   (* [3, 34]*)
let q3 = add 10 q3;;   (* [3, 10, 34]*)
let q3 = add 18 q3;;   (* [3, 10, 18, 34]*)
let (element, q3) = delete_min q3;;   (* 3 * [10, 18, 34]*)
assert(element = 3);;
let (element, q3) = delete_min q3;;   (* 10 * [18, 34]*)
assert(element = 10);;
let q3 = add 27 q3;;   (* [18, 27, 34]*)
let q3 = add 4 q3;;   (* [4, 18, 27, 34]*)
assert(is_empty q3 = false);;   (*[4, 18, 27, 34]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 15 q4;;   (* [15]*)
let q4 = add 25 q4;;   (* [15, 25]*)
let q4 = add 22 q4;;   (* [15, 22, 25]*)
assert(is_empty q4 = false);;   (*[15, 22, 25]*)
let (element, q4) = delete_min q4;;   (* 15 * [22, 25]*)
assert(element = 15);;
assert(is_empty q4 = false);;   (*[22, 25]*)
let q4 = add 36 q4;;   (* [22, 25, 36]*)
assert(is_empty q4 = false);;   (*[22, 25, 36]*)
let q4 = add 2 q4;;   (* [2, 22, 25, 36]*)
assert(is_empty q4 = false);;   (*[2, 22, 25, 36]*)
let q4 = add 10 q4;;   (* [2, 10, 22, 25, 36]*)
let q4 = add 27 q4;;   (* [2, 10, 22, 25, 27, 36]*)
let q4 = add 8 q4;;   (* [2, 8, 10, 22, 25, 27, 36]*)
assert(is_empty q4 = false);;   (*[2, 8, 10, 22, 25, 27, 36]*)
let q4 = add 8 q4;;   (* [2, 8, 8, 10, 22, 25, 27, 36]*)
let q4 = add 24 q4;;   (* [2, 8, 8, 10, 22, 24, 25, 27, 36]*)
let q4 = add 12 q4;;   (* [2, 8, 8, 10, 12, 22, 24, 25, 27, 36]*)
assert(is_empty q4 = false);;   (*[2, 8, 8, 10, 12, 22, 24, 25, 27, 36]*)
let (element, q4) = delete_min q4;;   (* 2 * [8, 8, 10, 12, 22, 24, 25, 27, 36]*)
assert(element = 2);;
let q4 = add 17 q4;;   (* [8, 8, 10, 12, 17, 22, 24, 25, 27, 36]*)
let q4 = add 21 q4;;   (* [8, 8, 10, 12, 17, 21, 22, 24, 25, 27, 36]*)
let q4 = add 21 q4;;   (* [8, 8, 10, 12, 17, 21, 21, 22, 24, 25, 27, 36]*)
let (element, q4) = delete_min q4;;   (* 8 * [8, 10, 12, 17, 21, 21, 22, 24, 25, 27, 36]*)
assert(element = 8);;
let q4 = add 3 q4;;   (* [3, 8, 10, 12, 17, 21, 21, 22, 24, 25, 27, 36]*)
let (element, q4) = delete_min q4;;   (* 3 * [8, 10, 12, 17, 21, 21, 22, 24, 25, 27, 36]*)
assert(element = 3);;
let q4 = add 3 q4;;   (* [3, 8, 10, 12, 17, 21, 21, 22, 24, 25, 27, 36]*)
let q4 = add 16 q4;;   (* [3, 8, 10, 12, 16, 17, 21, 21, 22, 24, 25, 27, 36]*)
let q4 = add 15 q4;;   (* [3, 8, 10, 12, 15, 16, 17, 21, 21, 22, 24, 25, 27, 36]*)
assert(is_empty q4 = false);;   (*[3, 8, 10, 12, 15, 16, 17, 21, 21, 22, 24, 25, 27, 36]*)
let q4 = add 15 q4;;   (* [3, 8, 10, 12, 15, 15, 16, 17, 21, 21, 22, 24, 25, 27, 36]*)
let q4 = add 16 q4;;   (* [3, 8, 10, 12, 15, 15, 16, 16, 17, 21, 21, 22, 24, 25, 27, 36]*)
let q4 = add 5 q4;;   (* [3, 5, 8, 10, 12, 15, 15, 16, 16, 17, 21, 21, 22, 24, 25, 27, 36]*)
let q4 = add 25 q4;;   (* [3, 5, 8, 10, 12, 15, 15, 16, 16, 17, 21, 21, 22, 24, 25, 25, 27, 36]*)
let q4 = add 33 q4;;   (* [3, 5, 8, 10, 12, 15, 15, 16, 16, 17, 21, 21, 22, 24, 25, 25, 27, 33, 36]*)
let q4 = add 18 q4;;   (* [3, 5, 8, 10, 12, 15, 15, 16, 16, 17, 18, 21, 21, 22, 24, 25, 25, 27, 33, 36]*)
let q4 = add 7 q4;;   (* [3, 5, 7, 8, 10, 12, 15, 15, 16, 16, 17, 18, 21, 21, 22, 24, 25, 25, 27, 33, 36]*)

(* -------q5------ *)
let q5 = empty;;
let q5 = add 14 q5;;   (* [14]*)
assert(is_empty q5 = false);;   (*[14]*)
let q5 = add 29 q5;;   (* [14, 29]*)
let q5 = add 29 q5;;   (* [14, 29, 29]*)
let q5 = add 32 q5;;   (* [14, 29, 29, 32]*)
let (element, q5) = delete_min q5;;   (* 14 * [29, 29, 32]*)
assert(element = 14);;
assert(is_empty q5 = false);;   (*[29, 29, 32]*)
let (element, q5) = delete_min q5;;   (* 29 * [29, 32]*)
assert(element = 29);;
let q5 = add 9 q5;;   (* [9, 29, 32]*)
let (element, q5) = delete_min q5;;   (* 9 * [29, 32]*)
assert(element = 9);;
let q5 = add 23 q5;;   (* [23, 29, 32]*)
let (element, q5) = delete_min q5;;   (* 23 * [29, 32]*)
assert(element = 23);;
let (element, q5) = delete_min q5;;   (* 29 * [32]*)
assert(element = 29);;
let (element, q5) = delete_min q5;;   (* 32 * []*)
assert(element = 32);;
assert(is_empty q5 = true);;   (*[]*)
let q5 = add 4 q5;;   (* [4]*)
let q5 = add 14 q5;;   (* [4, 14]*)
let q5 = add 34 q5;;   (* [4, 14, 34]*)
assert(is_empty q5 = false);;   (*[4, 14, 34]*)
let q5 = add 17 q5;;   (* [4, 14, 17, 34]*)
let q5 = add 5 q5;;   (* [4, 5, 14, 17, 34]*)
let (element, q5) = delete_min q5;;   (* 4 * [5, 14, 17, 34]*)
assert(element = 4);;
let q5 = add 28 q5;;   (* [5, 14, 17, 28, 34]*)
let q5 = add 9 q5;;   (* [5, 9, 14, 17, 28, 34]*)
let q5 = add 31 q5;;   (* [5, 9, 14, 17, 28, 31, 34]*)
let (element, q5) = delete_min q5;;   (* 5 * [9, 14, 17, 28, 31, 34]*)
assert(element = 5);;
let q5 = add 12 q5;;   (* [9, 12, 14, 17, 28, 31, 34]*)
let q5 = add 25 q5;;   (* [9, 12, 14, 17, 25, 28, 31, 34]*)
let q5 = add 30 q5;;   (* [9, 12, 14, 17, 25, 28, 30, 31, 34]*)
let q5 = add 38 q5;;   (* [9, 12, 14, 17, 25, 28, 30, 31, 34, 38]*)
let (element, q5) = delete_min q5;;   (* 9 * [12, 14, 17, 25, 28, 30, 31, 34, 38]*)
assert(element = 9);;
let (element, q5) = delete_min q5;;   (* 12 * [14, 17, 25, 28, 30, 31, 34, 38]*)
assert(element = 12);;
let (element, q5) = delete_min q5;;   (* 14 * [17, 25, 28, 30, 31, 34, 38]*)
assert(element = 14);;
let q5 = add 33 q5;;   (* [17, 25, 28, 30, 31, 33, 34, 38]*)
let q5 = add 39 q5;;   (* [17, 25, 28, 30, 31, 33, 34, 38, 39]*)
let q5 = add 3 q5;;   (* [3, 17, 25, 28, 30, 31, 33, 34, 38, 39]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[3, 3, 4, 5, 7, 8, 10, 12, 15, 15, 16, 16, 17, 17, 18, 18, 20, 20, 21, 21, 21, 22, 24, 25, 25, 25, 26, 27, 27, 27, 27, 28, 29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39]*)
let (element, q) = delete_min q;;   (* 3 * [3, 4, 5, 7, 8, 10, 12, 15, 15, 16, 16, 17, 17, 18, 18, 20, 20, 21, 21, 21, 22, 24, 25, 25, 25, 26, 27, 27, 27, 27, 28, 29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 3);;
let (element, q) = delete_min q;;   (* 3 * [4, 5, 7, 8, 10, 12, 15, 15, 16, 16, 17, 17, 18, 18, 20, 20, 21, 21, 21, 22, 24, 25, 25, 25, 26, 27, 27, 27, 27, 28, 29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 3);;
let (element, q) = delete_min q;;   (* 4 * [5, 7, 8, 10, 12, 15, 15, 16, 16, 17, 17, 18, 18, 20, 20, 21, 21, 21, 22, 24, 25, 25, 25, 26, 27, 27, 27, 27, 28, 29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 5 * [7, 8, 10, 12, 15, 15, 16, 16, 17, 17, 18, 18, 20, 20, 21, 21, 21, 22, 24, 25, 25, 25, 26, 27, 27, 27, 27, 28, 29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 7 * [8, 10, 12, 15, 15, 16, 16, 17, 17, 18, 18, 20, 20, 21, 21, 21, 22, 24, 25, 25, 25, 26, 27, 27, 27, 27, 28, 29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 8 * [10, 12, 15, 15, 16, 16, 17, 17, 18, 18, 20, 20, 21, 21, 21, 22, 24, 25, 25, 25, 26, 27, 27, 27, 27, 28, 29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 10 * [12, 15, 15, 16, 16, 17, 17, 18, 18, 20, 20, 21, 21, 21, 22, 24, 25, 25, 25, 26, 27, 27, 27, 27, 28, 29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 12 * [15, 15, 16, 16, 17, 17, 18, 18, 20, 20, 21, 21, 21, 22, 24, 25, 25, 25, 26, 27, 27, 27, 27, 28, 29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 15 * [15, 16, 16, 17, 17, 18, 18, 20, 20, 21, 21, 21, 22, 24, 25, 25, 25, 26, 27, 27, 27, 27, 28, 29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [16, 16, 17, 17, 18, 18, 20, 20, 21, 21, 21, 22, 24, 25, 25, 25, 26, 27, 27, 27, 27, 28, 29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [16, 17, 17, 18, 18, 20, 20, 21, 21, 21, 22, 24, 25, 25, 25, 26, 27, 27, 27, 27, 28, 29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [17, 17, 18, 18, 20, 20, 21, 21, 21, 22, 24, 25, 25, 25, 26, 27, 27, 27, 27, 28, 29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 17 * [17, 18, 18, 20, 20, 21, 21, 21, 22, 24, 25, 25, 25, 26, 27, 27, 27, 27, 28, 29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [18, 18, 20, 20, 21, 21, 21, 22, 24, 25, 25, 25, 26, 27, 27, 27, 27, 28, 29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [18, 20, 20, 21, 21, 21, 22, 24, 25, 25, 25, 26, 27, 27, 27, 27, 28, 29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [20, 20, 21, 21, 21, 22, 24, 25, 25, 25, 26, 27, 27, 27, 27, 28, 29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 20 * [20, 21, 21, 21, 22, 24, 25, 25, 25, 26, 27, 27, 27, 27, 28, 29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [21, 21, 21, 22, 24, 25, 25, 25, 26, 27, 27, 27, 27, 28, 29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [21, 21, 22, 24, 25, 25, 25, 26, 27, 27, 27, 27, 28, 29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [21, 22, 24, 25, 25, 25, 26, 27, 27, 27, 27, 28, 29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [22, 24, 25, 25, 25, 26, 27, 27, 27, 27, 28, 29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [24, 25, 25, 25, 26, 27, 27, 27, 27, 28, 29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 24 * [25, 25, 25, 26, 27, 27, 27, 27, 28, 29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [25, 25, 26, 27, 27, 27, 27, 28, 29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [25, 26, 27, 27, 27, 27, 28, 29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [26, 27, 27, 27, 27, 28, 29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [27, 27, 27, 27, 28, 29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 27, 28, 29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 28, 29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 28, 29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [28, 29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [29, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [30, 31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [34, 34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 38, 38, 38, 38, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 38, 38, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [38, 38, 38, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 38, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST91----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 37 q1;;   (* [37]*)
let q1 = add 22 q1;;   (* [22, 37]*)
let (element, q1) = delete_min q1;;   (* 22 * [37]*)
assert(element = 22);;
let q1 = add 21 q1;;   (* [21, 37]*)
let q1 = add 8 q1;;   (* [8, 21, 37]*)
let (element, q1) = delete_min q1;;   (* 8 * [21, 37]*)
assert(element = 8);;
let q1 = add 22 q1;;   (* [21, 22, 37]*)
let (element, q1) = delete_min q1;;   (* 21 * [22, 37]*)
assert(element = 21);;
let (element, q1) = delete_min q1;;   (* 22 * [37]*)
assert(element = 22);;
let q1 = add 7 q1;;   (* [7, 37]*)
assert(is_empty q1 = false);;   (*[7, 37]*)
let q1 = add 37 q1;;   (* [7, 37, 37]*)
let (element, q1) = delete_min q1;;   (* 7 * [37, 37]*)
assert(element = 7);;
let (element, q1) = delete_min q1;;   (* 37 * [37]*)
assert(element = 37);;
assert(is_empty q1 = false);;   (*[37]*)
let q1 = add 30 q1;;   (* [30, 37]*)
let q1 = add 21 q1;;   (* [21, 30, 37]*)
let q1 = add 15 q1;;   (* [15, 21, 30, 37]*)
let q1 = add 9 q1;;   (* [9, 15, 21, 30, 37]*)
let (element, q1) = delete_min q1;;   (* 9 * [15, 21, 30, 37]*)
assert(element = 9);;
let (element, q1) = delete_min q1;;   (* 15 * [21, 30, 37]*)
assert(element = 15);;
let q1 = add 13 q1;;   (* [13, 21, 30, 37]*)
let (element, q1) = delete_min q1;;   (* 13 * [21, 30, 37]*)
assert(element = 13);;
assert(is_empty q1 = false);;   (*[21, 30, 37]*)
let q1 = add 19 q1;;   (* [19, 21, 30, 37]*)
let q1 = add 28 q1;;   (* [19, 21, 28, 30, 37]*)
let q1 = add 22 q1;;   (* [19, 21, 22, 28, 30, 37]*)
let q1 = add 21 q1;;   (* [19, 21, 21, 22, 28, 30, 37]*)
let q1 = add 22 q1;;   (* [19, 21, 21, 22, 22, 28, 30, 37]*)
assert(is_empty q1 = false);;   (*[19, 21, 21, 22, 22, 28, 30, 37]*)
let q1 = add 35 q1;;   (* [19, 21, 21, 22, 22, 28, 30, 35, 37]*)
let q1 = add 22 q1;;   (* [19, 21, 21, 22, 22, 22, 28, 30, 35, 37]*)
let q1 = add 38 q1;;   (* [19, 21, 21, 22, 22, 22, 28, 30, 35, 37, 38]*)
let (element, q1) = delete_min q1;;   (* 19 * [21, 21, 22, 22, 22, 28, 30, 35, 37, 38]*)
assert(element = 19);;
assert(is_empty q1 = false);;   (*[21, 21, 22, 22, 22, 28, 30, 35, 37, 38]*)
let q1 = add 36 q1;;   (* [21, 21, 22, 22, 22, 28, 30, 35, 36, 37, 38]*)
let (element, q1) = delete_min q1;;   (* 21 * [21, 22, 22, 22, 28, 30, 35, 36, 37, 38]*)
assert(element = 21);;

(* -------q2------ *)
let q2 = empty;;
let q2 = add 34 q2;;   (* [34]*)
let (element, q2) = delete_min q2;;   (* 34 * []*)
assert(element = 34);;
let q2 = add 30 q2;;   (* [30]*)
assert(is_empty q2 = false);;   (*[30]*)
let q2 = add 6 q2;;   (* [6, 30]*)
let q2 = add 24 q2;;   (* [6, 24, 30]*)
let q2 = add 8 q2;;   (* [6, 8, 24, 30]*)
let (element, q2) = delete_min q2;;   (* 6 * [8, 24, 30]*)
assert(element = 6);;
let q2 = add 3 q2;;   (* [3, 8, 24, 30]*)
let q2 = add 24 q2;;   (* [3, 8, 24, 24, 30]*)
let q2 = add 20 q2;;   (* [3, 8, 20, 24, 24, 30]*)
let q2 = add 24 q2;;   (* [3, 8, 20, 24, 24, 24, 30]*)
let q2 = add 19 q2;;   (* [3, 8, 19, 20, 24, 24, 24, 30]*)
let q2 = add 31 q2;;   (* [3, 8, 19, 20, 24, 24, 24, 30, 31]*)
assert(is_empty q2 = false);;   (*[3, 8, 19, 20, 24, 24, 24, 30, 31]*)
let q2 = add 13 q2;;   (* [3, 8, 13, 19, 20, 24, 24, 24, 30, 31]*)
assert(is_empty q2 = false);;   (*[3, 8, 13, 19, 20, 24, 24, 24, 30, 31]*)
let (element, q2) = delete_min q2;;   (* 3 * [8, 13, 19, 20, 24, 24, 24, 30, 31]*)
assert(element = 3);;
let (element, q2) = delete_min q2;;   (* 8 * [13, 19, 20, 24, 24, 24, 30, 31]*)
assert(element = 8);;
let q2 = add 16 q2;;   (* [13, 16, 19, 20, 24, 24, 24, 30, 31]*)
let (element, q2) = delete_min q2;;   (* 13 * [16, 19, 20, 24, 24, 24, 30, 31]*)
assert(element = 13);;
let q2 = add 9 q2;;   (* [9, 16, 19, 20, 24, 24, 24, 30, 31]*)
let q2 = add 3 q2;;   (* [3, 9, 16, 19, 20, 24, 24, 24, 30, 31]*)
let q2 = add 34 q2;;   (* [3, 9, 16, 19, 20, 24, 24, 24, 30, 31, 34]*)
let q2 = add 10 q2;;   (* [3, 9, 10, 16, 19, 20, 24, 24, 24, 30, 31, 34]*)
let (element, q2) = delete_min q2;;   (* 3 * [9, 10, 16, 19, 20, 24, 24, 24, 30, 31, 34]*)
assert(element = 3);;
let q2 = add 29 q2;;   (* [9, 10, 16, 19, 20, 24, 24, 24, 29, 30, 31, 34]*)
let (element, q2) = delete_min q2;;   (* 9 * [10, 16, 19, 20, 24, 24, 24, 29, 30, 31, 34]*)
assert(element = 9);;
let q2 = add 6 q2;;   (* [6, 10, 16, 19, 20, 24, 24, 24, 29, 30, 31, 34]*)
let q2 = add 22 q2;;   (* [6, 10, 16, 19, 20, 22, 24, 24, 24, 29, 30, 31, 34]*)
let q2 = add 22 q2;;   (* [6, 10, 16, 19, 20, 22, 22, 24, 24, 24, 29, 30, 31, 34]*)
let q2 = add 26 q2;;   (* [6, 10, 16, 19, 20, 22, 22, 24, 24, 24, 26, 29, 30, 31, 34]*)
let (element, q2) = delete_min q2;;   (* 6 * [10, 16, 19, 20, 22, 22, 24, 24, 24, 26, 29, 30, 31, 34]*)
assert(element = 6);;
let q2 = add 24 q2;;   (* [10, 16, 19, 20, 22, 22, 24, 24, 24, 24, 26, 29, 30, 31, 34]*)
let (element, q2) = delete_min q2;;   (* 10 * [16, 19, 20, 22, 22, 24, 24, 24, 24, 26, 29, 30, 31, 34]*)
assert(element = 10);;
assert(is_empty q2 = false);;   (*[16, 19, 20, 22, 22, 24, 24, 24, 24, 26, 29, 30, 31, 34]*)
let (element, q2) = delete_min q2;;   (* 16 * [19, 20, 22, 22, 24, 24, 24, 24, 26, 29, 30, 31, 34]*)
assert(element = 16);;

(* -------q3------ *)
let q3 = empty;;
assert(is_empty q3 = true);;   (*[]*)
let q3 = add 18 q3;;   (* [18]*)
let q3 = add 10 q3;;   (* [10, 18]*)
let q3 = add 21 q3;;   (* [10, 18, 21]*)
let q3 = add 24 q3;;   (* [10, 18, 21, 24]*)
let (element, q3) = delete_min q3;;   (* 10 * [18, 21, 24]*)
assert(element = 10);;
let q3 = add 31 q3;;   (* [18, 21, 24, 31]*)
let (element, q3) = delete_min q3;;   (* 18 * [21, 24, 31]*)
assert(element = 18);;
let q3 = add 15 q3;;   (* [15, 21, 24, 31]*)
let (element, q3) = delete_min q3;;   (* 15 * [21, 24, 31]*)
assert(element = 15);;
let q3 = add 36 q3;;   (* [21, 24, 31, 36]*)
let (element, q3) = delete_min q3;;   (* 21 * [24, 31, 36]*)
assert(element = 21);;
assert(is_empty q3 = false);;   (*[24, 31, 36]*)
let (element, q3) = delete_min q3;;   (* 24 * [31, 36]*)
assert(element = 24);;
let q3 = add 21 q3;;   (* [21, 31, 36]*)
let q3 = add 21 q3;;   (* [21, 21, 31, 36]*)
let (element, q3) = delete_min q3;;   (* 21 * [21, 31, 36]*)
assert(element = 21);;
let q3 = add 20 q3;;   (* [20, 21, 31, 36]*)
let (element, q3) = delete_min q3;;   (* 20 * [21, 31, 36]*)
assert(element = 20);;
let (element, q3) = delete_min q3;;   (* 21 * [31, 36]*)
assert(element = 21);;
let (element, q3) = delete_min q3;;   (* 31 * [36]*)
assert(element = 31);;
let q3 = add 7 q3;;   (* [7, 36]*)
let (element, q3) = delete_min q3;;   (* 7 * [36]*)
assert(element = 7);;
let q3 = add 29 q3;;   (* [29, 36]*)
let q3 = add 25 q3;;   (* [25, 29, 36]*)
let q3 = add 26 q3;;   (* [25, 26, 29, 36]*)
let (element, q3) = delete_min q3;;   (* 25 * [26, 29, 36]*)
assert(element = 25);;
let q3 = add 12 q3;;   (* [12, 26, 29, 36]*)
let q3 = add 27 q3;;   (* [12, 26, 27, 29, 36]*)
let q3 = add 11 q3;;   (* [11, 12, 26, 27, 29, 36]*)
let q3 = add 38 q3;;   (* [11, 12, 26, 27, 29, 36, 38]*)
let q3 = add 32 q3;;   (* [11, 12, 26, 27, 29, 32, 36, 38]*)
let q3 = add 4 q3;;   (* [4, 11, 12, 26, 27, 29, 32, 36, 38]*)
let q3 = add 12 q3;;   (* [4, 11, 12, 12, 26, 27, 29, 32, 36, 38]*)
let q3 = add 23 q3;;   (* [4, 11, 12, 12, 23, 26, 27, 29, 32, 36, 38]*)
assert(is_empty q3 = false);;   (*[4, 11, 12, 12, 23, 26, 27, 29, 32, 36, 38]*)
let q3 = add 12 q3;;   (* [4, 11, 12, 12, 12, 23, 26, 27, 29, 32, 36, 38]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 31 q4;;   (* [31]*)
let q4 = add 12 q4;;   (* [12, 31]*)
let (element, q4) = delete_min q4;;   (* 12 * [31]*)
assert(element = 12);;
let q4 = add 7 q4;;   (* [7, 31]*)
let q4 = add 18 q4;;   (* [7, 18, 31]*)
assert(is_empty q4 = false);;   (*[7, 18, 31]*)
let (element, q4) = delete_min q4;;   (* 7 * [18, 31]*)
assert(element = 7);;
let q4 = add 39 q4;;   (* [18, 31, 39]*)
let q4 = add 4 q4;;   (* [4, 18, 31, 39]*)
let q4 = add 4 q4;;   (* [4, 4, 18, 31, 39]*)
let q4 = add 35 q4;;   (* [4, 4, 18, 31, 35, 39]*)
assert(is_empty q4 = false);;   (*[4, 4, 18, 31, 35, 39]*)
let q4 = add 11 q4;;   (* [4, 4, 11, 18, 31, 35, 39]*)
let (element, q4) = delete_min q4;;   (* 4 * [4, 11, 18, 31, 35, 39]*)
assert(element = 4);;
let q4 = add 12 q4;;   (* [4, 11, 12, 18, 31, 35, 39]*)
let q4 = add 10 q4;;   (* [4, 10, 11, 12, 18, 31, 35, 39]*)
let q4 = add 18 q4;;   (* [4, 10, 11, 12, 18, 18, 31, 35, 39]*)
let (element, q4) = delete_min q4;;   (* 4 * [10, 11, 12, 18, 18, 31, 35, 39]*)
assert(element = 4);;
let q4 = add 0 q4;;   (* [0, 10, 11, 12, 18, 18, 31, 35, 39]*)
let q4 = add 9 q4;;   (* [0, 9, 10, 11, 12, 18, 18, 31, 35, 39]*)
let (element, q4) = delete_min q4;;   (* 0 * [9, 10, 11, 12, 18, 18, 31, 35, 39]*)
assert(element = 0);;
let q4 = add 38 q4;;   (* [9, 10, 11, 12, 18, 18, 31, 35, 38, 39]*)
let q4 = add 33 q4;;   (* [9, 10, 11, 12, 18, 18, 31, 33, 35, 38, 39]*)
let (element, q4) = delete_min q4;;   (* 9 * [10, 11, 12, 18, 18, 31, 33, 35, 38, 39]*)
assert(element = 9);;
let q4 = add 20 q4;;   (* [10, 11, 12, 18, 18, 20, 31, 33, 35, 38, 39]*)
assert(is_empty q4 = false);;   (*[10, 11, 12, 18, 18, 20, 31, 33, 35, 38, 39]*)
let q4 = add 8 q4;;   (* [8, 10, 11, 12, 18, 18, 20, 31, 33, 35, 38, 39]*)
let (element, q4) = delete_min q4;;   (* 8 * [10, 11, 12, 18, 18, 20, 31, 33, 35, 38, 39]*)
assert(element = 8);;
let q4 = add 7 q4;;   (* [7, 10, 11, 12, 18, 18, 20, 31, 33, 35, 38, 39]*)
let (element, q4) = delete_min q4;;   (* 7 * [10, 11, 12, 18, 18, 20, 31, 33, 35, 38, 39]*)
assert(element = 7);;
let q4 = add 33 q4;;   (* [10, 11, 12, 18, 18, 20, 31, 33, 33, 35, 38, 39]*)
let q4 = add 28 q4;;   (* [10, 11, 12, 18, 18, 20, 28, 31, 33, 33, 35, 38, 39]*)
let q4 = add 15 q4;;   (* [10, 11, 12, 15, 18, 18, 20, 28, 31, 33, 33, 35, 38, 39]*)
let q4 = add 35 q4;;   (* [10, 11, 12, 15, 18, 18, 20, 28, 31, 33, 33, 35, 35, 38, 39]*)
assert(is_empty q4 = false);;   (*[10, 11, 12, 15, 18, 18, 20, 28, 31, 33, 33, 35, 35, 38, 39]*)
let (element, q4) = delete_min q4;;   (* 10 * [11, 12, 15, 18, 18, 20, 28, 31, 33, 33, 35, 35, 38, 39]*)
assert(element = 10);;
let (element, q4) = delete_min q4;;   (* 11 * [12, 15, 18, 18, 20, 28, 31, 33, 33, 35, 35, 38, 39]*)
assert(element = 11);;

(* -------q5------ *)
let q5 = empty;;
let q5 = add 32 q5;;   (* [32]*)
let q5 = add 11 q5;;   (* [11, 32]*)
let q5 = add 28 q5;;   (* [11, 28, 32]*)
assert(is_empty q5 = false);;   (*[11, 28, 32]*)
let q5 = add 27 q5;;   (* [11, 27, 28, 32]*)
assert(is_empty q5 = false);;   (*[11, 27, 28, 32]*)
assert(is_empty q5 = false);;   (*[11, 27, 28, 32]*)
let q5 = add 29 q5;;   (* [11, 27, 28, 29, 32]*)
let q5 = add 37 q5;;   (* [11, 27, 28, 29, 32, 37]*)
let q5 = add 23 q5;;   (* [11, 23, 27, 28, 29, 32, 37]*)
assert(is_empty q5 = false);;   (*[11, 23, 27, 28, 29, 32, 37]*)
let q5 = add 17 q5;;   (* [11, 17, 23, 27, 28, 29, 32, 37]*)
let q5 = add 18 q5;;   (* [11, 17, 18, 23, 27, 28, 29, 32, 37]*)
let q5 = add 11 q5;;   (* [11, 11, 17, 18, 23, 27, 28, 29, 32, 37]*)
let q5 = add 35 q5;;   (* [11, 11, 17, 18, 23, 27, 28, 29, 32, 35, 37]*)
let q5 = add 33 q5;;   (* [11, 11, 17, 18, 23, 27, 28, 29, 32, 33, 35, 37]*)
let q5 = add 37 q5;;   (* [11, 11, 17, 18, 23, 27, 28, 29, 32, 33, 35, 37, 37]*)
let q5 = add 37 q5;;   (* [11, 11, 17, 18, 23, 27, 28, 29, 32, 33, 35, 37, 37, 37]*)
let q5 = add 35 q5;;   (* [11, 11, 17, 18, 23, 27, 28, 29, 32, 33, 35, 35, 37, 37, 37]*)
let q5 = add 26 q5;;   (* [11, 11, 17, 18, 23, 26, 27, 28, 29, 32, 33, 35, 35, 37, 37, 37]*)
let (element, q5) = delete_min q5;;   (* 11 * [11, 17, 18, 23, 26, 27, 28, 29, 32, 33, 35, 35, 37, 37, 37]*)
assert(element = 11);;
let (element, q5) = delete_min q5;;   (* 11 * [17, 18, 23, 26, 27, 28, 29, 32, 33, 35, 35, 37, 37, 37]*)
assert(element = 11);;
let q5 = add 21 q5;;   (* [17, 18, 21, 23, 26, 27, 28, 29, 32, 33, 35, 35, 37, 37, 37]*)
let (element, q5) = delete_min q5;;   (* 17 * [18, 21, 23, 26, 27, 28, 29, 32, 33, 35, 35, 37, 37, 37]*)
assert(element = 17);;
let q5 = add 31 q5;;   (* [18, 21, 23, 26, 27, 28, 29, 31, 32, 33, 35, 35, 37, 37, 37]*)
let q5 = add 18 q5;;   (* [18, 18, 21, 23, 26, 27, 28, 29, 31, 32, 33, 35, 35, 37, 37, 37]*)
let q5 = add 8 q5;;   (* [8, 18, 18, 21, 23, 26, 27, 28, 29, 31, 32, 33, 35, 35, 37, 37, 37]*)
let q5 = add 38 q5;;   (* [8, 18, 18, 21, 23, 26, 27, 28, 29, 31, 32, 33, 35, 35, 37, 37, 37, 38]*)
let q5 = add 25 q5;;   (* [8, 18, 18, 21, 23, 25, 26, 27, 28, 29, 31, 32, 33, 35, 35, 37, 37, 37, 38]*)
let q5 = add 32 q5;;   (* [8, 18, 18, 21, 23, 25, 26, 27, 28, 29, 31, 32, 32, 33, 35, 35, 37, 37, 37, 38]*)
let q5 = add 31 q5;;   (* [8, 18, 18, 21, 23, 25, 26, 27, 28, 29, 31, 31, 32, 32, 33, 35, 35, 37, 37, 37, 38]*)
let q5 = add 30 q5;;   (* [8, 18, 18, 21, 23, 25, 26, 27, 28, 29, 30, 31, 31, 32, 32, 33, 35, 35, 37, 37, 37, 38]*)
let (element, q5) = delete_min q5;;   (* 8 * [18, 18, 21, 23, 25, 26, 27, 28, 29, 30, 31, 31, 32, 32, 33, 35, 35, 37, 37, 37, 38]*)
assert(element = 8);;
assert(is_empty q5 = false);;   (*[18, 18, 21, 23, 25, 26, 27, 28, 29, 30, 31, 31, 32, 32, 33, 35, 35, 37, 37, 37, 38]*)
let q5 = add 22 q5;;   (* [18, 18, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 31, 32, 32, 33, 35, 35, 37, 37, 37, 38]*)
let q5 = add 16 q5;;   (* [16, 18, 18, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 31, 32, 32, 33, 35, 35, 37, 37, 37, 38]*)
let q5 = add 16 q5;;   (* [16, 16, 18, 18, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 31, 32, 32, 33, 35, 35, 37, 37, 37, 38]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[4, 11, 12, 12, 12, 12, 15, 16, 16, 18, 18, 18, 18, 19, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 23, 23, 24, 24, 24, 24, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38]*)
let (element, q) = delete_min q;;   (* 4 * [11, 12, 12, 12, 12, 15, 16, 16, 18, 18, 18, 18, 19, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 23, 23, 24, 24, 24, 24, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 11 * [12, 12, 12, 12, 15, 16, 16, 18, 18, 18, 18, 19, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 23, 23, 24, 24, 24, 24, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 12 * [12, 12, 12, 15, 16, 16, 18, 18, 18, 18, 19, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 23, 23, 24, 24, 24, 24, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 12 * [12, 12, 15, 16, 16, 18, 18, 18, 18, 19, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 23, 23, 24, 24, 24, 24, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 12 * [12, 15, 16, 16, 18, 18, 18, 18, 19, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 23, 23, 24, 24, 24, 24, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 12 * [15, 16, 16, 18, 18, 18, 18, 19, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 23, 23, 24, 24, 24, 24, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 15 * [16, 16, 18, 18, 18, 18, 19, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 23, 23, 24, 24, 24, 24, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [16, 18, 18, 18, 18, 19, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 23, 23, 24, 24, 24, 24, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [18, 18, 18, 18, 19, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 23, 23, 24, 24, 24, 24, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 18 * [18, 18, 18, 19, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 23, 23, 24, 24, 24, 24, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [18, 18, 19, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 23, 23, 24, 24, 24, 24, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [18, 19, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 23, 23, 24, 24, 24, 24, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [19, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 23, 23, 24, 24, 24, 24, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 23, 23, 24, 24, 24, 24, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [20, 21, 21, 22, 22, 22, 22, 22, 22, 23, 23, 24, 24, 24, 24, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [21, 21, 22, 22, 22, 22, 22, 22, 23, 23, 24, 24, 24, 24, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [21, 22, 22, 22, 22, 22, 22, 23, 23, 24, 24, 24, 24, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [22, 22, 22, 22, 22, 22, 23, 23, 24, 24, 24, 24, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [22, 22, 22, 22, 22, 23, 23, 24, 24, 24, 24, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [22, 22, 22, 22, 23, 23, 24, 24, 24, 24, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [22, 22, 22, 23, 23, 24, 24, 24, 24, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [22, 22, 23, 23, 24, 24, 24, 24, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [22, 23, 23, 24, 24, 24, 24, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [23, 23, 24, 24, 24, 24, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [23, 24, 24, 24, 24, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [24, 24, 24, 24, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [24, 24, 24, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [24, 24, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [24, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [29, 29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [29, 29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [29, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [30, 30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [30, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [31, 31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [31, 32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [34, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [37, 37, 37, 38, 38, 38, 38, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [37, 37, 38, 38, 38, 38, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [37, 38, 38, 38, 38, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [38, 38, 38, 38, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 38, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST92----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 8 q1;;   (* [8]*)
let q1 = add 33 q1;;   (* [8, 33]*)
let q1 = add 11 q1;;   (* [8, 11, 33]*)
let (element, q1) = delete_min q1;;   (* 8 * [11, 33]*)
assert(element = 8);;
let q1 = add 13 q1;;   (* [11, 13, 33]*)
let q1 = add 6 q1;;   (* [6, 11, 13, 33]*)
let (element, q1) = delete_min q1;;   (* 6 * [11, 13, 33]*)
assert(element = 6);;
let q1 = add 38 q1;;   (* [11, 13, 33, 38]*)
let q1 = add 39 q1;;   (* [11, 13, 33, 38, 39]*)
let q1 = add 16 q1;;   (* [11, 13, 16, 33, 38, 39]*)
let (element, q1) = delete_min q1;;   (* 11 * [13, 16, 33, 38, 39]*)
assert(element = 11);;
let q1 = add 29 q1;;   (* [13, 16, 29, 33, 38, 39]*)
let (element, q1) = delete_min q1;;   (* 13 * [16, 29, 33, 38, 39]*)
assert(element = 13);;
assert(is_empty q1 = false);;   (*[16, 29, 33, 38, 39]*)
let q1 = add 4 q1;;   (* [4, 16, 29, 33, 38, 39]*)
let q1 = add 11 q1;;   (* [4, 11, 16, 29, 33, 38, 39]*)
let q1 = add 19 q1;;   (* [4, 11, 16, 19, 29, 33, 38, 39]*)
let q1 = add 20 q1;;   (* [4, 11, 16, 19, 20, 29, 33, 38, 39]*)
let q1 = add 25 q1;;   (* [4, 11, 16, 19, 20, 25, 29, 33, 38, 39]*)
let q1 = add 24 q1;;   (* [4, 11, 16, 19, 20, 24, 25, 29, 33, 38, 39]*)
let q1 = add 19 q1;;   (* [4, 11, 16, 19, 19, 20, 24, 25, 29, 33, 38, 39]*)
let (element, q1) = delete_min q1;;   (* 4 * [11, 16, 19, 19, 20, 24, 25, 29, 33, 38, 39]*)
assert(element = 4);;
let q1 = add 8 q1;;   (* [8, 11, 16, 19, 19, 20, 24, 25, 29, 33, 38, 39]*)
let q1 = add 28 q1;;   (* [8, 11, 16, 19, 19, 20, 24, 25, 28, 29, 33, 38, 39]*)
let q1 = add 27 q1;;   (* [8, 11, 16, 19, 19, 20, 24, 25, 27, 28, 29, 33, 38, 39]*)
let q1 = add 35 q1;;   (* [8, 11, 16, 19, 19, 20, 24, 25, 27, 28, 29, 33, 35, 38, 39]*)
let q1 = add 1 q1;;   (* [1, 8, 11, 16, 19, 19, 20, 24, 25, 27, 28, 29, 33, 35, 38, 39]*)
let q1 = add 11 q1;;   (* [1, 8, 11, 11, 16, 19, 19, 20, 24, 25, 27, 28, 29, 33, 35, 38, 39]*)
let q1 = add 35 q1;;   (* [1, 8, 11, 11, 16, 19, 19, 20, 24, 25, 27, 28, 29, 33, 35, 35, 38, 39]*)
let (element, q1) = delete_min q1;;   (* 1 * [8, 11, 11, 16, 19, 19, 20, 24, 25, 27, 28, 29, 33, 35, 35, 38, 39]*)
assert(element = 1);;
let (element, q1) = delete_min q1;;   (* 8 * [11, 11, 16, 19, 19, 20, 24, 25, 27, 28, 29, 33, 35, 35, 38, 39]*)
assert(element = 8);;
let (element, q1) = delete_min q1;;   (* 11 * [11, 16, 19, 19, 20, 24, 25, 27, 28, 29, 33, 35, 35, 38, 39]*)
assert(element = 11);;
assert(is_empty q1 = false);;   (*[11, 16, 19, 19, 20, 24, 25, 27, 28, 29, 33, 35, 35, 38, 39]*)
let (element, q1) = delete_min q1;;   (* 11 * [16, 19, 19, 20, 24, 25, 27, 28, 29, 33, 35, 35, 38, 39]*)
assert(element = 11);;
let q1 = add 32 q1;;   (* [16, 19, 19, 20, 24, 25, 27, 28, 29, 32, 33, 35, 35, 38, 39]*)
let q1 = add 14 q1;;   (* [14, 16, 19, 19, 20, 24, 25, 27, 28, 29, 32, 33, 35, 35, 38, 39]*)
assert(is_empty q1 = false);;   (*[14, 16, 19, 19, 20, 24, 25, 27, 28, 29, 32, 33, 35, 35, 38, 39]*)
let q1 = add 14 q1;;   (* [14, 14, 16, 19, 19, 20, 24, 25, 27, 28, 29, 32, 33, 35, 35, 38, 39]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 0 q2;;   (* [0]*)
let (element, q2) = delete_min q2;;   (* 0 * []*)
assert(element = 0);;
let q2 = add 37 q2;;   (* [37]*)
let (element, q2) = delete_min q2;;   (* 37 * []*)
assert(element = 37);;
let q2 = add 27 q2;;   (* [27]*)
let q2 = add 30 q2;;   (* [27, 30]*)
let q2 = add 5 q2;;   (* [5, 27, 30]*)
let (element, q2) = delete_min q2;;   (* 5 * [27, 30]*)
assert(element = 5);;
let q2 = add 10 q2;;   (* [10, 27, 30]*)
let q2 = add 22 q2;;   (* [10, 22, 27, 30]*)
let q2 = add 4 q2;;   (* [4, 10, 22, 27, 30]*)
let q2 = add 11 q2;;   (* [4, 10, 11, 22, 27, 30]*)
assert(is_empty q2 = false);;   (*[4, 10, 11, 22, 27, 30]*)
let q2 = add 13 q2;;   (* [4, 10, 11, 13, 22, 27, 30]*)
let (element, q2) = delete_min q2;;   (* 4 * [10, 11, 13, 22, 27, 30]*)
assert(element = 4);;
let q2 = add 28 q2;;   (* [10, 11, 13, 22, 27, 28, 30]*)
let q2 = add 15 q2;;   (* [10, 11, 13, 15, 22, 27, 28, 30]*)
let (element, q2) = delete_min q2;;   (* 10 * [11, 13, 15, 22, 27, 28, 30]*)
assert(element = 10);;
let q2 = add 7 q2;;   (* [7, 11, 13, 15, 22, 27, 28, 30]*)
let q2 = add 7 q2;;   (* [7, 7, 11, 13, 15, 22, 27, 28, 30]*)
let q2 = add 30 q2;;   (* [7, 7, 11, 13, 15, 22, 27, 28, 30, 30]*)
let q2 = add 39 q2;;   (* [7, 7, 11, 13, 15, 22, 27, 28, 30, 30, 39]*)
assert(is_empty q2 = false);;   (*[7, 7, 11, 13, 15, 22, 27, 28, 30, 30, 39]*)
let (element, q2) = delete_min q2;;   (* 7 * [7, 11, 13, 15, 22, 27, 28, 30, 30, 39]*)
assert(element = 7);;
let q2 = add 37 q2;;   (* [7, 11, 13, 15, 22, 27, 28, 30, 30, 37, 39]*)
let q2 = add 7 q2;;   (* [7, 7, 11, 13, 15, 22, 27, 28, 30, 30, 37, 39]*)
let q2 = add 1 q2;;   (* [1, 7, 7, 11, 13, 15, 22, 27, 28, 30, 30, 37, 39]*)
let (element, q2) = delete_min q2;;   (* 1 * [7, 7, 11, 13, 15, 22, 27, 28, 30, 30, 37, 39]*)
assert(element = 1);;
let (element, q2) = delete_min q2;;   (* 7 * [7, 11, 13, 15, 22, 27, 28, 30, 30, 37, 39]*)
assert(element = 7);;
let q2 = add 8 q2;;   (* [7, 8, 11, 13, 15, 22, 27, 28, 30, 30, 37, 39]*)
let q2 = add 6 q2;;   (* [6, 7, 8, 11, 13, 15, 22, 27, 28, 30, 30, 37, 39]*)
let q2 = add 18 q2;;   (* [6, 7, 8, 11, 13, 15, 18, 22, 27, 28, 30, 30, 37, 39]*)
let (element, q2) = delete_min q2;;   (* 6 * [7, 8, 11, 13, 15, 18, 22, 27, 28, 30, 30, 37, 39]*)
assert(element = 6);;
let (element, q2) = delete_min q2;;   (* 7 * [8, 11, 13, 15, 18, 22, 27, 28, 30, 30, 37, 39]*)
assert(element = 7);;
let q2 = add 18 q2;;   (* [8, 11, 13, 15, 18, 18, 22, 27, 28, 30, 30, 37, 39]*)
let (element, q2) = delete_min q2;;   (* 8 * [11, 13, 15, 18, 18, 22, 27, 28, 30, 30, 37, 39]*)
assert(element = 8);;
let q2 = add 10 q2;;   (* [10, 11, 13, 15, 18, 18, 22, 27, 28, 30, 30, 37, 39]*)
let (element, q2) = delete_min q2;;   (* 10 * [11, 13, 15, 18, 18, 22, 27, 28, 30, 30, 37, 39]*)
assert(element = 10);;

(* -------q3------ *)
let q3 = empty;;
let q3 = add 39 q3;;   (* [39]*)
let q3 = add 4 q3;;   (* [4, 39]*)
assert(is_empty q3 = false);;   (*[4, 39]*)
let (element, q3) = delete_min q3;;   (* 4 * [39]*)
assert(element = 4);;
let q3 = add 19 q3;;   (* [19, 39]*)
let q3 = add 4 q3;;   (* [4, 19, 39]*)
let (element, q3) = delete_min q3;;   (* 4 * [19, 39]*)
assert(element = 4);;
let q3 = add 9 q3;;   (* [9, 19, 39]*)
let q3 = add 38 q3;;   (* [9, 19, 38, 39]*)
let q3 = add 8 q3;;   (* [8, 9, 19, 38, 39]*)
let (element, q3) = delete_min q3;;   (* 8 * [9, 19, 38, 39]*)
assert(element = 8);;
let q3 = add 0 q3;;   (* [0, 9, 19, 38, 39]*)
let q3 = add 21 q3;;   (* [0, 9, 19, 21, 38, 39]*)
let q3 = add 5 q3;;   (* [0, 5, 9, 19, 21, 38, 39]*)
let q3 = add 17 q3;;   (* [0, 5, 9, 17, 19, 21, 38, 39]*)
assert(is_empty q3 = false);;   (*[0, 5, 9, 17, 19, 21, 38, 39]*)
let (element, q3) = delete_min q3;;   (* 0 * [5, 9, 17, 19, 21, 38, 39]*)
assert(element = 0);;
assert(is_empty q3 = false);;   (*[5, 9, 17, 19, 21, 38, 39]*)
let (element, q3) = delete_min q3;;   (* 5 * [9, 17, 19, 21, 38, 39]*)
assert(element = 5);;
let q3 = add 38 q3;;   (* [9, 17, 19, 21, 38, 38, 39]*)
let q3 = add 15 q3;;   (* [9, 15, 17, 19, 21, 38, 38, 39]*)
let (element, q3) = delete_min q3;;   (* 9 * [15, 17, 19, 21, 38, 38, 39]*)
assert(element = 9);;
assert(is_empty q3 = false);;   (*[15, 17, 19, 21, 38, 38, 39]*)
let q3 = add 36 q3;;   (* [15, 17, 19, 21, 36, 38, 38, 39]*)
assert(is_empty q3 = false);;   (*[15, 17, 19, 21, 36, 38, 38, 39]*)
let q3 = add 24 q3;;   (* [15, 17, 19, 21, 24, 36, 38, 38, 39]*)
let q3 = add 7 q3;;   (* [7, 15, 17, 19, 21, 24, 36, 38, 38, 39]*)
assert(is_empty q3 = false);;   (*[7, 15, 17, 19, 21, 24, 36, 38, 38, 39]*)
let q3 = add 3 q3;;   (* [3, 7, 15, 17, 19, 21, 24, 36, 38, 38, 39]*)
assert(is_empty q3 = false);;   (*[3, 7, 15, 17, 19, 21, 24, 36, 38, 38, 39]*)
let q3 = add 11 q3;;   (* [3, 7, 11, 15, 17, 19, 21, 24, 36, 38, 38, 39]*)
assert(is_empty q3 = false);;   (*[3, 7, 11, 15, 17, 19, 21, 24, 36, 38, 38, 39]*)
let q3 = add 10 q3;;   (* [3, 7, 10, 11, 15, 17, 19, 21, 24, 36, 38, 38, 39]*)
let (element, q3) = delete_min q3;;   (* 3 * [7, 10, 11, 15, 17, 19, 21, 24, 36, 38, 38, 39]*)
assert(element = 3);;
let q3 = add 23 q3;;   (* [7, 10, 11, 15, 17, 19, 21, 23, 24, 36, 38, 38, 39]*)
let q3 = add 4 q3;;   (* [4, 7, 10, 11, 15, 17, 19, 21, 23, 24, 36, 38, 38, 39]*)
let q3 = add 25 q3;;   (* [4, 7, 10, 11, 15, 17, 19, 21, 23, 24, 25, 36, 38, 38, 39]*)
let (element, q3) = delete_min q3;;   (* 4 * [7, 10, 11, 15, 17, 19, 21, 23, 24, 25, 36, 38, 38, 39]*)
assert(element = 4);;

(* -------q4------ *)
let q4 = empty;;
let q4 = add 6 q4;;   (* [6]*)
let q4 = add 31 q4;;   (* [6, 31]*)
let q4 = add 34 q4;;   (* [6, 31, 34]*)
let q4 = add 23 q4;;   (* [6, 23, 31, 34]*)
let q4 = add 8 q4;;   (* [6, 8, 23, 31, 34]*)
let q4 = add 26 q4;;   (* [6, 8, 23, 26, 31, 34]*)
let (element, q4) = delete_min q4;;   (* 6 * [8, 23, 26, 31, 34]*)
assert(element = 6);;
let q4 = add 24 q4;;   (* [8, 23, 24, 26, 31, 34]*)
let q4 = add 18 q4;;   (* [8, 18, 23, 24, 26, 31, 34]*)
let (element, q4) = delete_min q4;;   (* 8 * [18, 23, 24, 26, 31, 34]*)
assert(element = 8);;
let (element, q4) = delete_min q4;;   (* 18 * [23, 24, 26, 31, 34]*)
assert(element = 18);;
let (element, q4) = delete_min q4;;   (* 23 * [24, 26, 31, 34]*)
assert(element = 23);;
assert(is_empty q4 = false);;   (*[24, 26, 31, 34]*)
let q4 = add 20 q4;;   (* [20, 24, 26, 31, 34]*)
let q4 = add 1 q4;;   (* [1, 20, 24, 26, 31, 34]*)
let q4 = add 10 q4;;   (* [1, 10, 20, 24, 26, 31, 34]*)
let q4 = add 37 q4;;   (* [1, 10, 20, 24, 26, 31, 34, 37]*)
let (element, q4) = delete_min q4;;   (* 1 * [10, 20, 24, 26, 31, 34, 37]*)
assert(element = 1);;
let q4 = add 16 q4;;   (* [10, 16, 20, 24, 26, 31, 34, 37]*)
let q4 = add 33 q4;;   (* [10, 16, 20, 24, 26, 31, 33, 34, 37]*)
let q4 = add 17 q4;;   (* [10, 16, 17, 20, 24, 26, 31, 33, 34, 37]*)
assert(is_empty q4 = false);;   (*[10, 16, 17, 20, 24, 26, 31, 33, 34, 37]*)
let q4 = add 29 q4;;   (* [10, 16, 17, 20, 24, 26, 29, 31, 33, 34, 37]*)
let q4 = add 19 q4;;   (* [10, 16, 17, 19, 20, 24, 26, 29, 31, 33, 34, 37]*)
let q4 = add 30 q4;;   (* [10, 16, 17, 19, 20, 24, 26, 29, 30, 31, 33, 34, 37]*)
let (element, q4) = delete_min q4;;   (* 10 * [16, 17, 19, 20, 24, 26, 29, 30, 31, 33, 34, 37]*)
assert(element = 10);;
let q4 = add 12 q4;;   (* [12, 16, 17, 19, 20, 24, 26, 29, 30, 31, 33, 34, 37]*)
let q4 = add 3 q4;;   (* [3, 12, 16, 17, 19, 20, 24, 26, 29, 30, 31, 33, 34, 37]*)
let q4 = add 0 q4;;   (* [0, 3, 12, 16, 17, 19, 20, 24, 26, 29, 30, 31, 33, 34, 37]*)
let q4 = add 28 q4;;   (* [0, 3, 12, 16, 17, 19, 20, 24, 26, 28, 29, 30, 31, 33, 34, 37]*)
let q4 = add 23 q4;;   (* [0, 3, 12, 16, 17, 19, 20, 23, 24, 26, 28, 29, 30, 31, 33, 34, 37]*)
let (element, q4) = delete_min q4;;   (* 0 * [3, 12, 16, 17, 19, 20, 23, 24, 26, 28, 29, 30, 31, 33, 34, 37]*)
assert(element = 0);;
let q4 = add 1 q4;;   (* [1, 3, 12, 16, 17, 19, 20, 23, 24, 26, 28, 29, 30, 31, 33, 34, 37]*)
let q4 = add 2 q4;;   (* [1, 2, 3, 12, 16, 17, 19, 20, 23, 24, 26, 28, 29, 30, 31, 33, 34, 37]*)
let q4 = add 8 q4;;   (* [1, 2, 3, 8, 12, 16, 17, 19, 20, 23, 24, 26, 28, 29, 30, 31, 33, 34, 37]*)
let q4 = add 29 q4;;   (* [1, 2, 3, 8, 12, 16, 17, 19, 20, 23, 24, 26, 28, 29, 29, 30, 31, 33, 34, 37]*)
let q4 = add 9 q4;;   (* [1, 2, 3, 8, 9, 12, 16, 17, 19, 20, 23, 24, 26, 28, 29, 29, 30, 31, 33, 34, 37]*)
let q4 = add 31 q4;;   (* [1, 2, 3, 8, 9, 12, 16, 17, 19, 20, 23, 24, 26, 28, 29, 29, 30, 31, 31, 33, 34, 37]*)

(* -------q5------ *)
let q5 = empty;;
let q5 = add 7 q5;;   (* [7]*)
let (element, q5) = delete_min q5;;   (* 7 * []*)
assert(element = 7);;
let q5 = add 33 q5;;   (* [33]*)
let (element, q5) = delete_min q5;;   (* 33 * []*)
assert(element = 33);;
let q5 = add 24 q5;;   (* [24]*)
let q5 = add 26 q5;;   (* [24, 26]*)
assert(is_empty q5 = false);;   (*[24, 26]*)
assert(is_empty q5 = false);;   (*[24, 26]*)
let (element, q5) = delete_min q5;;   (* 24 * [26]*)
assert(element = 24);;
let q5 = add 11 q5;;   (* [11, 26]*)
let (element, q5) = delete_min q5;;   (* 11 * [26]*)
assert(element = 11);;
let q5 = add 10 q5;;   (* [10, 26]*)
let q5 = add 4 q5;;   (* [4, 10, 26]*)
let (element, q5) = delete_min q5;;   (* 4 * [10, 26]*)
assert(element = 4);;
let q5 = add 13 q5;;   (* [10, 13, 26]*)
assert(is_empty q5 = false);;   (*[10, 13, 26]*)
let q5 = add 35 q5;;   (* [10, 13, 26, 35]*)
let q5 = add 14 q5;;   (* [10, 13, 14, 26, 35]*)
let q5 = add 25 q5;;   (* [10, 13, 14, 25, 26, 35]*)
let q5 = add 23 q5;;   (* [10, 13, 14, 23, 25, 26, 35]*)
let q5 = add 21 q5;;   (* [10, 13, 14, 21, 23, 25, 26, 35]*)
let q5 = add 1 q5;;   (* [1, 10, 13, 14, 21, 23, 25, 26, 35]*)
assert(is_empty q5 = false);;   (*[1, 10, 13, 14, 21, 23, 25, 26, 35]*)
let q5 = add 20 q5;;   (* [1, 10, 13, 14, 20, 21, 23, 25, 26, 35]*)
let q5 = add 23 q5;;   (* [1, 10, 13, 14, 20, 21, 23, 23, 25, 26, 35]*)
assert(is_empty q5 = false);;   (*[1, 10, 13, 14, 20, 21, 23, 23, 25, 26, 35]*)
let q5 = add 11 q5;;   (* [1, 10, 11, 13, 14, 20, 21, 23, 23, 25, 26, 35]*)
let (element, q5) = delete_min q5;;   (* 1 * [10, 11, 13, 14, 20, 21, 23, 23, 25, 26, 35]*)
assert(element = 1);;
assert(is_empty q5 = false);;   (*[10, 11, 13, 14, 20, 21, 23, 23, 25, 26, 35]*)
let q5 = add 12 q5;;   (* [10, 11, 12, 13, 14, 20, 21, 23, 23, 25, 26, 35]*)
assert(is_empty q5 = false);;   (*[10, 11, 12, 13, 14, 20, 21, 23, 23, 25, 26, 35]*)
let q5 = add 24 q5;;   (* [10, 11, 12, 13, 14, 20, 21, 23, 23, 24, 25, 26, 35]*)
let q5 = add 32 q5;;   (* [10, 11, 12, 13, 14, 20, 21, 23, 23, 24, 25, 26, 32, 35]*)
let q5 = add 30 q5;;   (* [10, 11, 12, 13, 14, 20, 21, 23, 23, 24, 25, 26, 30, 32, 35]*)
let (element, q5) = delete_min q5;;   (* 10 * [11, 12, 13, 14, 20, 21, 23, 23, 24, 25, 26, 30, 32, 35]*)
assert(element = 10);;
let (element, q5) = delete_min q5;;   (* 11 * [12, 13, 14, 20, 21, 23, 23, 24, 25, 26, 30, 32, 35]*)
assert(element = 11);;
let q5 = add 20 q5;;   (* [12, 13, 14, 20, 20, 21, 23, 23, 24, 25, 26, 30, 32, 35]*)
let q5 = add 16 q5;;   (* [12, 13, 14, 16, 20, 20, 21, 23, 23, 24, 25, 26, 30, 32, 35]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[1, 2, 3, 7, 8, 9, 10, 11, 11, 12, 12, 13, 13, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39]*)
let (element, q) = delete_min q;;   (* 1 * [2, 3, 7, 8, 9, 10, 11, 11, 12, 12, 13, 13, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 1);;
let (element, q) = delete_min q;;   (* 2 * [3, 7, 8, 9, 10, 11, 11, 12, 12, 13, 13, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 2);;
let (element, q) = delete_min q;;   (* 3 * [7, 8, 9, 10, 11, 11, 12, 12, 13, 13, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 3);;
let (element, q) = delete_min q;;   (* 7 * [8, 9, 10, 11, 11, 12, 12, 13, 13, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 8 * [9, 10, 11, 11, 12, 12, 13, 13, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 9 * [10, 11, 11, 12, 12, 13, 13, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 10 * [11, 11, 12, 12, 13, 13, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 11 * [11, 12, 12, 13, 13, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 11 * [12, 12, 13, 13, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 12 * [12, 13, 13, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 12 * [13, 13, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 13 * [13, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 13 * [14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 14 * [14, 14, 15, 15, 16, 16, 16, 17, 17, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [14, 15, 15, 16, 16, 16, 17, 17, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [15, 15, 16, 16, 16, 17, 17, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [15, 16, 16, 16, 17, 17, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [16, 16, 16, 17, 17, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [16, 16, 17, 17, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [16, 17, 17, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [17, 17, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 17 * [17, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [19, 19, 19, 20, 20, 20, 20, 21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [19, 19, 20, 20, 20, 20, 21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [19, 20, 20, 20, 20, 21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [20, 20, 20, 20, 21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 20, 21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [21, 21, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [21, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [24, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [24, 24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [24, 25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [25, 25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [25, 25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [25, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [29, 30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [30, 30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [30, 30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [30, 30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [30, 31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [33, 34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [34, 35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [37, 38, 38, 38, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [38, 38, 38, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST93----*)

(* -------q1------ *)
let q1 = empty;;
assert(is_empty q1 = true);;   (*[]*)
let q1 = add 13 q1;;   (* [13]*)
let q1 = add 24 q1;;   (* [13, 24]*)
let (element, q1) = delete_min q1;;   (* 13 * [24]*)
assert(element = 13);;
let q1 = add 6 q1;;   (* [6, 24]*)
let (element, q1) = delete_min q1;;   (* 6 * [24]*)
assert(element = 6);;
let q1 = add 19 q1;;   (* [19, 24]*)
let q1 = add 23 q1;;   (* [19, 23, 24]*)
let q1 = add 27 q1;;   (* [19, 23, 24, 27]*)
let (element, q1) = delete_min q1;;   (* 19 * [23, 24, 27]*)
assert(element = 19);;
assert(is_empty q1 = false);;   (*[23, 24, 27]*)
let q1 = add 35 q1;;   (* [23, 24, 27, 35]*)
let (element, q1) = delete_min q1;;   (* 23 * [24, 27, 35]*)
assert(element = 23);;
let (element, q1) = delete_min q1;;   (* 24 * [27, 35]*)
assert(element = 24);;
let (element, q1) = delete_min q1;;   (* 27 * [35]*)
assert(element = 27);;
assert(is_empty q1 = false);;   (*[35]*)
let (element, q1) = delete_min q1;;   (* 35 * []*)
assert(element = 35);;
let q1 = add 3 q1;;   (* [3]*)
let q1 = add 16 q1;;   (* [3, 16]*)
let q1 = add 14 q1;;   (* [3, 14, 16]*)
let (element, q1) = delete_min q1;;   (* 3 * [14, 16]*)
assert(element = 3);;
let (element, q1) = delete_min q1;;   (* 14 * [16]*)
assert(element = 14);;
let q1 = add 16 q1;;   (* [16, 16]*)
let (element, q1) = delete_min q1;;   (* 16 * [16]*)
assert(element = 16);;
let q1 = add 23 q1;;   (* [16, 23]*)
let q1 = add 24 q1;;   (* [16, 23, 24]*)
let q1 = add 11 q1;;   (* [11, 16, 23, 24]*)
let q1 = add 27 q1;;   (* [11, 16, 23, 24, 27]*)
let q1 = add 37 q1;;   (* [11, 16, 23, 24, 27, 37]*)
let q1 = add 30 q1;;   (* [11, 16, 23, 24, 27, 30, 37]*)
let (element, q1) = delete_min q1;;   (* 11 * [16, 23, 24, 27, 30, 37]*)
assert(element = 11);;
let (element, q1) = delete_min q1;;   (* 16 * [23, 24, 27, 30, 37]*)
assert(element = 16);;
let q1 = add 25 q1;;   (* [23, 24, 25, 27, 30, 37]*)
let q1 = add 27 q1;;   (* [23, 24, 25, 27, 27, 30, 37]*)
let q1 = add 11 q1;;   (* [11, 23, 24, 25, 27, 27, 30, 37]*)
let (element, q1) = delete_min q1;;   (* 11 * [23, 24, 25, 27, 27, 30, 37]*)
assert(element = 11);;
let q1 = add 20 q1;;   (* [20, 23, 24, 25, 27, 27, 30, 37]*)
let q1 = add 30 q1;;   (* [20, 23, 24, 25, 27, 27, 30, 30, 37]*)
assert(is_empty q1 = false);;   (*[20, 23, 24, 25, 27, 27, 30, 30, 37]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 32 q2;;   (* [32]*)
let (element, q2) = delete_min q2;;   (* 32 * []*)
assert(element = 32);;
let q2 = add 18 q2;;   (* [18]*)
let q2 = add 12 q2;;   (* [12, 18]*)
let (element, q2) = delete_min q2;;   (* 12 * [18]*)
assert(element = 12);;
let q2 = add 32 q2;;   (* [18, 32]*)
let q2 = add 33 q2;;   (* [18, 32, 33]*)
let q2 = add 11 q2;;   (* [11, 18, 32, 33]*)
let q2 = add 29 q2;;   (* [11, 18, 29, 32, 33]*)
let q2 = add 12 q2;;   (* [11, 12, 18, 29, 32, 33]*)
assert(is_empty q2 = false);;   (*[11, 12, 18, 29, 32, 33]*)
let q2 = add 32 q2;;   (* [11, 12, 18, 29, 32, 32, 33]*)
let q2 = add 30 q2;;   (* [11, 12, 18, 29, 30, 32, 32, 33]*)
let (element, q2) = delete_min q2;;   (* 11 * [12, 18, 29, 30, 32, 32, 33]*)
assert(element = 11);;
let q2 = add 10 q2;;   (* [10, 12, 18, 29, 30, 32, 32, 33]*)
let q2 = add 35 q2;;   (* [10, 12, 18, 29, 30, 32, 32, 33, 35]*)
let q2 = add 24 q2;;   (* [10, 12, 18, 24, 29, 30, 32, 32, 33, 35]*)
let q2 = add 3 q2;;   (* [3, 10, 12, 18, 24, 29, 30, 32, 32, 33, 35]*)
let q2 = add 13 q2;;   (* [3, 10, 12, 13, 18, 24, 29, 30, 32, 32, 33, 35]*)
let (element, q2) = delete_min q2;;   (* 3 * [10, 12, 13, 18, 24, 29, 30, 32, 32, 33, 35]*)
assert(element = 3);;
let (element, q2) = delete_min q2;;   (* 10 * [12, 13, 18, 24, 29, 30, 32, 32, 33, 35]*)
assert(element = 10);;
let (element, q2) = delete_min q2;;   (* 12 * [13, 18, 24, 29, 30, 32, 32, 33, 35]*)
assert(element = 12);;
assert(is_empty q2 = false);;   (*[13, 18, 24, 29, 30, 32, 32, 33, 35]*)
let (element, q2) = delete_min q2;;   (* 13 * [18, 24, 29, 30, 32, 32, 33, 35]*)
assert(element = 13);;
let (element, q2) = delete_min q2;;   (* 18 * [24, 29, 30, 32, 32, 33, 35]*)
assert(element = 18);;
let q2 = add 11 q2;;   (* [11, 24, 29, 30, 32, 32, 33, 35]*)
let q2 = add 35 q2;;   (* [11, 24, 29, 30, 32, 32, 33, 35, 35]*)
let q2 = add 28 q2;;   (* [11, 24, 28, 29, 30, 32, 32, 33, 35, 35]*)
let (element, q2) = delete_min q2;;   (* 11 * [24, 28, 29, 30, 32, 32, 33, 35, 35]*)
assert(element = 11);;
let q2 = add 14 q2;;   (* [14, 24, 28, 29, 30, 32, 32, 33, 35, 35]*)
let q2 = add 24 q2;;   (* [14, 24, 24, 28, 29, 30, 32, 32, 33, 35, 35]*)
let q2 = add 26 q2;;   (* [14, 24, 24, 26, 28, 29, 30, 32, 32, 33, 35, 35]*)
let (element, q2) = delete_min q2;;   (* 14 * [24, 24, 26, 28, 29, 30, 32, 32, 33, 35, 35]*)
assert(element = 14);;
let q2 = add 12 q2;;   (* [12, 24, 24, 26, 28, 29, 30, 32, 32, 33, 35, 35]*)
assert(is_empty q2 = false);;   (*[12, 24, 24, 26, 28, 29, 30, 32, 32, 33, 35, 35]*)
let q2 = add 19 q2;;   (* [12, 19, 24, 24, 26, 28, 29, 30, 32, 32, 33, 35, 35]*)
let (element, q2) = delete_min q2;;   (* 12 * [19, 24, 24, 26, 28, 29, 30, 32, 32, 33, 35, 35]*)
assert(element = 12);;
let q2 = add 9 q2;;   (* [9, 19, 24, 24, 26, 28, 29, 30, 32, 32, 33, 35, 35]*)
let q2 = add 27 q2;;   (* [9, 19, 24, 24, 26, 27, 28, 29, 30, 32, 32, 33, 35, 35]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 2 q3;;   (* [2]*)
let q3 = add 11 q3;;   (* [2, 11]*)
let q3 = add 38 q3;;   (* [2, 11, 38]*)
let (element, q3) = delete_min q3;;   (* 2 * [11, 38]*)
assert(element = 2);;
let q3 = add 35 q3;;   (* [11, 35, 38]*)
let q3 = add 32 q3;;   (* [11, 32, 35, 38]*)
assert(is_empty q3 = false);;   (*[11, 32, 35, 38]*)
let q3 = add 25 q3;;   (* [11, 25, 32, 35, 38]*)
let (element, q3) = delete_min q3;;   (* 11 * [25, 32, 35, 38]*)
assert(element = 11);;
assert(is_empty q3 = false);;   (*[25, 32, 35, 38]*)
let (element, q3) = delete_min q3;;   (* 25 * [32, 35, 38]*)
assert(element = 25);;
let q3 = add 38 q3;;   (* [32, 35, 38, 38]*)
let (element, q3) = delete_min q3;;   (* 32 * [35, 38, 38]*)
assert(element = 32);;
let q3 = add 24 q3;;   (* [24, 35, 38, 38]*)
let q3 = add 33 q3;;   (* [24, 33, 35, 38, 38]*)
assert(is_empty q3 = false);;   (*[24, 33, 35, 38, 38]*)
let q3 = add 25 q3;;   (* [24, 25, 33, 35, 38, 38]*)
let (element, q3) = delete_min q3;;   (* 24 * [25, 33, 35, 38, 38]*)
assert(element = 24);;
assert(is_empty q3 = false);;   (*[25, 33, 35, 38, 38]*)
let q3 = add 30 q3;;   (* [25, 30, 33, 35, 38, 38]*)
let (element, q3) = delete_min q3;;   (* 25 * [30, 33, 35, 38, 38]*)
assert(element = 25);;
let (element, q3) = delete_min q3;;   (* 30 * [33, 35, 38, 38]*)
assert(element = 30);;
let (element, q3) = delete_min q3;;   (* 33 * [35, 38, 38]*)
assert(element = 33);;
let (element, q3) = delete_min q3;;   (* 35 * [38, 38]*)
assert(element = 35);;
let q3 = add 1 q3;;   (* [1, 38, 38]*)
let q3 = add 13 q3;;   (* [1, 13, 38, 38]*)
let (element, q3) = delete_min q3;;   (* 1 * [13, 38, 38]*)
assert(element = 1);;
let (element, q3) = delete_min q3;;   (* 13 * [38, 38]*)
assert(element = 13);;
let q3 = add 37 q3;;   (* [37, 38, 38]*)
let (element, q3) = delete_min q3;;   (* 37 * [38, 38]*)
assert(element = 37);;
let (element, q3) = delete_min q3;;   (* 38 * [38]*)
assert(element = 38);;
let q3 = add 37 q3;;   (* [37, 38]*)
let (element, q3) = delete_min q3;;   (* 37 * [38]*)
assert(element = 37);;
let q3 = add 37 q3;;   (* [37, 38]*)
let q3 = add 29 q3;;   (* [29, 37, 38]*)
assert(is_empty q3 = false);;   (*[29, 37, 38]*)
let (element, q3) = delete_min q3;;   (* 29 * [37, 38]*)
assert(element = 29);;
let (element, q3) = delete_min q3;;   (* 37 * [38]*)
assert(element = 37);;
let q3 = add 36 q3;;   (* [36, 38]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 37 q4;;   (* [37]*)
let (element, q4) = delete_min q4;;   (* 37 * []*)
assert(element = 37);;
let q4 = add 16 q4;;   (* [16]*)
let q4 = add 36 q4;;   (* [16, 36]*)
let (element, q4) = delete_min q4;;   (* 16 * [36]*)
assert(element = 16);;
assert(is_empty q4 = false);;   (*[36]*)
let q4 = add 28 q4;;   (* [28, 36]*)
let q4 = add 31 q4;;   (* [28, 31, 36]*)
let q4 = add 0 q4;;   (* [0, 28, 31, 36]*)
let q4 = add 32 q4;;   (* [0, 28, 31, 32, 36]*)
let q4 = add 14 q4;;   (* [0, 14, 28, 31, 32, 36]*)
let q4 = add 16 q4;;   (* [0, 14, 16, 28, 31, 32, 36]*)
let (element, q4) = delete_min q4;;   (* 0 * [14, 16, 28, 31, 32, 36]*)
assert(element = 0);;
let q4 = add 3 q4;;   (* [3, 14, 16, 28, 31, 32, 36]*)
let q4 = add 24 q4;;   (* [3, 14, 16, 24, 28, 31, 32, 36]*)
let q4 = add 1 q4;;   (* [1, 3, 14, 16, 24, 28, 31, 32, 36]*)
let q4 = add 0 q4;;   (* [0, 1, 3, 14, 16, 24, 28, 31, 32, 36]*)
let q4 = add 2 q4;;   (* [0, 1, 2, 3, 14, 16, 24, 28, 31, 32, 36]*)
let (element, q4) = delete_min q4;;   (* 0 * [1, 2, 3, 14, 16, 24, 28, 31, 32, 36]*)
assert(element = 0);;
let (element, q4) = delete_min q4;;   (* 1 * [2, 3, 14, 16, 24, 28, 31, 32, 36]*)
assert(element = 1);;
assert(is_empty q4 = false);;   (*[2, 3, 14, 16, 24, 28, 31, 32, 36]*)
let q4 = add 32 q4;;   (* [2, 3, 14, 16, 24, 28, 31, 32, 32, 36]*)
let q4 = add 1 q4;;   (* [1, 2, 3, 14, 16, 24, 28, 31, 32, 32, 36]*)
assert(is_empty q4 = false);;   (*[1, 2, 3, 14, 16, 24, 28, 31, 32, 32, 36]*)
let (element, q4) = delete_min q4;;   (* 1 * [2, 3, 14, 16, 24, 28, 31, 32, 32, 36]*)
assert(element = 1);;
let q4 = add 5 q4;;   (* [2, 3, 5, 14, 16, 24, 28, 31, 32, 32, 36]*)
assert(is_empty q4 = false);;   (*[2, 3, 5, 14, 16, 24, 28, 31, 32, 32, 36]*)
let (element, q4) = delete_min q4;;   (* 2 * [3, 5, 14, 16, 24, 28, 31, 32, 32, 36]*)
assert(element = 2);;
let q4 = add 34 q4;;   (* [3, 5, 14, 16, 24, 28, 31, 32, 32, 34, 36]*)
let q4 = add 16 q4;;   (* [3, 5, 14, 16, 16, 24, 28, 31, 32, 32, 34, 36]*)
let (element, q4) = delete_min q4;;   (* 3 * [5, 14, 16, 16, 24, 28, 31, 32, 32, 34, 36]*)
assert(element = 3);;
let q4 = add 27 q4;;   (* [5, 14, 16, 16, 24, 27, 28, 31, 32, 32, 34, 36]*)
let q4 = add 15 q4;;   (* [5, 14, 15, 16, 16, 24, 27, 28, 31, 32, 32, 34, 36]*)
let q4 = add 37 q4;;   (* [5, 14, 15, 16, 16, 24, 27, 28, 31, 32, 32, 34, 36, 37]*)
let (element, q4) = delete_min q4;;   (* 5 * [14, 15, 16, 16, 24, 27, 28, 31, 32, 32, 34, 36, 37]*)
assert(element = 5);;
let q4 = add 2 q4;;   (* [2, 14, 15, 16, 16, 24, 27, 28, 31, 32, 32, 34, 36, 37]*)
let q4 = add 34 q4;;   (* [2, 14, 15, 16, 16, 24, 27, 28, 31, 32, 32, 34, 34, 36, 37]*)
let q4 = add 4 q4;;   (* [2, 4, 14, 15, 16, 16, 24, 27, 28, 31, 32, 32, 34, 34, 36, 37]*)
let (element, q4) = delete_min q4;;   (* 2 * [4, 14, 15, 16, 16, 24, 27, 28, 31, 32, 32, 34, 34, 36, 37]*)
assert(element = 2);;

(* -------q5------ *)
let q5 = empty;;
let q5 = add 4 q5;;   (* [4]*)
let (element, q5) = delete_min q5;;   (* 4 * []*)
assert(element = 4);;
let q5 = add 3 q5;;   (* [3]*)
let q5 = add 3 q5;;   (* [3, 3]*)
let q5 = add 4 q5;;   (* [3, 3, 4]*)
let q5 = add 0 q5;;   (* [0, 3, 3, 4]*)
let q5 = add 15 q5;;   (* [0, 3, 3, 4, 15]*)
let q5 = add 3 q5;;   (* [0, 3, 3, 3, 4, 15]*)
let (element, q5) = delete_min q5;;   (* 0 * [3, 3, 3, 4, 15]*)
assert(element = 0);;
let q5 = add 27 q5;;   (* [3, 3, 3, 4, 15, 27]*)
let q5 = add 37 q5;;   (* [3, 3, 3, 4, 15, 27, 37]*)
let (element, q5) = delete_min q5;;   (* 3 * [3, 3, 4, 15, 27, 37]*)
assert(element = 3);;
let q5 = add 33 q5;;   (* [3, 3, 4, 15, 27, 33, 37]*)
let q5 = add 9 q5;;   (* [3, 3, 4, 9, 15, 27, 33, 37]*)
let q5 = add 29 q5;;   (* [3, 3, 4, 9, 15, 27, 29, 33, 37]*)
let q5 = add 33 q5;;   (* [3, 3, 4, 9, 15, 27, 29, 33, 33, 37]*)
let q5 = add 18 q5;;   (* [3, 3, 4, 9, 15, 18, 27, 29, 33, 33, 37]*)
assert(is_empty q5 = false);;   (*[3, 3, 4, 9, 15, 18, 27, 29, 33, 33, 37]*)
let q5 = add 16 q5;;   (* [3, 3, 4, 9, 15, 16, 18, 27, 29, 33, 33, 37]*)
let (element, q5) = delete_min q5;;   (* 3 * [3, 4, 9, 15, 16, 18, 27, 29, 33, 33, 37]*)
assert(element = 3);;
let (element, q5) = delete_min q5;;   (* 3 * [4, 9, 15, 16, 18, 27, 29, 33, 33, 37]*)
assert(element = 3);;
let q5 = add 11 q5;;   (* [4, 9, 11, 15, 16, 18, 27, 29, 33, 33, 37]*)
let q5 = add 38 q5;;   (* [4, 9, 11, 15, 16, 18, 27, 29, 33, 33, 37, 38]*)
assert(is_empty q5 = false);;   (*[4, 9, 11, 15, 16, 18, 27, 29, 33, 33, 37, 38]*)
let (element, q5) = delete_min q5;;   (* 4 * [9, 11, 15, 16, 18, 27, 29, 33, 33, 37, 38]*)
assert(element = 4);;
let q5 = add 32 q5;;   (* [9, 11, 15, 16, 18, 27, 29, 32, 33, 33, 37, 38]*)
let q5 = add 33 q5;;   (* [9, 11, 15, 16, 18, 27, 29, 32, 33, 33, 33, 37, 38]*)
let q5 = add 19 q5;;   (* [9, 11, 15, 16, 18, 19, 27, 29, 32, 33, 33, 33, 37, 38]*)
let (element, q5) = delete_min q5;;   (* 9 * [11, 15, 16, 18, 19, 27, 29, 32, 33, 33, 33, 37, 38]*)
assert(element = 9);;
let q5 = add 31 q5;;   (* [11, 15, 16, 18, 19, 27, 29, 31, 32, 33, 33, 33, 37, 38]*)
let (element, q5) = delete_min q5;;   (* 11 * [15, 16, 18, 19, 27, 29, 31, 32, 33, 33, 33, 37, 38]*)
assert(element = 11);;
let q5 = add 27 q5;;   (* [15, 16, 18, 19, 27, 27, 29, 31, 32, 33, 33, 33, 37, 38]*)
let q5 = add 2 q5;;   (* [2, 15, 16, 18, 19, 27, 27, 29, 31, 32, 33, 33, 33, 37, 38]*)
let (element, q5) = delete_min q5;;   (* 2 * [15, 16, 18, 19, 27, 27, 29, 31, 32, 33, 33, 33, 37, 38]*)
assert(element = 2);;
let q5 = add 18 q5;;   (* [15, 16, 18, 18, 19, 27, 27, 29, 31, 32, 33, 33, 33, 37, 38]*)
let q5 = add 18 q5;;   (* [15, 16, 18, 18, 18, 19, 27, 27, 29, 31, 32, 33, 33, 33, 37, 38]*)
let q5 = add 35 q5;;   (* [15, 16, 18, 18, 18, 19, 27, 27, 29, 31, 32, 33, 33, 33, 35, 37, 38]*)
let q5 = add 38 q5;;   (* [15, 16, 18, 18, 18, 19, 27, 27, 29, 31, 32, 33, 33, 33, 35, 37, 38, 38]*)
let (element, q5) = delete_min q5;;   (* 15 * [16, 18, 18, 18, 19, 27, 27, 29, 31, 32, 33, 33, 33, 35, 37, 38, 38]*)
assert(element = 15);;

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[4, 9, 14, 15, 16, 16, 16, 18, 18, 18, 19, 19, 20, 23, 24, 24, 24, 24, 25, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 30, 30, 30, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38]*)
let (element, q) = delete_min q;;   (* 4 * [9, 14, 15, 16, 16, 16, 18, 18, 18, 19, 19, 20, 23, 24, 24, 24, 24, 25, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 30, 30, 30, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 9 * [14, 15, 16, 16, 16, 18, 18, 18, 19, 19, 20, 23, 24, 24, 24, 24, 25, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 30, 30, 30, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 14 * [15, 16, 16, 16, 18, 18, 18, 19, 19, 20, 23, 24, 24, 24, 24, 25, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 30, 30, 30, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [16, 16, 16, 18, 18, 18, 19, 19, 20, 23, 24, 24, 24, 24, 25, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 30, 30, 30, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [16, 16, 18, 18, 18, 19, 19, 20, 23, 24, 24, 24, 24, 25, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 30, 30, 30, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [16, 18, 18, 18, 19, 19, 20, 23, 24, 24, 24, 24, 25, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 30, 30, 30, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [18, 18, 18, 19, 19, 20, 23, 24, 24, 24, 24, 25, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 30, 30, 30, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 18 * [18, 18, 19, 19, 20, 23, 24, 24, 24, 24, 25, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 30, 30, 30, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [18, 19, 19, 20, 23, 24, 24, 24, 24, 25, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 30, 30, 30, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [19, 19, 20, 23, 24, 24, 24, 24, 25, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 30, 30, 30, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [19, 20, 23, 24, 24, 24, 24, 25, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 30, 30, 30, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [20, 23, 24, 24, 24, 24, 25, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 30, 30, 30, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [23, 24, 24, 24, 24, 25, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 30, 30, 30, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 23 * [24, 24, 24, 24, 25, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 30, 30, 30, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [24, 24, 24, 25, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 30, 30, 30, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [24, 24, 25, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 30, 30, 30, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [24, 25, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 30, 30, 30, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [25, 26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 30, 30, 30, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [26, 27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 30, 30, 30, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [27, 27, 27, 27, 27, 27, 28, 28, 29, 29, 30, 30, 30, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 27, 27, 27, 28, 28, 29, 29, 30, 30, 30, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 27, 27, 28, 28, 29, 29, 30, 30, 30, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 27, 28, 28, 29, 29, 30, 30, 30, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 28, 28, 29, 29, 30, 30, 30, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 28, 28, 29, 29, 30, 30, 30, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [28, 28, 29, 29, 30, 30, 30, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [28, 29, 29, 30, 30, 30, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [29, 29, 30, 30, 30, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [29, 30, 30, 30, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [30, 30, 30, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [30, 30, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [30, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [34, 34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 37, 37, 37, 38, 38, 38]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 37, 37, 38, 38, 38]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 37, 37, 38, 38, 38]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [37, 37, 38, 38, 38]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [37, 38, 38, 38]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [38, 38, 38]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38, 38]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * []*)
assert(element = 38);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST94----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 15 q1;;   (* [15]*)
assert(is_empty q1 = false);;   (*[15]*)
let q1 = add 8 q1;;   (* [8, 15]*)
assert(is_empty q1 = false);;   (*[8, 15]*)
let (element, q1) = delete_min q1;;   (* 8 * [15]*)
assert(element = 8);;
let q1 = add 32 q1;;   (* [15, 32]*)
let (element, q1) = delete_min q1;;   (* 15 * [32]*)
assert(element = 15);;
let q1 = add 39 q1;;   (* [32, 39]*)
let q1 = add 29 q1;;   (* [29, 32, 39]*)
let (element, q1) = delete_min q1;;   (* 29 * [32, 39]*)
assert(element = 29);;
assert(is_empty q1 = false);;   (*[32, 39]*)
assert(is_empty q1 = false);;   (*[32, 39]*)
let (element, q1) = delete_min q1;;   (* 32 * [39]*)
assert(element = 32);;
let q1 = add 9 q1;;   (* [9, 39]*)
let q1 = add 25 q1;;   (* [9, 25, 39]*)
assert(is_empty q1 = false);;   (*[9, 25, 39]*)
let (element, q1) = delete_min q1;;   (* 9 * [25, 39]*)
assert(element = 9);;
let q1 = add 31 q1;;   (* [25, 31, 39]*)
let (element, q1) = delete_min q1;;   (* 25 * [31, 39]*)
assert(element = 25);;
let (element, q1) = delete_min q1;;   (* 31 * [39]*)
assert(element = 31);;
let (element, q1) = delete_min q1;;   (* 39 * []*)
assert(element = 39);;
let q1 = add 13 q1;;   (* [13]*)
let q1 = add 17 q1;;   (* [13, 17]*)
let (element, q1) = delete_min q1;;   (* 13 * [17]*)
assert(element = 13);;
let q1 = add 13 q1;;   (* [13, 17]*)
assert(is_empty q1 = false);;   (*[13, 17]*)
let (element, q1) = delete_min q1;;   (* 13 * [17]*)
assert(element = 13);;
let (element, q1) = delete_min q1;;   (* 17 * []*)
assert(element = 17);;
let q1 = add 2 q1;;   (* [2]*)
let (element, q1) = delete_min q1;;   (* 2 * []*)
assert(element = 2);;
let q1 = add 30 q1;;   (* [30]*)
let q1 = add 35 q1;;   (* [30, 35]*)
let q1 = add 2 q1;;   (* [2, 30, 35]*)
let q1 = add 34 q1;;   (* [2, 30, 34, 35]*)
assert(is_empty q1 = false);;   (*[2, 30, 34, 35]*)
assert(is_empty q1 = false);;   (*[2, 30, 34, 35]*)
let (element, q1) = delete_min q1;;   (* 2 * [30, 34, 35]*)
assert(element = 2);;
let q1 = add 39 q1;;   (* [30, 34, 35, 39]*)
let (element, q1) = delete_min q1;;   (* 30 * [34, 35, 39]*)
assert(element = 30);;
assert(is_empty q1 = false);;   (*[34, 35, 39]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 28 q2;;   (* [28]*)
let (element, q2) = delete_min q2;;   (* 28 * []*)
assert(element = 28);;
let q2 = add 18 q2;;   (* [18]*)
let q2 = add 32 q2;;   (* [18, 32]*)
let q2 = add 34 q2;;   (* [18, 32, 34]*)
assert(is_empty q2 = false);;   (*[18, 32, 34]*)
let q2 = add 18 q2;;   (* [18, 18, 32, 34]*)
assert(is_empty q2 = false);;   (*[18, 18, 32, 34]*)
let q2 = add 13 q2;;   (* [13, 18, 18, 32, 34]*)
let q2 = add 22 q2;;   (* [13, 18, 18, 22, 32, 34]*)
let q2 = add 36 q2;;   (* [13, 18, 18, 22, 32, 34, 36]*)
let q2 = add 3 q2;;   (* [3, 13, 18, 18, 22, 32, 34, 36]*)
let q2 = add 0 q2;;   (* [0, 3, 13, 18, 18, 22, 32, 34, 36]*)
let (element, q2) = delete_min q2;;   (* 0 * [3, 13, 18, 18, 22, 32, 34, 36]*)
assert(element = 0);;
let q2 = add 22 q2;;   (* [3, 13, 18, 18, 22, 22, 32, 34, 36]*)
assert(is_empty q2 = false);;   (*[3, 13, 18, 18, 22, 22, 32, 34, 36]*)
let q2 = add 11 q2;;   (* [3, 11, 13, 18, 18, 22, 22, 32, 34, 36]*)
let (element, q2) = delete_min q2;;   (* 3 * [11, 13, 18, 18, 22, 22, 32, 34, 36]*)
assert(element = 3);;
let q2 = add 29 q2;;   (* [11, 13, 18, 18, 22, 22, 29, 32, 34, 36]*)
let q2 = add 7 q2;;   (* [7, 11, 13, 18, 18, 22, 22, 29, 32, 34, 36]*)
let q2 = add 15 q2;;   (* [7, 11, 13, 15, 18, 18, 22, 22, 29, 32, 34, 36]*)
let q2 = add 2 q2;;   (* [2, 7, 11, 13, 15, 18, 18, 22, 22, 29, 32, 34, 36]*)
let q2 = add 36 q2;;   (* [2, 7, 11, 13, 15, 18, 18, 22, 22, 29, 32, 34, 36, 36]*)
let (element, q2) = delete_min q2;;   (* 2 * [7, 11, 13, 15, 18, 18, 22, 22, 29, 32, 34, 36, 36]*)
assert(element = 2);;
let q2 = add 13 q2;;   (* [7, 11, 13, 13, 15, 18, 18, 22, 22, 29, 32, 34, 36, 36]*)
let (element, q2) = delete_min q2;;   (* 7 * [11, 13, 13, 15, 18, 18, 22, 22, 29, 32, 34, 36, 36]*)
assert(element = 7);;
let q2 = add 17 q2;;   (* [11, 13, 13, 15, 17, 18, 18, 22, 22, 29, 32, 34, 36, 36]*)
let q2 = add 24 q2;;   (* [11, 13, 13, 15, 17, 18, 18, 22, 22, 24, 29, 32, 34, 36, 36]*)
let q2 = add 5 q2;;   (* [5, 11, 13, 13, 15, 17, 18, 18, 22, 22, 24, 29, 32, 34, 36, 36]*)
let q2 = add 33 q2;;   (* [5, 11, 13, 13, 15, 17, 18, 18, 22, 22, 24, 29, 32, 33, 34, 36, 36]*)
let q2 = add 10 q2;;   (* [5, 10, 11, 13, 13, 15, 17, 18, 18, 22, 22, 24, 29, 32, 33, 34, 36, 36]*)
assert(is_empty q2 = false);;   (*[5, 10, 11, 13, 13, 15, 17, 18, 18, 22, 22, 24, 29, 32, 33, 34, 36, 36]*)
let q2 = add 32 q2;;   (* [5, 10, 11, 13, 13, 15, 17, 18, 18, 22, 22, 24, 29, 32, 32, 33, 34, 36, 36]*)
let q2 = add 23 q2;;   (* [5, 10, 11, 13, 13, 15, 17, 18, 18, 22, 22, 23, 24, 29, 32, 32, 33, 34, 36, 36]*)
let q2 = add 18 q2;;   (* [5, 10, 11, 13, 13, 15, 17, 18, 18, 18, 22, 22, 23, 24, 29, 32, 32, 33, 34, 36, 36]*)
let q2 = add 3 q2;;   (* [3, 5, 10, 11, 13, 13, 15, 17, 18, 18, 18, 22, 22, 23, 24, 29, 32, 32, 33, 34, 36, 36]*)
let q2 = add 21 q2;;   (* [3, 5, 10, 11, 13, 13, 15, 17, 18, 18, 18, 21, 22, 22, 23, 24, 29, 32, 32, 33, 34, 36, 36]*)
assert(is_empty q2 = false);;   (*[3, 5, 10, 11, 13, 13, 15, 17, 18, 18, 18, 21, 22, 22, 23, 24, 29, 32, 32, 33, 34, 36, 36]*)
let (element, q2) = delete_min q2;;   (* 3 * [5, 10, 11, 13, 13, 15, 17, 18, 18, 18, 21, 22, 22, 23, 24, 29, 32, 32, 33, 34, 36, 36]*)
assert(element = 3);;
let (element, q2) = delete_min q2;;   (* 5 * [10, 11, 13, 13, 15, 17, 18, 18, 18, 21, 22, 22, 23, 24, 29, 32, 32, 33, 34, 36, 36]*)
assert(element = 5);;

(* -------q3------ *)
let q3 = empty;;
let q3 = add 2 q3;;   (* [2]*)
let q3 = add 31 q3;;   (* [2, 31]*)
let (element, q3) = delete_min q3;;   (* 2 * [31]*)
assert(element = 2);;
let q3 = add 23 q3;;   (* [23, 31]*)
let q3 = add 20 q3;;   (* [20, 23, 31]*)
let q3 = add 21 q3;;   (* [20, 21, 23, 31]*)
let q3 = add 37 q3;;   (* [20, 21, 23, 31, 37]*)
let (element, q3) = delete_min q3;;   (* 20 * [21, 23, 31, 37]*)
assert(element = 20);;
assert(is_empty q3 = false);;   (*[21, 23, 31, 37]*)
let q3 = add 9 q3;;   (* [9, 21, 23, 31, 37]*)
let q3 = add 11 q3;;   (* [9, 11, 21, 23, 31, 37]*)
assert(is_empty q3 = false);;   (*[9, 11, 21, 23, 31, 37]*)
assert(is_empty q3 = false);;   (*[9, 11, 21, 23, 31, 37]*)
let q3 = add 22 q3;;   (* [9, 11, 21, 22, 23, 31, 37]*)
assert(is_empty q3 = false);;   (*[9, 11, 21, 22, 23, 31, 37]*)
let q3 = add 8 q3;;   (* [8, 9, 11, 21, 22, 23, 31, 37]*)
assert(is_empty q3 = false);;   (*[8, 9, 11, 21, 22, 23, 31, 37]*)
let q3 = add 5 q3;;   (* [5, 8, 9, 11, 21, 22, 23, 31, 37]*)
assert(is_empty q3 = false);;   (*[5, 8, 9, 11, 21, 22, 23, 31, 37]*)
let q3 = add 36 q3;;   (* [5, 8, 9, 11, 21, 22, 23, 31, 36, 37]*)
let q3 = add 35 q3;;   (* [5, 8, 9, 11, 21, 22, 23, 31, 35, 36, 37]*)
let q3 = add 11 q3;;   (* [5, 8, 9, 11, 11, 21, 22, 23, 31, 35, 36, 37]*)
let q3 = add 17 q3;;   (* [5, 8, 9, 11, 11, 17, 21, 22, 23, 31, 35, 36, 37]*)
let (element, q3) = delete_min q3;;   (* 5 * [8, 9, 11, 11, 17, 21, 22, 23, 31, 35, 36, 37]*)
assert(element = 5);;
let (element, q3) = delete_min q3;;   (* 8 * [9, 11, 11, 17, 21, 22, 23, 31, 35, 36, 37]*)
assert(element = 8);;
let (element, q3) = delete_min q3;;   (* 9 * [11, 11, 17, 21, 22, 23, 31, 35, 36, 37]*)
assert(element = 9);;
let q3 = add 0 q3;;   (* [0, 11, 11, 17, 21, 22, 23, 31, 35, 36, 37]*)
let (element, q3) = delete_min q3;;   (* 0 * [11, 11, 17, 21, 22, 23, 31, 35, 36, 37]*)
assert(element = 0);;
let q3 = add 7 q3;;   (* [7, 11, 11, 17, 21, 22, 23, 31, 35, 36, 37]*)
let (element, q3) = delete_min q3;;   (* 7 * [11, 11, 17, 21, 22, 23, 31, 35, 36, 37]*)
assert(element = 7);;
let (element, q3) = delete_min q3;;   (* 11 * [11, 17, 21, 22, 23, 31, 35, 36, 37]*)
assert(element = 11);;
let q3 = add 29 q3;;   (* [11, 17, 21, 22, 23, 29, 31, 35, 36, 37]*)
let q3 = add 23 q3;;   (* [11, 17, 21, 22, 23, 23, 29, 31, 35, 36, 37]*)
let (element, q3) = delete_min q3;;   (* 11 * [17, 21, 22, 23, 23, 29, 31, 35, 36, 37]*)
assert(element = 11);;
let q3 = add 28 q3;;   (* [17, 21, 22, 23, 23, 28, 29, 31, 35, 36, 37]*)
let q3 = add 35 q3;;   (* [17, 21, 22, 23, 23, 28, 29, 31, 35, 35, 36, 37]*)
let q3 = add 11 q3;;   (* [11, 17, 21, 22, 23, 23, 28, 29, 31, 35, 35, 36, 37]*)
let (element, q3) = delete_min q3;;   (* 11 * [17, 21, 22, 23, 23, 28, 29, 31, 35, 35, 36, 37]*)
assert(element = 11);;
let q3 = add 32 q3;;   (* [17, 21, 22, 23, 23, 28, 29, 31, 32, 35, 35, 36, 37]*)
let q3 = add 9 q3;;   (* [9, 17, 21, 22, 23, 23, 28, 29, 31, 32, 35, 35, 36, 37]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 38 q4;;   (* [38]*)
let (element, q4) = delete_min q4;;   (* 38 * []*)
assert(element = 38);;
let q4 = add 29 q4;;   (* [29]*)
let q4 = add 20 q4;;   (* [20, 29]*)
let q4 = add 0 q4;;   (* [0, 20, 29]*)
assert(is_empty q4 = false);;   (*[0, 20, 29]*)
let (element, q4) = delete_min q4;;   (* 0 * [20, 29]*)
assert(element = 0);;
assert(is_empty q4 = false);;   (*[20, 29]*)
let (element, q4) = delete_min q4;;   (* 20 * [29]*)
assert(element = 20);;
assert(is_empty q4 = false);;   (*[29]*)
let q4 = add 39 q4;;   (* [29, 39]*)
let q4 = add 36 q4;;   (* [29, 36, 39]*)
let q4 = add 29 q4;;   (* [29, 29, 36, 39]*)
let (element, q4) = delete_min q4;;   (* 29 * [29, 36, 39]*)
assert(element = 29);;
let q4 = add 18 q4;;   (* [18, 29, 36, 39]*)
let q4 = add 0 q4;;   (* [0, 18, 29, 36, 39]*)
let q4 = add 20 q4;;   (* [0, 18, 20, 29, 36, 39]*)
assert(is_empty q4 = false);;   (*[0, 18, 20, 29, 36, 39]*)
let q4 = add 25 q4;;   (* [0, 18, 20, 25, 29, 36, 39]*)
let (element, q4) = delete_min q4;;   (* 0 * [18, 20, 25, 29, 36, 39]*)
assert(element = 0);;
let q4 = add 35 q4;;   (* [18, 20, 25, 29, 35, 36, 39]*)
let q4 = add 19 q4;;   (* [18, 19, 20, 25, 29, 35, 36, 39]*)
let (element, q4) = delete_min q4;;   (* 18 * [19, 20, 25, 29, 35, 36, 39]*)
assert(element = 18);;
let (element, q4) = delete_min q4;;   (* 19 * [20, 25, 29, 35, 36, 39]*)
assert(element = 19);;
let q4 = add 20 q4;;   (* [20, 20, 25, 29, 35, 36, 39]*)
let q4 = add 20 q4;;   (* [20, 20, 20, 25, 29, 35, 36, 39]*)
let q4 = add 2 q4;;   (* [2, 20, 20, 20, 25, 29, 35, 36, 39]*)
let q4 = add 19 q4;;   (* [2, 19, 20, 20, 20, 25, 29, 35, 36, 39]*)
let q4 = add 0 q4;;   (* [0, 2, 19, 20, 20, 20, 25, 29, 35, 36, 39]*)
let q4 = add 25 q4;;   (* [0, 2, 19, 20, 20, 20, 25, 25, 29, 35, 36, 39]*)
assert(is_empty q4 = false);;   (*[0, 2, 19, 20, 20, 20, 25, 25, 29, 35, 36, 39]*)
let q4 = add 19 q4;;   (* [0, 2, 19, 19, 20, 20, 20, 25, 25, 29, 35, 36, 39]*)
let q4 = add 6 q4;;   (* [0, 2, 6, 19, 19, 20, 20, 20, 25, 25, 29, 35, 36, 39]*)
let (element, q4) = delete_min q4;;   (* 0 * [2, 6, 19, 19, 20, 20, 20, 25, 25, 29, 35, 36, 39]*)
assert(element = 0);;
let (element, q4) = delete_min q4;;   (* 2 * [6, 19, 19, 20, 20, 20, 25, 25, 29, 35, 36, 39]*)
assert(element = 2);;
let q4 = add 27 q4;;   (* [6, 19, 19, 20, 20, 20, 25, 25, 27, 29, 35, 36, 39]*)
assert(is_empty q4 = false);;   (*[6, 19, 19, 20, 20, 20, 25, 25, 27, 29, 35, 36, 39]*)
let (element, q4) = delete_min q4;;   (* 6 * [19, 19, 20, 20, 20, 25, 25, 27, 29, 35, 36, 39]*)
assert(element = 6);;
let q4 = add 12 q4;;   (* [12, 19, 19, 20, 20, 20, 25, 25, 27, 29, 35, 36, 39]*)
assert(is_empty q4 = false);;   (*[12, 19, 19, 20, 20, 20, 25, 25, 27, 29, 35, 36, 39]*)

(* -------q5------ *)
let q5 = empty;;
let q5 = add 18 q5;;   (* [18]*)
let q5 = add 36 q5;;   (* [18, 36]*)
let q5 = add 33 q5;;   (* [18, 33, 36]*)
let (element, q5) = delete_min q5;;   (* 18 * [33, 36]*)
assert(element = 18);;
let q5 = add 2 q5;;   (* [2, 33, 36]*)
let (element, q5) = delete_min q5;;   (* 2 * [33, 36]*)
assert(element = 2);;
let (element, q5) = delete_min q5;;   (* 33 * [36]*)
assert(element = 33);;
assert(is_empty q5 = false);;   (*[36]*)
let q5 = add 31 q5;;   (* [31, 36]*)
let (element, q5) = delete_min q5;;   (* 31 * [36]*)
assert(element = 31);;
let (element, q5) = delete_min q5;;   (* 36 * []*)
assert(element = 36);;
let q5 = add 38 q5;;   (* [38]*)
let q5 = add 15 q5;;   (* [15, 38]*)
assert(is_empty q5 = false);;   (*[15, 38]*)
let q5 = add 29 q5;;   (* [15, 29, 38]*)
let q5 = add 30 q5;;   (* [15, 29, 30, 38]*)
let q5 = add 23 q5;;   (* [15, 23, 29, 30, 38]*)
let (element, q5) = delete_min q5;;   (* 15 * [23, 29, 30, 38]*)
assert(element = 15);;
let q5 = add 32 q5;;   (* [23, 29, 30, 32, 38]*)
let q5 = add 2 q5;;   (* [2, 23, 29, 30, 32, 38]*)
let q5 = add 12 q5;;   (* [2, 12, 23, 29, 30, 32, 38]*)
let q5 = add 22 q5;;   (* [2, 12, 22, 23, 29, 30, 32, 38]*)
let (element, q5) = delete_min q5;;   (* 2 * [12, 22, 23, 29, 30, 32, 38]*)
assert(element = 2);;
let q5 = add 30 q5;;   (* [12, 22, 23, 29, 30, 30, 32, 38]*)
let (element, q5) = delete_min q5;;   (* 12 * [22, 23, 29, 30, 30, 32, 38]*)
assert(element = 12);;
let q5 = add 11 q5;;   (* [11, 22, 23, 29, 30, 30, 32, 38]*)
let q5 = add 34 q5;;   (* [11, 22, 23, 29, 30, 30, 32, 34, 38]*)
let q5 = add 4 q5;;   (* [4, 11, 22, 23, 29, 30, 30, 32, 34, 38]*)
let q5 = add 6 q5;;   (* [4, 6, 11, 22, 23, 29, 30, 30, 32, 34, 38]*)
let q5 = add 22 q5;;   (* [4, 6, 11, 22, 22, 23, 29, 30, 30, 32, 34, 38]*)
let q5 = add 17 q5;;   (* [4, 6, 11, 17, 22, 22, 23, 29, 30, 30, 32, 34, 38]*)
let q5 = add 27 q5;;   (* [4, 6, 11, 17, 22, 22, 23, 27, 29, 30, 30, 32, 34, 38]*)
let q5 = add 22 q5;;   (* [4, 6, 11, 17, 22, 22, 22, 23, 27, 29, 30, 30, 32, 34, 38]*)
let q5 = add 5 q5;;   (* [4, 5, 6, 11, 17, 22, 22, 22, 23, 27, 29, 30, 30, 32, 34, 38]*)
let q5 = add 8 q5;;   (* [4, 5, 6, 8, 11, 17, 22, 22, 22, 23, 27, 29, 30, 30, 32, 34, 38]*)
let q5 = add 32 q5;;   (* [4, 5, 6, 8, 11, 17, 22, 22, 22, 23, 27, 29, 30, 30, 32, 32, 34, 38]*)
let q5 = add 26 q5;;   (* [4, 5, 6, 8, 11, 17, 22, 22, 22, 23, 26, 27, 29, 30, 30, 32, 32, 34, 38]*)
let q5 = add 22 q5;;   (* [4, 5, 6, 8, 11, 17, 22, 22, 22, 22, 23, 26, 27, 29, 30, 30, 32, 32, 34, 38]*)
let q5 = add 2 q5;;   (* [2, 4, 5, 6, 8, 11, 17, 22, 22, 22, 22, 23, 26, 27, 29, 30, 30, 32, 32, 34, 38]*)
let q5 = add 36 q5;;   (* [2, 4, 5, 6, 8, 11, 17, 22, 22, 22, 22, 23, 26, 27, 29, 30, 30, 32, 32, 34, 36, 38]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[2, 4, 5, 6, 8, 9, 10, 11, 11, 12, 13, 13, 15, 17, 17, 17, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39]*)
let (element, q) = delete_min q;;   (* 2 * [4, 5, 6, 8, 9, 10, 11, 11, 12, 13, 13, 15, 17, 17, 17, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 2);;
let (element, q) = delete_min q;;   (* 4 * [5, 6, 8, 9, 10, 11, 11, 12, 13, 13, 15, 17, 17, 17, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 5 * [6, 8, 9, 10, 11, 11, 12, 13, 13, 15, 17, 17, 17, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 6 * [8, 9, 10, 11, 11, 12, 13, 13, 15, 17, 17, 17, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 8 * [9, 10, 11, 11, 12, 13, 13, 15, 17, 17, 17, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 9 * [10, 11, 11, 12, 13, 13, 15, 17, 17, 17, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 10 * [11, 11, 12, 13, 13, 15, 17, 17, 17, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 11 * [11, 12, 13, 13, 15, 17, 17, 17, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 11 * [12, 13, 13, 15, 17, 17, 17, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 12 * [13, 13, 15, 17, 17, 17, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 13 * [13, 15, 17, 17, 17, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 13 * [15, 17, 17, 17, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 15 * [17, 17, 17, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 17 * [17, 17, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [17, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [18, 18, 19, 19, 20, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [18, 19, 19, 20, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [19, 19, 20, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [19, 20, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [20, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [22, 22, 22, 22, 23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [22, 22, 22, 23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [22, 22, 23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [22, 23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [24, 25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [25, 25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [25, 26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [26, 27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [27, 27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [27, 28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [28, 29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [29, 29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [29, 29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [29, 29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [29, 30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [30, 30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [30, 31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [31, 32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 36, 36, 37, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 36, 37, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 37, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [38, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST95----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 27 q1;;   (* [27]*)
let q1 = add 14 q1;;   (* [14, 27]*)
let q1 = add 19 q1;;   (* [14, 19, 27]*)
let q1 = add 7 q1;;   (* [7, 14, 19, 27]*)
let q1 = add 3 q1;;   (* [3, 7, 14, 19, 27]*)
let (element, q1) = delete_min q1;;   (* 3 * [7, 14, 19, 27]*)
assert(element = 3);;
let q1 = add 28 q1;;   (* [7, 14, 19, 27, 28]*)
assert(is_empty q1 = false);;   (*[7, 14, 19, 27, 28]*)
let q1 = add 0 q1;;   (* [0, 7, 14, 19, 27, 28]*)
let q1 = add 19 q1;;   (* [0, 7, 14, 19, 19, 27, 28]*)
let q1 = add 32 q1;;   (* [0, 7, 14, 19, 19, 27, 28, 32]*)
let (element, q1) = delete_min q1;;   (* 0 * [7, 14, 19, 19, 27, 28, 32]*)
assert(element = 0);;
let q1 = add 15 q1;;   (* [7, 14, 15, 19, 19, 27, 28, 32]*)
assert(is_empty q1 = false);;   (*[7, 14, 15, 19, 19, 27, 28, 32]*)
assert(is_empty q1 = false);;   (*[7, 14, 15, 19, 19, 27, 28, 32]*)
let (element, q1) = delete_min q1;;   (* 7 * [14, 15, 19, 19, 27, 28, 32]*)
assert(element = 7);;
let q1 = add 13 q1;;   (* [13, 14, 15, 19, 19, 27, 28, 32]*)
assert(is_empty q1 = false);;   (*[13, 14, 15, 19, 19, 27, 28, 32]*)
let q1 = add 7 q1;;   (* [7, 13, 14, 15, 19, 19, 27, 28, 32]*)
let q1 = add 16 q1;;   (* [7, 13, 14, 15, 16, 19, 19, 27, 28, 32]*)
let q1 = add 25 q1;;   (* [7, 13, 14, 15, 16, 19, 19, 25, 27, 28, 32]*)
let q1 = add 13 q1;;   (* [7, 13, 13, 14, 15, 16, 19, 19, 25, 27, 28, 32]*)
let q1 = add 10 q1;;   (* [7, 10, 13, 13, 14, 15, 16, 19, 19, 25, 27, 28, 32]*)
assert(is_empty q1 = false);;   (*[7, 10, 13, 13, 14, 15, 16, 19, 19, 25, 27, 28, 32]*)
let (element, q1) = delete_min q1;;   (* 7 * [10, 13, 13, 14, 15, 16, 19, 19, 25, 27, 28, 32]*)
assert(element = 7);;
let q1 = add 17 q1;;   (* [10, 13, 13, 14, 15, 16, 17, 19, 19, 25, 27, 28, 32]*)
assert(is_empty q1 = false);;   (*[10, 13, 13, 14, 15, 16, 17, 19, 19, 25, 27, 28, 32]*)
let (element, q1) = delete_min q1;;   (* 10 * [13, 13, 14, 15, 16, 17, 19, 19, 25, 27, 28, 32]*)
assert(element = 10);;
let (element, q1) = delete_min q1;;   (* 13 * [13, 14, 15, 16, 17, 19, 19, 25, 27, 28, 32]*)
assert(element = 13);;
let q1 = add 0 q1;;   (* [0, 13, 14, 15, 16, 17, 19, 19, 25, 27, 28, 32]*)
let q1 = add 21 q1;;   (* [0, 13, 14, 15, 16, 17, 19, 19, 21, 25, 27, 28, 32]*)
let q1 = add 37 q1;;   (* [0, 13, 14, 15, 16, 17, 19, 19, 21, 25, 27, 28, 32, 37]*)
let (element, q1) = delete_min q1;;   (* 0 * [13, 14, 15, 16, 17, 19, 19, 21, 25, 27, 28, 32, 37]*)
assert(element = 0);;
let q1 = add 39 q1;;   (* [13, 14, 15, 16, 17, 19, 19, 21, 25, 27, 28, 32, 37, 39]*)
let q1 = add 36 q1;;   (* [13, 14, 15, 16, 17, 19, 19, 21, 25, 27, 28, 32, 36, 37, 39]*)
let q1 = add 15 q1;;   (* [13, 14, 15, 15, 16, 17, 19, 19, 21, 25, 27, 28, 32, 36, 37, 39]*)
let q1 = add 39 q1;;   (* [13, 14, 15, 15, 16, 17, 19, 19, 21, 25, 27, 28, 32, 36, 37, 39, 39]*)
let (element, q1) = delete_min q1;;   (* 13 * [14, 15, 15, 16, 17, 19, 19, 21, 25, 27, 28, 32, 36, 37, 39, 39]*)
assert(element = 13);;
let q1 = add 22 q1;;   (* [14, 15, 15, 16, 17, 19, 19, 21, 22, 25, 27, 28, 32, 36, 37, 39, 39]*)
let q1 = add 27 q1;;   (* [14, 15, 15, 16, 17, 19, 19, 21, 22, 25, 27, 27, 28, 32, 36, 37, 39, 39]*)
assert(is_empty q1 = false);;   (*[14, 15, 15, 16, 17, 19, 19, 21, 22, 25, 27, 27, 28, 32, 36, 37, 39, 39]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 28 q2;;   (* [28]*)
let q2 = add 10 q2;;   (* [10, 28]*)
let q2 = add 14 q2;;   (* [10, 14, 28]*)
let q2 = add 5 q2;;   (* [5, 10, 14, 28]*)
let q2 = add 14 q2;;   (* [5, 10, 14, 14, 28]*)
let q2 = add 5 q2;;   (* [5, 5, 10, 14, 14, 28]*)
let q2 = add 22 q2;;   (* [5, 5, 10, 14, 14, 22, 28]*)
let q2 = add 4 q2;;   (* [4, 5, 5, 10, 14, 14, 22, 28]*)
let q2 = add 8 q2;;   (* [4, 5, 5, 8, 10, 14, 14, 22, 28]*)
let q2 = add 32 q2;;   (* [4, 5, 5, 8, 10, 14, 14, 22, 28, 32]*)
let (element, q2) = delete_min q2;;   (* 4 * [5, 5, 8, 10, 14, 14, 22, 28, 32]*)
assert(element = 4);;
let q2 = add 32 q2;;   (* [5, 5, 8, 10, 14, 14, 22, 28, 32, 32]*)
let q2 = add 23 q2;;   (* [5, 5, 8, 10, 14, 14, 22, 23, 28, 32, 32]*)
let q2 = add 10 q2;;   (* [5, 5, 8, 10, 10, 14, 14, 22, 23, 28, 32, 32]*)
let q2 = add 11 q2;;   (* [5, 5, 8, 10, 10, 11, 14, 14, 22, 23, 28, 32, 32]*)
let q2 = add 5 q2;;   (* [5, 5, 5, 8, 10, 10, 11, 14, 14, 22, 23, 28, 32, 32]*)
let (element, q2) = delete_min q2;;   (* 5 * [5, 5, 8, 10, 10, 11, 14, 14, 22, 23, 28, 32, 32]*)
assert(element = 5);;
let q2 = add 0 q2;;   (* [0, 5, 5, 8, 10, 10, 11, 14, 14, 22, 23, 28, 32, 32]*)
let q2 = add 16 q2;;   (* [0, 5, 5, 8, 10, 10, 11, 14, 14, 16, 22, 23, 28, 32, 32]*)
let q2 = add 31 q2;;   (* [0, 5, 5, 8, 10, 10, 11, 14, 14, 16, 22, 23, 28, 31, 32, 32]*)
let q2 = add 28 q2;;   (* [0, 5, 5, 8, 10, 10, 11, 14, 14, 16, 22, 23, 28, 28, 31, 32, 32]*)
let q2 = add 2 q2;;   (* [0, 2, 5, 5, 8, 10, 10, 11, 14, 14, 16, 22, 23, 28, 28, 31, 32, 32]*)
let q2 = add 39 q2;;   (* [0, 2, 5, 5, 8, 10, 10, 11, 14, 14, 16, 22, 23, 28, 28, 31, 32, 32, 39]*)
let q2 = add 18 q2;;   (* [0, 2, 5, 5, 8, 10, 10, 11, 14, 14, 16, 18, 22, 23, 28, 28, 31, 32, 32, 39]*)
let q2 = add 14 q2;;   (* [0, 2, 5, 5, 8, 10, 10, 11, 14, 14, 14, 16, 18, 22, 23, 28, 28, 31, 32, 32, 39]*)
let (element, q2) = delete_min q2;;   (* 0 * [2, 5, 5, 8, 10, 10, 11, 14, 14, 14, 16, 18, 22, 23, 28, 28, 31, 32, 32, 39]*)
assert(element = 0);;
assert(is_empty q2 = false);;   (*[2, 5, 5, 8, 10, 10, 11, 14, 14, 14, 16, 18, 22, 23, 28, 28, 31, 32, 32, 39]*)
let (element, q2) = delete_min q2;;   (* 2 * [5, 5, 8, 10, 10, 11, 14, 14, 14, 16, 18, 22, 23, 28, 28, 31, 32, 32, 39]*)
assert(element = 2);;
let q2 = add 36 q2;;   (* [5, 5, 8, 10, 10, 11, 14, 14, 14, 16, 18, 22, 23, 28, 28, 31, 32, 32, 36, 39]*)
assert(is_empty q2 = false);;   (*[5, 5, 8, 10, 10, 11, 14, 14, 14, 16, 18, 22, 23, 28, 28, 31, 32, 32, 36, 39]*)
let q2 = add 25 q2;;   (* [5, 5, 8, 10, 10, 11, 14, 14, 14, 16, 18, 22, 23, 25, 28, 28, 31, 32, 32, 36, 39]*)
let (element, q2) = delete_min q2;;   (* 5 * [5, 8, 10, 10, 11, 14, 14, 14, 16, 18, 22, 23, 25, 28, 28, 31, 32, 32, 36, 39]*)
assert(element = 5);;
let q2 = add 10 q2;;   (* [5, 8, 10, 10, 10, 11, 14, 14, 14, 16, 18, 22, 23, 25, 28, 28, 31, 32, 32, 36, 39]*)
let q2 = add 25 q2;;   (* [5, 8, 10, 10, 10, 11, 14, 14, 14, 16, 18, 22, 23, 25, 25, 28, 28, 31, 32, 32, 36, 39]*)
let (element, q2) = delete_min q2;;   (* 5 * [8, 10, 10, 10, 11, 14, 14, 14, 16, 18, 22, 23, 25, 25, 28, 28, 31, 32, 32, 36, 39]*)
assert(element = 5);;
let (element, q2) = delete_min q2;;   (* 8 * [10, 10, 10, 11, 14, 14, 14, 16, 18, 22, 23, 25, 25, 28, 28, 31, 32, 32, 36, 39]*)
assert(element = 8);;
let (element, q2) = delete_min q2;;   (* 10 * [10, 10, 11, 14, 14, 14, 16, 18, 22, 23, 25, 25, 28, 28, 31, 32, 32, 36, 39]*)
assert(element = 10);;
assert(is_empty q2 = false);;   (*[10, 10, 11, 14, 14, 14, 16, 18, 22, 23, 25, 25, 28, 28, 31, 32, 32, 36, 39]*)
let q2 = add 30 q2;;   (* [10, 10, 11, 14, 14, 14, 16, 18, 22, 23, 25, 25, 28, 28, 30, 31, 32, 32, 36, 39]*)
let (element, q2) = delete_min q2;;   (* 10 * [10, 11, 14, 14, 14, 16, 18, 22, 23, 25, 25, 28, 28, 30, 31, 32, 32, 36, 39]*)
assert(element = 10);;
let q2 = add 23 q2;;   (* [10, 11, 14, 14, 14, 16, 18, 22, 23, 23, 25, 25, 28, 28, 30, 31, 32, 32, 36, 39]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 13 q3;;   (* [13]*)
let q3 = add 29 q3;;   (* [13, 29]*)
let q3 = add 14 q3;;   (* [13, 14, 29]*)
let q3 = add 26 q3;;   (* [13, 14, 26, 29]*)
let (element, q3) = delete_min q3;;   (* 13 * [14, 26, 29]*)
assert(element = 13);;
assert(is_empty q3 = false);;   (*[14, 26, 29]*)
let q3 = add 28 q3;;   (* [14, 26, 28, 29]*)
let (element, q3) = delete_min q3;;   (* 14 * [26, 28, 29]*)
assert(element = 14);;
let q3 = add 23 q3;;   (* [23, 26, 28, 29]*)
let q3 = add 0 q3;;   (* [0, 23, 26, 28, 29]*)
let q3 = add 16 q3;;   (* [0, 16, 23, 26, 28, 29]*)
let q3 = add 1 q3;;   (* [0, 1, 16, 23, 26, 28, 29]*)
let q3 = add 11 q3;;   (* [0, 1, 11, 16, 23, 26, 28, 29]*)
let q3 = add 31 q3;;   (* [0, 1, 11, 16, 23, 26, 28, 29, 31]*)
let (element, q3) = delete_min q3;;   (* 0 * [1, 11, 16, 23, 26, 28, 29, 31]*)
assert(element = 0);;
let q3 = add 27 q3;;   (* [1, 11, 16, 23, 26, 27, 28, 29, 31]*)
let q3 = add 4 q3;;   (* [1, 4, 11, 16, 23, 26, 27, 28, 29, 31]*)
let (element, q3) = delete_min q3;;   (* 1 * [4, 11, 16, 23, 26, 27, 28, 29, 31]*)
assert(element = 1);;
let q3 = add 10 q3;;   (* [4, 10, 11, 16, 23, 26, 27, 28, 29, 31]*)
let q3 = add 24 q3;;   (* [4, 10, 11, 16, 23, 24, 26, 27, 28, 29, 31]*)
let q3 = add 8 q3;;   (* [4, 8, 10, 11, 16, 23, 24, 26, 27, 28, 29, 31]*)
let q3 = add 21 q3;;   (* [4, 8, 10, 11, 16, 21, 23, 24, 26, 27, 28, 29, 31]*)
let q3 = add 39 q3;;   (* [4, 8, 10, 11, 16, 21, 23, 24, 26, 27, 28, 29, 31, 39]*)
let q3 = add 1 q3;;   (* [1, 4, 8, 10, 11, 16, 21, 23, 24, 26, 27, 28, 29, 31, 39]*)
let q3 = add 5 q3;;   (* [1, 4, 5, 8, 10, 11, 16, 21, 23, 24, 26, 27, 28, 29, 31, 39]*)
let (element, q3) = delete_min q3;;   (* 1 * [4, 5, 8, 10, 11, 16, 21, 23, 24, 26, 27, 28, 29, 31, 39]*)
assert(element = 1);;
let (element, q3) = delete_min q3;;   (* 4 * [5, 8, 10, 11, 16, 21, 23, 24, 26, 27, 28, 29, 31, 39]*)
assert(element = 4);;
let q3 = add 30 q3;;   (* [5, 8, 10, 11, 16, 21, 23, 24, 26, 27, 28, 29, 30, 31, 39]*)
let q3 = add 5 q3;;   (* [5, 5, 8, 10, 11, 16, 21, 23, 24, 26, 27, 28, 29, 30, 31, 39]*)
let q3 = add 5 q3;;   (* [5, 5, 5, 8, 10, 11, 16, 21, 23, 24, 26, 27, 28, 29, 30, 31, 39]*)
let (element, q3) = delete_min q3;;   (* 5 * [5, 5, 8, 10, 11, 16, 21, 23, 24, 26, 27, 28, 29, 30, 31, 39]*)
assert(element = 5);;
let q3 = add 20 q3;;   (* [5, 5, 8, 10, 11, 16, 20, 21, 23, 24, 26, 27, 28, 29, 30, 31, 39]*)
let q3 = add 30 q3;;   (* [5, 5, 8, 10, 11, 16, 20, 21, 23, 24, 26, 27, 28, 29, 30, 30, 31, 39]*)
let q3 = add 18 q3;;   (* [5, 5, 8, 10, 11, 16, 18, 20, 21, 23, 24, 26, 27, 28, 29, 30, 30, 31, 39]*)
let q3 = add 34 q3;;   (* [5, 5, 8, 10, 11, 16, 18, 20, 21, 23, 24, 26, 27, 28, 29, 30, 30, 31, 34, 39]*)
let q3 = add 20 q3;;   (* [5, 5, 8, 10, 11, 16, 18, 20, 20, 21, 23, 24, 26, 27, 28, 29, 30, 30, 31, 34, 39]*)
let q3 = add 19 q3;;   (* [5, 5, 8, 10, 11, 16, 18, 19, 20, 20, 21, 23, 24, 26, 27, 28, 29, 30, 30, 31, 34, 39]*)
let (element, q3) = delete_min q3;;   (* 5 * [5, 8, 10, 11, 16, 18, 19, 20, 20, 21, 23, 24, 26, 27, 28, 29, 30, 30, 31, 34, 39]*)
assert(element = 5);;
let q3 = add 33 q3;;   (* [5, 8, 10, 11, 16, 18, 19, 20, 20, 21, 23, 24, 26, 27, 28, 29, 30, 30, 31, 33, 34, 39]*)
let q3 = add 8 q3;;   (* [5, 8, 8, 10, 11, 16, 18, 19, 20, 20, 21, 23, 24, 26, 27, 28, 29, 30, 30, 31, 33, 34, 39]*)
let q3 = add 7 q3;;   (* [5, 7, 8, 8, 10, 11, 16, 18, 19, 20, 20, 21, 23, 24, 26, 27, 28, 29, 30, 30, 31, 33, 34, 39]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 15 q4;;   (* [15]*)
let q4 = add 24 q4;;   (* [15, 24]*)
let q4 = add 39 q4;;   (* [15, 24, 39]*)
let (element, q4) = delete_min q4;;   (* 15 * [24, 39]*)
assert(element = 15);;
let (element, q4) = delete_min q4;;   (* 24 * [39]*)
assert(element = 24);;
let q4 = add 24 q4;;   (* [24, 39]*)
let q4 = add 19 q4;;   (* [19, 24, 39]*)
let q4 = add 19 q4;;   (* [19, 19, 24, 39]*)
let (element, q4) = delete_min q4;;   (* 19 * [19, 24, 39]*)
assert(element = 19);;
let q4 = add 31 q4;;   (* [19, 24, 31, 39]*)
let q4 = add 27 q4;;   (* [19, 24, 27, 31, 39]*)
let q4 = add 27 q4;;   (* [19, 24, 27, 27, 31, 39]*)
let q4 = add 22 q4;;   (* [19, 22, 24, 27, 27, 31, 39]*)
let (element, q4) = delete_min q4;;   (* 19 * [22, 24, 27, 27, 31, 39]*)
assert(element = 19);;
let q4 = add 8 q4;;   (* [8, 22, 24, 27, 27, 31, 39]*)
let q4 = add 22 q4;;   (* [8, 22, 22, 24, 27, 27, 31, 39]*)
let q4 = add 10 q4;;   (* [8, 10, 22, 22, 24, 27, 27, 31, 39]*)
let q4 = add 1 q4;;   (* [1, 8, 10, 22, 22, 24, 27, 27, 31, 39]*)
let (element, q4) = delete_min q4;;   (* 1 * [8, 10, 22, 22, 24, 27, 27, 31, 39]*)
assert(element = 1);;
let (element, q4) = delete_min q4;;   (* 8 * [10, 22, 22, 24, 27, 27, 31, 39]*)
assert(element = 8);;
let q4 = add 5 q4;;   (* [5, 10, 22, 22, 24, 27, 27, 31, 39]*)
let q4 = add 28 q4;;   (* [5, 10, 22, 22, 24, 27, 27, 28, 31, 39]*)
let (element, q4) = delete_min q4;;   (* 5 * [10, 22, 22, 24, 27, 27, 28, 31, 39]*)
assert(element = 5);;
let q4 = add 19 q4;;   (* [10, 19, 22, 22, 24, 27, 27, 28, 31, 39]*)
let q4 = add 0 q4;;   (* [0, 10, 19, 22, 22, 24, 27, 27, 28, 31, 39]*)
let q4 = add 10 q4;;   (* [0, 10, 10, 19, 22, 22, 24, 27, 27, 28, 31, 39]*)
let (element, q4) = delete_min q4;;   (* 0 * [10, 10, 19, 22, 22, 24, 27, 27, 28, 31, 39]*)
assert(element = 0);;
let q4 = add 20 q4;;   (* [10, 10, 19, 20, 22, 22, 24, 27, 27, 28, 31, 39]*)
let q4 = add 31 q4;;   (* [10, 10, 19, 20, 22, 22, 24, 27, 27, 28, 31, 31, 39]*)
let (element, q4) = delete_min q4;;   (* 10 * [10, 19, 20, 22, 22, 24, 27, 27, 28, 31, 31, 39]*)
assert(element = 10);;
let (element, q4) = delete_min q4;;   (* 10 * [19, 20, 22, 22, 24, 27, 27, 28, 31, 31, 39]*)
assert(element = 10);;
let q4 = add 28 q4;;   (* [19, 20, 22, 22, 24, 27, 27, 28, 28, 31, 31, 39]*)
let q4 = add 16 q4;;   (* [16, 19, 20, 22, 22, 24, 27, 27, 28, 28, 31, 31, 39]*)
let (element, q4) = delete_min q4;;   (* 16 * [19, 20, 22, 22, 24, 27, 27, 28, 28, 31, 31, 39]*)
assert(element = 16);;
let q4 = add 2 q4;;   (* [2, 19, 20, 22, 22, 24, 27, 27, 28, 28, 31, 31, 39]*)
assert(is_empty q4 = false);;   (*[2, 19, 20, 22, 22, 24, 27, 27, 28, 28, 31, 31, 39]*)
assert(is_empty q4 = false);;   (*[2, 19, 20, 22, 22, 24, 27, 27, 28, 28, 31, 31, 39]*)
assert(is_empty q4 = false);;   (*[2, 19, 20, 22, 22, 24, 27, 27, 28, 28, 31, 31, 39]*)
let (element, q4) = delete_min q4;;   (* 2 * [19, 20, 22, 22, 24, 27, 27, 28, 28, 31, 31, 39]*)
assert(element = 2);;
let q4 = add 13 q4;;   (* [13, 19, 20, 22, 22, 24, 27, 27, 28, 28, 31, 31, 39]*)
let q4 = add 4 q4;;   (* [4, 13, 19, 20, 22, 22, 24, 27, 27, 28, 28, 31, 31, 39]*)

(* -------q5------ *)
let q5 = empty;;
let q5 = add 14 q5;;   (* [14]*)
let q5 = add 6 q5;;   (* [6, 14]*)
let (element, q5) = delete_min q5;;   (* 6 * [14]*)
assert(element = 6);;
let q5 = add 2 q5;;   (* [2, 14]*)
let (element, q5) = delete_min q5;;   (* 2 * [14]*)
assert(element = 2);;
let (element, q5) = delete_min q5;;   (* 14 * []*)
assert(element = 14);;
let q5 = add 8 q5;;   (* [8]*)
let q5 = add 28 q5;;   (* [8, 28]*)
let q5 = add 21 q5;;   (* [8, 21, 28]*)
let q5 = add 33 q5;;   (* [8, 21, 28, 33]*)
let q5 = add 28 q5;;   (* [8, 21, 28, 28, 33]*)
let q5 = add 20 q5;;   (* [8, 20, 21, 28, 28, 33]*)
let q5 = add 33 q5;;   (* [8, 20, 21, 28, 28, 33, 33]*)
assert(is_empty q5 = false);;   (*[8, 20, 21, 28, 28, 33, 33]*)
let q5 = add 13 q5;;   (* [8, 13, 20, 21, 28, 28, 33, 33]*)
let (element, q5) = delete_min q5;;   (* 8 * [13, 20, 21, 28, 28, 33, 33]*)
assert(element = 8);;
assert(is_empty q5 = false);;   (*[13, 20, 21, 28, 28, 33, 33]*)
let q5 = add 31 q5;;   (* [13, 20, 21, 28, 28, 31, 33, 33]*)
let q5 = add 4 q5;;   (* [4, 13, 20, 21, 28, 28, 31, 33, 33]*)
let q5 = add 21 q5;;   (* [4, 13, 20, 21, 21, 28, 28, 31, 33, 33]*)
let q5 = add 30 q5;;   (* [4, 13, 20, 21, 21, 28, 28, 30, 31, 33, 33]*)
let q5 = add 4 q5;;   (* [4, 4, 13, 20, 21, 21, 28, 28, 30, 31, 33, 33]*)
let q5 = add 39 q5;;   (* [4, 4, 13, 20, 21, 21, 28, 28, 30, 31, 33, 33, 39]*)
let (element, q5) = delete_min q5;;   (* 4 * [4, 13, 20, 21, 21, 28, 28, 30, 31, 33, 33, 39]*)
assert(element = 4);;
assert(is_empty q5 = false);;   (*[4, 13, 20, 21, 21, 28, 28, 30, 31, 33, 33, 39]*)
let q5 = add 33 q5;;   (* [4, 13, 20, 21, 21, 28, 28, 30, 31, 33, 33, 33, 39]*)
let q5 = add 6 q5;;   (* [4, 6, 13, 20, 21, 21, 28, 28, 30, 31, 33, 33, 33, 39]*)
let q5 = add 18 q5;;   (* [4, 6, 13, 18, 20, 21, 21, 28, 28, 30, 31, 33, 33, 33, 39]*)
let q5 = add 34 q5;;   (* [4, 6, 13, 18, 20, 21, 21, 28, 28, 30, 31, 33, 33, 33, 34, 39]*)
let q5 = add 12 q5;;   (* [4, 6, 12, 13, 18, 20, 21, 21, 28, 28, 30, 31, 33, 33, 33, 34, 39]*)
assert(is_empty q5 = false);;   (*[4, 6, 12, 13, 18, 20, 21, 21, 28, 28, 30, 31, 33, 33, 33, 34, 39]*)
let q5 = add 34 q5;;   (* [4, 6, 12, 13, 18, 20, 21, 21, 28, 28, 30, 31, 33, 33, 33, 34, 34, 39]*)
let (element, q5) = delete_min q5;;   (* 4 * [6, 12, 13, 18, 20, 21, 21, 28, 28, 30, 31, 33, 33, 33, 34, 34, 39]*)
assert(element = 4);;
let q5 = add 18 q5;;   (* [6, 12, 13, 18, 18, 20, 21, 21, 28, 28, 30, 31, 33, 33, 33, 34, 34, 39]*)
let q5 = add 35 q5;;   (* [6, 12, 13, 18, 18, 20, 21, 21, 28, 28, 30, 31, 33, 33, 33, 34, 34, 35, 39]*)
let (element, q5) = delete_min q5;;   (* 6 * [12, 13, 18, 18, 20, 21, 21, 28, 28, 30, 31, 33, 33, 33, 34, 34, 35, 39]*)
assert(element = 6);;
let q5 = add 31 q5;;   (* [12, 13, 18, 18, 20, 21, 21, 28, 28, 30, 31, 31, 33, 33, 33, 34, 34, 35, 39]*)
let q5 = add 20 q5;;   (* [12, 13, 18, 18, 20, 20, 21, 21, 28, 28, 30, 31, 31, 33, 33, 33, 34, 34, 35, 39]*)
let (element, q5) = delete_min q5;;   (* 12 * [13, 18, 18, 20, 20, 21, 21, 28, 28, 30, 31, 31, 33, 33, 33, 34, 34, 35, 39]*)
assert(element = 12);;
let q5 = add 7 q5;;   (* [7, 13, 18, 18, 20, 20, 21, 21, 28, 28, 30, 31, 31, 33, 33, 33, 34, 34, 35, 39]*)
let q5 = add 20 q5;;   (* [7, 13, 18, 18, 20, 20, 20, 21, 21, 28, 28, 30, 31, 31, 33, 33, 33, 34, 34, 35, 39]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[4, 5, 7, 7, 8, 8, 10, 10, 11, 11, 13, 13, 14, 14, 14, 14, 15, 15, 16, 16, 16, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39]*)
let (element, q) = delete_min q;;   (* 4 * [5, 7, 7, 8, 8, 10, 10, 11, 11, 13, 13, 14, 14, 14, 14, 15, 15, 16, 16, 16, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 5 * [7, 7, 8, 8, 10, 10, 11, 11, 13, 13, 14, 14, 14, 14, 15, 15, 16, 16, 16, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 7 * [7, 8, 8, 10, 10, 11, 11, 13, 13, 14, 14, 14, 14, 15, 15, 16, 16, 16, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 7 * [8, 8, 10, 10, 11, 11, 13, 13, 14, 14, 14, 14, 15, 15, 16, 16, 16, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 8 * [8, 10, 10, 11, 11, 13, 13, 14, 14, 14, 14, 15, 15, 16, 16, 16, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 8 * [10, 10, 11, 11, 13, 13, 14, 14, 14, 14, 15, 15, 16, 16, 16, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 10 * [10, 11, 11, 13, 13, 14, 14, 14, 14, 15, 15, 16, 16, 16, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 10 * [11, 11, 13, 13, 14, 14, 14, 14, 15, 15, 16, 16, 16, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 11 * [11, 13, 13, 14, 14, 14, 14, 15, 15, 16, 16, 16, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 11 * [13, 13, 14, 14, 14, 14, 15, 15, 16, 16, 16, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 13 * [13, 14, 14, 14, 14, 15, 15, 16, 16, 16, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 13 * [14, 14, 14, 14, 15, 15, 16, 16, 16, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 14 * [14, 14, 14, 15, 15, 16, 16, 16, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [14, 14, 15, 15, 16, 16, 16, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [14, 15, 15, 16, 16, 16, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [15, 15, 16, 16, 16, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [15, 16, 16, 16, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [16, 16, 16, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [16, 16, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [16, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 17 * [18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [18, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [19, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [23, 24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [24, 24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [24, 25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [25, 25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [25, 25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [25, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [29, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [31, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [31, 31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [31, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [34, 34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 39, 39, 39, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 39, 39, 39, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [39, 39, 39, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 39 * [39, 39, 39, 39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39, 39, 39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39, 39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST96----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 11 q1;;   (* [11]*)
let q1 = add 38 q1;;   (* [11, 38]*)
let q1 = add 20 q1;;   (* [11, 20, 38]*)
assert(is_empty q1 = false);;   (*[11, 20, 38]*)
let q1 = add 37 q1;;   (* [11, 20, 37, 38]*)
let q1 = add 14 q1;;   (* [11, 14, 20, 37, 38]*)
let q1 = add 12 q1;;   (* [11, 12, 14, 20, 37, 38]*)
let q1 = add 27 q1;;   (* [11, 12, 14, 20, 27, 37, 38]*)
let q1 = add 27 q1;;   (* [11, 12, 14, 20, 27, 27, 37, 38]*)
assert(is_empty q1 = false);;   (*[11, 12, 14, 20, 27, 27, 37, 38]*)
let (element, q1) = delete_min q1;;   (* 11 * [12, 14, 20, 27, 27, 37, 38]*)
assert(element = 11);;
let (element, q1) = delete_min q1;;   (* 12 * [14, 20, 27, 27, 37, 38]*)
assert(element = 12);;
let q1 = add 35 q1;;   (* [14, 20, 27, 27, 35, 37, 38]*)
let (element, q1) = delete_min q1;;   (* 14 * [20, 27, 27, 35, 37, 38]*)
assert(element = 14);;
let q1 = add 19 q1;;   (* [19, 20, 27, 27, 35, 37, 38]*)
let q1 = add 38 q1;;   (* [19, 20, 27, 27, 35, 37, 38, 38]*)
let q1 = add 29 q1;;   (* [19, 20, 27, 27, 29, 35, 37, 38, 38]*)
let (element, q1) = delete_min q1;;   (* 19 * [20, 27, 27, 29, 35, 37, 38, 38]*)
assert(element = 19);;
let q1 = add 12 q1;;   (* [12, 20, 27, 27, 29, 35, 37, 38, 38]*)
let (element, q1) = delete_min q1;;   (* 12 * [20, 27, 27, 29, 35, 37, 38, 38]*)
assert(element = 12);;
let q1 = add 15 q1;;   (* [15, 20, 27, 27, 29, 35, 37, 38, 38]*)
let q1 = add 1 q1;;   (* [1, 15, 20, 27, 27, 29, 35, 37, 38, 38]*)
let q1 = add 17 q1;;   (* [1, 15, 17, 20, 27, 27, 29, 35, 37, 38, 38]*)
let q1 = add 29 q1;;   (* [1, 15, 17, 20, 27, 27, 29, 29, 35, 37, 38, 38]*)
assert(is_empty q1 = false);;   (*[1, 15, 17, 20, 27, 27, 29, 29, 35, 37, 38, 38]*)
let q1 = add 3 q1;;   (* [1, 3, 15, 17, 20, 27, 27, 29, 29, 35, 37, 38, 38]*)
let (element, q1) = delete_min q1;;   (* 1 * [3, 15, 17, 20, 27, 27, 29, 29, 35, 37, 38, 38]*)
assert(element = 1);;
let q1 = add 37 q1;;   (* [3, 15, 17, 20, 27, 27, 29, 29, 35, 37, 37, 38, 38]*)
let (element, q1) = delete_min q1;;   (* 3 * [15, 17, 20, 27, 27, 29, 29, 35, 37, 37, 38, 38]*)
assert(element = 3);;
let (element, q1) = delete_min q1;;   (* 15 * [17, 20, 27, 27, 29, 29, 35, 37, 37, 38, 38]*)
assert(element = 15);;
let q1 = add 9 q1;;   (* [9, 17, 20, 27, 27, 29, 29, 35, 37, 37, 38, 38]*)
let q1 = add 28 q1;;   (* [9, 17, 20, 27, 27, 28, 29, 29, 35, 37, 37, 38, 38]*)
let q1 = add 2 q1;;   (* [2, 9, 17, 20, 27, 27, 28, 29, 29, 35, 37, 37, 38, 38]*)
let (element, q1) = delete_min q1;;   (* 2 * [9, 17, 20, 27, 27, 28, 29, 29, 35, 37, 37, 38, 38]*)
assert(element = 2);;
let q1 = add 37 q1;;   (* [9, 17, 20, 27, 27, 28, 29, 29, 35, 37, 37, 37, 38, 38]*)
let q1 = add 15 q1;;   (* [9, 15, 17, 20, 27, 27, 28, 29, 29, 35, 37, 37, 37, 38, 38]*)
let (element, q1) = delete_min q1;;   (* 9 * [15, 17, 20, 27, 27, 28, 29, 29, 35, 37, 37, 37, 38, 38]*)
assert(element = 9);;
let q1 = add 15 q1;;   (* [15, 15, 17, 20, 27, 27, 28, 29, 29, 35, 37, 37, 37, 38, 38]*)
let q1 = add 28 q1;;   (* [15, 15, 17, 20, 27, 27, 28, 28, 29, 29, 35, 37, 37, 37, 38, 38]*)
let (element, q1) = delete_min q1;;   (* 15 * [15, 17, 20, 27, 27, 28, 28, 29, 29, 35, 37, 37, 37, 38, 38]*)
assert(element = 15);;
let q1 = add 15 q1;;   (* [15, 15, 17, 20, 27, 27, 28, 28, 29, 29, 35, 37, 37, 37, 38, 38]*)
let q1 = add 26 q1;;   (* [15, 15, 17, 20, 26, 27, 27, 28, 28, 29, 29, 35, 37, 37, 37, 38, 38]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 18 q2;;   (* [18]*)
let q2 = add 26 q2;;   (* [18, 26]*)
let (element, q2) = delete_min q2;;   (* 18 * [26]*)
assert(element = 18);;
let q2 = add 15 q2;;   (* [15, 26]*)
let q2 = add 13 q2;;   (* [13, 15, 26]*)
let q2 = add 7 q2;;   (* [7, 13, 15, 26]*)
let q2 = add 19 q2;;   (* [7, 13, 15, 19, 26]*)
let (element, q2) = delete_min q2;;   (* 7 * [13, 15, 19, 26]*)
assert(element = 7);;
let q2 = add 13 q2;;   (* [13, 13, 15, 19, 26]*)
let q2 = add 5 q2;;   (* [5, 13, 13, 15, 19, 26]*)
let q2 = add 29 q2;;   (* [5, 13, 13, 15, 19, 26, 29]*)
let (element, q2) = delete_min q2;;   (* 5 * [13, 13, 15, 19, 26, 29]*)
assert(element = 5);;
let q2 = add 21 q2;;   (* [13, 13, 15, 19, 21, 26, 29]*)
let (element, q2) = delete_min q2;;   (* 13 * [13, 15, 19, 21, 26, 29]*)
assert(element = 13);;
let q2 = add 18 q2;;   (* [13, 15, 18, 19, 21, 26, 29]*)
let q2 = add 27 q2;;   (* [13, 15, 18, 19, 21, 26, 27, 29]*)
let (element, q2) = delete_min q2;;   (* 13 * [15, 18, 19, 21, 26, 27, 29]*)
assert(element = 13);;
let q2 = add 38 q2;;   (* [15, 18, 19, 21, 26, 27, 29, 38]*)
let q2 = add 14 q2;;   (* [14, 15, 18, 19, 21, 26, 27, 29, 38]*)
let q2 = add 9 q2;;   (* [9, 14, 15, 18, 19, 21, 26, 27, 29, 38]*)
let q2 = add 13 q2;;   (* [9, 13, 14, 15, 18, 19, 21, 26, 27, 29, 38]*)
let q2 = add 26 q2;;   (* [9, 13, 14, 15, 18, 19, 21, 26, 26, 27, 29, 38]*)
let (element, q2) = delete_min q2;;   (* 9 * [13, 14, 15, 18, 19, 21, 26, 26, 27, 29, 38]*)
assert(element = 9);;
let q2 = add 9 q2;;   (* [9, 13, 14, 15, 18, 19, 21, 26, 26, 27, 29, 38]*)
let (element, q2) = delete_min q2;;   (* 9 * [13, 14, 15, 18, 19, 21, 26, 26, 27, 29, 38]*)
assert(element = 9);;
let (element, q2) = delete_min q2;;   (* 13 * [14, 15, 18, 19, 21, 26, 26, 27, 29, 38]*)
assert(element = 13);;
let (element, q2) = delete_min q2;;   (* 14 * [15, 18, 19, 21, 26, 26, 27, 29, 38]*)
assert(element = 14);;
let q2 = add 28 q2;;   (* [15, 18, 19, 21, 26, 26, 27, 28, 29, 38]*)
let q2 = add 17 q2;;   (* [15, 17, 18, 19, 21, 26, 26, 27, 28, 29, 38]*)
let q2 = add 19 q2;;   (* [15, 17, 18, 19, 19, 21, 26, 26, 27, 28, 29, 38]*)
let q2 = add 26 q2;;   (* [15, 17, 18, 19, 19, 21, 26, 26, 26, 27, 28, 29, 38]*)
let q2 = add 10 q2;;   (* [10, 15, 17, 18, 19, 19, 21, 26, 26, 26, 27, 28, 29, 38]*)
let (element, q2) = delete_min q2;;   (* 10 * [15, 17, 18, 19, 19, 21, 26, 26, 26, 27, 28, 29, 38]*)
assert(element = 10);;
let q2 = add 17 q2;;   (* [15, 17, 17, 18, 19, 19, 21, 26, 26, 26, 27, 28, 29, 38]*)
let q2 = add 24 q2;;   (* [15, 17, 17, 18, 19, 19, 21, 24, 26, 26, 26, 27, 28, 29, 38]*)
let (element, q2) = delete_min q2;;   (* 15 * [17, 17, 18, 19, 19, 21, 24, 26, 26, 26, 27, 28, 29, 38]*)
assert(element = 15);;
let q2 = add 7 q2;;   (* [7, 17, 17, 18, 19, 19, 21, 24, 26, 26, 26, 27, 28, 29, 38]*)
let (element, q2) = delete_min q2;;   (* 7 * [17, 17, 18, 19, 19, 21, 24, 26, 26, 26, 27, 28, 29, 38]*)
assert(element = 7);;
let q2 = add 1 q2;;   (* [1, 17, 17, 18, 19, 19, 21, 24, 26, 26, 26, 27, 28, 29, 38]*)
let (element, q2) = delete_min q2;;   (* 1 * [17, 17, 18, 19, 19, 21, 24, 26, 26, 26, 27, 28, 29, 38]*)
assert(element = 1);;
let q2 = add 5 q2;;   (* [5, 17, 17, 18, 19, 19, 21, 24, 26, 26, 26, 27, 28, 29, 38]*)
let q2 = add 19 q2;;   (* [5, 17, 17, 18, 19, 19, 19, 21, 24, 26, 26, 26, 27, 28, 29, 38]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 24 q3;;   (* [24]*)
let (element, q3) = delete_min q3;;   (* 24 * []*)
assert(element = 24);;
let q3 = add 38 q3;;   (* [38]*)
assert(is_empty q3 = false);;   (*[38]*)
let q3 = add 17 q3;;   (* [17, 38]*)
let q3 = add 10 q3;;   (* [10, 17, 38]*)
assert(is_empty q3 = false);;   (*[10, 17, 38]*)
let q3 = add 6 q3;;   (* [6, 10, 17, 38]*)
let q3 = add 17 q3;;   (* [6, 10, 17, 17, 38]*)
let (element, q3) = delete_min q3;;   (* 6 * [10, 17, 17, 38]*)
assert(element = 6);;
let q3 = add 34 q3;;   (* [10, 17, 17, 34, 38]*)
let q3 = add 29 q3;;   (* [10, 17, 17, 29, 34, 38]*)
let q3 = add 38 q3;;   (* [10, 17, 17, 29, 34, 38, 38]*)
let q3 = add 12 q3;;   (* [10, 12, 17, 17, 29, 34, 38, 38]*)
let q3 = add 15 q3;;   (* [10, 12, 15, 17, 17, 29, 34, 38, 38]*)
let (element, q3) = delete_min q3;;   (* 10 * [12, 15, 17, 17, 29, 34, 38, 38]*)
assert(element = 10);;
let q3 = add 17 q3;;   (* [12, 15, 17, 17, 17, 29, 34, 38, 38]*)
let q3 = add 29 q3;;   (* [12, 15, 17, 17, 17, 29, 29, 34, 38, 38]*)
let q3 = add 10 q3;;   (* [10, 12, 15, 17, 17, 17, 29, 29, 34, 38, 38]*)
let q3 = add 10 q3;;   (* [10, 10, 12, 15, 17, 17, 17, 29, 29, 34, 38, 38]*)
let q3 = add 15 q3;;   (* [10, 10, 12, 15, 15, 17, 17, 17, 29, 29, 34, 38, 38]*)
let (element, q3) = delete_min q3;;   (* 10 * [10, 12, 15, 15, 17, 17, 17, 29, 29, 34, 38, 38]*)
assert(element = 10);;
let (element, q3) = delete_min q3;;   (* 10 * [12, 15, 15, 17, 17, 17, 29, 29, 34, 38, 38]*)
assert(element = 10);;
let q3 = add 8 q3;;   (* [8, 12, 15, 15, 17, 17, 17, 29, 29, 34, 38, 38]*)
let q3 = add 5 q3;;   (* [5, 8, 12, 15, 15, 17, 17, 17, 29, 29, 34, 38, 38]*)
let q3 = add 27 q3;;   (* [5, 8, 12, 15, 15, 17, 17, 17, 27, 29, 29, 34, 38, 38]*)
let q3 = add 28 q3;;   (* [5, 8, 12, 15, 15, 17, 17, 17, 27, 28, 29, 29, 34, 38, 38]*)
let q3 = add 31 q3;;   (* [5, 8, 12, 15, 15, 17, 17, 17, 27, 28, 29, 29, 31, 34, 38, 38]*)
let q3 = add 12 q3;;   (* [5, 8, 12, 12, 15, 15, 17, 17, 17, 27, 28, 29, 29, 31, 34, 38, 38]*)
let q3 = add 38 q3;;   (* [5, 8, 12, 12, 15, 15, 17, 17, 17, 27, 28, 29, 29, 31, 34, 38, 38, 38]*)
let q3 = add 18 q3;;   (* [5, 8, 12, 12, 15, 15, 17, 17, 17, 18, 27, 28, 29, 29, 31, 34, 38, 38, 38]*)
let (element, q3) = delete_min q3;;   (* 5 * [8, 12, 12, 15, 15, 17, 17, 17, 18, 27, 28, 29, 29, 31, 34, 38, 38, 38]*)
assert(element = 5);;
let (element, q3) = delete_min q3;;   (* 8 * [12, 12, 15, 15, 17, 17, 17, 18, 27, 28, 29, 29, 31, 34, 38, 38, 38]*)
assert(element = 8);;
let q3 = add 30 q3;;   (* [12, 12, 15, 15, 17, 17, 17, 18, 27, 28, 29, 29, 30, 31, 34, 38, 38, 38]*)
let q3 = add 3 q3;;   (* [3, 12, 12, 15, 15, 17, 17, 17, 18, 27, 28, 29, 29, 30, 31, 34, 38, 38, 38]*)
assert(is_empty q3 = false);;   (*[3, 12, 12, 15, 15, 17, 17, 17, 18, 27, 28, 29, 29, 30, 31, 34, 38, 38, 38]*)
let q3 = add 14 q3;;   (* [3, 12, 12, 14, 15, 15, 17, 17, 17, 18, 27, 28, 29, 29, 30, 31, 34, 38, 38, 38]*)
let q3 = add 22 q3;;   (* [3, 12, 12, 14, 15, 15, 17, 17, 17, 18, 22, 27, 28, 29, 29, 30, 31, 34, 38, 38, 38]*)
let (element, q3) = delete_min q3;;   (* 3 * [12, 12, 14, 15, 15, 17, 17, 17, 18, 22, 27, 28, 29, 29, 30, 31, 34, 38, 38, 38]*)
assert(element = 3);;
let q3 = add 15 q3;;   (* [12, 12, 14, 15, 15, 15, 17, 17, 17, 18, 22, 27, 28, 29, 29, 30, 31, 34, 38, 38, 38]*)
let (element, q3) = delete_min q3;;   (* 12 * [12, 14, 15, 15, 15, 17, 17, 17, 18, 22, 27, 28, 29, 29, 30, 31, 34, 38, 38, 38]*)
assert(element = 12);;
let q3 = add 18 q3;;   (* [12, 14, 15, 15, 15, 17, 17, 17, 18, 18, 22, 27, 28, 29, 29, 30, 31, 34, 38, 38, 38]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 3 q4;;   (* [3]*)
let q4 = add 6 q4;;   (* [3, 6]*)
let q4 = add 23 q4;;   (* [3, 6, 23]*)
let (element, q4) = delete_min q4;;   (* 3 * [6, 23]*)
assert(element = 3);;
let q4 = add 10 q4;;   (* [6, 10, 23]*)
let q4 = add 7 q4;;   (* [6, 7, 10, 23]*)
let q4 = add 17 q4;;   (* [6, 7, 10, 17, 23]*)
let q4 = add 36 q4;;   (* [6, 7, 10, 17, 23, 36]*)
let q4 = add 33 q4;;   (* [6, 7, 10, 17, 23, 33, 36]*)
assert(is_empty q4 = false);;   (*[6, 7, 10, 17, 23, 33, 36]*)
let (element, q4) = delete_min q4;;   (* 6 * [7, 10, 17, 23, 33, 36]*)
assert(element = 6);;
let q4 = add 18 q4;;   (* [7, 10, 17, 18, 23, 33, 36]*)
let q4 = add 18 q4;;   (* [7, 10, 17, 18, 18, 23, 33, 36]*)
let (element, q4) = delete_min q4;;   (* 7 * [10, 17, 18, 18, 23, 33, 36]*)
assert(element = 7);;
let q4 = add 37 q4;;   (* [10, 17, 18, 18, 23, 33, 36, 37]*)
let (element, q4) = delete_min q4;;   (* 10 * [17, 18, 18, 23, 33, 36, 37]*)
assert(element = 10);;
let (element, q4) = delete_min q4;;   (* 17 * [18, 18, 23, 33, 36, 37]*)
assert(element = 17);;
let (element, q4) = delete_min q4;;   (* 18 * [18, 23, 33, 36, 37]*)
assert(element = 18);;
let q4 = add 19 q4;;   (* [18, 19, 23, 33, 36, 37]*)
let q4 = add 28 q4;;   (* [18, 19, 23, 28, 33, 36, 37]*)
let q4 = add 35 q4;;   (* [18, 19, 23, 28, 33, 35, 36, 37]*)
let q4 = add 23 q4;;   (* [18, 19, 23, 23, 28, 33, 35, 36, 37]*)
let q4 = add 22 q4;;   (* [18, 19, 22, 23, 23, 28, 33, 35, 36, 37]*)
assert(is_empty q4 = false);;   (*[18, 19, 22, 23, 23, 28, 33, 35, 36, 37]*)
let (element, q4) = delete_min q4;;   (* 18 * [19, 22, 23, 23, 28, 33, 35, 36, 37]*)
assert(element = 18);;
let q4 = add 20 q4;;   (* [19, 20, 22, 23, 23, 28, 33, 35, 36, 37]*)
let q4 = add 35 q4;;   (* [19, 20, 22, 23, 23, 28, 33, 35, 35, 36, 37]*)
let (element, q4) = delete_min q4;;   (* 19 * [20, 22, 23, 23, 28, 33, 35, 35, 36, 37]*)
assert(element = 19);;
let q4 = add 24 q4;;   (* [20, 22, 23, 23, 24, 28, 33, 35, 35, 36, 37]*)
let (element, q4) = delete_min q4;;   (* 20 * [22, 23, 23, 24, 28, 33, 35, 35, 36, 37]*)
assert(element = 20);;
let q4 = add 39 q4;;   (* [22, 23, 23, 24, 28, 33, 35, 35, 36, 37, 39]*)
let q4 = add 22 q4;;   (* [22, 22, 23, 23, 24, 28, 33, 35, 35, 36, 37, 39]*)
let (element, q4) = delete_min q4;;   (* 22 * [22, 23, 23, 24, 28, 33, 35, 35, 36, 37, 39]*)
assert(element = 22);;
assert(is_empty q4 = false);;   (*[22, 23, 23, 24, 28, 33, 35, 35, 36, 37, 39]*)
let q4 = add 36 q4;;   (* [22, 23, 23, 24, 28, 33, 35, 35, 36, 36, 37, 39]*)
let q4 = add 14 q4;;   (* [14, 22, 23, 23, 24, 28, 33, 35, 35, 36, 36, 37, 39]*)
assert(is_empty q4 = false);;   (*[14, 22, 23, 23, 24, 28, 33, 35, 35, 36, 36, 37, 39]*)
let (element, q4) = delete_min q4;;   (* 14 * [22, 23, 23, 24, 28, 33, 35, 35, 36, 36, 37, 39]*)
assert(element = 14);;
let q4 = add 18 q4;;   (* [18, 22, 23, 23, 24, 28, 33, 35, 35, 36, 36, 37, 39]*)
let q4 = add 39 q4;;   (* [18, 22, 23, 23, 24, 28, 33, 35, 35, 36, 36, 37, 39, 39]*)
let q4 = add 15 q4;;   (* [15, 18, 22, 23, 23, 24, 28, 33, 35, 35, 36, 36, 37, 39, 39]*)
let q4 = add 39 q4;;   (* [15, 18, 22, 23, 23, 24, 28, 33, 35, 35, 36, 36, 37, 39, 39, 39]*)

(* -------q5------ *)
let q5 = empty;;
let q5 = add 9 q5;;   (* [9]*)
assert(is_empty q5 = false);;   (*[9]*)
let q5 = add 2 q5;;   (* [2, 9]*)
let q5 = add 19 q5;;   (* [2, 9, 19]*)
let (element, q5) = delete_min q5;;   (* 2 * [9, 19]*)
assert(element = 2);;
let q5 = add 21 q5;;   (* [9, 19, 21]*)
let (element, q5) = delete_min q5;;   (* 9 * [19, 21]*)
assert(element = 9);;
let (element, q5) = delete_min q5;;   (* 19 * [21]*)
assert(element = 19);;
let q5 = add 20 q5;;   (* [20, 21]*)
let q5 = add 35 q5;;   (* [20, 21, 35]*)
let q5 = add 21 q5;;   (* [20, 21, 21, 35]*)
let q5 = add 23 q5;;   (* [20, 21, 21, 23, 35]*)
assert(is_empty q5 = false);;   (*[20, 21, 21, 23, 35]*)
assert(is_empty q5 = false);;   (*[20, 21, 21, 23, 35]*)
let q5 = add 27 q5;;   (* [20, 21, 21, 23, 27, 35]*)
let (element, q5) = delete_min q5;;   (* 20 * [21, 21, 23, 27, 35]*)
assert(element = 20);;
let q5 = add 22 q5;;   (* [21, 21, 22, 23, 27, 35]*)
let (element, q5) = delete_min q5;;   (* 21 * [21, 22, 23, 27, 35]*)
assert(element = 21);;
assert(is_empty q5 = false);;   (*[21, 22, 23, 27, 35]*)
let (element, q5) = delete_min q5;;   (* 21 * [22, 23, 27, 35]*)
assert(element = 21);;
let q5 = add 39 q5;;   (* [22, 23, 27, 35, 39]*)
let (element, q5) = delete_min q5;;   (* 22 * [23, 27, 35, 39]*)
assert(element = 22);;
let q5 = add 27 q5;;   (* [23, 27, 27, 35, 39]*)
let (element, q5) = delete_min q5;;   (* 23 * [27, 27, 35, 39]*)
assert(element = 23);;
assert(is_empty q5 = false);;   (*[27, 27, 35, 39]*)
let q5 = add 20 q5;;   (* [20, 27, 27, 35, 39]*)
let (element, q5) = delete_min q5;;   (* 20 * [27, 27, 35, 39]*)
assert(element = 20);;
let q5 = add 28 q5;;   (* [27, 27, 28, 35, 39]*)
let q5 = add 27 q5;;   (* [27, 27, 27, 28, 35, 39]*)
let q5 = add 39 q5;;   (* [27, 27, 27, 28, 35, 39, 39]*)
assert(is_empty q5 = false);;   (*[27, 27, 27, 28, 35, 39, 39]*)
let q5 = add 24 q5;;   (* [24, 27, 27, 27, 28, 35, 39, 39]*)
let q5 = add 25 q5;;   (* [24, 25, 27, 27, 27, 28, 35, 39, 39]*)
let q5 = add 9 q5;;   (* [9, 24, 25, 27, 27, 27, 28, 35, 39, 39]*)
let q5 = add 37 q5;;   (* [9, 24, 25, 27, 27, 27, 28, 35, 37, 39, 39]*)
let (element, q5) = delete_min q5;;   (* 9 * [24, 25, 27, 27, 27, 28, 35, 37, 39, 39]*)
assert(element = 9);;
let (element, q5) = delete_min q5;;   (* 24 * [25, 27, 27, 27, 28, 35, 37, 39, 39]*)
assert(element = 24);;
let (element, q5) = delete_min q5;;   (* 25 * [27, 27, 27, 28, 35, 37, 39, 39]*)
assert(element = 25);;
let q5 = add 6 q5;;   (* [6, 27, 27, 27, 28, 35, 37, 39, 39]*)
let q5 = add 8 q5;;   (* [6, 8, 27, 27, 27, 28, 35, 37, 39, 39]*)
let q5 = add 20 q5;;   (* [6, 8, 20, 27, 27, 27, 28, 35, 37, 39, 39]*)
let q5 = add 5 q5;;   (* [5, 6, 8, 20, 27, 27, 27, 28, 35, 37, 39, 39]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[5, 5, 6, 8, 12, 14, 15, 15, 15, 15, 15, 15, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 20, 20, 21, 22, 22, 23, 23, 24, 24, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39]*)
let (element, q) = delete_min q;;   (* 5 * [5, 6, 8, 12, 14, 15, 15, 15, 15, 15, 15, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 20, 20, 21, 22, 22, 23, 23, 24, 24, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 5 * [6, 8, 12, 14, 15, 15, 15, 15, 15, 15, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 20, 20, 21, 22, 22, 23, 23, 24, 24, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 6 * [8, 12, 14, 15, 15, 15, 15, 15, 15, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 20, 20, 21, 22, 22, 23, 23, 24, 24, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 8 * [12, 14, 15, 15, 15, 15, 15, 15, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 20, 20, 21, 22, 22, 23, 23, 24, 24, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 12 * [14, 15, 15, 15, 15, 15, 15, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 20, 20, 21, 22, 22, 23, 23, 24, 24, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 14 * [15, 15, 15, 15, 15, 15, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 20, 20, 21, 22, 22, 23, 23, 24, 24, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [15, 15, 15, 15, 15, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 20, 20, 21, 22, 22, 23, 23, 24, 24, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [15, 15, 15, 15, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 20, 20, 21, 22, 22, 23, 23, 24, 24, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [15, 15, 15, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 20, 20, 21, 22, 22, 23, 23, 24, 24, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [15, 15, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 20, 20, 21, 22, 22, 23, 23, 24, 24, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [15, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 20, 20, 21, 22, 22, 23, 23, 24, 24, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 20, 20, 21, 22, 22, 23, 23, 24, 24, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 17 * [17, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 20, 20, 21, 22, 22, 23, 23, 24, 24, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 20, 20, 21, 22, 22, 23, 23, 24, 24, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 20, 20, 21, 22, 22, 23, 23, 24, 24, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [17, 17, 18, 18, 18, 18, 19, 19, 19, 20, 20, 21, 22, 22, 23, 23, 24, 24, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [17, 18, 18, 18, 18, 19, 19, 19, 20, 20, 21, 22, 22, 23, 23, 24, 24, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [18, 18, 18, 18, 19, 19, 19, 20, 20, 21, 22, 22, 23, 23, 24, 24, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [18, 18, 18, 19, 19, 19, 20, 20, 21, 22, 22, 23, 23, 24, 24, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [18, 18, 19, 19, 19, 20, 20, 21, 22, 22, 23, 23, 24, 24, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [18, 19, 19, 19, 20, 20, 21, 22, 22, 23, 23, 24, 24, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [19, 19, 19, 20, 20, 21, 22, 22, 23, 23, 24, 24, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [19, 19, 20, 20, 21, 22, 22, 23, 23, 24, 24, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [19, 20, 20, 21, 22, 22, 23, 23, 24, 24, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [20, 20, 21, 22, 22, 23, 23, 24, 24, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [20, 21, 22, 22, 23, 23, 24, 24, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [21, 22, 22, 23, 23, 24, 24, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [22, 22, 23, 23, 24, 24, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [22, 23, 23, 24, 24, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [23, 23, 24, 24, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [23, 24, 24, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [24, 24, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [24, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 26 * [26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [26, 26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [26, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [29, 29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [29, 29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [29, 29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [29, 29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [29, 30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [30, 31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [31, 33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [33, 34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 33 * [34, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 39, 39, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 39, 39, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39, 39, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39, 39, 39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39, 39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST97----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 12 q1;;   (* [12]*)
let q1 = add 32 q1;;   (* [12, 32]*)
let q1 = add 9 q1;;   (* [9, 12, 32]*)
let q1 = add 10 q1;;   (* [9, 10, 12, 32]*)
let q1 = add 11 q1;;   (* [9, 10, 11, 12, 32]*)
let q1 = add 30 q1;;   (* [9, 10, 11, 12, 30, 32]*)
let q1 = add 27 q1;;   (* [9, 10, 11, 12, 27, 30, 32]*)
let (element, q1) = delete_min q1;;   (* 9 * [10, 11, 12, 27, 30, 32]*)
assert(element = 9);;
let (element, q1) = delete_min q1;;   (* 10 * [11, 12, 27, 30, 32]*)
assert(element = 10);;
let (element, q1) = delete_min q1;;   (* 11 * [12, 27, 30, 32]*)
assert(element = 11);;
let (element, q1) = delete_min q1;;   (* 12 * [27, 30, 32]*)
assert(element = 12);;
assert(is_empty q1 = false);;   (*[27, 30, 32]*)
let q1 = add 14 q1;;   (* [14, 27, 30, 32]*)
let q1 = add 34 q1;;   (* [14, 27, 30, 32, 34]*)
let q1 = add 31 q1;;   (* [14, 27, 30, 31, 32, 34]*)
let q1 = add 6 q1;;   (* [6, 14, 27, 30, 31, 32, 34]*)
assert(is_empty q1 = false);;   (*[6, 14, 27, 30, 31, 32, 34]*)
let (element, q1) = delete_min q1;;   (* 6 * [14, 27, 30, 31, 32, 34]*)
assert(element = 6);;
let q1 = add 32 q1;;   (* [14, 27, 30, 31, 32, 32, 34]*)
let (element, q1) = delete_min q1;;   (* 14 * [27, 30, 31, 32, 32, 34]*)
assert(element = 14);;
let q1 = add 12 q1;;   (* [12, 27, 30, 31, 32, 32, 34]*)
let (element, q1) = delete_min q1;;   (* 12 * [27, 30, 31, 32, 32, 34]*)
assert(element = 12);;
let q1 = add 22 q1;;   (* [22, 27, 30, 31, 32, 32, 34]*)
assert(is_empty q1 = false);;   (*[22, 27, 30, 31, 32, 32, 34]*)
let q1 = add 9 q1;;   (* [9, 22, 27, 30, 31, 32, 32, 34]*)
let (element, q1) = delete_min q1;;   (* 9 * [22, 27, 30, 31, 32, 32, 34]*)
assert(element = 9);;
let q1 = add 9 q1;;   (* [9, 22, 27, 30, 31, 32, 32, 34]*)
let (element, q1) = delete_min q1;;   (* 9 * [22, 27, 30, 31, 32, 32, 34]*)
assert(element = 9);;
let (element, q1) = delete_min q1;;   (* 22 * [27, 30, 31, 32, 32, 34]*)
assert(element = 22);;
let q1 = add 22 q1;;   (* [22, 27, 30, 31, 32, 32, 34]*)
assert(is_empty q1 = false);;   (*[22, 27, 30, 31, 32, 32, 34]*)
let (element, q1) = delete_min q1;;   (* 22 * [27, 30, 31, 32, 32, 34]*)
assert(element = 22);;
let (element, q1) = delete_min q1;;   (* 27 * [30, 31, 32, 32, 34]*)
assert(element = 27);;
let q1 = add 20 q1;;   (* [20, 30, 31, 32, 32, 34]*)
let (element, q1) = delete_min q1;;   (* 20 * [30, 31, 32, 32, 34]*)
assert(element = 20);;
let (element, q1) = delete_min q1;;   (* 30 * [31, 32, 32, 34]*)
assert(element = 30);;
let (element, q1) = delete_min q1;;   (* 31 * [32, 32, 34]*)
assert(element = 31);;
let q1 = add 27 q1;;   (* [27, 32, 32, 34]*)
let q1 = add 27 q1;;   (* [27, 27, 32, 32, 34]*)
let (element, q1) = delete_min q1;;   (* 27 * [27, 32, 32, 34]*)
assert(element = 27);;
let (element, q1) = delete_min q1;;   (* 27 * [32, 32, 34]*)
assert(element = 27);;
let (element, q1) = delete_min q1;;   (* 32 * [32, 34]*)
assert(element = 32);;
assert(is_empty q1 = false);;   (*[32, 34]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 15 q2;;   (* [15]*)
let q2 = add 8 q2;;   (* [8, 15]*)
let (element, q2) = delete_min q2;;   (* 8 * [15]*)
assert(element = 8);;
let q2 = add 7 q2;;   (* [7, 15]*)
let q2 = add 7 q2;;   (* [7, 7, 15]*)
let q2 = add 28 q2;;   (* [7, 7, 15, 28]*)
let q2 = add 39 q2;;   (* [7, 7, 15, 28, 39]*)
let (element, q2) = delete_min q2;;   (* 7 * [7, 15, 28, 39]*)
assert(element = 7);;
let q2 = add 26 q2;;   (* [7, 15, 26, 28, 39]*)
let (element, q2) = delete_min q2;;   (* 7 * [15, 26, 28, 39]*)
assert(element = 7);;
let (element, q2) = delete_min q2;;   (* 15 * [26, 28, 39]*)
assert(element = 15);;
let q2 = add 9 q2;;   (* [9, 26, 28, 39]*)
let q2 = add 11 q2;;   (* [9, 11, 26, 28, 39]*)
let q2 = add 13 q2;;   (* [9, 11, 13, 26, 28, 39]*)
let q2 = add 32 q2;;   (* [9, 11, 13, 26, 28, 32, 39]*)
let q2 = add 15 q2;;   (* [9, 11, 13, 15, 26, 28, 32, 39]*)
let (element, q2) = delete_min q2;;   (* 9 * [11, 13, 15, 26, 28, 32, 39]*)
assert(element = 9);;
let q2 = add 38 q2;;   (* [11, 13, 15, 26, 28, 32, 38, 39]*)
let q2 = add 21 q2;;   (* [11, 13, 15, 21, 26, 28, 32, 38, 39]*)
let q2 = add 16 q2;;   (* [11, 13, 15, 16, 21, 26, 28, 32, 38, 39]*)
let (element, q2) = delete_min q2;;   (* 11 * [13, 15, 16, 21, 26, 28, 32, 38, 39]*)
assert(element = 11);;
let q2 = add 23 q2;;   (* [13, 15, 16, 21, 23, 26, 28, 32, 38, 39]*)
let (element, q2) = delete_min q2;;   (* 13 * [15, 16, 21, 23, 26, 28, 32, 38, 39]*)
assert(element = 13);;
let (element, q2) = delete_min q2;;   (* 15 * [16, 21, 23, 26, 28, 32, 38, 39]*)
assert(element = 15);;
let q2 = add 10 q2;;   (* [10, 16, 21, 23, 26, 28, 32, 38, 39]*)
let (element, q2) = delete_min q2;;   (* 10 * [16, 21, 23, 26, 28, 32, 38, 39]*)
assert(element = 10);;
let q2 = add 3 q2;;   (* [3, 16, 21, 23, 26, 28, 32, 38, 39]*)
let q2 = add 7 q2;;   (* [3, 7, 16, 21, 23, 26, 28, 32, 38, 39]*)
let q2 = add 39 q2;;   (* [3, 7, 16, 21, 23, 26, 28, 32, 38, 39, 39]*)
let (element, q2) = delete_min q2;;   (* 3 * [7, 16, 21, 23, 26, 28, 32, 38, 39, 39]*)
assert(element = 3);;
let q2 = add 26 q2;;   (* [7, 16, 21, 23, 26, 26, 28, 32, 38, 39, 39]*)
assert(is_empty q2 = false);;   (*[7, 16, 21, 23, 26, 26, 28, 32, 38, 39, 39]*)
let (element, q2) = delete_min q2;;   (* 7 * [16, 21, 23, 26, 26, 28, 32, 38, 39, 39]*)
assert(element = 7);;
let (element, q2) = delete_min q2;;   (* 16 * [21, 23, 26, 26, 28, 32, 38, 39, 39]*)
assert(element = 16);;
let q2 = add 0 q2;;   (* [0, 21, 23, 26, 26, 28, 32, 38, 39, 39]*)
let q2 = add 5 q2;;   (* [0, 5, 21, 23, 26, 26, 28, 32, 38, 39, 39]*)
let q2 = add 38 q2;;   (* [0, 5, 21, 23, 26, 26, 28, 32, 38, 38, 39, 39]*)
let q2 = add 26 q2;;   (* [0, 5, 21, 23, 26, 26, 26, 28, 32, 38, 38, 39, 39]*)
let q2 = add 8 q2;;   (* [0, 5, 8, 21, 23, 26, 26, 26, 28, 32, 38, 38, 39, 39]*)
let q2 = add 3 q2;;   (* [0, 3, 5, 8, 21, 23, 26, 26, 26, 28, 32, 38, 38, 39, 39]*)
let q2 = add 7 q2;;   (* [0, 3, 5, 7, 8, 21, 23, 26, 26, 26, 28, 32, 38, 38, 39, 39]*)
let (element, q2) = delete_min q2;;   (* 0 * [3, 5, 7, 8, 21, 23, 26, 26, 26, 28, 32, 38, 38, 39, 39]*)
assert(element = 0);;
let q2 = add 19 q2;;   (* [3, 5, 7, 8, 19, 21, 23, 26, 26, 26, 28, 32, 38, 38, 39, 39]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 39 q3;;   (* [39]*)
let q3 = add 10 q3;;   (* [10, 39]*)
assert(is_empty q3 = false);;   (*[10, 39]*)
let q3 = add 1 q3;;   (* [1, 10, 39]*)
let q3 = add 37 q3;;   (* [1, 10, 37, 39]*)
let q3 = add 17 q3;;   (* [1, 10, 17, 37, 39]*)
let q3 = add 2 q3;;   (* [1, 2, 10, 17, 37, 39]*)
let (element, q3) = delete_min q3;;   (* 1 * [2, 10, 17, 37, 39]*)
assert(element = 1);;
let q3 = add 28 q3;;   (* [2, 10, 17, 28, 37, 39]*)
assert(is_empty q3 = false);;   (*[2, 10, 17, 28, 37, 39]*)
let q3 = add 29 q3;;   (* [2, 10, 17, 28, 29, 37, 39]*)
let q3 = add 20 q3;;   (* [2, 10, 17, 20, 28, 29, 37, 39]*)
assert(is_empty q3 = false);;   (*[2, 10, 17, 20, 28, 29, 37, 39]*)
let (element, q3) = delete_min q3;;   (* 2 * [10, 17, 20, 28, 29, 37, 39]*)
assert(element = 2);;
let q3 = add 23 q3;;   (* [10, 17, 20, 23, 28, 29, 37, 39]*)
let q3 = add 20 q3;;   (* [10, 17, 20, 20, 23, 28, 29, 37, 39]*)
let (element, q3) = delete_min q3;;   (* 10 * [17, 20, 20, 23, 28, 29, 37, 39]*)
assert(element = 10);;
let q3 = add 16 q3;;   (* [16, 17, 20, 20, 23, 28, 29, 37, 39]*)
let q3 = add 10 q3;;   (* [10, 16, 17, 20, 20, 23, 28, 29, 37, 39]*)
let (element, q3) = delete_min q3;;   (* 10 * [16, 17, 20, 20, 23, 28, 29, 37, 39]*)
assert(element = 10);;
let (element, q3) = delete_min q3;;   (* 16 * [17, 20, 20, 23, 28, 29, 37, 39]*)
assert(element = 16);;
let q3 = add 28 q3;;   (* [17, 20, 20, 23, 28, 28, 29, 37, 39]*)
let q3 = add 37 q3;;   (* [17, 20, 20, 23, 28, 28, 29, 37, 37, 39]*)
let q3 = add 1 q3;;   (* [1, 17, 20, 20, 23, 28, 28, 29, 37, 37, 39]*)
let (element, q3) = delete_min q3;;   (* 1 * [17, 20, 20, 23, 28, 28, 29, 37, 37, 39]*)
assert(element = 1);;
let q3 = add 18 q3;;   (* [17, 18, 20, 20, 23, 28, 28, 29, 37, 37, 39]*)
let (element, q3) = delete_min q3;;   (* 17 * [18, 20, 20, 23, 28, 28, 29, 37, 37, 39]*)
assert(element = 17);;
let q3 = add 24 q3;;   (* [18, 20, 20, 23, 24, 28, 28, 29, 37, 37, 39]*)
let (element, q3) = delete_min q3;;   (* 18 * [20, 20, 23, 24, 28, 28, 29, 37, 37, 39]*)
assert(element = 18);;
let q3 = add 6 q3;;   (* [6, 20, 20, 23, 24, 28, 28, 29, 37, 37, 39]*)
assert(is_empty q3 = false);;   (*[6, 20, 20, 23, 24, 28, 28, 29, 37, 37, 39]*)
let q3 = add 24 q3;;   (* [6, 20, 20, 23, 24, 24, 28, 28, 29, 37, 37, 39]*)
let (element, q3) = delete_min q3;;   (* 6 * [20, 20, 23, 24, 24, 28, 28, 29, 37, 37, 39]*)
assert(element = 6);;
let q3 = add 19 q3;;   (* [19, 20, 20, 23, 24, 24, 28, 28, 29, 37, 37, 39]*)
let q3 = add 8 q3;;   (* [8, 19, 20, 20, 23, 24, 24, 28, 28, 29, 37, 37, 39]*)
let q3 = add 5 q3;;   (* [5, 8, 19, 20, 20, 23, 24, 24, 28, 28, 29, 37, 37, 39]*)
let q3 = add 36 q3;;   (* [5, 8, 19, 20, 20, 23, 24, 24, 28, 28, 29, 36, 37, 37, 39]*)
let q3 = add 38 q3;;   (* [5, 8, 19, 20, 20, 23, 24, 24, 28, 28, 29, 36, 37, 37, 38, 39]*)
let q3 = add 6 q3;;   (* [5, 6, 8, 19, 20, 20, 23, 24, 24, 28, 28, 29, 36, 37, 37, 38, 39]*)
let q3 = add 15 q3;;   (* [5, 6, 8, 15, 19, 20, 20, 23, 24, 24, 28, 28, 29, 36, 37, 37, 38, 39]*)
assert(is_empty q3 = false);;   (*[5, 6, 8, 15, 19, 20, 20, 23, 24, 24, 28, 28, 29, 36, 37, 37, 38, 39]*)
let q3 = add 30 q3;;   (* [5, 6, 8, 15, 19, 20, 20, 23, 24, 24, 28, 28, 29, 30, 36, 37, 37, 38, 39]*)
let q3 = add 14 q3;;   (* [5, 6, 8, 14, 15, 19, 20, 20, 23, 24, 24, 28, 28, 29, 30, 36, 37, 37, 38, 39]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 34 q4;;   (* [34]*)
let q4 = add 34 q4;;   (* [34, 34]*)
let (element, q4) = delete_min q4;;   (* 34 * [34]*)
assert(element = 34);;
assert(is_empty q4 = false);;   (*[34]*)
let q4 = add 10 q4;;   (* [10, 34]*)
let q4 = add 26 q4;;   (* [10, 26, 34]*)
let (element, q4) = delete_min q4;;   (* 10 * [26, 34]*)
assert(element = 10);;
let q4 = add 25 q4;;   (* [25, 26, 34]*)
let q4 = add 9 q4;;   (* [9, 25, 26, 34]*)
let q4 = add 9 q4;;   (* [9, 9, 25, 26, 34]*)
let q4 = add 32 q4;;   (* [9, 9, 25, 26, 32, 34]*)
let (element, q4) = delete_min q4;;   (* 9 * [9, 25, 26, 32, 34]*)
assert(element = 9);;
let q4 = add 17 q4;;   (* [9, 17, 25, 26, 32, 34]*)
let q4 = add 10 q4;;   (* [9, 10, 17, 25, 26, 32, 34]*)
let q4 = add 26 q4;;   (* [9, 10, 17, 25, 26, 26, 32, 34]*)
let q4 = add 3 q4;;   (* [3, 9, 10, 17, 25, 26, 26, 32, 34]*)
let q4 = add 15 q4;;   (* [3, 9, 10, 15, 17, 25, 26, 26, 32, 34]*)
let q4 = add 36 q4;;   (* [3, 9, 10, 15, 17, 25, 26, 26, 32, 34, 36]*)
let q4 = add 14 q4;;   (* [3, 9, 10, 14, 15, 17, 25, 26, 26, 32, 34, 36]*)
let q4 = add 11 q4;;   (* [3, 9, 10, 11, 14, 15, 17, 25, 26, 26, 32, 34, 36]*)
let q4 = add 30 q4;;   (* [3, 9, 10, 11, 14, 15, 17, 25, 26, 26, 30, 32, 34, 36]*)
let q4 = add 9 q4;;   (* [3, 9, 9, 10, 11, 14, 15, 17, 25, 26, 26, 30, 32, 34, 36]*)
let q4 = add 21 q4;;   (* [3, 9, 9, 10, 11, 14, 15, 17, 21, 25, 26, 26, 30, 32, 34, 36]*)
assert(is_empty q4 = false);;   (*[3, 9, 9, 10, 11, 14, 15, 17, 21, 25, 26, 26, 30, 32, 34, 36]*)
let q4 = add 4 q4;;   (* [3, 4, 9, 9, 10, 11, 14, 15, 17, 21, 25, 26, 26, 30, 32, 34, 36]*)
let q4 = add 34 q4;;   (* [3, 4, 9, 9, 10, 11, 14, 15, 17, 21, 25, 26, 26, 30, 32, 34, 34, 36]*)
let (element, q4) = delete_min q4;;   (* 3 * [4, 9, 9, 10, 11, 14, 15, 17, 21, 25, 26, 26, 30, 32, 34, 34, 36]*)
assert(element = 3);;
let (element, q4) = delete_min q4;;   (* 4 * [9, 9, 10, 11, 14, 15, 17, 21, 25, 26, 26, 30, 32, 34, 34, 36]*)
assert(element = 4);;
let q4 = add 33 q4;;   (* [9, 9, 10, 11, 14, 15, 17, 21, 25, 26, 26, 30, 32, 33, 34, 34, 36]*)
let (element, q4) = delete_min q4;;   (* 9 * [9, 10, 11, 14, 15, 17, 21, 25, 26, 26, 30, 32, 33, 34, 34, 36]*)
assert(element = 9);;
let (element, q4) = delete_min q4;;   (* 9 * [10, 11, 14, 15, 17, 21, 25, 26, 26, 30, 32, 33, 34, 34, 36]*)
assert(element = 9);;
let q4 = add 6 q4;;   (* [6, 10, 11, 14, 15, 17, 21, 25, 26, 26, 30, 32, 33, 34, 34, 36]*)
let (element, q4) = delete_min q4;;   (* 6 * [10, 11, 14, 15, 17, 21, 25, 26, 26, 30, 32, 33, 34, 34, 36]*)
assert(element = 6);;
let q4 = add 34 q4;;   (* [10, 11, 14, 15, 17, 21, 25, 26, 26, 30, 32, 33, 34, 34, 34, 36]*)
let q4 = add 20 q4;;   (* [10, 11, 14, 15, 17, 20, 21, 25, 26, 26, 30, 32, 33, 34, 34, 34, 36]*)
let (element, q4) = delete_min q4;;   (* 10 * [11, 14, 15, 17, 20, 21, 25, 26, 26, 30, 32, 33, 34, 34, 34, 36]*)
assert(element = 10);;
let (element, q4) = delete_min q4;;   (* 11 * [14, 15, 17, 20, 21, 25, 26, 26, 30, 32, 33, 34, 34, 34, 36]*)
assert(element = 11);;
let q4 = add 27 q4;;   (* [14, 15, 17, 20, 21, 25, 26, 26, 27, 30, 32, 33, 34, 34, 34, 36]*)
let q4 = add 26 q4;;   (* [14, 15, 17, 20, 21, 25, 26, 26, 26, 27, 30, 32, 33, 34, 34, 34, 36]*)
let (element, q4) = delete_min q4;;   (* 14 * [15, 17, 20, 21, 25, 26, 26, 26, 27, 30, 32, 33, 34, 34, 34, 36]*)
assert(element = 14);;
let q4 = add 19 q4;;   (* [15, 17, 19, 20, 21, 25, 26, 26, 26, 27, 30, 32, 33, 34, 34, 34, 36]*)
assert(is_empty q4 = false);;   (*[15, 17, 19, 20, 21, 25, 26, 26, 26, 27, 30, 32, 33, 34, 34, 34, 36]*)
let q4 = add 1 q4;;   (* [1, 15, 17, 19, 20, 21, 25, 26, 26, 26, 27, 30, 32, 33, 34, 34, 34, 36]*)

(* -------q5------ *)
let q5 = empty;;
let q5 = add 35 q5;;   (* [35]*)
let q5 = add 31 q5;;   (* [31, 35]*)
let q5 = add 15 q5;;   (* [15, 31, 35]*)
let q5 = add 15 q5;;   (* [15, 15, 31, 35]*)
let q5 = add 14 q5;;   (* [14, 15, 15, 31, 35]*)
let q5 = add 31 q5;;   (* [14, 15, 15, 31, 31, 35]*)
let q5 = add 10 q5;;   (* [10, 14, 15, 15, 31, 31, 35]*)
let (element, q5) = delete_min q5;;   (* 10 * [14, 15, 15, 31, 31, 35]*)
assert(element = 10);;
let q5 = add 10 q5;;   (* [10, 14, 15, 15, 31, 31, 35]*)
let q5 = add 23 q5;;   (* [10, 14, 15, 15, 23, 31, 31, 35]*)
let q5 = add 13 q5;;   (* [10, 13, 14, 15, 15, 23, 31, 31, 35]*)
let (element, q5) = delete_min q5;;   (* 10 * [13, 14, 15, 15, 23, 31, 31, 35]*)
assert(element = 10);;
let q5 = add 36 q5;;   (* [13, 14, 15, 15, 23, 31, 31, 35, 36]*)
let (element, q5) = delete_min q5;;   (* 13 * [14, 15, 15, 23, 31, 31, 35, 36]*)
assert(element = 13);;
let q5 = add 13 q5;;   (* [13, 14, 15, 15, 23, 31, 31, 35, 36]*)
assert(is_empty q5 = false);;   (*[13, 14, 15, 15, 23, 31, 31, 35, 36]*)
let (element, q5) = delete_min q5;;   (* 13 * [14, 15, 15, 23, 31, 31, 35, 36]*)
assert(element = 13);;
let q5 = add 30 q5;;   (* [14, 15, 15, 23, 30, 31, 31, 35, 36]*)
let q5 = add 10 q5;;   (* [10, 14, 15, 15, 23, 30, 31, 31, 35, 36]*)
let q5 = add 18 q5;;   (* [10, 14, 15, 15, 18, 23, 30, 31, 31, 35, 36]*)
assert(is_empty q5 = false);;   (*[10, 14, 15, 15, 18, 23, 30, 31, 31, 35, 36]*)
let (element, q5) = delete_min q5;;   (* 10 * [14, 15, 15, 18, 23, 30, 31, 31, 35, 36]*)
assert(element = 10);;
let q5 = add 30 q5;;   (* [14, 15, 15, 18, 23, 30, 30, 31, 31, 35, 36]*)
let (element, q5) = delete_min q5;;   (* 14 * [15, 15, 18, 23, 30, 30, 31, 31, 35, 36]*)
assert(element = 14);;
let q5 = add 29 q5;;   (* [15, 15, 18, 23, 29, 30, 30, 31, 31, 35, 36]*)
assert(is_empty q5 = false);;   (*[15, 15, 18, 23, 29, 30, 30, 31, 31, 35, 36]*)
let q5 = add 15 q5;;   (* [15, 15, 15, 18, 23, 29, 30, 30, 31, 31, 35, 36]*)
let q5 = add 19 q5;;   (* [15, 15, 15, 18, 19, 23, 29, 30, 30, 31, 31, 35, 36]*)
let (element, q5) = delete_min q5;;   (* 15 * [15, 15, 18, 19, 23, 29, 30, 30, 31, 31, 35, 36]*)
assert(element = 15);;
let q5 = add 34 q5;;   (* [15, 15, 18, 19, 23, 29, 30, 30, 31, 31, 34, 35, 36]*)
let q5 = add 36 q5;;   (* [15, 15, 18, 19, 23, 29, 30, 30, 31, 31, 34, 35, 36, 36]*)
let q5 = add 12 q5;;   (* [12, 15, 15, 18, 19, 23, 29, 30, 30, 31, 31, 34, 35, 36, 36]*)
let q5 = add 1 q5;;   (* [1, 12, 15, 15, 18, 19, 23, 29, 30, 30, 31, 31, 34, 35, 36, 36]*)
let q5 = add 1 q5;;   (* [1, 1, 12, 15, 15, 18, 19, 23, 29, 30, 30, 31, 31, 34, 35, 36, 36]*)
let q5 = add 29 q5;;   (* [1, 1, 12, 15, 15, 18, 19, 23, 29, 29, 30, 30, 31, 31, 34, 35, 36, 36]*)
let q5 = add 3 q5;;   (* [1, 1, 3, 12, 15, 15, 18, 19, 23, 29, 29, 30, 30, 31, 31, 34, 35, 36, 36]*)
let q5 = add 1 q5;;   (* [1, 1, 1, 3, 12, 15, 15, 18, 19, 23, 29, 29, 30, 30, 31, 31, 34, 35, 36, 36]*)
let q5 = add 27 q5;;   (* [1, 1, 1, 3, 12, 15, 15, 18, 19, 23, 27, 29, 29, 30, 30, 31, 31, 34, 35, 36, 36]*)
let q5 = add 0 q5;;   (* [0, 1, 1, 1, 3, 12, 15, 15, 18, 19, 23, 27, 29, 29, 30, 30, 31, 31, 34, 35, 36, 36]*)
let q5 = add 4 q5;;   (* [0, 1, 1, 1, 3, 4, 12, 15, 15, 18, 19, 23, 27, 29, 29, 30, 30, 31, 31, 34, 35, 36, 36]*)
let q5 = add 14 q5;;   (* [0, 1, 1, 1, 3, 4, 12, 14, 15, 15, 18, 19, 23, 27, 29, 29, 30, 30, 31, 31, 34, 35, 36, 36]*)
let (element, q5) = delete_min q5;;   (* 0 * [1, 1, 1, 3, 4, 12, 14, 15, 15, 18, 19, 23, 27, 29, 29, 30, 30, 31, 31, 34, 35, 36, 36]*)
assert(element = 0);;
let q5 = add 22 q5;;   (* [1, 1, 1, 3, 4, 12, 14, 15, 15, 18, 19, 22, 23, 27, 29, 29, 30, 30, 31, 31, 34, 35, 36, 36]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[1, 1, 1, 1, 3, 3, 4, 5, 5, 6, 7, 8, 8, 12, 14, 14, 15, 15, 15, 15, 17, 18, 19, 19, 19, 19, 20, 20, 20, 21, 21, 22, 23, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39]*)
let (element, q) = delete_min q;;   (* 1 * [1, 1, 1, 3, 3, 4, 5, 5, 6, 7, 8, 8, 12, 14, 14, 15, 15, 15, 15, 17, 18, 19, 19, 19, 19, 20, 20, 20, 21, 21, 22, 23, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 1);;
let (element, q) = delete_min q;;   (* 1 * [1, 1, 3, 3, 4, 5, 5, 6, 7, 8, 8, 12, 14, 14, 15, 15, 15, 15, 17, 18, 19, 19, 19, 19, 20, 20, 20, 21, 21, 22, 23, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 1);;
let (element, q) = delete_min q;;   (* 1 * [1, 3, 3, 4, 5, 5, 6, 7, 8, 8, 12, 14, 14, 15, 15, 15, 15, 17, 18, 19, 19, 19, 19, 20, 20, 20, 21, 21, 22, 23, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 1);;
let (element, q) = delete_min q;;   (* 1 * [3, 3, 4, 5, 5, 6, 7, 8, 8, 12, 14, 14, 15, 15, 15, 15, 17, 18, 19, 19, 19, 19, 20, 20, 20, 21, 21, 22, 23, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 1);;
let (element, q) = delete_min q;;   (* 3 * [3, 4, 5, 5, 6, 7, 8, 8, 12, 14, 14, 15, 15, 15, 15, 17, 18, 19, 19, 19, 19, 20, 20, 20, 21, 21, 22, 23, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 3);;
let (element, q) = delete_min q;;   (* 3 * [4, 5, 5, 6, 7, 8, 8, 12, 14, 14, 15, 15, 15, 15, 17, 18, 19, 19, 19, 19, 20, 20, 20, 21, 21, 22, 23, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 3);;
let (element, q) = delete_min q;;   (* 4 * [5, 5, 6, 7, 8, 8, 12, 14, 14, 15, 15, 15, 15, 17, 18, 19, 19, 19, 19, 20, 20, 20, 21, 21, 22, 23, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 5 * [5, 6, 7, 8, 8, 12, 14, 14, 15, 15, 15, 15, 17, 18, 19, 19, 19, 19, 20, 20, 20, 21, 21, 22, 23, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 5 * [6, 7, 8, 8, 12, 14, 14, 15, 15, 15, 15, 17, 18, 19, 19, 19, 19, 20, 20, 20, 21, 21, 22, 23, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 6 * [7, 8, 8, 12, 14, 14, 15, 15, 15, 15, 17, 18, 19, 19, 19, 19, 20, 20, 20, 21, 21, 22, 23, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 7 * [8, 8, 12, 14, 14, 15, 15, 15, 15, 17, 18, 19, 19, 19, 19, 20, 20, 20, 21, 21, 22, 23, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 8 * [8, 12, 14, 14, 15, 15, 15, 15, 17, 18, 19, 19, 19, 19, 20, 20, 20, 21, 21, 22, 23, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 8 * [12, 14, 14, 15, 15, 15, 15, 17, 18, 19, 19, 19, 19, 20, 20, 20, 21, 21, 22, 23, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 12 * [14, 14, 15, 15, 15, 15, 17, 18, 19, 19, 19, 19, 20, 20, 20, 21, 21, 22, 23, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 14 * [14, 15, 15, 15, 15, 17, 18, 19, 19, 19, 19, 20, 20, 20, 21, 21, 22, 23, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [15, 15, 15, 15, 17, 18, 19, 19, 19, 19, 20, 20, 20, 21, 21, 22, 23, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [15, 15, 15, 17, 18, 19, 19, 19, 19, 20, 20, 20, 21, 21, 22, 23, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [15, 15, 17, 18, 19, 19, 19, 19, 20, 20, 20, 21, 21, 22, 23, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [15, 17, 18, 19, 19, 19, 19, 20, 20, 20, 21, 21, 22, 23, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [17, 18, 19, 19, 19, 19, 20, 20, 20, 21, 21, 22, 23, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 17 * [18, 19, 19, 19, 19, 20, 20, 20, 21, 21, 22, 23, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [19, 19, 19, 19, 20, 20, 20, 21, 21, 22, 23, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [19, 19, 19, 20, 20, 20, 21, 21, 22, 23, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [19, 19, 20, 20, 20, 21, 21, 22, 23, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [19, 20, 20, 20, 21, 21, 22, 23, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [20, 20, 20, 21, 21, 22, 23, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 21, 21, 22, 23, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 21, 21, 22, 23, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [21, 21, 22, 23, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [21, 22, 23, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [22, 23, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [23, 23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [23, 23, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [23, 24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [24, 24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [24, 25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [25, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [26, 26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [26, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [26, 26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [26, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [29, 29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [29, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [30, 30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [30, 30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [30, 30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [30, 31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [37, 38, 38, 38, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [38, 38, 38, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST98----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 35 q1;;   (* [35]*)
let q1 = add 26 q1;;   (* [26, 35]*)
let (element, q1) = delete_min q1;;   (* 26 * [35]*)
assert(element = 26);;
let q1 = add 29 q1;;   (* [29, 35]*)
let q1 = add 28 q1;;   (* [28, 29, 35]*)
let q1 = add 10 q1;;   (* [10, 28, 29, 35]*)
let (element, q1) = delete_min q1;;   (* 10 * [28, 29, 35]*)
assert(element = 10);;
let (element, q1) = delete_min q1;;   (* 28 * [29, 35]*)
assert(element = 28);;
let q1 = add 27 q1;;   (* [27, 29, 35]*)
let q1 = add 0 q1;;   (* [0, 27, 29, 35]*)
let q1 = add 39 q1;;   (* [0, 27, 29, 35, 39]*)
let q1 = add 16 q1;;   (* [0, 16, 27, 29, 35, 39]*)
let q1 = add 34 q1;;   (* [0, 16, 27, 29, 34, 35, 39]*)
let (element, q1) = delete_min q1;;   (* 0 * [16, 27, 29, 34, 35, 39]*)
assert(element = 0);;
let q1 = add 2 q1;;   (* [2, 16, 27, 29, 34, 35, 39]*)
let (element, q1) = delete_min q1;;   (* 2 * [16, 27, 29, 34, 35, 39]*)
assert(element = 2);;
let q1 = add 37 q1;;   (* [16, 27, 29, 34, 35, 37, 39]*)
let (element, q1) = delete_min q1;;   (* 16 * [27, 29, 34, 35, 37, 39]*)
assert(element = 16);;
let (element, q1) = delete_min q1;;   (* 27 * [29, 34, 35, 37, 39]*)
assert(element = 27);;
let (element, q1) = delete_min q1;;   (* 29 * [34, 35, 37, 39]*)
assert(element = 29);;
let q1 = add 21 q1;;   (* [21, 34, 35, 37, 39]*)
let q1 = add 15 q1;;   (* [15, 21, 34, 35, 37, 39]*)
let q1 = add 31 q1;;   (* [15, 21, 31, 34, 35, 37, 39]*)
assert(is_empty q1 = false);;   (*[15, 21, 31, 34, 35, 37, 39]*)
let q1 = add 36 q1;;   (* [15, 21, 31, 34, 35, 36, 37, 39]*)
let q1 = add 35 q1;;   (* [15, 21, 31, 34, 35, 35, 36, 37, 39]*)
let q1 = add 1 q1;;   (* [1, 15, 21, 31, 34, 35, 35, 36, 37, 39]*)
let q1 = add 21 q1;;   (* [1, 15, 21, 21, 31, 34, 35, 35, 36, 37, 39]*)
let q1 = add 4 q1;;   (* [1, 4, 15, 21, 21, 31, 34, 35, 35, 36, 37, 39]*)
let q1 = add 22 q1;;   (* [1, 4, 15, 21, 21, 22, 31, 34, 35, 35, 36, 37, 39]*)
let (element, q1) = delete_min q1;;   (* 1 * [4, 15, 21, 21, 22, 31, 34, 35, 35, 36, 37, 39]*)
assert(element = 1);;
let q1 = add 16 q1;;   (* [4, 15, 16, 21, 21, 22, 31, 34, 35, 35, 36, 37, 39]*)
let q1 = add 4 q1;;   (* [4, 4, 15, 16, 21, 21, 22, 31, 34, 35, 35, 36, 37, 39]*)
let q1 = add 35 q1;;   (* [4, 4, 15, 16, 21, 21, 22, 31, 34, 35, 35, 35, 36, 37, 39]*)
let (element, q1) = delete_min q1;;   (* 4 * [4, 15, 16, 21, 21, 22, 31, 34, 35, 35, 35, 36, 37, 39]*)
assert(element = 4);;
assert(is_empty q1 = false);;   (*[4, 15, 16, 21, 21, 22, 31, 34, 35, 35, 35, 36, 37, 39]*)
let q1 = add 18 q1;;   (* [4, 15, 16, 18, 21, 21, 22, 31, 34, 35, 35, 35, 36, 37, 39]*)
let q1 = add 6 q1;;   (* [4, 6, 15, 16, 18, 21, 21, 22, 31, 34, 35, 35, 35, 36, 37, 39]*)
let q1 = add 14 q1;;   (* [4, 6, 14, 15, 16, 18, 21, 21, 22, 31, 34, 35, 35, 35, 36, 37, 39]*)
let q1 = add 5 q1;;   (* [4, 5, 6, 14, 15, 16, 18, 21, 21, 22, 31, 34, 35, 35, 35, 36, 37, 39]*)
assert(is_empty q1 = false);;   (*[4, 5, 6, 14, 15, 16, 18, 21, 21, 22, 31, 34, 35, 35, 35, 36, 37, 39]*)
let q1 = add 15 q1;;   (* [4, 5, 6, 14, 15, 15, 16, 18, 21, 21, 22, 31, 34, 35, 35, 35, 36, 37, 39]*)
let q1 = add 1 q1;;   (* [1, 4, 5, 6, 14, 15, 15, 16, 18, 21, 21, 22, 31, 34, 35, 35, 35, 36, 37, 39]*)
let q1 = add 3 q1;;   (* [1, 3, 4, 5, 6, 14, 15, 15, 16, 18, 21, 21, 22, 31, 34, 35, 35, 35, 36, 37, 39]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 21 q2;;   (* [21]*)
let (element, q2) = delete_min q2;;   (* 21 * []*)
assert(element = 21);;
assert(is_empty q2 = true);;   (*[]*)
let q2 = add 21 q2;;   (* [21]*)
let (element, q2) = delete_min q2;;   (* 21 * []*)
assert(element = 21);;
let q2 = add 33 q2;;   (* [33]*)
let q2 = add 3 q2;;   (* [3, 33]*)
let (element, q2) = delete_min q2;;   (* 3 * [33]*)
assert(element = 3);;
let (element, q2) = delete_min q2;;   (* 33 * []*)
assert(element = 33);;
let q2 = add 20 q2;;   (* [20]*)
let q2 = add 10 q2;;   (* [10, 20]*)
let (element, q2) = delete_min q2;;   (* 10 * [20]*)
assert(element = 10);;
let q2 = add 12 q2;;   (* [12, 20]*)
let q2 = add 37 q2;;   (* [12, 20, 37]*)
let q2 = add 20 q2;;   (* [12, 20, 20, 37]*)
let q2 = add 20 q2;;   (* [12, 20, 20, 20, 37]*)
assert(is_empty q2 = false);;   (*[12, 20, 20, 20, 37]*)
let q2 = add 37 q2;;   (* [12, 20, 20, 20, 37, 37]*)
let (element, q2) = delete_min q2;;   (* 12 * [20, 20, 20, 37, 37]*)
assert(element = 12);;
let q2 = add 25 q2;;   (* [20, 20, 20, 25, 37, 37]*)
let q2 = add 10 q2;;   (* [10, 20, 20, 20, 25, 37, 37]*)
let (element, q2) = delete_min q2;;   (* 10 * [20, 20, 20, 25, 37, 37]*)
assert(element = 10);;
let (element, q2) = delete_min q2;;   (* 20 * [20, 20, 25, 37, 37]*)
assert(element = 20);;
let q2 = add 14 q2;;   (* [14, 20, 20, 25, 37, 37]*)
let q2 = add 4 q2;;   (* [4, 14, 20, 20, 25, 37, 37]*)
let q2 = add 27 q2;;   (* [4, 14, 20, 20, 25, 27, 37, 37]*)
let (element, q2) = delete_min q2;;   (* 4 * [14, 20, 20, 25, 27, 37, 37]*)
assert(element = 4);;
let q2 = add 25 q2;;   (* [14, 20, 20, 25, 25, 27, 37, 37]*)
let (element, q2) = delete_min q2;;   (* 14 * [20, 20, 25, 25, 27, 37, 37]*)
assert(element = 14);;
assert(is_empty q2 = false);;   (*[20, 20, 25, 25, 27, 37, 37]*)
let q2 = add 39 q2;;   (* [20, 20, 25, 25, 27, 37, 37, 39]*)
let q2 = add 0 q2;;   (* [0, 20, 20, 25, 25, 27, 37, 37, 39]*)
let q2 = add 21 q2;;   (* [0, 20, 20, 21, 25, 25, 27, 37, 37, 39]*)
let q2 = add 25 q2;;   (* [0, 20, 20, 21, 25, 25, 25, 27, 37, 37, 39]*)
let q2 = add 23 q2;;   (* [0, 20, 20, 21, 23, 25, 25, 25, 27, 37, 37, 39]*)
let (element, q2) = delete_min q2;;   (* 0 * [20, 20, 21, 23, 25, 25, 25, 27, 37, 37, 39]*)
assert(element = 0);;
let q2 = add 1 q2;;   (* [1, 20, 20, 21, 23, 25, 25, 25, 27, 37, 37, 39]*)
let q2 = add 8 q2;;   (* [1, 8, 20, 20, 21, 23, 25, 25, 25, 27, 37, 37, 39]*)
let q2 = add 3 q2;;   (* [1, 3, 8, 20, 20, 21, 23, 25, 25, 25, 27, 37, 37, 39]*)
let q2 = add 14 q2;;   (* [1, 3, 8, 14, 20, 20, 21, 23, 25, 25, 25, 27, 37, 37, 39]*)
let q2 = add 15 q2;;   (* [1, 3, 8, 14, 15, 20, 20, 21, 23, 25, 25, 25, 27, 37, 37, 39]*)
let (element, q2) = delete_min q2;;   (* 1 * [3, 8, 14, 15, 20, 20, 21, 23, 25, 25, 25, 27, 37, 37, 39]*)
assert(element = 1);;
let (element, q2) = delete_min q2;;   (* 3 * [8, 14, 15, 20, 20, 21, 23, 25, 25, 25, 27, 37, 37, 39]*)
assert(element = 3);;
assert(is_empty q2 = false);;   (*[8, 14, 15, 20, 20, 21, 23, 25, 25, 25, 27, 37, 37, 39]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 22 q3;;   (* [22]*)
let q3 = add 12 q3;;   (* [12, 22]*)
let q3 = add 7 q3;;   (* [7, 12, 22]*)
let q3 = add 29 q3;;   (* [7, 12, 22, 29]*)
let (element, q3) = delete_min q3;;   (* 7 * [12, 22, 29]*)
assert(element = 7);;
let q3 = add 39 q3;;   (* [12, 22, 29, 39]*)
let (element, q3) = delete_min q3;;   (* 12 * [22, 29, 39]*)
assert(element = 12);;
let q3 = add 38 q3;;   (* [22, 29, 38, 39]*)
let q3 = add 8 q3;;   (* [8, 22, 29, 38, 39]*)
let (element, q3) = delete_min q3;;   (* 8 * [22, 29, 38, 39]*)
assert(element = 8);;
let (element, q3) = delete_min q3;;   (* 22 * [29, 38, 39]*)
assert(element = 22);;
let (element, q3) = delete_min q3;;   (* 29 * [38, 39]*)
assert(element = 29);;
assert(is_empty q3 = false);;   (*[38, 39]*)
let (element, q3) = delete_min q3;;   (* 38 * [39]*)
assert(element = 38);;
let q3 = add 13 q3;;   (* [13, 39]*)
assert(is_empty q3 = false);;   (*[13, 39]*)
let q3 = add 4 q3;;   (* [4, 13, 39]*)
assert(is_empty q3 = false);;   (*[4, 13, 39]*)
let (element, q3) = delete_min q3;;   (* 4 * [13, 39]*)
assert(element = 4);;
let q3 = add 24 q3;;   (* [13, 24, 39]*)
assert(is_empty q3 = false);;   (*[13, 24, 39]*)
let q3 = add 2 q3;;   (* [2, 13, 24, 39]*)
let q3 = add 12 q3;;   (* [2, 12, 13, 24, 39]*)
let (element, q3) = delete_min q3;;   (* 2 * [12, 13, 24, 39]*)
assert(element = 2);;
let q3 = add 0 q3;;   (* [0, 12, 13, 24, 39]*)
let q3 = add 22 q3;;   (* [0, 12, 13, 22, 24, 39]*)
let q3 = add 3 q3;;   (* [0, 3, 12, 13, 22, 24, 39]*)
let (element, q3) = delete_min q3;;   (* 0 * [3, 12, 13, 22, 24, 39]*)
assert(element = 0);;
let q3 = add 20 q3;;   (* [3, 12, 13, 20, 22, 24, 39]*)
let q3 = add 13 q3;;   (* [3, 12, 13, 13, 20, 22, 24, 39]*)
let q3 = add 38 q3;;   (* [3, 12, 13, 13, 20, 22, 24, 38, 39]*)
let q3 = add 5 q3;;   (* [3, 5, 12, 13, 13, 20, 22, 24, 38, 39]*)
assert(is_empty q3 = false);;   (*[3, 5, 12, 13, 13, 20, 22, 24, 38, 39]*)
let q3 = add 3 q3;;   (* [3, 3, 5, 12, 13, 13, 20, 22, 24, 38, 39]*)
let q3 = add 22 q3;;   (* [3, 3, 5, 12, 13, 13, 20, 22, 22, 24, 38, 39]*)
let q3 = add 26 q3;;   (* [3, 3, 5, 12, 13, 13, 20, 22, 22, 24, 26, 38, 39]*)
let (element, q3) = delete_min q3;;   (* 3 * [3, 5, 12, 13, 13, 20, 22, 22, 24, 26, 38, 39]*)
assert(element = 3);;
let q3 = add 31 q3;;   (* [3, 5, 12, 13, 13, 20, 22, 22, 24, 26, 31, 38, 39]*)
let q3 = add 27 q3;;   (* [3, 5, 12, 13, 13, 20, 22, 22, 24, 26, 27, 31, 38, 39]*)
assert(is_empty q3 = false);;   (*[3, 5, 12, 13, 13, 20, 22, 22, 24, 26, 27, 31, 38, 39]*)
let q3 = add 35 q3;;   (* [3, 5, 12, 13, 13, 20, 22, 22, 24, 26, 27, 31, 35, 38, 39]*)
let q3 = add 24 q3;;   (* [3, 5, 12, 13, 13, 20, 22, 22, 24, 24, 26, 27, 31, 35, 38, 39]*)
let (element, q3) = delete_min q3;;   (* 3 * [5, 12, 13, 13, 20, 22, 22, 24, 24, 26, 27, 31, 35, 38, 39]*)
assert(element = 3);;
let q3 = add 14 q3;;   (* [5, 12, 13, 13, 14, 20, 22, 22, 24, 24, 26, 27, 31, 35, 38, 39]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 7 q4;;   (* [7]*)
let q4 = add 37 q4;;   (* [7, 37]*)
let (element, q4) = delete_min q4;;   (* 7 * [37]*)
assert(element = 7);;
let q4 = add 9 q4;;   (* [9, 37]*)
assert(is_empty q4 = false);;   (*[9, 37]*)
let (element, q4) = delete_min q4;;   (* 9 * [37]*)
assert(element = 9);;
let q4 = add 16 q4;;   (* [16, 37]*)
let q4 = add 2 q4;;   (* [2, 16, 37]*)
let q4 = add 18 q4;;   (* [2, 16, 18, 37]*)
let q4 = add 29 q4;;   (* [2, 16, 18, 29, 37]*)
let q4 = add 6 q4;;   (* [2, 6, 16, 18, 29, 37]*)
let (element, q4) = delete_min q4;;   (* 2 * [6, 16, 18, 29, 37]*)
assert(element = 2);;
let (element, q4) = delete_min q4;;   (* 6 * [16, 18, 29, 37]*)
assert(element = 6);;
let q4 = add 38 q4;;   (* [16, 18, 29, 37, 38]*)
let q4 = add 21 q4;;   (* [16, 18, 21, 29, 37, 38]*)
let q4 = add 16 q4;;   (* [16, 16, 18, 21, 29, 37, 38]*)
let q4 = add 10 q4;;   (* [10, 16, 16, 18, 21, 29, 37, 38]*)
let q4 = add 19 q4;;   (* [10, 16, 16, 18, 19, 21, 29, 37, 38]*)
let q4 = add 31 q4;;   (* [10, 16, 16, 18, 19, 21, 29, 31, 37, 38]*)
let q4 = add 14 q4;;   (* [10, 14, 16, 16, 18, 19, 21, 29, 31, 37, 38]*)
let q4 = add 11 q4;;   (* [10, 11, 14, 16, 16, 18, 19, 21, 29, 31, 37, 38]*)
let (element, q4) = delete_min q4;;   (* 10 * [11, 14, 16, 16, 18, 19, 21, 29, 31, 37, 38]*)
assert(element = 10);;
let (element, q4) = delete_min q4;;   (* 11 * [14, 16, 16, 18, 19, 21, 29, 31, 37, 38]*)
assert(element = 11);;
let q4 = add 0 q4;;   (* [0, 14, 16, 16, 18, 19, 21, 29, 31, 37, 38]*)
let (element, q4) = delete_min q4;;   (* 0 * [14, 16, 16, 18, 19, 21, 29, 31, 37, 38]*)
assert(element = 0);;
let (element, q4) = delete_min q4;;   (* 14 * [16, 16, 18, 19, 21, 29, 31, 37, 38]*)
assert(element = 14);;
let q4 = add 22 q4;;   (* [16, 16, 18, 19, 21, 22, 29, 31, 37, 38]*)
let q4 = add 15 q4;;   (* [15, 16, 16, 18, 19, 21, 22, 29, 31, 37, 38]*)
let (element, q4) = delete_min q4;;   (* 15 * [16, 16, 18, 19, 21, 22, 29, 31, 37, 38]*)
assert(element = 15);;
let q4 = add 1 q4;;   (* [1, 16, 16, 18, 19, 21, 22, 29, 31, 37, 38]*)
let q4 = add 12 q4;;   (* [1, 12, 16, 16, 18, 19, 21, 22, 29, 31, 37, 38]*)
assert(is_empty q4 = false);;   (*[1, 12, 16, 16, 18, 19, 21, 22, 29, 31, 37, 38]*)
let (element, q4) = delete_min q4;;   (* 1 * [12, 16, 16, 18, 19, 21, 22, 29, 31, 37, 38]*)
assert(element = 1);;
let (element, q4) = delete_min q4;;   (* 12 * [16, 16, 18, 19, 21, 22, 29, 31, 37, 38]*)
assert(element = 12);;
let q4 = add 28 q4;;   (* [16, 16, 18, 19, 21, 22, 28, 29, 31, 37, 38]*)
let q4 = add 28 q4;;   (* [16, 16, 18, 19, 21, 22, 28, 28, 29, 31, 37, 38]*)
let q4 = add 0 q4;;   (* [0, 16, 16, 18, 19, 21, 22, 28, 28, 29, 31, 37, 38]*)
let (element, q4) = delete_min q4;;   (* 0 * [16, 16, 18, 19, 21, 22, 28, 28, 29, 31, 37, 38]*)
assert(element = 0);;
let (element, q4) = delete_min q4;;   (* 16 * [16, 18, 19, 21, 22, 28, 28, 29, 31, 37, 38]*)
assert(element = 16);;
let q4 = add 20 q4;;   (* [16, 18, 19, 20, 21, 22, 28, 28, 29, 31, 37, 38]*)
let q4 = add 17 q4;;   (* [16, 17, 18, 19, 20, 21, 22, 28, 28, 29, 31, 37, 38]*)
let (element, q4) = delete_min q4;;   (* 16 * [17, 18, 19, 20, 21, 22, 28, 28, 29, 31, 37, 38]*)
assert(element = 16);;
let (element, q4) = delete_min q4;;   (* 17 * [18, 19, 20, 21, 22, 28, 28, 29, 31, 37, 38]*)
assert(element = 17);;
let (element, q4) = delete_min q4;;   (* 18 * [19, 20, 21, 22, 28, 28, 29, 31, 37, 38]*)
assert(element = 18);;

(* -------q5------ *)
let q5 = empty;;
let q5 = add 33 q5;;   (* [33]*)
let (element, q5) = delete_min q5;;   (* 33 * []*)
assert(element = 33);;
let q5 = add 7 q5;;   (* [7]*)
let (element, q5) = delete_min q5;;   (* 7 * []*)
assert(element = 7);;
let q5 = add 28 q5;;   (* [28]*)
let (element, q5) = delete_min q5;;   (* 28 * []*)
assert(element = 28);;
let q5 = add 29 q5;;   (* [29]*)
let q5 = add 35 q5;;   (* [29, 35]*)
let q5 = add 5 q5;;   (* [5, 29, 35]*)
let (element, q5) = delete_min q5;;   (* 5 * [29, 35]*)
assert(element = 5);;
let q5 = add 33 q5;;   (* [29, 33, 35]*)
let (element, q5) = delete_min q5;;   (* 29 * [33, 35]*)
assert(element = 29);;
let (element, q5) = delete_min q5;;   (* 33 * [35]*)
assert(element = 33);;
let (element, q5) = delete_min q5;;   (* 35 * []*)
assert(element = 35);;
let q5 = add 21 q5;;   (* [21]*)
let q5 = add 37 q5;;   (* [21, 37]*)
let (element, q5) = delete_min q5;;   (* 21 * [37]*)
assert(element = 21);;
let q5 = add 6 q5;;   (* [6, 37]*)
let q5 = add 2 q5;;   (* [2, 6, 37]*)
let q5 = add 38 q5;;   (* [2, 6, 37, 38]*)
let (element, q5) = delete_min q5;;   (* 2 * [6, 37, 38]*)
assert(element = 2);;
let q5 = add 3 q5;;   (* [3, 6, 37, 38]*)
let (element, q5) = delete_min q5;;   (* 3 * [6, 37, 38]*)
assert(element = 3);;
assert(is_empty q5 = false);;   (*[6, 37, 38]*)
let q5 = add 29 q5;;   (* [6, 29, 37, 38]*)
let q5 = add 28 q5;;   (* [6, 28, 29, 37, 38]*)
let q5 = add 35 q5;;   (* [6, 28, 29, 35, 37, 38]*)
let q5 = add 35 q5;;   (* [6, 28, 29, 35, 35, 37, 38]*)
let q5 = add 21 q5;;   (* [6, 21, 28, 29, 35, 35, 37, 38]*)
let q5 = add 36 q5;;   (* [6, 21, 28, 29, 35, 35, 36, 37, 38]*)
let (element, q5) = delete_min q5;;   (* 6 * [21, 28, 29, 35, 35, 36, 37, 38]*)
assert(element = 6);;
let q5 = add 33 q5;;   (* [21, 28, 29, 33, 35, 35, 36, 37, 38]*)
assert(is_empty q5 = false);;   (*[21, 28, 29, 33, 35, 35, 36, 37, 38]*)
let (element, q5) = delete_min q5;;   (* 21 * [28, 29, 33, 35, 35, 36, 37, 38]*)
assert(element = 21);;
let (element, q5) = delete_min q5;;   (* 28 * [29, 33, 35, 35, 36, 37, 38]*)
assert(element = 28);;
assert(is_empty q5 = false);;   (*[29, 33, 35, 35, 36, 37, 38]*)
let q5 = add 12 q5;;   (* [12, 29, 33, 35, 35, 36, 37, 38]*)
let q5 = add 0 q5;;   (* [0, 12, 29, 33, 35, 35, 36, 37, 38]*)
let q5 = add 32 q5;;   (* [0, 12, 29, 32, 33, 35, 35, 36, 37, 38]*)
let q5 = add 33 q5;;   (* [0, 12, 29, 32, 33, 33, 35, 35, 36, 37, 38]*)
let q5 = add 8 q5;;   (* [0, 8, 12, 29, 32, 33, 33, 35, 35, 36, 37, 38]*)
let (element, q5) = delete_min q5;;   (* 0 * [8, 12, 29, 32, 33, 33, 35, 35, 36, 37, 38]*)
assert(element = 0);;
let q5 = add 37 q5;;   (* [8, 12, 29, 32, 33, 33, 35, 35, 36, 37, 37, 38]*)
let (element, q5) = delete_min q5;;   (* 8 * [12, 29, 32, 33, 33, 35, 35, 36, 37, 37, 38]*)
assert(element = 8);;

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[1, 3, 4, 5, 5, 6, 8, 12, 12, 13, 13, 14, 14, 14, 15, 15, 15, 16, 18, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 24, 24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39]*)
let (element, q) = delete_min q;;   (* 1 * [3, 4, 5, 5, 6, 8, 12, 12, 13, 13, 14, 14, 14, 15, 15, 15, 16, 18, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 24, 24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 1);;
let (element, q) = delete_min q;;   (* 3 * [4, 5, 5, 6, 8, 12, 12, 13, 13, 14, 14, 14, 15, 15, 15, 16, 18, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 24, 24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 3);;
let (element, q) = delete_min q;;   (* 4 * [5, 5, 6, 8, 12, 12, 13, 13, 14, 14, 14, 15, 15, 15, 16, 18, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 24, 24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 5 * [5, 6, 8, 12, 12, 13, 13, 14, 14, 14, 15, 15, 15, 16, 18, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 24, 24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 5 * [6, 8, 12, 12, 13, 13, 14, 14, 14, 15, 15, 15, 16, 18, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 24, 24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 6 * [8, 12, 12, 13, 13, 14, 14, 14, 15, 15, 15, 16, 18, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 24, 24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 8 * [12, 12, 13, 13, 14, 14, 14, 15, 15, 15, 16, 18, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 24, 24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 12 * [12, 13, 13, 14, 14, 14, 15, 15, 15, 16, 18, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 24, 24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 12 * [13, 13, 14, 14, 14, 15, 15, 15, 16, 18, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 24, 24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 13 * [13, 14, 14, 14, 15, 15, 15, 16, 18, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 24, 24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 13 * [14, 14, 14, 15, 15, 15, 16, 18, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 24, 24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 14 * [14, 14, 15, 15, 15, 16, 18, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 24, 24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [14, 15, 15, 15, 16, 18, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 24, 24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [15, 15, 15, 16, 18, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 24, 24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [15, 15, 16, 18, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 24, 24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [15, 16, 18, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 24, 24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [16, 18, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 24, 24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [18, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 24, 24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 18 * [19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 24, 24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 24, 24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 24, 24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 24, 24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 24, 24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [21, 21, 21, 21, 22, 22, 22, 22, 23, 24, 24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [21, 21, 21, 22, 22, 22, 22, 23, 24, 24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [21, 21, 22, 22, 22, 22, 23, 24, 24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [21, 22, 22, 22, 22, 23, 24, 24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [22, 22, 22, 22, 23, 24, 24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [22, 22, 22, 23, 24, 24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [22, 22, 23, 24, 24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [22, 23, 24, 24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [23, 24, 24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [24, 24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [24, 25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [25, 25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [25, 25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [25, 26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [26, 27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [27, 27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [27, 28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [28, 28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [28, 29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [29, 29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [29, 31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [31, 31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 31 * [31, 31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [31, 32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [32, 33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [33, 33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [33, 34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [34, 35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [37, 37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [37, 37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [37, 37, 38, 38, 38, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [37, 38, 38, 38, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [38, 38, 38, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST99----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 29 q1;;   (* [29]*)
let (element, q1) = delete_min q1;;   (* 29 * []*)
assert(element = 29);;
let q1 = add 14 q1;;   (* [14]*)
let (element, q1) = delete_min q1;;   (* 14 * []*)
assert(element = 14);;
let q1 = add 37 q1;;   (* [37]*)
let q1 = add 14 q1;;   (* [14, 37]*)
let q1 = add 1 q1;;   (* [1, 14, 37]*)
let q1 = add 20 q1;;   (* [1, 14, 20, 37]*)
let (element, q1) = delete_min q1;;   (* 1 * [14, 20, 37]*)
assert(element = 1);;
let q1 = add 10 q1;;   (* [10, 14, 20, 37]*)
let q1 = add 7 q1;;   (* [7, 10, 14, 20, 37]*)
let (element, q1) = delete_min q1;;   (* 7 * [10, 14, 20, 37]*)
assert(element = 7);;
let q1 = add 35 q1;;   (* [10, 14, 20, 35, 37]*)
let (element, q1) = delete_min q1;;   (* 10 * [14, 20, 35, 37]*)
assert(element = 10);;
assert(is_empty q1 = false);;   (*[14, 20, 35, 37]*)
let (element, q1) = delete_min q1;;   (* 14 * [20, 35, 37]*)
assert(element = 14);;
let q1 = add 29 q1;;   (* [20, 29, 35, 37]*)
let q1 = add 32 q1;;   (* [20, 29, 32, 35, 37]*)
let q1 = add 1 q1;;   (* [1, 20, 29, 32, 35, 37]*)
let q1 = add 12 q1;;   (* [1, 12, 20, 29, 32, 35, 37]*)
let q1 = add 35 q1;;   (* [1, 12, 20, 29, 32, 35, 35, 37]*)
assert(is_empty q1 = false);;   (*[1, 12, 20, 29, 32, 35, 35, 37]*)
let (element, q1) = delete_min q1;;   (* 1 * [12, 20, 29, 32, 35, 35, 37]*)
assert(element = 1);;
let (element, q1) = delete_min q1;;   (* 12 * [20, 29, 32, 35, 35, 37]*)
assert(element = 12);;
let (element, q1) = delete_min q1;;   (* 20 * [29, 32, 35, 35, 37]*)
assert(element = 20);;
let q1 = add 26 q1;;   (* [26, 29, 32, 35, 35, 37]*)
let (element, q1) = delete_min q1;;   (* 26 * [29, 32, 35, 35, 37]*)
assert(element = 26);;
let q1 = add 7 q1;;   (* [7, 29, 32, 35, 35, 37]*)
let q1 = add 32 q1;;   (* [7, 29, 32, 32, 35, 35, 37]*)
let q1 = add 39 q1;;   (* [7, 29, 32, 32, 35, 35, 37, 39]*)
let q1 = add 38 q1;;   (* [7, 29, 32, 32, 35, 35, 37, 38, 39]*)
let (element, q1) = delete_min q1;;   (* 7 * [29, 32, 32, 35, 35, 37, 38, 39]*)
assert(element = 7);;
let (element, q1) = delete_min q1;;   (* 29 * [32, 32, 35, 35, 37, 38, 39]*)
assert(element = 29);;
let q1 = add 18 q1;;   (* [18, 32, 32, 35, 35, 37, 38, 39]*)
let q1 = add 35 q1;;   (* [18, 32, 32, 35, 35, 35, 37, 38, 39]*)
let q1 = add 6 q1;;   (* [6, 18, 32, 32, 35, 35, 35, 37, 38, 39]*)
let (element, q1) = delete_min q1;;   (* 6 * [18, 32, 32, 35, 35, 35, 37, 38, 39]*)
assert(element = 6);;
let q1 = add 28 q1;;   (* [18, 28, 32, 32, 35, 35, 35, 37, 38, 39]*)
let q1 = add 12 q1;;   (* [12, 18, 28, 32, 32, 35, 35, 35, 37, 38, 39]*)
let q1 = add 24 q1;;   (* [12, 18, 24, 28, 32, 32, 35, 35, 35, 37, 38, 39]*)
let (element, q1) = delete_min q1;;   (* 12 * [18, 24, 28, 32, 32, 35, 35, 35, 37, 38, 39]*)
assert(element = 12);;
let q1 = add 21 q1;;   (* [18, 21, 24, 28, 32, 32, 35, 35, 35, 37, 38, 39]*)
let q1 = add 5 q1;;   (* [5, 18, 21, 24, 28, 32, 32, 35, 35, 35, 37, 38, 39]*)
let q1 = add 21 q1;;   (* [5, 18, 21, 21, 24, 28, 32, 32, 35, 35, 35, 37, 38, 39]*)
assert(is_empty q1 = false);;   (*[5, 18, 21, 21, 24, 28, 32, 32, 35, 35, 35, 37, 38, 39]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 16 q2;;   (* [16]*)
let q2 = add 22 q2;;   (* [16, 22]*)
let q2 = add 31 q2;;   (* [16, 22, 31]*)
let q2 = add 28 q2;;   (* [16, 22, 28, 31]*)
let q2 = add 14 q2;;   (* [14, 16, 22, 28, 31]*)
let q2 = add 3 q2;;   (* [3, 14, 16, 22, 28, 31]*)
let q2 = add 21 q2;;   (* [3, 14, 16, 21, 22, 28, 31]*)
let q2 = add 4 q2;;   (* [3, 4, 14, 16, 21, 22, 28, 31]*)
let q2 = add 23 q2;;   (* [3, 4, 14, 16, 21, 22, 23, 28, 31]*)
let q2 = add 25 q2;;   (* [3, 4, 14, 16, 21, 22, 23, 25, 28, 31]*)
let q2 = add 18 q2;;   (* [3, 4, 14, 16, 18, 21, 22, 23, 25, 28, 31]*)
let q2 = add 13 q2;;   (* [3, 4, 13, 14, 16, 18, 21, 22, 23, 25, 28, 31]*)
let q2 = add 20 q2;;   (* [3, 4, 13, 14, 16, 18, 20, 21, 22, 23, 25, 28, 31]*)
assert(is_empty q2 = false);;   (*[3, 4, 13, 14, 16, 18, 20, 21, 22, 23, 25, 28, 31]*)
let (element, q2) = delete_min q2;;   (* 3 * [4, 13, 14, 16, 18, 20, 21, 22, 23, 25, 28, 31]*)
assert(element = 3);;
let q2 = add 18 q2;;   (* [4, 13, 14, 16, 18, 18, 20, 21, 22, 23, 25, 28, 31]*)
let q2 = add 33 q2;;   (* [4, 13, 14, 16, 18, 18, 20, 21, 22, 23, 25, 28, 31, 33]*)
assert(is_empty q2 = false);;   (*[4, 13, 14, 16, 18, 18, 20, 21, 22, 23, 25, 28, 31, 33]*)
let q2 = add 19 q2;;   (* [4, 13, 14, 16, 18, 18, 19, 20, 21, 22, 23, 25, 28, 31, 33]*)
let (element, q2) = delete_min q2;;   (* 4 * [13, 14, 16, 18, 18, 19, 20, 21, 22, 23, 25, 28, 31, 33]*)
assert(element = 4);;
let (element, q2) = delete_min q2;;   (* 13 * [14, 16, 18, 18, 19, 20, 21, 22, 23, 25, 28, 31, 33]*)
assert(element = 13);;
let (element, q2) = delete_min q2;;   (* 14 * [16, 18, 18, 19, 20, 21, 22, 23, 25, 28, 31, 33]*)
assert(element = 14);;
assert(is_empty q2 = false);;   (*[16, 18, 18, 19, 20, 21, 22, 23, 25, 28, 31, 33]*)
let q2 = add 6 q2;;   (* [6, 16, 18, 18, 19, 20, 21, 22, 23, 25, 28, 31, 33]*)
let (element, q2) = delete_min q2;;   (* 6 * [16, 18, 18, 19, 20, 21, 22, 23, 25, 28, 31, 33]*)
assert(element = 6);;
let q2 = add 20 q2;;   (* [16, 18, 18, 19, 20, 20, 21, 22, 23, 25, 28, 31, 33]*)
let q2 = add 34 q2;;   (* [16, 18, 18, 19, 20, 20, 21, 22, 23, 25, 28, 31, 33, 34]*)
let q2 = add 22 q2;;   (* [16, 18, 18, 19, 20, 20, 21, 22, 22, 23, 25, 28, 31, 33, 34]*)
let (element, q2) = delete_min q2;;   (* 16 * [18, 18, 19, 20, 20, 21, 22, 22, 23, 25, 28, 31, 33, 34]*)
assert(element = 16);;
let q2 = add 29 q2;;   (* [18, 18, 19, 20, 20, 21, 22, 22, 23, 25, 28, 29, 31, 33, 34]*)
let q2 = add 14 q2;;   (* [14, 18, 18, 19, 20, 20, 21, 22, 22, 23, 25, 28, 29, 31, 33, 34]*)
let q2 = add 34 q2;;   (* [14, 18, 18, 19, 20, 20, 21, 22, 22, 23, 25, 28, 29, 31, 33, 34, 34]*)
let q2 = add 23 q2;;   (* [14, 18, 18, 19, 20, 20, 21, 22, 22, 23, 23, 25, 28, 29, 31, 33, 34, 34]*)
let q2 = add 19 q2;;   (* [14, 18, 18, 19, 19, 20, 20, 21, 22, 22, 23, 23, 25, 28, 29, 31, 33, 34, 34]*)
let q2 = add 2 q2;;   (* [2, 14, 18, 18, 19, 19, 20, 20, 21, 22, 22, 23, 23, 25, 28, 29, 31, 33, 34, 34]*)
let q2 = add 20 q2;;   (* [2, 14, 18, 18, 19, 19, 20, 20, 20, 21, 22, 22, 23, 23, 25, 28, 29, 31, 33, 34, 34]*)
let q2 = add 34 q2;;   (* [2, 14, 18, 18, 19, 19, 20, 20, 20, 21, 22, 22, 23, 23, 25, 28, 29, 31, 33, 34, 34, 34]*)
let (element, q2) = delete_min q2;;   (* 2 * [14, 18, 18, 19, 19, 20, 20, 20, 21, 22, 22, 23, 23, 25, 28, 29, 31, 33, 34, 34, 34]*)
assert(element = 2);;
let q2 = add 18 q2;;   (* [14, 18, 18, 18, 19, 19, 20, 20, 20, 21, 22, 22, 23, 23, 25, 28, 29, 31, 33, 34, 34, 34]*)
let q2 = add 6 q2;;   (* [6, 14, 18, 18, 18, 19, 19, 20, 20, 20, 21, 22, 22, 23, 23, 25, 28, 29, 31, 33, 34, 34, 34]*)
let q2 = add 25 q2;;   (* [6, 14, 18, 18, 18, 19, 19, 20, 20, 20, 21, 22, 22, 23, 23, 25, 25, 28, 29, 31, 33, 34, 34, 34]*)
let q2 = add 37 q2;;   (* [6, 14, 18, 18, 18, 19, 19, 20, 20, 20, 21, 22, 22, 23, 23, 25, 25, 28, 29, 31, 33, 34, 34, 34, 37]*)
assert(is_empty q2 = false);;   (*[6, 14, 18, 18, 18, 19, 19, 20, 20, 20, 21, 22, 22, 23, 23, 25, 25, 28, 29, 31, 33, 34, 34, 34, 37]*)
let q2 = add 29 q2;;   (* [6, 14, 18, 18, 18, 19, 19, 20, 20, 20, 21, 22, 22, 23, 23, 25, 25, 28, 29, 29, 31, 33, 34, 34, 34, 37]*)
let q2 = add 20 q2;;   (* [6, 14, 18, 18, 18, 19, 19, 20, 20, 20, 20, 21, 22, 22, 23, 23, 25, 25, 28, 29, 29, 31, 33, 34, 34, 34, 37]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 24 q3;;   (* [24]*)
let q3 = add 20 q3;;   (* [20, 24]*)
let q3 = add 24 q3;;   (* [20, 24, 24]*)
let q3 = add 9 q3;;   (* [9, 20, 24, 24]*)
let q3 = add 33 q3;;   (* [9, 20, 24, 24, 33]*)
let (element, q3) = delete_min q3;;   (* 9 * [20, 24, 24, 33]*)
assert(element = 9);;
let q3 = add 9 q3;;   (* [9, 20, 24, 24, 33]*)
let (element, q3) = delete_min q3;;   (* 9 * [20, 24, 24, 33]*)
assert(element = 9);;
let (element, q3) = delete_min q3;;   (* 20 * [24, 24, 33]*)
assert(element = 20);;
let (element, q3) = delete_min q3;;   (* 24 * [24, 33]*)
assert(element = 24);;
let (element, q3) = delete_min q3;;   (* 24 * [33]*)
assert(element = 24);;
let q3 = add 33 q3;;   (* [33, 33]*)
let q3 = add 8 q3;;   (* [8, 33, 33]*)
let q3 = add 21 q3;;   (* [8, 21, 33, 33]*)
let q3 = add 7 q3;;   (* [7, 8, 21, 33, 33]*)
let q3 = add 3 q3;;   (* [3, 7, 8, 21, 33, 33]*)
let q3 = add 14 q3;;   (* [3, 7, 8, 14, 21, 33, 33]*)
let (element, q3) = delete_min q3;;   (* 3 * [7, 8, 14, 21, 33, 33]*)
assert(element = 3);;
let q3 = add 20 q3;;   (* [7, 8, 14, 20, 21, 33, 33]*)
let q3 = add 24 q3;;   (* [7, 8, 14, 20, 21, 24, 33, 33]*)
let q3 = add 27 q3;;   (* [7, 8, 14, 20, 21, 24, 27, 33, 33]*)
let q3 = add 1 q3;;   (* [1, 7, 8, 14, 20, 21, 24, 27, 33, 33]*)
let q3 = add 20 q3;;   (* [1, 7, 8, 14, 20, 20, 21, 24, 27, 33, 33]*)
assert(is_empty q3 = false);;   (*[1, 7, 8, 14, 20, 20, 21, 24, 27, 33, 33]*)
let q3 = add 7 q3;;   (* [1, 7, 7, 8, 14, 20, 20, 21, 24, 27, 33, 33]*)
let q3 = add 14 q3;;   (* [1, 7, 7, 8, 14, 14, 20, 20, 21, 24, 27, 33, 33]*)
assert(is_empty q3 = false);;   (*[1, 7, 7, 8, 14, 14, 20, 20, 21, 24, 27, 33, 33]*)
let q3 = add 26 q3;;   (* [1, 7, 7, 8, 14, 14, 20, 20, 21, 24, 26, 27, 33, 33]*)
let q3 = add 28 q3;;   (* [1, 7, 7, 8, 14, 14, 20, 20, 21, 24, 26, 27, 28, 33, 33]*)
let (element, q3) = delete_min q3;;   (* 1 * [7, 7, 8, 14, 14, 20, 20, 21, 24, 26, 27, 28, 33, 33]*)
assert(element = 1);;
let (element, q3) = delete_min q3;;   (* 7 * [7, 8, 14, 14, 20, 20, 21, 24, 26, 27, 28, 33, 33]*)
assert(element = 7);;
let (element, q3) = delete_min q3;;   (* 7 * [8, 14, 14, 20, 20, 21, 24, 26, 27, 28, 33, 33]*)
assert(element = 7);;
let q3 = add 36 q3;;   (* [8, 14, 14, 20, 20, 21, 24, 26, 27, 28, 33, 33, 36]*)
let (element, q3) = delete_min q3;;   (* 8 * [14, 14, 20, 20, 21, 24, 26, 27, 28, 33, 33, 36]*)
assert(element = 8);;
let q3 = add 7 q3;;   (* [7, 14, 14, 20, 20, 21, 24, 26, 27, 28, 33, 33, 36]*)
let q3 = add 33 q3;;   (* [7, 14, 14, 20, 20, 21, 24, 26, 27, 28, 33, 33, 33, 36]*)
let q3 = add 26 q3;;   (* [7, 14, 14, 20, 20, 21, 24, 26, 26, 27, 28, 33, 33, 33, 36]*)
let (element, q3) = delete_min q3;;   (* 7 * [14, 14, 20, 20, 21, 24, 26, 26, 27, 28, 33, 33, 33, 36]*)
assert(element = 7);;
let q3 = add 5 q3;;   (* [5, 14, 14, 20, 20, 21, 24, 26, 26, 27, 28, 33, 33, 33, 36]*)
let (element, q3) = delete_min q3;;   (* 5 * [14, 14, 20, 20, 21, 24, 26, 26, 27, 28, 33, 33, 33, 36]*)
assert(element = 5);;
let q3 = add 7 q3;;   (* [7, 14, 14, 20, 20, 21, 24, 26, 26, 27, 28, 33, 33, 33, 36]*)
let q3 = add 37 q3;;   (* [7, 14, 14, 20, 20, 21, 24, 26, 26, 27, 28, 33, 33, 33, 36, 37]*)
let q3 = add 26 q3;;   (* [7, 14, 14, 20, 20, 21, 24, 26, 26, 26, 27, 28, 33, 33, 33, 36, 37]*)
let (element, q3) = delete_min q3;;   (* 7 * [14, 14, 20, 20, 21, 24, 26, 26, 26, 27, 28, 33, 33, 33, 36, 37]*)
assert(element = 7);;
assert(is_empty q3 = false);;   (*[14, 14, 20, 20, 21, 24, 26, 26, 26, 27, 28, 33, 33, 33, 36, 37]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 0 q4;;   (* [0]*)
let q4 = add 34 q4;;   (* [0, 34]*)
let (element, q4) = delete_min q4;;   (* 0 * [34]*)
assert(element = 0);;
let q4 = add 24 q4;;   (* [24, 34]*)
let q4 = add 22 q4;;   (* [22, 24, 34]*)
let q4 = add 33 q4;;   (* [22, 24, 33, 34]*)
let (element, q4) = delete_min q4;;   (* 22 * [24, 33, 34]*)
assert(element = 22);;
let (element, q4) = delete_min q4;;   (* 24 * [33, 34]*)
assert(element = 24);;
let (element, q4) = delete_min q4;;   (* 33 * [34]*)
assert(element = 33);;
let (element, q4) = delete_min q4;;   (* 34 * []*)
assert(element = 34);;
let q4 = add 37 q4;;   (* [37]*)
let (element, q4) = delete_min q4;;   (* 37 * []*)
assert(element = 37);;
let q4 = add 7 q4;;   (* [7]*)
let q4 = add 30 q4;;   (* [7, 30]*)
let q4 = add 16 q4;;   (* [7, 16, 30]*)
let (element, q4) = delete_min q4;;   (* 7 * [16, 30]*)
assert(element = 7);;
let (element, q4) = delete_min q4;;   (* 16 * [30]*)
assert(element = 16);;
let q4 = add 5 q4;;   (* [5, 30]*)
let (element, q4) = delete_min q4;;   (* 5 * [30]*)
assert(element = 5);;
let q4 = add 36 q4;;   (* [30, 36]*)
let q4 = add 10 q4;;   (* [10, 30, 36]*)
let q4 = add 33 q4;;   (* [10, 30, 33, 36]*)
assert(is_empty q4 = false);;   (*[10, 30, 33, 36]*)
let q4 = add 20 q4;;   (* [10, 20, 30, 33, 36]*)
let (element, q4) = delete_min q4;;   (* 10 * [20, 30, 33, 36]*)
assert(element = 10);;
let q4 = add 30 q4;;   (* [20, 30, 30, 33, 36]*)
let q4 = add 5 q4;;   (* [5, 20, 30, 30, 33, 36]*)
let (element, q4) = delete_min q4;;   (* 5 * [20, 30, 30, 33, 36]*)
assert(element = 5);;
let (element, q4) = delete_min q4;;   (* 20 * [30, 30, 33, 36]*)
assert(element = 20);;
let q4 = add 2 q4;;   (* [2, 30, 30, 33, 36]*)
let q4 = add 25 q4;;   (* [2, 25, 30, 30, 33, 36]*)
let q4 = add 21 q4;;   (* [2, 21, 25, 30, 30, 33, 36]*)
let q4 = add 24 q4;;   (* [2, 21, 24, 25, 30, 30, 33, 36]*)
let q4 = add 1 q4;;   (* [1, 2, 21, 24, 25, 30, 30, 33, 36]*)
let q4 = add 34 q4;;   (* [1, 2, 21, 24, 25, 30, 30, 33, 34, 36]*)
let q4 = add 1 q4;;   (* [1, 1, 2, 21, 24, 25, 30, 30, 33, 34, 36]*)
let (element, q4) = delete_min q4;;   (* 1 * [1, 2, 21, 24, 25, 30, 30, 33, 34, 36]*)
assert(element = 1);;
let (element, q4) = delete_min q4;;   (* 1 * [2, 21, 24, 25, 30, 30, 33, 34, 36]*)
assert(element = 1);;
let q4 = add 2 q4;;   (* [2, 2, 21, 24, 25, 30, 30, 33, 34, 36]*)
let q4 = add 8 q4;;   (* [2, 2, 8, 21, 24, 25, 30, 30, 33, 34, 36]*)
let (element, q4) = delete_min q4;;   (* 2 * [2, 8, 21, 24, 25, 30, 30, 33, 34, 36]*)
assert(element = 2);;
let (element, q4) = delete_min q4;;   (* 2 * [8, 21, 24, 25, 30, 30, 33, 34, 36]*)
assert(element = 2);;
let (element, q4) = delete_min q4;;   (* 8 * [21, 24, 25, 30, 30, 33, 34, 36]*)
assert(element = 8);;
let (element, q4) = delete_min q4;;   (* 21 * [24, 25, 30, 30, 33, 34, 36]*)
assert(element = 21);;
let q4 = add 35 q4;;   (* [24, 25, 30, 30, 33, 34, 35, 36]*)

(* -------q5------ *)
let q5 = empty;;
let q5 = add 22 q5;;   (* [22]*)
let q5 = add 36 q5;;   (* [22, 36]*)
let q5 = add 21 q5;;   (* [21, 22, 36]*)
let (element, q5) = delete_min q5;;   (* 21 * [22, 36]*)
assert(element = 21);;
let q5 = add 27 q5;;   (* [22, 27, 36]*)
let (element, q5) = delete_min q5;;   (* 22 * [27, 36]*)
assert(element = 22);;
let q5 = add 34 q5;;   (* [27, 34, 36]*)
let q5 = add 32 q5;;   (* [27, 32, 34, 36]*)
let q5 = add 37 q5;;   (* [27, 32, 34, 36, 37]*)
let q5 = add 31 q5;;   (* [27, 31, 32, 34, 36, 37]*)
let q5 = add 5 q5;;   (* [5, 27, 31, 32, 34, 36, 37]*)
assert(is_empty q5 = false);;   (*[5, 27, 31, 32, 34, 36, 37]*)
let q5 = add 7 q5;;   (* [5, 7, 27, 31, 32, 34, 36, 37]*)
let q5 = add 17 q5;;   (* [5, 7, 17, 27, 31, 32, 34, 36, 37]*)
let (element, q5) = delete_min q5;;   (* 5 * [7, 17, 27, 31, 32, 34, 36, 37]*)
assert(element = 5);;
let (element, q5) = delete_min q5;;   (* 7 * [17, 27, 31, 32, 34, 36, 37]*)
assert(element = 7);;
let q5 = add 16 q5;;   (* [16, 17, 27, 31, 32, 34, 36, 37]*)
let q5 = add 25 q5;;   (* [16, 17, 25, 27, 31, 32, 34, 36, 37]*)
let (element, q5) = delete_min q5;;   (* 16 * [17, 25, 27, 31, 32, 34, 36, 37]*)
assert(element = 16);;
let q5 = add 32 q5;;   (* [17, 25, 27, 31, 32, 32, 34, 36, 37]*)
let q5 = add 17 q5;;   (* [17, 17, 25, 27, 31, 32, 32, 34, 36, 37]*)
let (element, q5) = delete_min q5;;   (* 17 * [17, 25, 27, 31, 32, 32, 34, 36, 37]*)
assert(element = 17);;
let q5 = add 36 q5;;   (* [17, 25, 27, 31, 32, 32, 34, 36, 36, 37]*)
let q5 = add 26 q5;;   (* [17, 25, 26, 27, 31, 32, 32, 34, 36, 36, 37]*)
let q5 = add 36 q5;;   (* [17, 25, 26, 27, 31, 32, 32, 34, 36, 36, 36, 37]*)
let (element, q5) = delete_min q5;;   (* 17 * [25, 26, 27, 31, 32, 32, 34, 36, 36, 36, 37]*)
assert(element = 17);;
let (element, q5) = delete_min q5;;   (* 25 * [26, 27, 31, 32, 32, 34, 36, 36, 36, 37]*)
assert(element = 25);;
let q5 = add 15 q5;;   (* [15, 26, 27, 31, 32, 32, 34, 36, 36, 36, 37]*)
let q5 = add 12 q5;;   (* [12, 15, 26, 27, 31, 32, 32, 34, 36, 36, 36, 37]*)
let (element, q5) = delete_min q5;;   (* 12 * [15, 26, 27, 31, 32, 32, 34, 36, 36, 36, 37]*)
assert(element = 12);;
let q5 = add 20 q5;;   (* [15, 20, 26, 27, 31, 32, 32, 34, 36, 36, 36, 37]*)
let q5 = add 32 q5;;   (* [15, 20, 26, 27, 31, 32, 32, 32, 34, 36, 36, 36, 37]*)
let (element, q5) = delete_min q5;;   (* 15 * [20, 26, 27, 31, 32, 32, 32, 34, 36, 36, 36, 37]*)
assert(element = 15);;
let (element, q5) = delete_min q5;;   (* 20 * [26, 27, 31, 32, 32, 32, 34, 36, 36, 36, 37]*)
assert(element = 20);;
let (element, q5) = delete_min q5;;   (* 26 * [27, 31, 32, 32, 32, 34, 36, 36, 36, 37]*)
assert(element = 26);;
let q5 = add 32 q5;;   (* [27, 31, 32, 32, 32, 32, 34, 36, 36, 36, 37]*)
let q5 = add 32 q5;;   (* [27, 31, 32, 32, 32, 32, 32, 34, 36, 36, 36, 37]*)
let q5 = add 17 q5;;   (* [17, 27, 31, 32, 32, 32, 32, 32, 34, 36, 36, 36, 37]*)
let (element, q5) = delete_min q5;;   (* 17 * [27, 31, 32, 32, 32, 32, 32, 34, 36, 36, 36, 37]*)
assert(element = 17);;
let q5 = add 2 q5;;   (* [2, 27, 31, 32, 32, 32, 32, 32, 34, 36, 36, 36, 37]*)
let q5 = add 23 q5;;   (* [2, 23, 27, 31, 32, 32, 32, 32, 32, 34, 36, 36, 36, 37]*)
let q5 = add 5 q5;;   (* [2, 5, 23, 27, 31, 32, 32, 32, 32, 32, 34, 36, 36, 36, 37]*)
let q5 = add 12 q5;;   (* [2, 5, 12, 23, 27, 31, 32, 32, 32, 32, 32, 34, 36, 36, 36, 37]*)
let (element, q5) = delete_min q5;;   (* 2 * [5, 12, 23, 27, 31, 32, 32, 32, 32, 32, 34, 36, 36, 36, 37]*)
assert(element = 2);;
let q5 = add 39 q5;;   (* [5, 12, 23, 27, 31, 32, 32, 32, 32, 32, 34, 36, 36, 36, 37, 39]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[5, 5, 6, 12, 14, 14, 14, 18, 18, 18, 18, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39]*)
let (element, q) = delete_min q;;   (* 5 * [5, 6, 12, 14, 14, 14, 18, 18, 18, 18, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 5 * [6, 12, 14, 14, 14, 18, 18, 18, 18, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 6 * [12, 14, 14, 14, 18, 18, 18, 18, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 12 * [14, 14, 14, 18, 18, 18, 18, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 14 * [14, 14, 18, 18, 18, 18, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [14, 18, 18, 18, 18, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [18, 18, 18, 18, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 18 * [18, 18, 18, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [18, 18, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [18, 19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [19, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 21, 21, 21, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 21, 21, 21, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [21, 21, 21, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [21, 21, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [21, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [24, 25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [25, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [34, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 37, 37, 37, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 37, 37, 37, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [37, 37, 37, 38, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [37, 37, 38, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [37, 38, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [38, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST100----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 39 q1;;   (* [39]*)
let q1 = add 23 q1;;   (* [23, 39]*)
let (element, q1) = delete_min q1;;   (* 23 * [39]*)
assert(element = 23);;
let q1 = add 28 q1;;   (* [28, 39]*)
let q1 = add 10 q1;;   (* [10, 28, 39]*)
let q1 = add 18 q1;;   (* [10, 18, 28, 39]*)
let q1 = add 14 q1;;   (* [10, 14, 18, 28, 39]*)
let (element, q1) = delete_min q1;;   (* 10 * [14, 18, 28, 39]*)
assert(element = 10);;
let q1 = add 11 q1;;   (* [11, 14, 18, 28, 39]*)
let q1 = add 4 q1;;   (* [4, 11, 14, 18, 28, 39]*)
let q1 = add 17 q1;;   (* [4, 11, 14, 17, 18, 28, 39]*)
let q1 = add 33 q1;;   (* [4, 11, 14, 17, 18, 28, 33, 39]*)
assert(is_empty q1 = false);;   (*[4, 11, 14, 17, 18, 28, 33, 39]*)
let q1 = add 36 q1;;   (* [4, 11, 14, 17, 18, 28, 33, 36, 39]*)
let q1 = add 16 q1;;   (* [4, 11, 14, 16, 17, 18, 28, 33, 36, 39]*)
let q1 = add 36 q1;;   (* [4, 11, 14, 16, 17, 18, 28, 33, 36, 36, 39]*)
assert(is_empty q1 = false);;   (*[4, 11, 14, 16, 17, 18, 28, 33, 36, 36, 39]*)
let (element, q1) = delete_min q1;;   (* 4 * [11, 14, 16, 17, 18, 28, 33, 36, 36, 39]*)
assert(element = 4);;
let (element, q1) = delete_min q1;;   (* 11 * [14, 16, 17, 18, 28, 33, 36, 36, 39]*)
assert(element = 11);;
let q1 = add 16 q1;;   (* [14, 16, 16, 17, 18, 28, 33, 36, 36, 39]*)
let q1 = add 36 q1;;   (* [14, 16, 16, 17, 18, 28, 33, 36, 36, 36, 39]*)
let q1 = add 12 q1;;   (* [12, 14, 16, 16, 17, 18, 28, 33, 36, 36, 36, 39]*)
let q1 = add 14 q1;;   (* [12, 14, 14, 16, 16, 17, 18, 28, 33, 36, 36, 36, 39]*)
let (element, q1) = delete_min q1;;   (* 12 * [14, 14, 16, 16, 17, 18, 28, 33, 36, 36, 36, 39]*)
assert(element = 12);;
let q1 = add 30 q1;;   (* [14, 14, 16, 16, 17, 18, 28, 30, 33, 36, 36, 36, 39]*)
let q1 = add 6 q1;;   (* [6, 14, 14, 16, 16, 17, 18, 28, 30, 33, 36, 36, 36, 39]*)
let q1 = add 20 q1;;   (* [6, 14, 14, 16, 16, 17, 18, 20, 28, 30, 33, 36, 36, 36, 39]*)
let q1 = add 39 q1;;   (* [6, 14, 14, 16, 16, 17, 18, 20, 28, 30, 33, 36, 36, 36, 39, 39]*)
let (element, q1) = delete_min q1;;   (* 6 * [14, 14, 16, 16, 17, 18, 20, 28, 30, 33, 36, 36, 36, 39, 39]*)
assert(element = 6);;
assert(is_empty q1 = false);;   (*[14, 14, 16, 16, 17, 18, 20, 28, 30, 33, 36, 36, 36, 39, 39]*)
let q1 = add 23 q1;;   (* [14, 14, 16, 16, 17, 18, 20, 23, 28, 30, 33, 36, 36, 36, 39, 39]*)
let q1 = add 9 q1;;   (* [9, 14, 14, 16, 16, 17, 18, 20, 23, 28, 30, 33, 36, 36, 36, 39, 39]*)
let (element, q1) = delete_min q1;;   (* 9 * [14, 14, 16, 16, 17, 18, 20, 23, 28, 30, 33, 36, 36, 36, 39, 39]*)
assert(element = 9);;
let q1 = add 13 q1;;   (* [13, 14, 14, 16, 16, 17, 18, 20, 23, 28, 30, 33, 36, 36, 36, 39, 39]*)
let (element, q1) = delete_min q1;;   (* 13 * [14, 14, 16, 16, 17, 18, 20, 23, 28, 30, 33, 36, 36, 36, 39, 39]*)
assert(element = 13);;
let q1 = add 27 q1;;   (* [14, 14, 16, 16, 17, 18, 20, 23, 27, 28, 30, 33, 36, 36, 36, 39, 39]*)
let q1 = add 8 q1;;   (* [8, 14, 14, 16, 16, 17, 18, 20, 23, 27, 28, 30, 33, 36, 36, 36, 39, 39]*)
let q1 = add 6 q1;;   (* [6, 8, 14, 14, 16, 16, 17, 18, 20, 23, 27, 28, 30, 33, 36, 36, 36, 39, 39]*)
let (element, q1) = delete_min q1;;   (* 6 * [8, 14, 14, 16, 16, 17, 18, 20, 23, 27, 28, 30, 33, 36, 36, 36, 39, 39]*)
assert(element = 6);;
let q1 = add 28 q1;;   (* [8, 14, 14, 16, 16, 17, 18, 20, 23, 27, 28, 28, 30, 33, 36, 36, 36, 39, 39]*)
let q1 = add 20 q1;;   (* [8, 14, 14, 16, 16, 17, 18, 20, 20, 23, 27, 28, 28, 30, 33, 36, 36, 36, 39, 39]*)
let q1 = add 5 q1;;   (* [5, 8, 14, 14, 16, 16, 17, 18, 20, 20, 23, 27, 28, 28, 30, 33, 36, 36, 36, 39, 39]*)
assert(is_empty q1 = false);;   (*[5, 8, 14, 14, 16, 16, 17, 18, 20, 20, 23, 27, 28, 28, 30, 33, 36, 36, 36, 39, 39]*)
let q1 = add 22 q1;;   (* [5, 8, 14, 14, 16, 16, 17, 18, 20, 20, 22, 23, 27, 28, 28, 30, 33, 36, 36, 36, 39, 39]*)
let q1 = add 3 q1;;   (* [3, 5, 8, 14, 14, 16, 16, 17, 18, 20, 20, 22, 23, 27, 28, 28, 30, 33, 36, 36, 36, 39, 39]*)
let (element, q1) = delete_min q1;;   (* 3 * [5, 8, 14, 14, 16, 16, 17, 18, 20, 20, 22, 23, 27, 28, 28, 30, 33, 36, 36, 36, 39, 39]*)
assert(element = 3);;

(* -------q2------ *)
let q2 = empty;;
let q2 = add 22 q2;;   (* [22]*)
let q2 = add 28 q2;;   (* [22, 28]*)
let q2 = add 15 q2;;   (* [15, 22, 28]*)
let q2 = add 21 q2;;   (* [15, 21, 22, 28]*)
let (element, q2) = delete_min q2;;   (* 15 * [21, 22, 28]*)
assert(element = 15);;
let q2 = add 13 q2;;   (* [13, 21, 22, 28]*)
let (element, q2) = delete_min q2;;   (* 13 * [21, 22, 28]*)
assert(element = 13);;
let (element, q2) = delete_min q2;;   (* 21 * [22, 28]*)
assert(element = 21);;
let (element, q2) = delete_min q2;;   (* 22 * [28]*)
assert(element = 22);;
let (element, q2) = delete_min q2;;   (* 28 * []*)
assert(element = 28);;
let q2 = add 11 q2;;   (* [11]*)
let q2 = add 4 q2;;   (* [4, 11]*)
let (element, q2) = delete_min q2;;   (* 4 * [11]*)
assert(element = 4);;
let (element, q2) = delete_min q2;;   (* 11 * []*)
assert(element = 11);;
let q2 = add 9 q2;;   (* [9]*)
let q2 = add 14 q2;;   (* [9, 14]*)
let (element, q2) = delete_min q2;;   (* 9 * [14]*)
assert(element = 9);;
assert(is_empty q2 = false);;   (*[14]*)
let q2 = add 36 q2;;   (* [14, 36]*)
let q2 = add 30 q2;;   (* [14, 30, 36]*)
let q2 = add 20 q2;;   (* [14, 20, 30, 36]*)
let (element, q2) = delete_min q2;;   (* 14 * [20, 30, 36]*)
assert(element = 14);;
let q2 = add 26 q2;;   (* [20, 26, 30, 36]*)
let q2 = add 12 q2;;   (* [12, 20, 26, 30, 36]*)
let q2 = add 39 q2;;   (* [12, 20, 26, 30, 36, 39]*)
let q2 = add 15 q2;;   (* [12, 15, 20, 26, 30, 36, 39]*)
let (element, q2) = delete_min q2;;   (* 12 * [15, 20, 26, 30, 36, 39]*)
assert(element = 12);;
let (element, q2) = delete_min q2;;   (* 15 * [20, 26, 30, 36, 39]*)
assert(element = 15);;
assert(is_empty q2 = false);;   (*[20, 26, 30, 36, 39]*)
let (element, q2) = delete_min q2;;   (* 20 * [26, 30, 36, 39]*)
assert(element = 20);;
let (element, q2) = delete_min q2;;   (* 26 * [30, 36, 39]*)
assert(element = 26);;
let (element, q2) = delete_min q2;;   (* 30 * [36, 39]*)
assert(element = 30);;
let q2 = add 12 q2;;   (* [12, 36, 39]*)
let q2 = add 30 q2;;   (* [12, 30, 36, 39]*)
let (element, q2) = delete_min q2;;   (* 12 * [30, 36, 39]*)
assert(element = 12);;
let q2 = add 3 q2;;   (* [3, 30, 36, 39]*)
let q2 = add 17 q2;;   (* [3, 17, 30, 36, 39]*)
let q2 = add 6 q2;;   (* [3, 6, 17, 30, 36, 39]*)
let (element, q2) = delete_min q2;;   (* 3 * [6, 17, 30, 36, 39]*)
assert(element = 3);;
let q2 = add 3 q2;;   (* [3, 6, 17, 30, 36, 39]*)
let q2 = add 30 q2;;   (* [3, 6, 17, 30, 30, 36, 39]*)
let q2 = add 29 q2;;   (* [3, 6, 17, 29, 30, 30, 36, 39]*)
let q2 = add 22 q2;;   (* [3, 6, 17, 22, 29, 30, 30, 36, 39]*)
let q2 = add 27 q2;;   (* [3, 6, 17, 22, 27, 29, 30, 30, 36, 39]*)
let q2 = add 35 q2;;   (* [3, 6, 17, 22, 27, 29, 30, 30, 35, 36, 39]*)
let (element, q2) = delete_min q2;;   (* 3 * [6, 17, 22, 27, 29, 30, 30, 35, 36, 39]*)
assert(element = 3);;

(* -------q3------ *)
let q3 = empty;;
let q3 = add 32 q3;;   (* [32]*)
let q3 = add 9 q3;;   (* [9, 32]*)
let q3 = add 6 q3;;   (* [6, 9, 32]*)
let q3 = add 9 q3;;   (* [6, 9, 9, 32]*)
let q3 = add 2 q3;;   (* [2, 6, 9, 9, 32]*)
let (element, q3) = delete_min q3;;   (* 2 * [6, 9, 9, 32]*)
assert(element = 2);;
let q3 = add 17 q3;;   (* [6, 9, 9, 17, 32]*)
let q3 = add 31 q3;;   (* [6, 9, 9, 17, 31, 32]*)
let q3 = add 13 q3;;   (* [6, 9, 9, 13, 17, 31, 32]*)
let q3 = add 16 q3;;   (* [6, 9, 9, 13, 16, 17, 31, 32]*)
let q3 = add 33 q3;;   (* [6, 9, 9, 13, 16, 17, 31, 32, 33]*)
let q3 = add 2 q3;;   (* [2, 6, 9, 9, 13, 16, 17, 31, 32, 33]*)
let q3 = add 12 q3;;   (* [2, 6, 9, 9, 12, 13, 16, 17, 31, 32, 33]*)
let q3 = add 14 q3;;   (* [2, 6, 9, 9, 12, 13, 14, 16, 17, 31, 32, 33]*)
let q3 = add 5 q3;;   (* [2, 5, 6, 9, 9, 12, 13, 14, 16, 17, 31, 32, 33]*)
let q3 = add 6 q3;;   (* [2, 5, 6, 6, 9, 9, 12, 13, 14, 16, 17, 31, 32, 33]*)
let q3 = add 4 q3;;   (* [2, 4, 5, 6, 6, 9, 9, 12, 13, 14, 16, 17, 31, 32, 33]*)
let q3 = add 10 q3;;   (* [2, 4, 5, 6, 6, 9, 9, 10, 12, 13, 14, 16, 17, 31, 32, 33]*)
let q3 = add 14 q3;;   (* [2, 4, 5, 6, 6, 9, 9, 10, 12, 13, 14, 14, 16, 17, 31, 32, 33]*)
let (element, q3) = delete_min q3;;   (* 2 * [4, 5, 6, 6, 9, 9, 10, 12, 13, 14, 14, 16, 17, 31, 32, 33]*)
assert(element = 2);;
let q3 = add 32 q3;;   (* [4, 5, 6, 6, 9, 9, 10, 12, 13, 14, 14, 16, 17, 31, 32, 32, 33]*)
let (element, q3) = delete_min q3;;   (* 4 * [5, 6, 6, 9, 9, 10, 12, 13, 14, 14, 16, 17, 31, 32, 32, 33]*)
assert(element = 4);;
let q3 = add 33 q3;;   (* [5, 6, 6, 9, 9, 10, 12, 13, 14, 14, 16, 17, 31, 32, 32, 33, 33]*)
assert(is_empty q3 = false);;   (*[5, 6, 6, 9, 9, 10, 12, 13, 14, 14, 16, 17, 31, 32, 32, 33, 33]*)
let q3 = add 16 q3;;   (* [5, 6, 6, 9, 9, 10, 12, 13, 14, 14, 16, 16, 17, 31, 32, 32, 33, 33]*)
let q3 = add 34 q3;;   (* [5, 6, 6, 9, 9, 10, 12, 13, 14, 14, 16, 16, 17, 31, 32, 32, 33, 33, 34]*)
let q3 = add 2 q3;;   (* [2, 5, 6, 6, 9, 9, 10, 12, 13, 14, 14, 16, 16, 17, 31, 32, 32, 33, 33, 34]*)
let (element, q3) = delete_min q3;;   (* 2 * [5, 6, 6, 9, 9, 10, 12, 13, 14, 14, 16, 16, 17, 31, 32, 32, 33, 33, 34]*)
assert(element = 2);;
let (element, q3) = delete_min q3;;   (* 5 * [6, 6, 9, 9, 10, 12, 13, 14, 14, 16, 16, 17, 31, 32, 32, 33, 33, 34]*)
assert(element = 5);;
let q3 = add 38 q3;;   (* [6, 6, 9, 9, 10, 12, 13, 14, 14, 16, 16, 17, 31, 32, 32, 33, 33, 34, 38]*)
let q3 = add 33 q3;;   (* [6, 6, 9, 9, 10, 12, 13, 14, 14, 16, 16, 17, 31, 32, 32, 33, 33, 33, 34, 38]*)
let (element, q3) = delete_min q3;;   (* 6 * [6, 9, 9, 10, 12, 13, 14, 14, 16, 16, 17, 31, 32, 32, 33, 33, 33, 34, 38]*)
assert(element = 6);;
let q3 = add 11 q3;;   (* [6, 9, 9, 10, 11, 12, 13, 14, 14, 16, 16, 17, 31, 32, 32, 33, 33, 33, 34, 38]*)
let q3 = add 8 q3;;   (* [6, 8, 9, 9, 10, 11, 12, 13, 14, 14, 16, 16, 17, 31, 32, 32, 33, 33, 33, 34, 38]*)
let (element, q3) = delete_min q3;;   (* 6 * [8, 9, 9, 10, 11, 12, 13, 14, 14, 16, 16, 17, 31, 32, 32, 33, 33, 33, 34, 38]*)
assert(element = 6);;
let q3 = add 18 q3;;   (* [8, 9, 9, 10, 11, 12, 13, 14, 14, 16, 16, 17, 18, 31, 32, 32, 33, 33, 33, 34, 38]*)
let q3 = add 38 q3;;   (* [8, 9, 9, 10, 11, 12, 13, 14, 14, 16, 16, 17, 18, 31, 32, 32, 33, 33, 33, 34, 38, 38]*)
let q3 = add 39 q3;;   (* [8, 9, 9, 10, 11, 12, 13, 14, 14, 16, 16, 17, 18, 31, 32, 32, 33, 33, 33, 34, 38, 38, 39]*)
let (element, q3) = delete_min q3;;   (* 8 * [9, 9, 10, 11, 12, 13, 14, 14, 16, 16, 17, 18, 31, 32, 32, 33, 33, 33, 34, 38, 38, 39]*)
assert(element = 8);;
let q3 = add 11 q3;;   (* [9, 9, 10, 11, 11, 12, 13, 14, 14, 16, 16, 17, 18, 31, 32, 32, 33, 33, 33, 34, 38, 38, 39]*)
let q3 = add 20 q3;;   (* [9, 9, 10, 11, 11, 12, 13, 14, 14, 16, 16, 17, 18, 20, 31, 32, 32, 33, 33, 33, 34, 38, 38, 39]*)
let q3 = add 1 q3;;   (* [1, 9, 9, 10, 11, 11, 12, 13, 14, 14, 16, 16, 17, 18, 20, 31, 32, 32, 33, 33, 33, 34, 38, 38, 39]*)
let (element, q3) = delete_min q3;;   (* 1 * [9, 9, 10, 11, 11, 12, 13, 14, 14, 16, 16, 17, 18, 20, 31, 32, 32, 33, 33, 33, 34, 38, 38, 39]*)
assert(element = 1);;
let q3 = add 32 q3;;   (* [9, 9, 10, 11, 11, 12, 13, 14, 14, 16, 16, 17, 18, 20, 31, 32, 32, 32, 33, 33, 33, 34, 38, 38, 39]*)
assert(is_empty q3 = false);;   (*[9, 9, 10, 11, 11, 12, 13, 14, 14, 16, 16, 17, 18, 20, 31, 32, 32, 32, 33, 33, 33, 34, 38, 38, 39]*)
let q3 = add 22 q3;;   (* [9, 9, 10, 11, 11, 12, 13, 14, 14, 16, 16, 17, 18, 20, 22, 31, 32, 32, 32, 33, 33, 33, 34, 38, 38, 39]*)

(* -------q4------ *)
let q4 = empty;;
assert(is_empty q4 = true);;   (*[]*)
let q4 = add 15 q4;;   (* [15]*)
assert(is_empty q4 = false);;   (*[15]*)
let q4 = add 11 q4;;   (* [11, 15]*)
let q4 = add 6 q4;;   (* [6, 11, 15]*)
let (element, q4) = delete_min q4;;   (* 6 * [11, 15]*)
assert(element = 6);;
let q4 = add 15 q4;;   (* [11, 15, 15]*)
let q4 = add 25 q4;;   (* [11, 15, 15, 25]*)
let (element, q4) = delete_min q4;;   (* 11 * [15, 15, 25]*)
assert(element = 11);;
let (element, q4) = delete_min q4;;   (* 15 * [15, 25]*)
assert(element = 15);;
let q4 = add 31 q4;;   (* [15, 25, 31]*)
let q4 = add 39 q4;;   (* [15, 25, 31, 39]*)
let (element, q4) = delete_min q4;;   (* 15 * [25, 31, 39]*)
assert(element = 15);;
let q4 = add 34 q4;;   (* [25, 31, 34, 39]*)
let q4 = add 1 q4;;   (* [1, 25, 31, 34, 39]*)
let q4 = add 33 q4;;   (* [1, 25, 31, 33, 34, 39]*)
let (element, q4) = delete_min q4;;   (* 1 * [25, 31, 33, 34, 39]*)
assert(element = 1);;
let q4 = add 0 q4;;   (* [0, 25, 31, 33, 34, 39]*)
let q4 = add 27 q4;;   (* [0, 25, 27, 31, 33, 34, 39]*)
assert(is_empty q4 = false);;   (*[0, 25, 27, 31, 33, 34, 39]*)
let q4 = add 0 q4;;   (* [0, 0, 25, 27, 31, 33, 34, 39]*)
assert(is_empty q4 = false);;   (*[0, 0, 25, 27, 31, 33, 34, 39]*)
assert(is_empty q4 = false);;   (*[0, 0, 25, 27, 31, 33, 34, 39]*)
assert(is_empty q4 = false);;   (*[0, 0, 25, 27, 31, 33, 34, 39]*)
let (element, q4) = delete_min q4;;   (* 0 * [0, 25, 27, 31, 33, 34, 39]*)
assert(element = 0);;
let (element, q4) = delete_min q4;;   (* 0 * [25, 27, 31, 33, 34, 39]*)
assert(element = 0);;
let (element, q4) = delete_min q4;;   (* 25 * [27, 31, 33, 34, 39]*)
assert(element = 25);;
let q4 = add 36 q4;;   (* [27, 31, 33, 34, 36, 39]*)
let (element, q4) = delete_min q4;;   (* 27 * [31, 33, 34, 36, 39]*)
assert(element = 27);;
let q4 = add 1 q4;;   (* [1, 31, 33, 34, 36, 39]*)
let q4 = add 26 q4;;   (* [1, 26, 31, 33, 34, 36, 39]*)
let q4 = add 0 q4;;   (* [0, 1, 26, 31, 33, 34, 36, 39]*)
let q4 = add 26 q4;;   (* [0, 1, 26, 26, 31, 33, 34, 36, 39]*)
let q4 = add 14 q4;;   (* [0, 1, 14, 26, 26, 31, 33, 34, 36, 39]*)
let q4 = add 14 q4;;   (* [0, 1, 14, 14, 26, 26, 31, 33, 34, 36, 39]*)
let q4 = add 2 q4;;   (* [0, 1, 2, 14, 14, 26, 26, 31, 33, 34, 36, 39]*)
let q4 = add 17 q4;;   (* [0, 1, 2, 14, 14, 17, 26, 26, 31, 33, 34, 36, 39]*)
let (element, q4) = delete_min q4;;   (* 0 * [1, 2, 14, 14, 17, 26, 26, 31, 33, 34, 36, 39]*)
assert(element = 0);;
let (element, q4) = delete_min q4;;   (* 1 * [2, 14, 14, 17, 26, 26, 31, 33, 34, 36, 39]*)
assert(element = 1);;
let q4 = add 22 q4;;   (* [2, 14, 14, 17, 22, 26, 26, 31, 33, 34, 36, 39]*)
let q4 = add 16 q4;;   (* [2, 14, 14, 16, 17, 22, 26, 26, 31, 33, 34, 36, 39]*)
let q4 = add 36 q4;;   (* [2, 14, 14, 16, 17, 22, 26, 26, 31, 33, 34, 36, 36, 39]*)
let (element, q4) = delete_min q4;;   (* 2 * [14, 14, 16, 17, 22, 26, 26, 31, 33, 34, 36, 36, 39]*)
assert(element = 2);;
let (element, q4) = delete_min q4;;   (* 14 * [14, 16, 17, 22, 26, 26, 31, 33, 34, 36, 36, 39]*)
assert(element = 14);;
let q4 = add 24 q4;;   (* [14, 16, 17, 22, 24, 26, 26, 31, 33, 34, 36, 36, 39]*)
let q4 = add 23 q4;;   (* [14, 16, 17, 22, 23, 24, 26, 26, 31, 33, 34, 36, 36, 39]*)

(* -------q5------ *)
let q5 = empty;;
let q5 = add 32 q5;;   (* [32]*)
let q5 = add 12 q5;;   (* [12, 32]*)
let (element, q5) = delete_min q5;;   (* 12 * [32]*)
assert(element = 12);;
let q5 = add 11 q5;;   (* [11, 32]*)
let q5 = add 0 q5;;   (* [0, 11, 32]*)
let (element, q5) = delete_min q5;;   (* 0 * [11, 32]*)
assert(element = 0);;
let q5 = add 20 q5;;   (* [11, 20, 32]*)
let (element, q5) = delete_min q5;;   (* 11 * [20, 32]*)
assert(element = 11);;
let q5 = add 20 q5;;   (* [20, 20, 32]*)
let q5 = add 21 q5;;   (* [20, 20, 21, 32]*)
let (element, q5) = delete_min q5;;   (* 20 * [20, 21, 32]*)
assert(element = 20);;
let q5 = add 7 q5;;   (* [7, 20, 21, 32]*)
assert(is_empty q5 = false);;   (*[7, 20, 21, 32]*)
let q5 = add 1 q5;;   (* [1, 7, 20, 21, 32]*)
let q5 = add 26 q5;;   (* [1, 7, 20, 21, 26, 32]*)
let (element, q5) = delete_min q5;;   (* 1 * [7, 20, 21, 26, 32]*)
assert(element = 1);;
let (element, q5) = delete_min q5;;   (* 7 * [20, 21, 26, 32]*)
assert(element = 7);;
let q5 = add 26 q5;;   (* [20, 21, 26, 26, 32]*)
let q5 = add 5 q5;;   (* [5, 20, 21, 26, 26, 32]*)
let q5 = add 38 q5;;   (* [5, 20, 21, 26, 26, 32, 38]*)
let q5 = add 38 q5;;   (* [5, 20, 21, 26, 26, 32, 38, 38]*)
let (element, q5) = delete_min q5;;   (* 5 * [20, 21, 26, 26, 32, 38, 38]*)
assert(element = 5);;
let q5 = add 33 q5;;   (* [20, 21, 26, 26, 32, 33, 38, 38]*)
let q5 = add 10 q5;;   (* [10, 20, 21, 26, 26, 32, 33, 38, 38]*)
let q5 = add 17 q5;;   (* [10, 17, 20, 21, 26, 26, 32, 33, 38, 38]*)
let q5 = add 21 q5;;   (* [10, 17, 20, 21, 21, 26, 26, 32, 33, 38, 38]*)
let (element, q5) = delete_min q5;;   (* 10 * [17, 20, 21, 21, 26, 26, 32, 33, 38, 38]*)
assert(element = 10);;
let (element, q5) = delete_min q5;;   (* 17 * [20, 21, 21, 26, 26, 32, 33, 38, 38]*)
assert(element = 17);;
let (element, q5) = delete_min q5;;   (* 20 * [21, 21, 26, 26, 32, 33, 38, 38]*)
assert(element = 20);;
let (element, q5) = delete_min q5;;   (* 21 * [21, 26, 26, 32, 33, 38, 38]*)
assert(element = 21);;
let q5 = add 26 q5;;   (* [21, 26, 26, 26, 32, 33, 38, 38]*)
assert(is_empty q5 = false);;   (*[21, 26, 26, 26, 32, 33, 38, 38]*)
let (element, q5) = delete_min q5;;   (* 21 * [26, 26, 26, 32, 33, 38, 38]*)
assert(element = 21);;
let (element, q5) = delete_min q5;;   (* 26 * [26, 26, 32, 33, 38, 38]*)
assert(element = 26);;
let q5 = add 10 q5;;   (* [10, 26, 26, 32, 33, 38, 38]*)
let q5 = add 9 q5;;   (* [9, 10, 26, 26, 32, 33, 38, 38]*)
let q5 = add 15 q5;;   (* [9, 10, 15, 26, 26, 32, 33, 38, 38]*)
let (element, q5) = delete_min q5;;   (* 9 * [10, 15, 26, 26, 32, 33, 38, 38]*)
assert(element = 9);;
let (element, q5) = delete_min q5;;   (* 10 * [15, 26, 26, 32, 33, 38, 38]*)
assert(element = 10);;
let (element, q5) = delete_min q5;;   (* 15 * [26, 26, 32, 33, 38, 38]*)
assert(element = 15);;
let q5 = add 35 q5;;   (* [26, 26, 32, 33, 35, 38, 38]*)
let q5 = add 39 q5;;   (* [26, 26, 32, 33, 35, 38, 38, 39]*)
let q5 = add 19 q5;;   (* [19, 26, 26, 32, 33, 35, 38, 38, 39]*)
assert(is_empty q5 = false);;   (*[19, 26, 26, 32, 33, 35, 38, 38, 39]*)
let q5 = add 30 q5;;   (* [19, 26, 26, 30, 32, 33, 35, 38, 38, 39]*)
let q5 = add 33 q5;;   (* [19, 26, 26, 30, 32, 33, 33, 35, 38, 38, 39]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[5, 6, 8, 9, 9, 10, 11, 11, 12, 13, 14, 14, 14, 14, 14, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 19, 20, 20, 20, 22, 22, 22, 22, 23, 23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
let (element, q) = delete_min q;;   (* 5 * [6, 8, 9, 9, 10, 11, 11, 12, 13, 14, 14, 14, 14, 14, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 19, 20, 20, 20, 22, 22, 22, 22, 23, 23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 6 * [8, 9, 9, 10, 11, 11, 12, 13, 14, 14, 14, 14, 14, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 19, 20, 20, 20, 22, 22, 22, 22, 23, 23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 8 * [9, 9, 10, 11, 11, 12, 13, 14, 14, 14, 14, 14, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 19, 20, 20, 20, 22, 22, 22, 22, 23, 23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 9 * [9, 10, 11, 11, 12, 13, 14, 14, 14, 14, 14, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 19, 20, 20, 20, 22, 22, 22, 22, 23, 23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 9 * [10, 11, 11, 12, 13, 14, 14, 14, 14, 14, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 19, 20, 20, 20, 22, 22, 22, 22, 23, 23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 10 * [11, 11, 12, 13, 14, 14, 14, 14, 14, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 19, 20, 20, 20, 22, 22, 22, 22, 23, 23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 11 * [11, 12, 13, 14, 14, 14, 14, 14, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 19, 20, 20, 20, 22, 22, 22, 22, 23, 23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 11 * [12, 13, 14, 14, 14, 14, 14, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 19, 20, 20, 20, 22, 22, 22, 22, 23, 23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 12 * [13, 14, 14, 14, 14, 14, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 19, 20, 20, 20, 22, 22, 22, 22, 23, 23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 13 * [14, 14, 14, 14, 14, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 19, 20, 20, 20, 22, 22, 22, 22, 23, 23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 14 * [14, 14, 14, 14, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 19, 20, 20, 20, 22, 22, 22, 22, 23, 23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [14, 14, 14, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 19, 20, 20, 20, 22, 22, 22, 22, 23, 23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [14, 14, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 19, 20, 20, 20, 22, 22, 22, 22, 23, 23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [14, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 19, 20, 20, 20, 22, 22, 22, 22, 23, 23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 19, 20, 20, 20, 22, 22, 22, 22, 23, 23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 16 * [16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 19, 20, 20, 20, 22, 22, 22, 22, 23, 23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [16, 16, 16, 17, 17, 17, 17, 18, 18, 19, 20, 20, 20, 22, 22, 22, 22, 23, 23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [16, 16, 17, 17, 17, 17, 18, 18, 19, 20, 20, 20, 22, 22, 22, 22, 23, 23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [16, 17, 17, 17, 17, 18, 18, 19, 20, 20, 20, 22, 22, 22, 22, 23, 23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [17, 17, 17, 17, 18, 18, 19, 20, 20, 20, 22, 22, 22, 22, 23, 23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 17 * [17, 17, 17, 18, 18, 19, 20, 20, 20, 22, 22, 22, 22, 23, 23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [17, 17, 18, 18, 19, 20, 20, 20, 22, 22, 22, 22, 23, 23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [17, 18, 18, 19, 20, 20, 20, 22, 22, 22, 22, 23, 23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [18, 18, 19, 20, 20, 20, 22, 22, 22, 22, 23, 23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [18, 19, 20, 20, 20, 22, 22, 22, 22, 23, 23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [19, 20, 20, 20, 22, 22, 22, 22, 23, 23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [20, 20, 20, 22, 22, 22, 22, 23, 23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 22, 22, 22, 22, 23, 23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 22, 22, 22, 22, 23, 23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [22, 22, 22, 22, 23, 23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 22 * [22, 22, 22, 23, 23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [22, 22, 23, 23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [22, 23, 23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [23, 23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [23, 24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [24, 26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [26, 26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 26 * [26, 26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [26, 26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [26, 27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [27, 27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [27, 28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [28, 28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [28, 29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [29, 30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [30, 30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [30, 30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [30, 30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [30, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [34, 34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 39, 39, 39, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39, 39, 39, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39, 39, 39, 39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39, 39, 39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39, 39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST101----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 1 q1;;   (* [1]*)
let (element, q1) = delete_min q1;;   (* 1 * []*)
assert(element = 1);;
let q1 = add 20 q1;;   (* [20]*)
let q1 = add 30 q1;;   (* [20, 30]*)
let q1 = add 26 q1;;   (* [20, 26, 30]*)
let q1 = add 0 q1;;   (* [0, 20, 26, 30]*)
assert(is_empty q1 = false);;   (*[0, 20, 26, 30]*)
let q1 = add 14 q1;;   (* [0, 14, 20, 26, 30]*)
let q1 = add 29 q1;;   (* [0, 14, 20, 26, 29, 30]*)
let q1 = add 38 q1;;   (* [0, 14, 20, 26, 29, 30, 38]*)
let (element, q1) = delete_min q1;;   (* 0 * [14, 20, 26, 29, 30, 38]*)
assert(element = 0);;
let q1 = add 0 q1;;   (* [0, 14, 20, 26, 29, 30, 38]*)
let q1 = add 0 q1;;   (* [0, 0, 14, 20, 26, 29, 30, 38]*)
let q1 = add 24 q1;;   (* [0, 0, 14, 20, 24, 26, 29, 30, 38]*)
let q1 = add 16 q1;;   (* [0, 0, 14, 16, 20, 24, 26, 29, 30, 38]*)
let (element, q1) = delete_min q1;;   (* 0 * [0, 14, 16, 20, 24, 26, 29, 30, 38]*)
assert(element = 0);;
let q1 = add 13 q1;;   (* [0, 13, 14, 16, 20, 24, 26, 29, 30, 38]*)
let q1 = add 1 q1;;   (* [0, 1, 13, 14, 16, 20, 24, 26, 29, 30, 38]*)
let (element, q1) = delete_min q1;;   (* 0 * [1, 13, 14, 16, 20, 24, 26, 29, 30, 38]*)
assert(element = 0);;
let (element, q1) = delete_min q1;;   (* 1 * [13, 14, 16, 20, 24, 26, 29, 30, 38]*)
assert(element = 1);;
let (element, q1) = delete_min q1;;   (* 13 * [14, 16, 20, 24, 26, 29, 30, 38]*)
assert(element = 13);;
let q1 = add 22 q1;;   (* [14, 16, 20, 22, 24, 26, 29, 30, 38]*)
let q1 = add 8 q1;;   (* [8, 14, 16, 20, 22, 24, 26, 29, 30, 38]*)
let q1 = add 16 q1;;   (* [8, 14, 16, 16, 20, 22, 24, 26, 29, 30, 38]*)
let (element, q1) = delete_min q1;;   (* 8 * [14, 16, 16, 20, 22, 24, 26, 29, 30, 38]*)
assert(element = 8);;
let (element, q1) = delete_min q1;;   (* 14 * [16, 16, 20, 22, 24, 26, 29, 30, 38]*)
assert(element = 14);;
let (element, q1) = delete_min q1;;   (* 16 * [16, 20, 22, 24, 26, 29, 30, 38]*)
assert(element = 16);;
let q1 = add 28 q1;;   (* [16, 20, 22, 24, 26, 28, 29, 30, 38]*)
let q1 = add 21 q1;;   (* [16, 20, 21, 22, 24, 26, 28, 29, 30, 38]*)
let q1 = add 10 q1;;   (* [10, 16, 20, 21, 22, 24, 26, 28, 29, 30, 38]*)
let (element, q1) = delete_min q1;;   (* 10 * [16, 20, 21, 22, 24, 26, 28, 29, 30, 38]*)
assert(element = 10);;
let q1 = add 5 q1;;   (* [5, 16, 20, 21, 22, 24, 26, 28, 29, 30, 38]*)
let (element, q1) = delete_min q1;;   (* 5 * [16, 20, 21, 22, 24, 26, 28, 29, 30, 38]*)
assert(element = 5);;
let q1 = add 5 q1;;   (* [5, 16, 20, 21, 22, 24, 26, 28, 29, 30, 38]*)
let q1 = add 34 q1;;   (* [5, 16, 20, 21, 22, 24, 26, 28, 29, 30, 34, 38]*)
let q1 = add 28 q1;;   (* [5, 16, 20, 21, 22, 24, 26, 28, 28, 29, 30, 34, 38]*)
let q1 = add 4 q1;;   (* [4, 5, 16, 20, 21, 22, 24, 26, 28, 28, 29, 30, 34, 38]*)
let q1 = add 16 q1;;   (* [4, 5, 16, 16, 20, 21, 22, 24, 26, 28, 28, 29, 30, 34, 38]*)
let q1 = add 14 q1;;   (* [4, 5, 14, 16, 16, 20, 21, 22, 24, 26, 28, 28, 29, 30, 34, 38]*)
let q1 = add 20 q1;;   (* [4, 5, 14, 16, 16, 20, 20, 21, 22, 24, 26, 28, 28, 29, 30, 34, 38]*)
let q1 = add 24 q1;;   (* [4, 5, 14, 16, 16, 20, 20, 21, 22, 24, 24, 26, 28, 28, 29, 30, 34, 38]*)
assert(is_empty q1 = false);;   (*[4, 5, 14, 16, 16, 20, 20, 21, 22, 24, 24, 26, 28, 28, 29, 30, 34, 38]*)
let q1 = add 8 q1;;   (* [4, 5, 8, 14, 16, 16, 20, 20, 21, 22, 24, 24, 26, 28, 28, 29, 30, 34, 38]*)
let q1 = add 20 q1;;   (* [4, 5, 8, 14, 16, 16, 20, 20, 20, 21, 22, 24, 24, 26, 28, 28, 29, 30, 34, 38]*)
let (element, q1) = delete_min q1;;   (* 4 * [5, 8, 14, 16, 16, 20, 20, 20, 21, 22, 24, 24, 26, 28, 28, 29, 30, 34, 38]*)
assert(element = 4);;
let q1 = add 22 q1;;   (* [5, 8, 14, 16, 16, 20, 20, 20, 21, 22, 22, 24, 24, 26, 28, 28, 29, 30, 34, 38]*)
let q1 = add 12 q1;;   (* [5, 8, 12, 14, 16, 16, 20, 20, 20, 21, 22, 22, 24, 24, 26, 28, 28, 29, 30, 34, 38]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 34 q2;;   (* [34]*)
let (element, q2) = delete_min q2;;   (* 34 * []*)
assert(element = 34);;
assert(is_empty q2 = true);;   (*[]*)
let q2 = add 33 q2;;   (* [33]*)
let q2 = add 27 q2;;   (* [27, 33]*)
let q2 = add 33 q2;;   (* [27, 33, 33]*)
let q2 = add 11 q2;;   (* [11, 27, 33, 33]*)
let (element, q2) = delete_min q2;;   (* 11 * [27, 33, 33]*)
assert(element = 11);;
let q2 = add 15 q2;;   (* [15, 27, 33, 33]*)
let q2 = add 5 q2;;   (* [5, 15, 27, 33, 33]*)
let q2 = add 38 q2;;   (* [5, 15, 27, 33, 33, 38]*)
let (element, q2) = delete_min q2;;   (* 5 * [15, 27, 33, 33, 38]*)
assert(element = 5);;
let (element, q2) = delete_min q2;;   (* 15 * [27, 33, 33, 38]*)
assert(element = 15);;
let q2 = add 31 q2;;   (* [27, 31, 33, 33, 38]*)
let q2 = add 2 q2;;   (* [2, 27, 31, 33, 33, 38]*)
let q2 = add 32 q2;;   (* [2, 27, 31, 32, 33, 33, 38]*)
let q2 = add 12 q2;;   (* [2, 12, 27, 31, 32, 33, 33, 38]*)
let q2 = add 13 q2;;   (* [2, 12, 13, 27, 31, 32, 33, 33, 38]*)
let q2 = add 28 q2;;   (* [2, 12, 13, 27, 28, 31, 32, 33, 33, 38]*)
let (element, q2) = delete_min q2;;   (* 2 * [12, 13, 27, 28, 31, 32, 33, 33, 38]*)
assert(element = 2);;
let q2 = add 39 q2;;   (* [12, 13, 27, 28, 31, 32, 33, 33, 38, 39]*)
let q2 = add 23 q2;;   (* [12, 13, 23, 27, 28, 31, 32, 33, 33, 38, 39]*)
let (element, q2) = delete_min q2;;   (* 12 * [13, 23, 27, 28, 31, 32, 33, 33, 38, 39]*)
assert(element = 12);;
let q2 = add 12 q2;;   (* [12, 13, 23, 27, 28, 31, 32, 33, 33, 38, 39]*)
let q2 = add 30 q2;;   (* [12, 13, 23, 27, 28, 30, 31, 32, 33, 33, 38, 39]*)
let (element, q2) = delete_min q2;;   (* 12 * [13, 23, 27, 28, 30, 31, 32, 33, 33, 38, 39]*)
assert(element = 12);;
let q2 = add 39 q2;;   (* [13, 23, 27, 28, 30, 31, 32, 33, 33, 38, 39, 39]*)
let (element, q2) = delete_min q2;;   (* 13 * [23, 27, 28, 30, 31, 32, 33, 33, 38, 39, 39]*)
assert(element = 13);;
let (element, q2) = delete_min q2;;   (* 23 * [27, 28, 30, 31, 32, 33, 33, 38, 39, 39]*)
assert(element = 23);;
let q2 = add 10 q2;;   (* [10, 27, 28, 30, 31, 32, 33, 33, 38, 39, 39]*)
let q2 = add 30 q2;;   (* [10, 27, 28, 30, 30, 31, 32, 33, 33, 38, 39, 39]*)
let q2 = add 19 q2;;   (* [10, 19, 27, 28, 30, 30, 31, 32, 33, 33, 38, 39, 39]*)
let q2 = add 18 q2;;   (* [10, 18, 19, 27, 28, 30, 30, 31, 32, 33, 33, 38, 39, 39]*)
let (element, q2) = delete_min q2;;   (* 10 * [18, 19, 27, 28, 30, 30, 31, 32, 33, 33, 38, 39, 39]*)
assert(element = 10);;
let q2 = add 18 q2;;   (* [18, 18, 19, 27, 28, 30, 30, 31, 32, 33, 33, 38, 39, 39]*)
let (element, q2) = delete_min q2;;   (* 18 * [18, 19, 27, 28, 30, 30, 31, 32, 33, 33, 38, 39, 39]*)
assert(element = 18);;
let q2 = add 8 q2;;   (* [8, 18, 19, 27, 28, 30, 30, 31, 32, 33, 33, 38, 39, 39]*)
let q2 = add 7 q2;;   (* [7, 8, 18, 19, 27, 28, 30, 30, 31, 32, 33, 33, 38, 39, 39]*)
let q2 = add 23 q2;;   (* [7, 8, 18, 19, 23, 27, 28, 30, 30, 31, 32, 33, 33, 38, 39, 39]*)
let q2 = add 9 q2;;   (* [7, 8, 9, 18, 19, 23, 27, 28, 30, 30, 31, 32, 33, 33, 38, 39, 39]*)
let (element, q2) = delete_min q2;;   (* 7 * [8, 9, 18, 19, 23, 27, 28, 30, 30, 31, 32, 33, 33, 38, 39, 39]*)
assert(element = 7);;
let q2 = add 20 q2;;   (* [8, 9, 18, 19, 20, 23, 27, 28, 30, 30, 31, 32, 33, 33, 38, 39, 39]*)
let q2 = add 34 q2;;   (* [8, 9, 18, 19, 20, 23, 27, 28, 30, 30, 31, 32, 33, 33, 34, 38, 39, 39]*)
let q2 = add 6 q2;;   (* [6, 8, 9, 18, 19, 20, 23, 27, 28, 30, 30, 31, 32, 33, 33, 34, 38, 39, 39]*)
let q2 = add 39 q2;;   (* [6, 8, 9, 18, 19, 20, 23, 27, 28, 30, 30, 31, 32, 33, 33, 34, 38, 39, 39, 39]*)
let (element, q2) = delete_min q2;;   (* 6 * [8, 9, 18, 19, 20, 23, 27, 28, 30, 30, 31, 32, 33, 33, 34, 38, 39, 39, 39]*)
assert(element = 6);;
let q2 = add 9 q2;;   (* [8, 9, 9, 18, 19, 20, 23, 27, 28, 30, 30, 31, 32, 33, 33, 34, 38, 39, 39, 39]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 5 q3;;   (* [5]*)
let (element, q3) = delete_min q3;;   (* 5 * []*)
assert(element = 5);;
let q3 = add 37 q3;;   (* [37]*)
let q3 = add 11 q3;;   (* [11, 37]*)
let q3 = add 2 q3;;   (* [2, 11, 37]*)
let q3 = add 11 q3;;   (* [2, 11, 11, 37]*)
assert(is_empty q3 = false);;   (*[2, 11, 11, 37]*)
assert(is_empty q3 = false);;   (*[2, 11, 11, 37]*)
let (element, q3) = delete_min q3;;   (* 2 * [11, 11, 37]*)
assert(element = 2);;
assert(is_empty q3 = false);;   (*[11, 11, 37]*)
let (element, q3) = delete_min q3;;   (* 11 * [11, 37]*)
assert(element = 11);;
assert(is_empty q3 = false);;   (*[11, 37]*)
let q3 = add 19 q3;;   (* [11, 19, 37]*)
let q3 = add 33 q3;;   (* [11, 19, 33, 37]*)
let q3 = add 39 q3;;   (* [11, 19, 33, 37, 39]*)
let (element, q3) = delete_min q3;;   (* 11 * [19, 33, 37, 39]*)
assert(element = 11);;
let q3 = add 14 q3;;   (* [14, 19, 33, 37, 39]*)
let (element, q3) = delete_min q3;;   (* 14 * [19, 33, 37, 39]*)
assert(element = 14);;
let q3 = add 7 q3;;   (* [7, 19, 33, 37, 39]*)
let (element, q3) = delete_min q3;;   (* 7 * [19, 33, 37, 39]*)
assert(element = 7);;
let q3 = add 12 q3;;   (* [12, 19, 33, 37, 39]*)
let q3 = add 1 q3;;   (* [1, 12, 19, 33, 37, 39]*)
let (element, q3) = delete_min q3;;   (* 1 * [12, 19, 33, 37, 39]*)
assert(element = 1);;
let (element, q3) = delete_min q3;;   (* 12 * [19, 33, 37, 39]*)
assert(element = 12);;
let (element, q3) = delete_min q3;;   (* 19 * [33, 37, 39]*)
assert(element = 19);;
let (element, q3) = delete_min q3;;   (* 33 * [37, 39]*)
assert(element = 33);;
let q3 = add 1 q3;;   (* [1, 37, 39]*)
let q3 = add 32 q3;;   (* [1, 32, 37, 39]*)
let q3 = add 32 q3;;   (* [1, 32, 32, 37, 39]*)
let q3 = add 16 q3;;   (* [1, 16, 32, 32, 37, 39]*)
assert(is_empty q3 = false);;   (*[1, 16, 32, 32, 37, 39]*)
let q3 = add 29 q3;;   (* [1, 16, 29, 32, 32, 37, 39]*)
let (element, q3) = delete_min q3;;   (* 1 * [16, 29, 32, 32, 37, 39]*)
assert(element = 1);;
let q3 = add 30 q3;;   (* [16, 29, 30, 32, 32, 37, 39]*)
let q3 = add 37 q3;;   (* [16, 29, 30, 32, 32, 37, 37, 39]*)
let q3 = add 2 q3;;   (* [2, 16, 29, 30, 32, 32, 37, 37, 39]*)
let q3 = add 32 q3;;   (* [2, 16, 29, 30, 32, 32, 32, 37, 37, 39]*)
let q3 = add 15 q3;;   (* [2, 15, 16, 29, 30, 32, 32, 32, 37, 37, 39]*)
let q3 = add 0 q3;;   (* [0, 2, 15, 16, 29, 30, 32, 32, 32, 37, 37, 39]*)
let q3 = add 18 q3;;   (* [0, 2, 15, 16, 18, 29, 30, 32, 32, 32, 37, 37, 39]*)
let q3 = add 19 q3;;   (* [0, 2, 15, 16, 18, 19, 29, 30, 32, 32, 32, 37, 37, 39]*)
let (element, q3) = delete_min q3;;   (* 0 * [2, 15, 16, 18, 19, 29, 30, 32, 32, 32, 37, 37, 39]*)
assert(element = 0);;
let q3 = add 0 q3;;   (* [0, 2, 15, 16, 18, 19, 29, 30, 32, 32, 32, 37, 37, 39]*)
let q3 = add 5 q3;;   (* [0, 2, 5, 15, 16, 18, 19, 29, 30, 32, 32, 32, 37, 37, 39]*)
let (element, q3) = delete_min q3;;   (* 0 * [2, 5, 15, 16, 18, 19, 29, 30, 32, 32, 32, 37, 37, 39]*)
assert(element = 0);;
let q3 = add 35 q3;;   (* [2, 5, 15, 16, 18, 19, 29, 30, 32, 32, 32, 35, 37, 37, 39]*)
let (element, q3) = delete_min q3;;   (* 2 * [5, 15, 16, 18, 19, 29, 30, 32, 32, 32, 35, 37, 37, 39]*)
assert(element = 2);;

(* -------q4------ *)
let q4 = empty;;
let q4 = add 21 q4;;   (* [21]*)
let (element, q4) = delete_min q4;;   (* 21 * []*)
assert(element = 21);;
let q4 = add 14 q4;;   (* [14]*)
let q4 = add 16 q4;;   (* [14, 16]*)
let (element, q4) = delete_min q4;;   (* 14 * [16]*)
assert(element = 14);;
let q4 = add 7 q4;;   (* [7, 16]*)
let q4 = add 39 q4;;   (* [7, 16, 39]*)
let (element, q4) = delete_min q4;;   (* 7 * [16, 39]*)
assert(element = 7);;
let q4 = add 27 q4;;   (* [16, 27, 39]*)
let q4 = add 28 q4;;   (* [16, 27, 28, 39]*)
assert(is_empty q4 = false);;   (*[16, 27, 28, 39]*)
assert(is_empty q4 = false);;   (*[16, 27, 28, 39]*)
let q4 = add 12 q4;;   (* [12, 16, 27, 28, 39]*)
let (element, q4) = delete_min q4;;   (* 12 * [16, 27, 28, 39]*)
assert(element = 12);;
let q4 = add 14 q4;;   (* [14, 16, 27, 28, 39]*)
let q4 = add 17 q4;;   (* [14, 16, 17, 27, 28, 39]*)
let q4 = add 27 q4;;   (* [14, 16, 17, 27, 27, 28, 39]*)
let q4 = add 26 q4;;   (* [14, 16, 17, 26, 27, 27, 28, 39]*)
assert(is_empty q4 = false);;   (*[14, 16, 17, 26, 27, 27, 28, 39]*)
let q4 = add 10 q4;;   (* [10, 14, 16, 17, 26, 27, 27, 28, 39]*)
let q4 = add 22 q4;;   (* [10, 14, 16, 17, 22, 26, 27, 27, 28, 39]*)
let q4 = add 13 q4;;   (* [10, 13, 14, 16, 17, 22, 26, 27, 27, 28, 39]*)
let (element, q4) = delete_min q4;;   (* 10 * [13, 14, 16, 17, 22, 26, 27, 27, 28, 39]*)
assert(element = 10);;
let q4 = add 11 q4;;   (* [11, 13, 14, 16, 17, 22, 26, 27, 27, 28, 39]*)
assert(is_empty q4 = false);;   (*[11, 13, 14, 16, 17, 22, 26, 27, 27, 28, 39]*)
let q4 = add 24 q4;;   (* [11, 13, 14, 16, 17, 22, 24, 26, 27, 27, 28, 39]*)
let q4 = add 16 q4;;   (* [11, 13, 14, 16, 16, 17, 22, 24, 26, 27, 27, 28, 39]*)
let q4 = add 3 q4;;   (* [3, 11, 13, 14, 16, 16, 17, 22, 24, 26, 27, 27, 28, 39]*)
assert(is_empty q4 = false);;   (*[3, 11, 13, 14, 16, 16, 17, 22, 24, 26, 27, 27, 28, 39]*)
let (element, q4) = delete_min q4;;   (* 3 * [11, 13, 14, 16, 16, 17, 22, 24, 26, 27, 27, 28, 39]*)
assert(element = 3);;
let q4 = add 24 q4;;   (* [11, 13, 14, 16, 16, 17, 22, 24, 24, 26, 27, 27, 28, 39]*)
let q4 = add 10 q4;;   (* [10, 11, 13, 14, 16, 16, 17, 22, 24, 24, 26, 27, 27, 28, 39]*)
let q4 = add 15 q4;;   (* [10, 11, 13, 14, 15, 16, 16, 17, 22, 24, 24, 26, 27, 27, 28, 39]*)
let q4 = add 7 q4;;   (* [7, 10, 11, 13, 14, 15, 16, 16, 17, 22, 24, 24, 26, 27, 27, 28, 39]*)
let (element, q4) = delete_min q4;;   (* 7 * [10, 11, 13, 14, 15, 16, 16, 17, 22, 24, 24, 26, 27, 27, 28, 39]*)
assert(element = 7);;
let q4 = add 30 q4;;   (* [10, 11, 13, 14, 15, 16, 16, 17, 22, 24, 24, 26, 27, 27, 28, 30, 39]*)
let q4 = add 37 q4;;   (* [10, 11, 13, 14, 15, 16, 16, 17, 22, 24, 24, 26, 27, 27, 28, 30, 37, 39]*)
let q4 = add 14 q4;;   (* [10, 11, 13, 14, 14, 15, 16, 16, 17, 22, 24, 24, 26, 27, 27, 28, 30, 37, 39]*)
let q4 = add 6 q4;;   (* [6, 10, 11, 13, 14, 14, 15, 16, 16, 17, 22, 24, 24, 26, 27, 27, 28, 30, 37, 39]*)
let q4 = add 1 q4;;   (* [1, 6, 10, 11, 13, 14, 14, 15, 16, 16, 17, 22, 24, 24, 26, 27, 27, 28, 30, 37, 39]*)
let q4 = add 10 q4;;   (* [1, 6, 10, 10, 11, 13, 14, 14, 15, 16, 16, 17, 22, 24, 24, 26, 27, 27, 28, 30, 37, 39]*)
let q4 = add 5 q4;;   (* [1, 5, 6, 10, 10, 11, 13, 14, 14, 15, 16, 16, 17, 22, 24, 24, 26, 27, 27, 28, 30, 37, 39]*)
assert(is_empty q4 = false);;   (*[1, 5, 6, 10, 10, 11, 13, 14, 14, 15, 16, 16, 17, 22, 24, 24, 26, 27, 27, 28, 30, 37, 39]*)
let (element, q4) = delete_min q4;;   (* 1 * [5, 6, 10, 10, 11, 13, 14, 14, 15, 16, 16, 17, 22, 24, 24, 26, 27, 27, 28, 30, 37, 39]*)
assert(element = 1);;
let q4 = add 34 q4;;   (* [5, 6, 10, 10, 11, 13, 14, 14, 15, 16, 16, 17, 22, 24, 24, 26, 27, 27, 28, 30, 34, 37, 39]*)
let q4 = add 15 q4;;   (* [5, 6, 10, 10, 11, 13, 14, 14, 15, 15, 16, 16, 17, 22, 24, 24, 26, 27, 27, 28, 30, 34, 37, 39]*)
let q4 = add 31 q4;;   (* [5, 6, 10, 10, 11, 13, 14, 14, 15, 15, 16, 16, 17, 22, 24, 24, 26, 27, 27, 28, 30, 31, 34, 37, 39]*)

(* -------q5------ *)
let q5 = empty;;
let q5 = add 36 q5;;   (* [36]*)
let q5 = add 2 q5;;   (* [2, 36]*)
assert(is_empty q5 = false);;   (*[2, 36]*)
let (element, q5) = delete_min q5;;   (* 2 * [36]*)
assert(element = 2);;
let (element, q5) = delete_min q5;;   (* 36 * []*)
assert(element = 36);;
let q5 = add 22 q5;;   (* [22]*)
let (element, q5) = delete_min q5;;   (* 22 * []*)
assert(element = 22);;
let q5 = add 13 q5;;   (* [13]*)
let q5 = add 6 q5;;   (* [6, 13]*)
let (element, q5) = delete_min q5;;   (* 6 * [13]*)
assert(element = 6);;
let q5 = add 9 q5;;   (* [9, 13]*)
let (element, q5) = delete_min q5;;   (* 9 * [13]*)
assert(element = 9);;
let (element, q5) = delete_min q5;;   (* 13 * []*)
assert(element = 13);;
let q5 = add 24 q5;;   (* [24]*)
let q5 = add 31 q5;;   (* [24, 31]*)
let q5 = add 33 q5;;   (* [24, 31, 33]*)
let q5 = add 15 q5;;   (* [15, 24, 31, 33]*)
let q5 = add 38 q5;;   (* [15, 24, 31, 33, 38]*)
let (element, q5) = delete_min q5;;   (* 15 * [24, 31, 33, 38]*)
assert(element = 15);;
let q5 = add 4 q5;;   (* [4, 24, 31, 33, 38]*)
let q5 = add 6 q5;;   (* [4, 6, 24, 31, 33, 38]*)
let q5 = add 37 q5;;   (* [4, 6, 24, 31, 33, 37, 38]*)
let q5 = add 0 q5;;   (* [0, 4, 6, 24, 31, 33, 37, 38]*)
let (element, q5) = delete_min q5;;   (* 0 * [4, 6, 24, 31, 33, 37, 38]*)
assert(element = 0);;
let (element, q5) = delete_min q5;;   (* 4 * [6, 24, 31, 33, 37, 38]*)
assert(element = 4);;
let (element, q5) = delete_min q5;;   (* 6 * [24, 31, 33, 37, 38]*)
assert(element = 6);;
let (element, q5) = delete_min q5;;   (* 24 * [31, 33, 37, 38]*)
assert(element = 24);;
let q5 = add 4 q5;;   (* [4, 31, 33, 37, 38]*)
let q5 = add 9 q5;;   (* [4, 9, 31, 33, 37, 38]*)
let (element, q5) = delete_min q5;;   (* 4 * [9, 31, 33, 37, 38]*)
assert(element = 4);;
let (element, q5) = delete_min q5;;   (* 9 * [31, 33, 37, 38]*)
assert(element = 9);;
let q5 = add 1 q5;;   (* [1, 31, 33, 37, 38]*)
let q5 = add 12 q5;;   (* [1, 12, 31, 33, 37, 38]*)
let q5 = add 19 q5;;   (* [1, 12, 19, 31, 33, 37, 38]*)
let (element, q5) = delete_min q5;;   (* 1 * [12, 19, 31, 33, 37, 38]*)
assert(element = 1);;
assert(is_empty q5 = false);;   (*[12, 19, 31, 33, 37, 38]*)
let q5 = add 33 q5;;   (* [12, 19, 31, 33, 33, 37, 38]*)
let q5 = add 26 q5;;   (* [12, 19, 26, 31, 33, 33, 37, 38]*)
let q5 = add 1 q5;;   (* [1, 12, 19, 26, 31, 33, 33, 37, 38]*)
assert(is_empty q5 = false);;   (*[1, 12, 19, 26, 31, 33, 33, 37, 38]*)
let (element, q5) = delete_min q5;;   (* 1 * [12, 19, 26, 31, 33, 33, 37, 38]*)
assert(element = 1);;
assert(is_empty q5 = false);;   (*[12, 19, 26, 31, 33, 33, 37, 38]*)
let q5 = add 9 q5;;   (* [9, 12, 19, 26, 31, 33, 33, 37, 38]*)
let (element, q5) = delete_min q5;;   (* 9 * [12, 19, 26, 31, 33, 33, 37, 38]*)
assert(element = 9);;
let q5 = add 35 q5;;   (* [12, 19, 26, 31, 33, 33, 35, 37, 38]*)
let q5 = add 30 q5;;   (* [12, 19, 26, 30, 31, 33, 33, 35, 37, 38]*)
let q5 = add 37 q5;;   (* [12, 19, 26, 30, 31, 33, 33, 35, 37, 37, 38]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[5, 5, 5, 6, 8, 8, 9, 9, 10, 10, 11, 12, 12, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 16, 16, 17, 18, 18, 19, 19, 19, 20, 20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39]*)
let (element, q) = delete_min q;;   (* 5 * [5, 5, 6, 8, 8, 9, 9, 10, 10, 11, 12, 12, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 16, 16, 17, 18, 18, 19, 19, 19, 20, 20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 5 * [5, 6, 8, 8, 9, 9, 10, 10, 11, 12, 12, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 16, 16, 17, 18, 18, 19, 19, 19, 20, 20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 5 * [6, 8, 8, 9, 9, 10, 10, 11, 12, 12, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 16, 16, 17, 18, 18, 19, 19, 19, 20, 20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 6 * [8, 8, 9, 9, 10, 10, 11, 12, 12, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 16, 16, 17, 18, 18, 19, 19, 19, 20, 20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 8 * [8, 9, 9, 10, 10, 11, 12, 12, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 16, 16, 17, 18, 18, 19, 19, 19, 20, 20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 8 * [9, 9, 10, 10, 11, 12, 12, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 16, 16, 17, 18, 18, 19, 19, 19, 20, 20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 9 * [9, 10, 10, 11, 12, 12, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 16, 16, 17, 18, 18, 19, 19, 19, 20, 20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 9 * [10, 10, 11, 12, 12, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 16, 16, 17, 18, 18, 19, 19, 19, 20, 20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 10 * [10, 11, 12, 12, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 16, 16, 17, 18, 18, 19, 19, 19, 20, 20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 10 * [11, 12, 12, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 16, 16, 17, 18, 18, 19, 19, 19, 20, 20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 11 * [12, 12, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 16, 16, 17, 18, 18, 19, 19, 19, 20, 20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 12 * [12, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 16, 16, 17, 18, 18, 19, 19, 19, 20, 20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 12 * [13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 16, 16, 17, 18, 18, 19, 19, 19, 20, 20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 13 * [14, 14, 14, 15, 15, 15, 16, 16, 16, 16, 16, 17, 18, 18, 19, 19, 19, 20, 20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 14 * [14, 14, 15, 15, 15, 16, 16, 16, 16, 16, 17, 18, 18, 19, 19, 19, 20, 20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [14, 15, 15, 15, 16, 16, 16, 16, 16, 17, 18, 18, 19, 19, 19, 20, 20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [15, 15, 15, 16, 16, 16, 16, 16, 17, 18, 18, 19, 19, 19, 20, 20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [15, 15, 16, 16, 16, 16, 16, 17, 18, 18, 19, 19, 19, 20, 20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [15, 16, 16, 16, 16, 16, 17, 18, 18, 19, 19, 19, 20, 20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [16, 16, 16, 16, 16, 17, 18, 18, 19, 19, 19, 20, 20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [16, 16, 16, 16, 17, 18, 18, 19, 19, 19, 20, 20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [16, 16, 16, 17, 18, 18, 19, 19, 19, 20, 20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [16, 16, 17, 18, 18, 19, 19, 19, 20, 20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [16, 17, 18, 18, 19, 19, 19, 20, 20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [17, 18, 18, 19, 19, 19, 20, 20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 17 * [18, 18, 19, 19, 19, 20, 20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [18, 19, 19, 19, 20, 20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [19, 19, 19, 20, 20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [19, 19, 20, 20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [19, 20, 20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [20, 20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [21, 22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [22, 22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [22, 22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [22, 23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [23, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [24, 24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [24, 24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [24, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 26 * [26, 26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [26, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [28, 28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [30, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [34, 34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 37 * [37, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [37, 37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [37, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 39, 39, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 39, 39, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39, 39, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39, 39, 39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39, 39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST102----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 2 q1;;   (* [2]*)
assert(is_empty q1 = false);;   (*[2]*)
let (element, q1) = delete_min q1;;   (* 2 * []*)
assert(element = 2);;
let q1 = add 29 q1;;   (* [29]*)
let q1 = add 4 q1;;   (* [4, 29]*)
let q1 = add 4 q1;;   (* [4, 4, 29]*)
let (element, q1) = delete_min q1;;   (* 4 * [4, 29]*)
assert(element = 4);;
let (element, q1) = delete_min q1;;   (* 4 * [29]*)
assert(element = 4);;
let q1 = add 30 q1;;   (* [29, 30]*)
let q1 = add 20 q1;;   (* [20, 29, 30]*)
let q1 = add 26 q1;;   (* [20, 26, 29, 30]*)
let q1 = add 17 q1;;   (* [17, 20, 26, 29, 30]*)
let q1 = add 2 q1;;   (* [2, 17, 20, 26, 29, 30]*)
let q1 = add 9 q1;;   (* [2, 9, 17, 20, 26, 29, 30]*)
let q1 = add 3 q1;;   (* [2, 3, 9, 17, 20, 26, 29, 30]*)
let q1 = add 4 q1;;   (* [2, 3, 4, 9, 17, 20, 26, 29, 30]*)
let (element, q1) = delete_min q1;;   (* 2 * [3, 4, 9, 17, 20, 26, 29, 30]*)
assert(element = 2);;
let q1 = add 36 q1;;   (* [3, 4, 9, 17, 20, 26, 29, 30, 36]*)
let (element, q1) = delete_min q1;;   (* 3 * [4, 9, 17, 20, 26, 29, 30, 36]*)
assert(element = 3);;
let q1 = add 24 q1;;   (* [4, 9, 17, 20, 24, 26, 29, 30, 36]*)
let (element, q1) = delete_min q1;;   (* 4 * [9, 17, 20, 24, 26, 29, 30, 36]*)
assert(element = 4);;
let q1 = add 6 q1;;   (* [6, 9, 17, 20, 24, 26, 29, 30, 36]*)
let (element, q1) = delete_min q1;;   (* 6 * [9, 17, 20, 24, 26, 29, 30, 36]*)
assert(element = 6);;
let q1 = add 9 q1;;   (* [9, 9, 17, 20, 24, 26, 29, 30, 36]*)
let q1 = add 23 q1;;   (* [9, 9, 17, 20, 23, 24, 26, 29, 30, 36]*)
let q1 = add 37 q1;;   (* [9, 9, 17, 20, 23, 24, 26, 29, 30, 36, 37]*)
assert(is_empty q1 = false);;   (*[9, 9, 17, 20, 23, 24, 26, 29, 30, 36, 37]*)
let q1 = add 6 q1;;   (* [6, 9, 9, 17, 20, 23, 24, 26, 29, 30, 36, 37]*)
let (element, q1) = delete_min q1;;   (* 6 * [9, 9, 17, 20, 23, 24, 26, 29, 30, 36, 37]*)
assert(element = 6);;
assert(is_empty q1 = false);;   (*[9, 9, 17, 20, 23, 24, 26, 29, 30, 36, 37]*)
let q1 = add 24 q1;;   (* [9, 9, 17, 20, 23, 24, 24, 26, 29, 30, 36, 37]*)
let q1 = add 27 q1;;   (* [9, 9, 17, 20, 23, 24, 24, 26, 27, 29, 30, 36, 37]*)
let q1 = add 25 q1;;   (* [9, 9, 17, 20, 23, 24, 24, 25, 26, 27, 29, 30, 36, 37]*)
let q1 = add 9 q1;;   (* [9, 9, 9, 17, 20, 23, 24, 24, 25, 26, 27, 29, 30, 36, 37]*)
let (element, q1) = delete_min q1;;   (* 9 * [9, 9, 17, 20, 23, 24, 24, 25, 26, 27, 29, 30, 36, 37]*)
assert(element = 9);;
let q1 = add 9 q1;;   (* [9, 9, 9, 17, 20, 23, 24, 24, 25, 26, 27, 29, 30, 36, 37]*)
assert(is_empty q1 = false);;   (*[9, 9, 9, 17, 20, 23, 24, 24, 25, 26, 27, 29, 30, 36, 37]*)
let q1 = add 10 q1;;   (* [9, 9, 9, 10, 17, 20, 23, 24, 24, 25, 26, 27, 29, 30, 36, 37]*)
let q1 = add 1 q1;;   (* [1, 9, 9, 9, 10, 17, 20, 23, 24, 24, 25, 26, 27, 29, 30, 36, 37]*)
let (element, q1) = delete_min q1;;   (* 1 * [9, 9, 9, 10, 17, 20, 23, 24, 24, 25, 26, 27, 29, 30, 36, 37]*)
assert(element = 1);;
let (element, q1) = delete_min q1;;   (* 9 * [9, 9, 10, 17, 20, 23, 24, 24, 25, 26, 27, 29, 30, 36, 37]*)
assert(element = 9);;
let q1 = add 30 q1;;   (* [9, 9, 10, 17, 20, 23, 24, 24, 25, 26, 27, 29, 30, 30, 36, 37]*)
let (element, q1) = delete_min q1;;   (* 9 * [9, 10, 17, 20, 23, 24, 24, 25, 26, 27, 29, 30, 30, 36, 37]*)
assert(element = 9);;
let q1 = add 15 q1;;   (* [9, 10, 15, 17, 20, 23, 24, 24, 25, 26, 27, 29, 30, 30, 36, 37]*)
let q1 = add 14 q1;;   (* [9, 10, 14, 15, 17, 20, 23, 24, 24, 25, 26, 27, 29, 30, 30, 36, 37]*)
let (element, q1) = delete_min q1;;   (* 9 * [10, 14, 15, 17, 20, 23, 24, 24, 25, 26, 27, 29, 30, 30, 36, 37]*)
assert(element = 9);;
let q1 = add 5 q1;;   (* [5, 10, 14, 15, 17, 20, 23, 24, 24, 25, 26, 27, 29, 30, 30, 36, 37]*)
let (element, q1) = delete_min q1;;   (* 5 * [10, 14, 15, 17, 20, 23, 24, 24, 25, 26, 27, 29, 30, 30, 36, 37]*)
assert(element = 5);;

(* -------q2------ *)
let q2 = empty;;
let q2 = add 25 q2;;   (* [25]*)
let q2 = add 7 q2;;   (* [7, 25]*)
let q2 = add 9 q2;;   (* [7, 9, 25]*)
let (element, q2) = delete_min q2;;   (* 7 * [9, 25]*)
assert(element = 7);;
let q2 = add 33 q2;;   (* [9, 25, 33]*)
let q2 = add 27 q2;;   (* [9, 25, 27, 33]*)
let q2 = add 26 q2;;   (* [9, 25, 26, 27, 33]*)
let q2 = add 36 q2;;   (* [9, 25, 26, 27, 33, 36]*)
let (element, q2) = delete_min q2;;   (* 9 * [25, 26, 27, 33, 36]*)
assert(element = 9);;
let q2 = add 28 q2;;   (* [25, 26, 27, 28, 33, 36]*)
let q2 = add 22 q2;;   (* [22, 25, 26, 27, 28, 33, 36]*)
let (element, q2) = delete_min q2;;   (* 22 * [25, 26, 27, 28, 33, 36]*)
assert(element = 22);;
let (element, q2) = delete_min q2;;   (* 25 * [26, 27, 28, 33, 36]*)
assert(element = 25);;
let (element, q2) = delete_min q2;;   (* 26 * [27, 28, 33, 36]*)
assert(element = 26);;
assert(is_empty q2 = false);;   (*[27, 28, 33, 36]*)
let (element, q2) = delete_min q2;;   (* 27 * [28, 33, 36]*)
assert(element = 27);;
let (element, q2) = delete_min q2;;   (* 28 * [33, 36]*)
assert(element = 28);;
let q2 = add 3 q2;;   (* [3, 33, 36]*)
let (element, q2) = delete_min q2;;   (* 3 * [33, 36]*)
assert(element = 3);;
let q2 = add 23 q2;;   (* [23, 33, 36]*)
let q2 = add 38 q2;;   (* [23, 33, 36, 38]*)
let q2 = add 38 q2;;   (* [23, 33, 36, 38, 38]*)
let q2 = add 28 q2;;   (* [23, 28, 33, 36, 38, 38]*)
let q2 = add 2 q2;;   (* [2, 23, 28, 33, 36, 38, 38]*)
let (element, q2) = delete_min q2;;   (* 2 * [23, 28, 33, 36, 38, 38]*)
assert(element = 2);;
let (element, q2) = delete_min q2;;   (* 23 * [28, 33, 36, 38, 38]*)
assert(element = 23);;
let q2 = add 31 q2;;   (* [28, 31, 33, 36, 38, 38]*)
let q2 = add 13 q2;;   (* [13, 28, 31, 33, 36, 38, 38]*)
let q2 = add 33 q2;;   (* [13, 28, 31, 33, 33, 36, 38, 38]*)
let q2 = add 16 q2;;   (* [13, 16, 28, 31, 33, 33, 36, 38, 38]*)
let (element, q2) = delete_min q2;;   (* 13 * [16, 28, 31, 33, 33, 36, 38, 38]*)
assert(element = 13);;
assert(is_empty q2 = false);;   (*[16, 28, 31, 33, 33, 36, 38, 38]*)
let q2 = add 17 q2;;   (* [16, 17, 28, 31, 33, 33, 36, 38, 38]*)
let q2 = add 28 q2;;   (* [16, 17, 28, 28, 31, 33, 33, 36, 38, 38]*)
let q2 = add 24 q2;;   (* [16, 17, 24, 28, 28, 31, 33, 33, 36, 38, 38]*)
let (element, q2) = delete_min q2;;   (* 16 * [17, 24, 28, 28, 31, 33, 33, 36, 38, 38]*)
assert(element = 16);;
assert(is_empty q2 = false);;   (*[17, 24, 28, 28, 31, 33, 33, 36, 38, 38]*)
let q2 = add 39 q2;;   (* [17, 24, 28, 28, 31, 33, 33, 36, 38, 38, 39]*)
assert(is_empty q2 = false);;   (*[17, 24, 28, 28, 31, 33, 33, 36, 38, 38, 39]*)
let q2 = add 22 q2;;   (* [17, 22, 24, 28, 28, 31, 33, 33, 36, 38, 38, 39]*)
let q2 = add 28 q2;;   (* [17, 22, 24, 28, 28, 28, 31, 33, 33, 36, 38, 38, 39]*)
let q2 = add 33 q2;;   (* [17, 22, 24, 28, 28, 28, 31, 33, 33, 33, 36, 38, 38, 39]*)
let q2 = add 19 q2;;   (* [17, 19, 22, 24, 28, 28, 28, 31, 33, 33, 33, 36, 38, 38, 39]*)
let q2 = add 25 q2;;   (* [17, 19, 22, 24, 25, 28, 28, 28, 31, 33, 33, 33, 36, 38, 38, 39]*)
let q2 = add 8 q2;;   (* [8, 17, 19, 22, 24, 25, 28, 28, 28, 31, 33, 33, 33, 36, 38, 38, 39]*)
let q2 = add 36 q2;;   (* [8, 17, 19, 22, 24, 25, 28, 28, 28, 31, 33, 33, 33, 36, 36, 38, 38, 39]*)
assert(is_empty q2 = false);;   (*[8, 17, 19, 22, 24, 25, 28, 28, 28, 31, 33, 33, 33, 36, 36, 38, 38, 39]*)
let (element, q2) = delete_min q2;;   (* 8 * [17, 19, 22, 24, 25, 28, 28, 28, 31, 33, 33, 33, 36, 36, 38, 38, 39]*)
assert(element = 8);;

(* -------q3------ *)
let q3 = empty;;
let q3 = add 1 q3;;   (* [1]*)
let q3 = add 22 q3;;   (* [1, 22]*)
let q3 = add 18 q3;;   (* [1, 18, 22]*)
let q3 = add 34 q3;;   (* [1, 18, 22, 34]*)
let q3 = add 28 q3;;   (* [1, 18, 22, 28, 34]*)
let q3 = add 14 q3;;   (* [1, 14, 18, 22, 28, 34]*)
let q3 = add 0 q3;;   (* [0, 1, 14, 18, 22, 28, 34]*)
let q3 = add 16 q3;;   (* [0, 1, 14, 16, 18, 22, 28, 34]*)
let q3 = add 36 q3;;   (* [0, 1, 14, 16, 18, 22, 28, 34, 36]*)
let q3 = add 12 q3;;   (* [0, 1, 12, 14, 16, 18, 22, 28, 34, 36]*)
let q3 = add 28 q3;;   (* [0, 1, 12, 14, 16, 18, 22, 28, 28, 34, 36]*)
let (element, q3) = delete_min q3;;   (* 0 * [1, 12, 14, 16, 18, 22, 28, 28, 34, 36]*)
assert(element = 0);;
let q3 = add 13 q3;;   (* [1, 12, 13, 14, 16, 18, 22, 28, 28, 34, 36]*)
assert(is_empty q3 = false);;   (*[1, 12, 13, 14, 16, 18, 22, 28, 28, 34, 36]*)
let (element, q3) = delete_min q3;;   (* 1 * [12, 13, 14, 16, 18, 22, 28, 28, 34, 36]*)
assert(element = 1);;
let (element, q3) = delete_min q3;;   (* 12 * [13, 14, 16, 18, 22, 28, 28, 34, 36]*)
assert(element = 12);;
let q3 = add 21 q3;;   (* [13, 14, 16, 18, 21, 22, 28, 28, 34, 36]*)
let q3 = add 15 q3;;   (* [13, 14, 15, 16, 18, 21, 22, 28, 28, 34, 36]*)
assert(is_empty q3 = false);;   (*[13, 14, 15, 16, 18, 21, 22, 28, 28, 34, 36]*)
assert(is_empty q3 = false);;   (*[13, 14, 15, 16, 18, 21, 22, 28, 28, 34, 36]*)
let q3 = add 16 q3;;   (* [13, 14, 15, 16, 16, 18, 21, 22, 28, 28, 34, 36]*)
let q3 = add 10 q3;;   (* [10, 13, 14, 15, 16, 16, 18, 21, 22, 28, 28, 34, 36]*)
let q3 = add 11 q3;;   (* [10, 11, 13, 14, 15, 16, 16, 18, 21, 22, 28, 28, 34, 36]*)
let q3 = add 23 q3;;   (* [10, 11, 13, 14, 15, 16, 16, 18, 21, 22, 23, 28, 28, 34, 36]*)
let (element, q3) = delete_min q3;;   (* 10 * [11, 13, 14, 15, 16, 16, 18, 21, 22, 23, 28, 28, 34, 36]*)
assert(element = 10);;
let q3 = add 38 q3;;   (* [11, 13, 14, 15, 16, 16, 18, 21, 22, 23, 28, 28, 34, 36, 38]*)
assert(is_empty q3 = false);;   (*[11, 13, 14, 15, 16, 16, 18, 21, 22, 23, 28, 28, 34, 36, 38]*)
assert(is_empty q3 = false);;   (*[11, 13, 14, 15, 16, 16, 18, 21, 22, 23, 28, 28, 34, 36, 38]*)
let q3 = add 26 q3;;   (* [11, 13, 14, 15, 16, 16, 18, 21, 22, 23, 26, 28, 28, 34, 36, 38]*)
let (element, q3) = delete_min q3;;   (* 11 * [13, 14, 15, 16, 16, 18, 21, 22, 23, 26, 28, 28, 34, 36, 38]*)
assert(element = 11);;
assert(is_empty q3 = false);;   (*[13, 14, 15, 16, 16, 18, 21, 22, 23, 26, 28, 28, 34, 36, 38]*)
let q3 = add 6 q3;;   (* [6, 13, 14, 15, 16, 16, 18, 21, 22, 23, 26, 28, 28, 34, 36, 38]*)
let q3 = add 22 q3;;   (* [6, 13, 14, 15, 16, 16, 18, 21, 22, 22, 23, 26, 28, 28, 34, 36, 38]*)
let q3 = add 28 q3;;   (* [6, 13, 14, 15, 16, 16, 18, 21, 22, 22, 23, 26, 28, 28, 28, 34, 36, 38]*)
let q3 = add 0 q3;;   (* [0, 6, 13, 14, 15, 16, 16, 18, 21, 22, 22, 23, 26, 28, 28, 28, 34, 36, 38]*)
let q3 = add 24 q3;;   (* [0, 6, 13, 14, 15, 16, 16, 18, 21, 22, 22, 23, 24, 26, 28, 28, 28, 34, 36, 38]*)
let (element, q3) = delete_min q3;;   (* 0 * [6, 13, 14, 15, 16, 16, 18, 21, 22, 22, 23, 24, 26, 28, 28, 28, 34, 36, 38]*)
assert(element = 0);;
let q3 = add 13 q3;;   (* [6, 13, 13, 14, 15, 16, 16, 18, 21, 22, 22, 23, 24, 26, 28, 28, 28, 34, 36, 38]*)
let q3 = add 35 q3;;   (* [6, 13, 13, 14, 15, 16, 16, 18, 21, 22, 22, 23, 24, 26, 28, 28, 28, 34, 35, 36, 38]*)
let (element, q3) = delete_min q3;;   (* 6 * [13, 13, 14, 15, 16, 16, 18, 21, 22, 22, 23, 24, 26, 28, 28, 28, 34, 35, 36, 38]*)
assert(element = 6);;
let q3 = add 8 q3;;   (* [8, 13, 13, 14, 15, 16, 16, 18, 21, 22, 22, 23, 24, 26, 28, 28, 28, 34, 35, 36, 38]*)
let q3 = add 32 q3;;   (* [8, 13, 13, 14, 15, 16, 16, 18, 21, 22, 22, 23, 24, 26, 28, 28, 28, 32, 34, 35, 36, 38]*)
let q3 = add 22 q3;;   (* [8, 13, 13, 14, 15, 16, 16, 18, 21, 22, 22, 22, 23, 24, 26, 28, 28, 28, 32, 34, 35, 36, 38]*)
let q3 = add 17 q3;;   (* [8, 13, 13, 14, 15, 16, 16, 17, 18, 21, 22, 22, 22, 23, 24, 26, 28, 28, 28, 32, 34, 35, 36, 38]*)
let q3 = add 19 q3;;   (* [8, 13, 13, 14, 15, 16, 16, 17, 18, 19, 21, 22, 22, 22, 23, 24, 26, 28, 28, 28, 32, 34, 35, 36, 38]*)
let q3 = add 20 q3;;   (* [8, 13, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22, 22, 22, 23, 24, 26, 28, 28, 28, 32, 34, 35, 36, 38]*)
let q3 = add 32 q3;;   (* [8, 13, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22, 22, 22, 23, 24, 26, 28, 28, 28, 32, 32, 34, 35, 36, 38]*)
let (element, q3) = delete_min q3;;   (* 8 * [13, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22, 22, 22, 23, 24, 26, 28, 28, 28, 32, 32, 34, 35, 36, 38]*)
assert(element = 8);;

(* -------q4------ *)
let q4 = empty;;
let q4 = add 0 q4;;   (* [0]*)
let q4 = add 10 q4;;   (* [0, 10]*)
let q4 = add 25 q4;;   (* [0, 10, 25]*)
let q4 = add 13 q4;;   (* [0, 10, 13, 25]*)
let q4 = add 8 q4;;   (* [0, 8, 10, 13, 25]*)
let q4 = add 37 q4;;   (* [0, 8, 10, 13, 25, 37]*)
let (element, q4) = delete_min q4;;   (* 0 * [8, 10, 13, 25, 37]*)
assert(element = 0);;
let q4 = add 25 q4;;   (* [8, 10, 13, 25, 25, 37]*)
let (element, q4) = delete_min q4;;   (* 8 * [10, 13, 25, 25, 37]*)
assert(element = 8);;
let (element, q4) = delete_min q4;;   (* 10 * [13, 25, 25, 37]*)
assert(element = 10);;
let (element, q4) = delete_min q4;;   (* 13 * [25, 25, 37]*)
assert(element = 13);;
let q4 = add 1 q4;;   (* [1, 25, 25, 37]*)
let q4 = add 39 q4;;   (* [1, 25, 25, 37, 39]*)
let (element, q4) = delete_min q4;;   (* 1 * [25, 25, 37, 39]*)
assert(element = 1);;
let (element, q4) = delete_min q4;;   (* 25 * [25, 37, 39]*)
assert(element = 25);;
let q4 = add 3 q4;;   (* [3, 25, 37, 39]*)
let q4 = add 32 q4;;   (* [3, 25, 32, 37, 39]*)
let q4 = add 25 q4;;   (* [3, 25, 25, 32, 37, 39]*)
let q4 = add 39 q4;;   (* [3, 25, 25, 32, 37, 39, 39]*)
let q4 = add 19 q4;;   (* [3, 19, 25, 25, 32, 37, 39, 39]*)
let q4 = add 3 q4;;   (* [3, 3, 19, 25, 25, 32, 37, 39, 39]*)
let (element, q4) = delete_min q4;;   (* 3 * [3, 19, 25, 25, 32, 37, 39, 39]*)
assert(element = 3);;
let q4 = add 18 q4;;   (* [3, 18, 19, 25, 25, 32, 37, 39, 39]*)
let q4 = add 10 q4;;   (* [3, 10, 18, 19, 25, 25, 32, 37, 39, 39]*)
let q4 = add 26 q4;;   (* [3, 10, 18, 19, 25, 25, 26, 32, 37, 39, 39]*)
let q4 = add 34 q4;;   (* [3, 10, 18, 19, 25, 25, 26, 32, 34, 37, 39, 39]*)
let (element, q4) = delete_min q4;;   (* 3 * [10, 18, 19, 25, 25, 26, 32, 34, 37, 39, 39]*)
assert(element = 3);;
let (element, q4) = delete_min q4;;   (* 10 * [18, 19, 25, 25, 26, 32, 34, 37, 39, 39]*)
assert(element = 10);;
let (element, q4) = delete_min q4;;   (* 18 * [19, 25, 25, 26, 32, 34, 37, 39, 39]*)
assert(element = 18);;
let q4 = add 3 q4;;   (* [3, 19, 25, 25, 26, 32, 34, 37, 39, 39]*)
assert(is_empty q4 = false);;   (*[3, 19, 25, 25, 26, 32, 34, 37, 39, 39]*)
let q4 = add 4 q4;;   (* [3, 4, 19, 25, 25, 26, 32, 34, 37, 39, 39]*)
let q4 = add 14 q4;;   (* [3, 4, 14, 19, 25, 25, 26, 32, 34, 37, 39, 39]*)
let (element, q4) = delete_min q4;;   (* 3 * [4, 14, 19, 25, 25, 26, 32, 34, 37, 39, 39]*)
assert(element = 3);;
let q4 = add 1 q4;;   (* [1, 4, 14, 19, 25, 25, 26, 32, 34, 37, 39, 39]*)
let q4 = add 8 q4;;   (* [1, 4, 8, 14, 19, 25, 25, 26, 32, 34, 37, 39, 39]*)
let q4 = add 11 q4;;   (* [1, 4, 8, 11, 14, 19, 25, 25, 26, 32, 34, 37, 39, 39]*)
let q4 = add 30 q4;;   (* [1, 4, 8, 11, 14, 19, 25, 25, 26, 30, 32, 34, 37, 39, 39]*)
let q4 = add 9 q4;;   (* [1, 4, 8, 9, 11, 14, 19, 25, 25, 26, 30, 32, 34, 37, 39, 39]*)
let q4 = add 27 q4;;   (* [1, 4, 8, 9, 11, 14, 19, 25, 25, 26, 27, 30, 32, 34, 37, 39, 39]*)
let q4 = add 25 q4;;   (* [1, 4, 8, 9, 11, 14, 19, 25, 25, 25, 26, 27, 30, 32, 34, 37, 39, 39]*)
let q4 = add 39 q4;;   (* [1, 4, 8, 9, 11, 14, 19, 25, 25, 25, 26, 27, 30, 32, 34, 37, 39, 39, 39]*)
let q4 = add 8 q4;;   (* [1, 4, 8, 8, 9, 11, 14, 19, 25, 25, 25, 26, 27, 30, 32, 34, 37, 39, 39, 39]*)
let q4 = add 17 q4;;   (* [1, 4, 8, 8, 9, 11, 14, 17, 19, 25, 25, 25, 26, 27, 30, 32, 34, 37, 39, 39, 39]*)
let (element, q4) = delete_min q4;;   (* 1 * [4, 8, 8, 9, 11, 14, 17, 19, 25, 25, 25, 26, 27, 30, 32, 34, 37, 39, 39, 39]*)
assert(element = 1);;
let (element, q4) = delete_min q4;;   (* 4 * [8, 8, 9, 11, 14, 17, 19, 25, 25, 25, 26, 27, 30, 32, 34, 37, 39, 39, 39]*)
assert(element = 4);;
let q4 = add 5 q4;;   (* [5, 8, 8, 9, 11, 14, 17, 19, 25, 25, 25, 26, 27, 30, 32, 34, 37, 39, 39, 39]*)
let q4 = add 32 q4;;   (* [5, 8, 8, 9, 11, 14, 17, 19, 25, 25, 25, 26, 27, 30, 32, 32, 34, 37, 39, 39, 39]*)

(* -------q5------ *)
let q5 = empty;;
let q5 = add 12 q5;;   (* [12]*)
let q5 = add 39 q5;;   (* [12, 39]*)
let (element, q5) = delete_min q5;;   (* 12 * [39]*)
assert(element = 12);;
let q5 = add 15 q5;;   (* [15, 39]*)
let q5 = add 10 q5;;   (* [10, 15, 39]*)
let (element, q5) = delete_min q5;;   (* 10 * [15, 39]*)
assert(element = 10);;
let q5 = add 8 q5;;   (* [8, 15, 39]*)
let (element, q5) = delete_min q5;;   (* 8 * [15, 39]*)
assert(element = 8);;
let q5 = add 24 q5;;   (* [15, 24, 39]*)
let q5 = add 18 q5;;   (* [15, 18, 24, 39]*)
let (element, q5) = delete_min q5;;   (* 15 * [18, 24, 39]*)
assert(element = 15);;
let (element, q5) = delete_min q5;;   (* 18 * [24, 39]*)
assert(element = 18);;
let q5 = add 6 q5;;   (* [6, 24, 39]*)
let q5 = add 26 q5;;   (* [6, 24, 26, 39]*)
let q5 = add 7 q5;;   (* [6, 7, 24, 26, 39]*)
let q5 = add 12 q5;;   (* [6, 7, 12, 24, 26, 39]*)
let q5 = add 26 q5;;   (* [6, 7, 12, 24, 26, 26, 39]*)
let (element, q5) = delete_min q5;;   (* 6 * [7, 12, 24, 26, 26, 39]*)
assert(element = 6);;
let q5 = add 14 q5;;   (* [7, 12, 14, 24, 26, 26, 39]*)
let q5 = add 8 q5;;   (* [7, 8, 12, 14, 24, 26, 26, 39]*)
let q5 = add 38 q5;;   (* [7, 8, 12, 14, 24, 26, 26, 38, 39]*)
let q5 = add 27 q5;;   (* [7, 8, 12, 14, 24, 26, 26, 27, 38, 39]*)
let q5 = add 1 q5;;   (* [1, 7, 8, 12, 14, 24, 26, 26, 27, 38, 39]*)
let q5 = add 25 q5;;   (* [1, 7, 8, 12, 14, 24, 25, 26, 26, 27, 38, 39]*)
let q5 = add 4 q5;;   (* [1, 4, 7, 8, 12, 14, 24, 25, 26, 26, 27, 38, 39]*)
assert(is_empty q5 = false);;   (*[1, 4, 7, 8, 12, 14, 24, 25, 26, 26, 27, 38, 39]*)
let q5 = add 0 q5;;   (* [0, 1, 4, 7, 8, 12, 14, 24, 25, 26, 26, 27, 38, 39]*)
let q5 = add 16 q5;;   (* [0, 1, 4, 7, 8, 12, 14, 16, 24, 25, 26, 26, 27, 38, 39]*)
assert(is_empty q5 = false);;   (*[0, 1, 4, 7, 8, 12, 14, 16, 24, 25, 26, 26, 27, 38, 39]*)
let q5 = add 23 q5;;   (* [0, 1, 4, 7, 8, 12, 14, 16, 23, 24, 25, 26, 26, 27, 38, 39]*)
let q5 = add 29 q5;;   (* [0, 1, 4, 7, 8, 12, 14, 16, 23, 24, 25, 26, 26, 27, 29, 38, 39]*)
let q5 = add 38 q5;;   (* [0, 1, 4, 7, 8, 12, 14, 16, 23, 24, 25, 26, 26, 27, 29, 38, 38, 39]*)
let (element, q5) = delete_min q5;;   (* 0 * [1, 4, 7, 8, 12, 14, 16, 23, 24, 25, 26, 26, 27, 29, 38, 38, 39]*)
assert(element = 0);;
let q5 = add 11 q5;;   (* [1, 4, 7, 8, 11, 12, 14, 16, 23, 24, 25, 26, 26, 27, 29, 38, 38, 39]*)
let q5 = add 18 q5;;   (* [1, 4, 7, 8, 11, 12, 14, 16, 18, 23, 24, 25, 26, 26, 27, 29, 38, 38, 39]*)
let q5 = add 10 q5;;   (* [1, 4, 7, 8, 10, 11, 12, 14, 16, 18, 23, 24, 25, 26, 26, 27, 29, 38, 38, 39]*)
let q5 = add 18 q5;;   (* [1, 4, 7, 8, 10, 11, 12, 14, 16, 18, 18, 23, 24, 25, 26, 26, 27, 29, 38, 38, 39]*)
let (element, q5) = delete_min q5;;   (* 1 * [4, 7, 8, 10, 11, 12, 14, 16, 18, 18, 23, 24, 25, 26, 26, 27, 29, 38, 38, 39]*)
assert(element = 1);;
let (element, q5) = delete_min q5;;   (* 4 * [7, 8, 10, 11, 12, 14, 16, 18, 18, 23, 24, 25, 26, 26, 27, 29, 38, 38, 39]*)
assert(element = 4);;
let q5 = add 21 q5;;   (* [7, 8, 10, 11, 12, 14, 16, 18, 18, 21, 23, 24, 25, 26, 26, 27, 29, 38, 38, 39]*)
let (element, q5) = delete_min q5;;   (* 7 * [8, 10, 11, 12, 14, 16, 18, 18, 21, 23, 24, 25, 26, 26, 27, 29, 38, 38, 39]*)
assert(element = 7);;
let q5 = add 38 q5;;   (* [8, 10, 11, 12, 14, 16, 18, 18, 21, 23, 24, 25, 26, 26, 27, 29, 38, 38, 38, 39]*)
let q5 = add 35 q5;;   (* [8, 10, 11, 12, 14, 16, 18, 18, 21, 23, 24, 25, 26, 26, 27, 29, 35, 38, 38, 38, 39]*)
let q5 = add 6 q5;;   (* [6, 8, 10, 11, 12, 14, 16, 18, 18, 21, 23, 24, 25, 26, 26, 27, 29, 35, 38, 38, 38, 39]*)
let q5 = add 9 q5;;   (* [6, 8, 9, 10, 11, 12, 14, 16, 18, 18, 21, 23, 24, 25, 26, 26, 27, 29, 35, 38, 38, 38, 39]*)
let (element, q5) = delete_min q5;;   (* 6 * [8, 9, 10, 11, 12, 14, 16, 18, 18, 21, 23, 24, 25, 26, 26, 27, 29, 35, 38, 38, 38, 39]*)
assert(element = 6);;
let q5 = add 3 q5;;   (* [3, 8, 9, 10, 11, 12, 14, 16, 18, 18, 21, 23, 24, 25, 26, 26, 27, 29, 35, 38, 38, 38, 39]*)
let q5 = add 39 q5;;   (* [3, 8, 9, 10, 11, 12, 14, 16, 18, 18, 21, 23, 24, 25, 26, 26, 27, 29, 35, 38, 38, 38, 39, 39]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[3, 5, 8, 8, 8, 9, 9, 10, 10, 11, 11, 12, 13, 13, 14, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
let (element, q) = delete_min q;;   (* 3 * [5, 8, 8, 8, 9, 9, 10, 10, 11, 11, 12, 13, 13, 14, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 3);;
let (element, q) = delete_min q;;   (* 5 * [8, 8, 8, 9, 9, 10, 10, 11, 11, 12, 13, 13, 14, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 8 * [8, 8, 9, 9, 10, 10, 11, 11, 12, 13, 13, 14, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 8 * [8, 9, 9, 10, 10, 11, 11, 12, 13, 13, 14, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 8 * [9, 9, 10, 10, 11, 11, 12, 13, 13, 14, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 9 * [9, 10, 10, 11, 11, 12, 13, 13, 14, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 9 * [10, 10, 11, 11, 12, 13, 13, 14, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 10 * [10, 11, 11, 12, 13, 13, 14, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 10 * [11, 11, 12, 13, 13, 14, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 11 * [11, 12, 13, 13, 14, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 11 * [12, 13, 13, 14, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 12 * [13, 13, 14, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 13 * [13, 14, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 13 * [14, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 14 * [14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [14, 14, 15, 15, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [14, 15, 15, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [15, 15, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [15, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [16, 16, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [16, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 17 * [17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [17, 18, 18, 18, 19, 19, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [18, 18, 18, 19, 19, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [18, 18, 19, 19, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [18, 19, 19, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [19, 19, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [19, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [22, 22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [22, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 22 * [23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [25, 25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [25, 25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [25, 25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [25, 26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [26, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [26, 26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [26, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [28, 28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [29, 29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [29, 30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [30, 30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [30, 30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [30, 31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [31, 32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [35, 36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 39, 39, 39, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 39, 39, 39, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39, 39, 39, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39, 39, 39, 39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39, 39, 39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39, 39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST103----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 29 q1;;   (* [29]*)
let q1 = add 13 q1;;   (* [13, 29]*)
let (element, q1) = delete_min q1;;   (* 13 * [29]*)
assert(element = 13);;
let q1 = add 31 q1;;   (* [29, 31]*)
let q1 = add 7 q1;;   (* [7, 29, 31]*)
let q1 = add 18 q1;;   (* [7, 18, 29, 31]*)
let (element, q1) = delete_min q1;;   (* 7 * [18, 29, 31]*)
assert(element = 7);;
let (element, q1) = delete_min q1;;   (* 18 * [29, 31]*)
assert(element = 18);;
let q1 = add 18 q1;;   (* [18, 29, 31]*)
let (element, q1) = delete_min q1;;   (* 18 * [29, 31]*)
assert(element = 18);;
let q1 = add 19 q1;;   (* [19, 29, 31]*)
assert(is_empty q1 = false);;   (*[19, 29, 31]*)
let q1 = add 14 q1;;   (* [14, 19, 29, 31]*)
let q1 = add 36 q1;;   (* [14, 19, 29, 31, 36]*)
let q1 = add 36 q1;;   (* [14, 19, 29, 31, 36, 36]*)
let q1 = add 21 q1;;   (* [14, 19, 21, 29, 31, 36, 36]*)
let q1 = add 6 q1;;   (* [6, 14, 19, 21, 29, 31, 36, 36]*)
let (element, q1) = delete_min q1;;   (* 6 * [14, 19, 21, 29, 31, 36, 36]*)
assert(element = 6);;
let (element, q1) = delete_min q1;;   (* 14 * [19, 21, 29, 31, 36, 36]*)
assert(element = 14);;
let q1 = add 2 q1;;   (* [2, 19, 21, 29, 31, 36, 36]*)
assert(is_empty q1 = false);;   (*[2, 19, 21, 29, 31, 36, 36]*)
let q1 = add 29 q1;;   (* [2, 19, 21, 29, 29, 31, 36, 36]*)
let (element, q1) = delete_min q1;;   (* 2 * [19, 21, 29, 29, 31, 36, 36]*)
assert(element = 2);;
let q1 = add 8 q1;;   (* [8, 19, 21, 29, 29, 31, 36, 36]*)
assert(is_empty q1 = false);;   (*[8, 19, 21, 29, 29, 31, 36, 36]*)
let (element, q1) = delete_min q1;;   (* 8 * [19, 21, 29, 29, 31, 36, 36]*)
assert(element = 8);;
let (element, q1) = delete_min q1;;   (* 19 * [21, 29, 29, 31, 36, 36]*)
assert(element = 19);;
let q1 = add 8 q1;;   (* [8, 21, 29, 29, 31, 36, 36]*)
let q1 = add 15 q1;;   (* [8, 15, 21, 29, 29, 31, 36, 36]*)
assert(is_empty q1 = false);;   (*[8, 15, 21, 29, 29, 31, 36, 36]*)
let q1 = add 19 q1;;   (* [8, 15, 19, 21, 29, 29, 31, 36, 36]*)
let (element, q1) = delete_min q1;;   (* 8 * [15, 19, 21, 29, 29, 31, 36, 36]*)
assert(element = 8);;
let q1 = add 13 q1;;   (* [13, 15, 19, 21, 29, 29, 31, 36, 36]*)
let q1 = add 30 q1;;   (* [13, 15, 19, 21, 29, 29, 30, 31, 36, 36]*)
let q1 = add 33 q1;;   (* [13, 15, 19, 21, 29, 29, 30, 31, 33, 36, 36]*)
let q1 = add 6 q1;;   (* [6, 13, 15, 19, 21, 29, 29, 30, 31, 33, 36, 36]*)
let q1 = add 23 q1;;   (* [6, 13, 15, 19, 21, 23, 29, 29, 30, 31, 33, 36, 36]*)
let q1 = add 26 q1;;   (* [6, 13, 15, 19, 21, 23, 26, 29, 29, 30, 31, 33, 36, 36]*)
let q1 = add 37 q1;;   (* [6, 13, 15, 19, 21, 23, 26, 29, 29, 30, 31, 33, 36, 36, 37]*)
assert(is_empty q1 = false);;   (*[6, 13, 15, 19, 21, 23, 26, 29, 29, 30, 31, 33, 36, 36, 37]*)
let q1 = add 34 q1;;   (* [6, 13, 15, 19, 21, 23, 26, 29, 29, 30, 31, 33, 34, 36, 36, 37]*)
let q1 = add 4 q1;;   (* [4, 6, 13, 15, 19, 21, 23, 26, 29, 29, 30, 31, 33, 34, 36, 36, 37]*)
assert(is_empty q1 = false);;   (*[4, 6, 13, 15, 19, 21, 23, 26, 29, 29, 30, 31, 33, 34, 36, 36, 37]*)
assert(is_empty q1 = false);;   (*[4, 6, 13, 15, 19, 21, 23, 26, 29, 29, 30, 31, 33, 34, 36, 36, 37]*)
let (element, q1) = delete_min q1;;   (* 4 * [6, 13, 15, 19, 21, 23, 26, 29, 29, 30, 31, 33, 34, 36, 36, 37]*)
assert(element = 4);;
let (element, q1) = delete_min q1;;   (* 6 * [13, 15, 19, 21, 23, 26, 29, 29, 30, 31, 33, 34, 36, 36, 37]*)
assert(element = 6);;
let q1 = add 2 q1;;   (* [2, 13, 15, 19, 21, 23, 26, 29, 29, 30, 31, 33, 34, 36, 36, 37]*)
let q1 = add 25 q1;;   (* [2, 13, 15, 19, 21, 23, 25, 26, 29, 29, 30, 31, 33, 34, 36, 36, 37]*)
let q1 = add 34 q1;;   (* [2, 13, 15, 19, 21, 23, 25, 26, 29, 29, 30, 31, 33, 34, 34, 36, 36, 37]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 22 q2;;   (* [22]*)
let q2 = add 14 q2;;   (* [14, 22]*)
let (element, q2) = delete_min q2;;   (* 14 * [22]*)
assert(element = 14);;
let q2 = add 23 q2;;   (* [22, 23]*)
let q2 = add 15 q2;;   (* [15, 22, 23]*)
let q2 = add 28 q2;;   (* [15, 22, 23, 28]*)
let q2 = add 14 q2;;   (* [14, 15, 22, 23, 28]*)
let q2 = add 0 q2;;   (* [0, 14, 15, 22, 23, 28]*)
let (element, q2) = delete_min q2;;   (* 0 * [14, 15, 22, 23, 28]*)
assert(element = 0);;
let q2 = add 23 q2;;   (* [14, 15, 22, 23, 23, 28]*)
let (element, q2) = delete_min q2;;   (* 14 * [15, 22, 23, 23, 28]*)
assert(element = 14);;
let (element, q2) = delete_min q2;;   (* 15 * [22, 23, 23, 28]*)
assert(element = 15);;
let (element, q2) = delete_min q2;;   (* 22 * [23, 23, 28]*)
assert(element = 22);;
let (element, q2) = delete_min q2;;   (* 23 * [23, 28]*)
assert(element = 23);;
let q2 = add 22 q2;;   (* [22, 23, 28]*)
assert(is_empty q2 = false);;   (*[22, 23, 28]*)
let (element, q2) = delete_min q2;;   (* 22 * [23, 28]*)
assert(element = 22);;
let q2 = add 12 q2;;   (* [12, 23, 28]*)
assert(is_empty q2 = false);;   (*[12, 23, 28]*)
let q2 = add 24 q2;;   (* [12, 23, 24, 28]*)
let q2 = add 7 q2;;   (* [7, 12, 23, 24, 28]*)
let q2 = add 33 q2;;   (* [7, 12, 23, 24, 28, 33]*)
assert(is_empty q2 = false);;   (*[7, 12, 23, 24, 28, 33]*)
let q2 = add 5 q2;;   (* [5, 7, 12, 23, 24, 28, 33]*)
let q2 = add 18 q2;;   (* [5, 7, 12, 18, 23, 24, 28, 33]*)
let q2 = add 37 q2;;   (* [5, 7, 12, 18, 23, 24, 28, 33, 37]*)
let q2 = add 7 q2;;   (* [5, 7, 7, 12, 18, 23, 24, 28, 33, 37]*)
let q2 = add 24 q2;;   (* [5, 7, 7, 12, 18, 23, 24, 24, 28, 33, 37]*)
let q2 = add 9 q2;;   (* [5, 7, 7, 9, 12, 18, 23, 24, 24, 28, 33, 37]*)
let q2 = add 21 q2;;   (* [5, 7, 7, 9, 12, 18, 21, 23, 24, 24, 28, 33, 37]*)
let q2 = add 21 q2;;   (* [5, 7, 7, 9, 12, 18, 21, 21, 23, 24, 24, 28, 33, 37]*)
let q2 = add 7 q2;;   (* [5, 7, 7, 7, 9, 12, 18, 21, 21, 23, 24, 24, 28, 33, 37]*)
let q2 = add 34 q2;;   (* [5, 7, 7, 7, 9, 12, 18, 21, 21, 23, 24, 24, 28, 33, 34, 37]*)
let q2 = add 32 q2;;   (* [5, 7, 7, 7, 9, 12, 18, 21, 21, 23, 24, 24, 28, 32, 33, 34, 37]*)
let q2 = add 15 q2;;   (* [5, 7, 7, 7, 9, 12, 15, 18, 21, 21, 23, 24, 24, 28, 32, 33, 34, 37]*)
let (element, q2) = delete_min q2;;   (* 5 * [7, 7, 7, 9, 12, 15, 18, 21, 21, 23, 24, 24, 28, 32, 33, 34, 37]*)
assert(element = 5);;
let q2 = add 20 q2;;   (* [7, 7, 7, 9, 12, 15, 18, 20, 21, 21, 23, 24, 24, 28, 32, 33, 34, 37]*)
let q2 = add 4 q2;;   (* [4, 7, 7, 7, 9, 12, 15, 18, 20, 21, 21, 23, 24, 24, 28, 32, 33, 34, 37]*)
let (element, q2) = delete_min q2;;   (* 4 * [7, 7, 7, 9, 12, 15, 18, 20, 21, 21, 23, 24, 24, 28, 32, 33, 34, 37]*)
assert(element = 4);;
assert(is_empty q2 = false);;   (*[7, 7, 7, 9, 12, 15, 18, 20, 21, 21, 23, 24, 24, 28, 32, 33, 34, 37]*)
let q2 = add 13 q2;;   (* [7, 7, 7, 9, 12, 13, 15, 18, 20, 21, 21, 23, 24, 24, 28, 32, 33, 34, 37]*)
let q2 = add 36 q2;;   (* [7, 7, 7, 9, 12, 13, 15, 18, 20, 21, 21, 23, 24, 24, 28, 32, 33, 34, 36, 37]*)
let q2 = add 13 q2;;   (* [7, 7, 7, 9, 12, 13, 13, 15, 18, 20, 21, 21, 23, 24, 24, 28, 32, 33, 34, 36, 37]*)
let (element, q2) = delete_min q2;;   (* 7 * [7, 7, 9, 12, 13, 13, 15, 18, 20, 21, 21, 23, 24, 24, 28, 32, 33, 34, 36, 37]*)
assert(element = 7);;
let q2 = add 34 q2;;   (* [7, 7, 9, 12, 13, 13, 15, 18, 20, 21, 21, 23, 24, 24, 28, 32, 33, 34, 34, 36, 37]*)
let q2 = add 39 q2;;   (* [7, 7, 9, 12, 13, 13, 15, 18, 20, 21, 21, 23, 24, 24, 28, 32, 33, 34, 34, 36, 37, 39]*)
let q2 = add 2 q2;;   (* [2, 7, 7, 9, 12, 13, 13, 15, 18, 20, 21, 21, 23, 24, 24, 28, 32, 33, 34, 34, 36, 37, 39]*)
let q2 = add 36 q2;;   (* [2, 7, 7, 9, 12, 13, 13, 15, 18, 20, 21, 21, 23, 24, 24, 28, 32, 33, 34, 34, 36, 36, 37, 39]*)
let q2 = add 1 q2;;   (* [1, 2, 7, 7, 9, 12, 13, 13, 15, 18, 20, 21, 21, 23, 24, 24, 28, 32, 33, 34, 34, 36, 36, 37, 39]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 6 q3;;   (* [6]*)
let (element, q3) = delete_min q3;;   (* 6 * []*)
assert(element = 6);;
let q3 = add 11 q3;;   (* [11]*)
assert(is_empty q3 = false);;   (*[11]*)
let (element, q3) = delete_min q3;;   (* 11 * []*)
assert(element = 11);;
assert(is_empty q3 = true);;   (*[]*)
let q3 = add 1 q3;;   (* [1]*)
let q3 = add 18 q3;;   (* [1, 18]*)
let q3 = add 8 q3;;   (* [1, 8, 18]*)
let q3 = add 29 q3;;   (* [1, 8, 18, 29]*)
let q3 = add 9 q3;;   (* [1, 8, 9, 18, 29]*)
let q3 = add 1 q3;;   (* [1, 1, 8, 9, 18, 29]*)
let (element, q3) = delete_min q3;;   (* 1 * [1, 8, 9, 18, 29]*)
assert(element = 1);;
let q3 = add 14 q3;;   (* [1, 8, 9, 14, 18, 29]*)
let q3 = add 21 q3;;   (* [1, 8, 9, 14, 18, 21, 29]*)
assert(is_empty q3 = false);;   (*[1, 8, 9, 14, 18, 21, 29]*)
let (element, q3) = delete_min q3;;   (* 1 * [8, 9, 14, 18, 21, 29]*)
assert(element = 1);;
let q3 = add 25 q3;;   (* [8, 9, 14, 18, 21, 25, 29]*)
let q3 = add 13 q3;;   (* [8, 9, 13, 14, 18, 21, 25, 29]*)
let q3 = add 18 q3;;   (* [8, 9, 13, 14, 18, 18, 21, 25, 29]*)
let q3 = add 23 q3;;   (* [8, 9, 13, 14, 18, 18, 21, 23, 25, 29]*)
let q3 = add 32 q3;;   (* [8, 9, 13, 14, 18, 18, 21, 23, 25, 29, 32]*)
let (element, q3) = delete_min q3;;   (* 8 * [9, 13, 14, 18, 18, 21, 23, 25, 29, 32]*)
assert(element = 8);;
let (element, q3) = delete_min q3;;   (* 9 * [13, 14, 18, 18, 21, 23, 25, 29, 32]*)
assert(element = 9);;
let q3 = add 13 q3;;   (* [13, 13, 14, 18, 18, 21, 23, 25, 29, 32]*)
let q3 = add 34 q3;;   (* [13, 13, 14, 18, 18, 21, 23, 25, 29, 32, 34]*)
let q3 = add 30 q3;;   (* [13, 13, 14, 18, 18, 21, 23, 25, 29, 30, 32, 34]*)
let (element, q3) = delete_min q3;;   (* 13 * [13, 14, 18, 18, 21, 23, 25, 29, 30, 32, 34]*)
assert(element = 13);;
let q3 = add 6 q3;;   (* [6, 13, 14, 18, 18, 21, 23, 25, 29, 30, 32, 34]*)
let q3 = add 8 q3;;   (* [6, 8, 13, 14, 18, 18, 21, 23, 25, 29, 30, 32, 34]*)
let q3 = add 16 q3;;   (* [6, 8, 13, 14, 16, 18, 18, 21, 23, 25, 29, 30, 32, 34]*)
let q3 = add 28 q3;;   (* [6, 8, 13, 14, 16, 18, 18, 21, 23, 25, 28, 29, 30, 32, 34]*)
let q3 = add 23 q3;;   (* [6, 8, 13, 14, 16, 18, 18, 21, 23, 23, 25, 28, 29, 30, 32, 34]*)
assert(is_empty q3 = false);;   (*[6, 8, 13, 14, 16, 18, 18, 21, 23, 23, 25, 28, 29, 30, 32, 34]*)
let q3 = add 3 q3;;   (* [3, 6, 8, 13, 14, 16, 18, 18, 21, 23, 23, 25, 28, 29, 30, 32, 34]*)
let q3 = add 31 q3;;   (* [3, 6, 8, 13, 14, 16, 18, 18, 21, 23, 23, 25, 28, 29, 30, 31, 32, 34]*)
let q3 = add 22 q3;;   (* [3, 6, 8, 13, 14, 16, 18, 18, 21, 22, 23, 23, 25, 28, 29, 30, 31, 32, 34]*)
let q3 = add 25 q3;;   (* [3, 6, 8, 13, 14, 16, 18, 18, 21, 22, 23, 23, 25, 25, 28, 29, 30, 31, 32, 34]*)
assert(is_empty q3 = false);;   (*[3, 6, 8, 13, 14, 16, 18, 18, 21, 22, 23, 23, 25, 25, 28, 29, 30, 31, 32, 34]*)
let (element, q3) = delete_min q3;;   (* 3 * [6, 8, 13, 14, 16, 18, 18, 21, 22, 23, 23, 25, 25, 28, 29, 30, 31, 32, 34]*)
assert(element = 3);;
let q3 = add 9 q3;;   (* [6, 8, 9, 13, 14, 16, 18, 18, 21, 22, 23, 23, 25, 25, 28, 29, 30, 31, 32, 34]*)
assert(is_empty q3 = false);;   (*[6, 8, 9, 13, 14, 16, 18, 18, 21, 22, 23, 23, 25, 25, 28, 29, 30, 31, 32, 34]*)
let q3 = add 36 q3;;   (* [6, 8, 9, 13, 14, 16, 18, 18, 21, 22, 23, 23, 25, 25, 28, 29, 30, 31, 32, 34, 36]*)
let q3 = add 30 q3;;   (* [6, 8, 9, 13, 14, 16, 18, 18, 21, 22, 23, 23, 25, 25, 28, 29, 30, 30, 31, 32, 34, 36]*)
let q3 = add 33 q3;;   (* [6, 8, 9, 13, 14, 16, 18, 18, 21, 22, 23, 23, 25, 25, 28, 29, 30, 30, 31, 32, 33, 34, 36]*)
let q3 = add 26 q3;;   (* [6, 8, 9, 13, 14, 16, 18, 18, 21, 22, 23, 23, 25, 25, 26, 28, 29, 30, 30, 31, 32, 33, 34, 36]*)
let q3 = add 39 q3;;   (* [6, 8, 9, 13, 14, 16, 18, 18, 21, 22, 23, 23, 25, 25, 26, 28, 29, 30, 30, 31, 32, 33, 34, 36, 39]*)
let q3 = add 4 q3;;   (* [4, 6, 8, 9, 13, 14, 16, 18, 18, 21, 22, 23, 23, 25, 25, 26, 28, 29, 30, 30, 31, 32, 33, 34, 36, 39]*)
assert(is_empty q3 = false);;   (*[4, 6, 8, 9, 13, 14, 16, 18, 18, 21, 22, 23, 23, 25, 25, 26, 28, 29, 30, 30, 31, 32, 33, 34, 36, 39]*)

(* -------q4------ *)
let q4 = empty;;
let q4 = add 23 q4;;   (* [23]*)
let (element, q4) = delete_min q4;;   (* 23 * []*)
assert(element = 23);;
let q4 = add 26 q4;;   (* [26]*)
let q4 = add 0 q4;;   (* [0, 26]*)
let q4 = add 14 q4;;   (* [0, 14, 26]*)
let q4 = add 20 q4;;   (* [0, 14, 20, 26]*)
let (element, q4) = delete_min q4;;   (* 0 * [14, 20, 26]*)
assert(element = 0);;
let q4 = add 1 q4;;   (* [1, 14, 20, 26]*)
let q4 = add 33 q4;;   (* [1, 14, 20, 26, 33]*)
let (element, q4) = delete_min q4;;   (* 1 * [14, 20, 26, 33]*)
assert(element = 1);;
let (element, q4) = delete_min q4;;   (* 14 * [20, 26, 33]*)
assert(element = 14);;
let q4 = add 0 q4;;   (* [0, 20, 26, 33]*)
let q4 = add 1 q4;;   (* [0, 1, 20, 26, 33]*)
let q4 = add 20 q4;;   (* [0, 1, 20, 20, 26, 33]*)
let (element, q4) = delete_min q4;;   (* 0 * [1, 20, 20, 26, 33]*)
assert(element = 0);;
let (element, q4) = delete_min q4;;   (* 1 * [20, 20, 26, 33]*)
assert(element = 1);;
let (element, q4) = delete_min q4;;   (* 20 * [20, 26, 33]*)
assert(element = 20);;
let q4 = add 0 q4;;   (* [0, 20, 26, 33]*)
let q4 = add 2 q4;;   (* [0, 2, 20, 26, 33]*)
let (element, q4) = delete_min q4;;   (* 0 * [2, 20, 26, 33]*)
assert(element = 0);;
let q4 = add 34 q4;;   (* [2, 20, 26, 33, 34]*)
let q4 = add 24 q4;;   (* [2, 20, 24, 26, 33, 34]*)
let (element, q4) = delete_min q4;;   (* 2 * [20, 24, 26, 33, 34]*)
assert(element = 2);;
let q4 = add 5 q4;;   (* [5, 20, 24, 26, 33, 34]*)
let q4 = add 11 q4;;   (* [5, 11, 20, 24, 26, 33, 34]*)
let (element, q4) = delete_min q4;;   (* 5 * [11, 20, 24, 26, 33, 34]*)
assert(element = 5);;
let q4 = add 23 q4;;   (* [11, 20, 23, 24, 26, 33, 34]*)
let q4 = add 25 q4;;   (* [11, 20, 23, 24, 25, 26, 33, 34]*)
let q4 = add 11 q4;;   (* [11, 11, 20, 23, 24, 25, 26, 33, 34]*)
let (element, q4) = delete_min q4;;   (* 11 * [11, 20, 23, 24, 25, 26, 33, 34]*)
assert(element = 11);;
let (element, q4) = delete_min q4;;   (* 11 * [20, 23, 24, 25, 26, 33, 34]*)
assert(element = 11);;
let q4 = add 11 q4;;   (* [11, 20, 23, 24, 25, 26, 33, 34]*)
let (element, q4) = delete_min q4;;   (* 11 * [20, 23, 24, 25, 26, 33, 34]*)
assert(element = 11);;
let q4 = add 6 q4;;   (* [6, 20, 23, 24, 25, 26, 33, 34]*)
assert(is_empty q4 = false);;   (*[6, 20, 23, 24, 25, 26, 33, 34]*)
let q4 = add 12 q4;;   (* [6, 12, 20, 23, 24, 25, 26, 33, 34]*)
let q4 = add 20 q4;;   (* [6, 12, 20, 20, 23, 24, 25, 26, 33, 34]*)
let (element, q4) = delete_min q4;;   (* 6 * [12, 20, 20, 23, 24, 25, 26, 33, 34]*)
assert(element = 6);;
let q4 = add 5 q4;;   (* [5, 12, 20, 20, 23, 24, 25, 26, 33, 34]*)
assert(is_empty q4 = false);;   (*[5, 12, 20, 20, 23, 24, 25, 26, 33, 34]*)
let (element, q4) = delete_min q4;;   (* 5 * [12, 20, 20, 23, 24, 25, 26, 33, 34]*)
assert(element = 5);;
let q4 = add 9 q4;;   (* [9, 12, 20, 20, 23, 24, 25, 26, 33, 34]*)
let q4 = add 12 q4;;   (* [9, 12, 12, 20, 20, 23, 24, 25, 26, 33, 34]*)
let (element, q4) = delete_min q4;;   (* 9 * [12, 12, 20, 20, 23, 24, 25, 26, 33, 34]*)
assert(element = 9);;
let (element, q4) = delete_min q4;;   (* 12 * [12, 20, 20, 23, 24, 25, 26, 33, 34]*)
assert(element = 12);;
assert(is_empty q4 = false);;   (*[12, 20, 20, 23, 24, 25, 26, 33, 34]*)
let q4 = add 2 q4;;   (* [2, 12, 20, 20, 23, 24, 25, 26, 33, 34]*)
assert(is_empty q4 = false);;   (*[2, 12, 20, 20, 23, 24, 25, 26, 33, 34]*)
let q4 = add 32 q4;;   (* [2, 12, 20, 20, 23, 24, 25, 26, 32, 33, 34]*)

(* -------q5------ *)
let q5 = empty;;
let q5 = add 10 q5;;   (* [10]*)
let q5 = add 29 q5;;   (* [10, 29]*)
let q5 = add 10 q5;;   (* [10, 10, 29]*)
let q5 = add 2 q5;;   (* [2, 10, 10, 29]*)
let q5 = add 18 q5;;   (* [2, 10, 10, 18, 29]*)
let (element, q5) = delete_min q5;;   (* 2 * [10, 10, 18, 29]*)
assert(element = 2);;
let (element, q5) = delete_min q5;;   (* 10 * [10, 18, 29]*)
assert(element = 10);;
assert(is_empty q5 = false);;   (*[10, 18, 29]*)
let q5 = add 31 q5;;   (* [10, 18, 29, 31]*)
let q5 = add 9 q5;;   (* [9, 10, 18, 29, 31]*)
let (element, q5) = delete_min q5;;   (* 9 * [10, 18, 29, 31]*)
assert(element = 9);;
assert(is_empty q5 = false);;   (*[10, 18, 29, 31]*)
assert(is_empty q5 = false);;   (*[10, 18, 29, 31]*)
let (element, q5) = delete_min q5;;   (* 10 * [18, 29, 31]*)
assert(element = 10);;
let q5 = add 22 q5;;   (* [18, 22, 29, 31]*)
let (element, q5) = delete_min q5;;   (* 18 * [22, 29, 31]*)
assert(element = 18);;
let (element, q5) = delete_min q5;;   (* 22 * [29, 31]*)
assert(element = 22);;
let q5 = add 33 q5;;   (* [29, 31, 33]*)
let q5 = add 22 q5;;   (* [22, 29, 31, 33]*)
let q5 = add 33 q5;;   (* [22, 29, 31, 33, 33]*)
let (element, q5) = delete_min q5;;   (* 22 * [29, 31, 33, 33]*)
assert(element = 22);;
let (element, q5) = delete_min q5;;   (* 29 * [31, 33, 33]*)
assert(element = 29);;
let q5 = add 17 q5;;   (* [17, 31, 33, 33]*)
let q5 = add 18 q5;;   (* [17, 18, 31, 33, 33]*)
assert(is_empty q5 = false);;   (*[17, 18, 31, 33, 33]*)
let q5 = add 19 q5;;   (* [17, 18, 19, 31, 33, 33]*)
let (element, q5) = delete_min q5;;   (* 17 * [18, 19, 31, 33, 33]*)
assert(element = 17);;
let q5 = add 12 q5;;   (* [12, 18, 19, 31, 33, 33]*)
assert(is_empty q5 = false);;   (*[12, 18, 19, 31, 33, 33]*)
assert(is_empty q5 = false);;   (*[12, 18, 19, 31, 33, 33]*)
assert(is_empty q5 = false);;   (*[12, 18, 19, 31, 33, 33]*)
let q5 = add 35 q5;;   (* [12, 18, 19, 31, 33, 33, 35]*)
let q5 = add 8 q5;;   (* [8, 12, 18, 19, 31, 33, 33, 35]*)
let q5 = add 32 q5;;   (* [8, 12, 18, 19, 31, 32, 33, 33, 35]*)
let q5 = add 21 q5;;   (* [8, 12, 18, 19, 21, 31, 32, 33, 33, 35]*)
let (element, q5) = delete_min q5;;   (* 8 * [12, 18, 19, 21, 31, 32, 33, 33, 35]*)
assert(element = 8);;
let q5 = add 3 q5;;   (* [3, 12, 18, 19, 21, 31, 32, 33, 33, 35]*)
let q5 = add 29 q5;;   (* [3, 12, 18, 19, 21, 29, 31, 32, 33, 33, 35]*)
let q5 = add 9 q5;;   (* [3, 9, 12, 18, 19, 21, 29, 31, 32, 33, 33, 35]*)
let q5 = add 38 q5;;   (* [3, 9, 12, 18, 19, 21, 29, 31, 32, 33, 33, 35, 38]*)
assert(is_empty q5 = false);;   (*[3, 9, 12, 18, 19, 21, 29, 31, 32, 33, 33, 35, 38]*)
let (element, q5) = delete_min q5;;   (* 3 * [9, 12, 18, 19, 21, 29, 31, 32, 33, 33, 35, 38]*)
assert(element = 3);;
let q5 = add 34 q5;;   (* [9, 12, 18, 19, 21, 29, 31, 32, 33, 33, 34, 35, 38]*)
let q5 = add 30 q5;;   (* [9, 12, 18, 19, 21, 29, 30, 31, 32, 33, 33, 34, 35, 38]*)
let q5 = add 30 q5;;   (* [9, 12, 18, 19, 21, 29, 30, 30, 31, 32, 33, 33, 34, 35, 38]*)
let (element, q5) = delete_min q5;;   (* 9 * [12, 18, 19, 21, 29, 30, 30, 31, 32, 33, 33, 34, 35, 38]*)
assert(element = 9);;
let q5 = add 5 q5;;   (* [5, 12, 18, 19, 21, 29, 30, 30, 31, 32, 33, 33, 34, 35, 38]*)
let q5 = add 13 q5;;   (* [5, 12, 13, 18, 19, 21, 29, 30, 30, 31, 32, 33, 33, 34, 35, 38]*)
let q5 = add 10 q5;;   (* [5, 10, 12, 13, 18, 19, 21, 29, 30, 30, 31, 32, 33, 33, 34, 35, 38]*)

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[1, 2, 2, 2, 4, 5, 6, 7, 7, 8, 9, 9, 10, 12, 12, 12, 13, 13, 13, 13, 13, 14, 15, 15, 16, 18, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39]*)
let (element, q) = delete_min q;;   (* 1 * [2, 2, 2, 4, 5, 6, 7, 7, 8, 9, 9, 10, 12, 12, 12, 13, 13, 13, 13, 13, 14, 15, 15, 16, 18, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 1);;
let (element, q) = delete_min q;;   (* 2 * [2, 2, 4, 5, 6, 7, 7, 8, 9, 9, 10, 12, 12, 12, 13, 13, 13, 13, 13, 14, 15, 15, 16, 18, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 2);;
let (element, q) = delete_min q;;   (* 2 * [2, 4, 5, 6, 7, 7, 8, 9, 9, 10, 12, 12, 12, 13, 13, 13, 13, 13, 14, 15, 15, 16, 18, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 2);;
let (element, q) = delete_min q;;   (* 2 * [4, 5, 6, 7, 7, 8, 9, 9, 10, 12, 12, 12, 13, 13, 13, 13, 13, 14, 15, 15, 16, 18, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 2);;
let (element, q) = delete_min q;;   (* 4 * [5, 6, 7, 7, 8, 9, 9, 10, 12, 12, 12, 13, 13, 13, 13, 13, 14, 15, 15, 16, 18, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 4);;
let (element, q) = delete_min q;;   (* 5 * [6, 7, 7, 8, 9, 9, 10, 12, 12, 12, 13, 13, 13, 13, 13, 14, 15, 15, 16, 18, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 6 * [7, 7, 8, 9, 9, 10, 12, 12, 12, 13, 13, 13, 13, 13, 14, 15, 15, 16, 18, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 7 * [7, 8, 9, 9, 10, 12, 12, 12, 13, 13, 13, 13, 13, 14, 15, 15, 16, 18, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 7 * [8, 9, 9, 10, 12, 12, 12, 13, 13, 13, 13, 13, 14, 15, 15, 16, 18, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 7);;
let (element, q) = delete_min q;;   (* 8 * [9, 9, 10, 12, 12, 12, 13, 13, 13, 13, 13, 14, 15, 15, 16, 18, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 8);;
let (element, q) = delete_min q;;   (* 9 * [9, 10, 12, 12, 12, 13, 13, 13, 13, 13, 14, 15, 15, 16, 18, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 9 * [10, 12, 12, 12, 13, 13, 13, 13, 13, 14, 15, 15, 16, 18, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 10 * [12, 12, 12, 13, 13, 13, 13, 13, 14, 15, 15, 16, 18, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 12 * [12, 12, 13, 13, 13, 13, 13, 14, 15, 15, 16, 18, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 12 * [12, 13, 13, 13, 13, 13, 14, 15, 15, 16, 18, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 12 * [13, 13, 13, 13, 13, 14, 15, 15, 16, 18, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 12);;
let (element, q) = delete_min q;;   (* 13 * [13, 13, 13, 13, 14, 15, 15, 16, 18, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 13 * [13, 13, 13, 14, 15, 15, 16, 18, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 13 * [13, 13, 14, 15, 15, 16, 18, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 13 * [13, 14, 15, 15, 16, 18, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 13 * [14, 15, 15, 16, 18, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 14 * [15, 15, 16, 18, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 15 * [15, 16, 18, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 15 * [16, 18, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 15);;
let (element, q) = delete_min q;;   (* 16 * [18, 18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 18 * [18, 18, 18, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [18, 18, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [18, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 18 * [19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [19, 20, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 19 * [20, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [20, 21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [21, 21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [21, 21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [21, 21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [21, 21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [21, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [24, 24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [24, 25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [25, 25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 25 * [25, 25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [25, 25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [25, 26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 25 * [26, 26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 25);;
let (element, q) = delete_min q;;   (* 26 * [26, 26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [26, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 28 * [28, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [29, 29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [29, 29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [29, 30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [30, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [31, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [34, 34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [34, 35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [35, 36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 35 * [36, 36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 35);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 36, 37, 37, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 36, 37, 37, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [36, 37, 37, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 36 * [37, 37, 38, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [37, 38, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [38, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




(*----TEST104----*)

(* -------q1------ *)
let q1 = empty;;
let q1 = add 9 q1;;   (* [9]*)
let q1 = add 4 q1;;   (* [4, 9]*)
let (element, q1) = delete_min q1;;   (* 4 * [9]*)
assert(element = 4);;
let q1 = add 21 q1;;   (* [9, 21]*)
let q1 = add 19 q1;;   (* [9, 19, 21]*)
let q1 = add 21 q1;;   (* [9, 19, 21, 21]*)
let q1 = add 8 q1;;   (* [8, 9, 19, 21, 21]*)
let (element, q1) = delete_min q1;;   (* 8 * [9, 19, 21, 21]*)
assert(element = 8);;
let (element, q1) = delete_min q1;;   (* 9 * [19, 21, 21]*)
assert(element = 9);;
assert(is_empty q1 = false);;   (*[19, 21, 21]*)
let (element, q1) = delete_min q1;;   (* 19 * [21, 21]*)
assert(element = 19);;
let (element, q1) = delete_min q1;;   (* 21 * [21]*)
assert(element = 21);;
let q1 = add 20 q1;;   (* [20, 21]*)
let q1 = add 3 q1;;   (* [3, 20, 21]*)
let q1 = add 24 q1;;   (* [3, 20, 21, 24]*)
let q1 = add 14 q1;;   (* [3, 14, 20, 21, 24]*)
let q1 = add 22 q1;;   (* [3, 14, 20, 21, 22, 24]*)
assert(is_empty q1 = false);;   (*[3, 14, 20, 21, 22, 24]*)
let q1 = add 9 q1;;   (* [3, 9, 14, 20, 21, 22, 24]*)
let q1 = add 24 q1;;   (* [3, 9, 14, 20, 21, 22, 24, 24]*)
let (element, q1) = delete_min q1;;   (* 3 * [9, 14, 20, 21, 22, 24, 24]*)
assert(element = 3);;
assert(is_empty q1 = false);;   (*[9, 14, 20, 21, 22, 24, 24]*)
let q1 = add 6 q1;;   (* [6, 9, 14, 20, 21, 22, 24, 24]*)
assert(is_empty q1 = false);;   (*[6, 9, 14, 20, 21, 22, 24, 24]*)
let (element, q1) = delete_min q1;;   (* 6 * [9, 14, 20, 21, 22, 24, 24]*)
assert(element = 6);;
let q1 = add 27 q1;;   (* [9, 14, 20, 21, 22, 24, 24, 27]*)
let q1 = add 18 q1;;   (* [9, 14, 18, 20, 21, 22, 24, 24, 27]*)
let q1 = add 33 q1;;   (* [9, 14, 18, 20, 21, 22, 24, 24, 27, 33]*)
let (element, q1) = delete_min q1;;   (* 9 * [14, 18, 20, 21, 22, 24, 24, 27, 33]*)
assert(element = 9);;
let q1 = add 21 q1;;   (* [14, 18, 20, 21, 21, 22, 24, 24, 27, 33]*)
let q1 = add 27 q1;;   (* [14, 18, 20, 21, 21, 22, 24, 24, 27, 27, 33]*)
let q1 = add 31 q1;;   (* [14, 18, 20, 21, 21, 22, 24, 24, 27, 27, 31, 33]*)
assert(is_empty q1 = false);;   (*[14, 18, 20, 21, 21, 22, 24, 24, 27, 27, 31, 33]*)
let q1 = add 0 q1;;   (* [0, 14, 18, 20, 21, 21, 22, 24, 24, 27, 27, 31, 33]*)
let q1 = add 27 q1;;   (* [0, 14, 18, 20, 21, 21, 22, 24, 24, 27, 27, 27, 31, 33]*)
let q1 = add 34 q1;;   (* [0, 14, 18, 20, 21, 21, 22, 24, 24, 27, 27, 27, 31, 33, 34]*)
let q1 = add 34 q1;;   (* [0, 14, 18, 20, 21, 21, 22, 24, 24, 27, 27, 27, 31, 33, 34, 34]*)
let (element, q1) = delete_min q1;;   (* 0 * [14, 18, 20, 21, 21, 22, 24, 24, 27, 27, 27, 31, 33, 34, 34]*)
assert(element = 0);;
let q1 = add 32 q1;;   (* [14, 18, 20, 21, 21, 22, 24, 24, 27, 27, 27, 31, 32, 33, 34, 34]*)
let q1 = add 1 q1;;   (* [1, 14, 18, 20, 21, 21, 22, 24, 24, 27, 27, 27, 31, 32, 33, 34, 34]*)
let q1 = add 39 q1;;   (* [1, 14, 18, 20, 21, 21, 22, 24, 24, 27, 27, 27, 31, 32, 33, 34, 34, 39]*)
let q1 = add 24 q1;;   (* [1, 14, 18, 20, 21, 21, 22, 24, 24, 24, 27, 27, 27, 31, 32, 33, 34, 34, 39]*)
let q1 = add 21 q1;;   (* [1, 14, 18, 20, 21, 21, 21, 22, 24, 24, 24, 27, 27, 27, 31, 32, 33, 34, 34, 39]*)
let q1 = add 0 q1;;   (* [0, 1, 14, 18, 20, 21, 21, 21, 22, 24, 24, 24, 27, 27, 27, 31, 32, 33, 34, 34, 39]*)
let q1 = add 38 q1;;   (* [0, 1, 14, 18, 20, 21, 21, 21, 22, 24, 24, 24, 27, 27, 27, 31, 32, 33, 34, 34, 38, 39]*)
let q1 = add 39 q1;;   (* [0, 1, 14, 18, 20, 21, 21, 21, 22, 24, 24, 24, 27, 27, 27, 31, 32, 33, 34, 34, 38, 39, 39]*)
let q1 = add 16 q1;;   (* [0, 1, 14, 16, 18, 20, 21, 21, 21, 22, 24, 24, 24, 27, 27, 27, 31, 32, 33, 34, 34, 38, 39, 39]*)
let q1 = add 24 q1;;   (* [0, 1, 14, 16, 18, 20, 21, 21, 21, 22, 24, 24, 24, 24, 27, 27, 27, 31, 32, 33, 34, 34, 38, 39, 39]*)
let (element, q1) = delete_min q1;;   (* 0 * [1, 14, 16, 18, 20, 21, 21, 21, 22, 24, 24, 24, 24, 27, 27, 27, 31, 32, 33, 34, 34, 38, 39, 39]*)
assert(element = 0);;
let q1 = add 10 q1;;   (* [1, 10, 14, 16, 18, 20, 21, 21, 21, 22, 24, 24, 24, 24, 27, 27, 27, 31, 32, 33, 34, 34, 38, 39, 39]*)

(* -------q2------ *)
let q2 = empty;;
let q2 = add 6 q2;;   (* [6]*)
let q2 = add 11 q2;;   (* [6, 11]*)
let q2 = add 31 q2;;   (* [6, 11, 31]*)
assert(is_empty q2 = false);;   (*[6, 11, 31]*)
assert(is_empty q2 = false);;   (*[6, 11, 31]*)
let q2 = add 29 q2;;   (* [6, 11, 29, 31]*)
assert(is_empty q2 = false);;   (*[6, 11, 29, 31]*)
let q2 = add 2 q2;;   (* [2, 6, 11, 29, 31]*)
let q2 = add 30 q2;;   (* [2, 6, 11, 29, 30, 31]*)
let q2 = add 27 q2;;   (* [2, 6, 11, 27, 29, 30, 31]*)
let (element, q2) = delete_min q2;;   (* 2 * [6, 11, 27, 29, 30, 31]*)
assert(element = 2);;
let q2 = add 11 q2;;   (* [6, 11, 11, 27, 29, 30, 31]*)
let (element, q2) = delete_min q2;;   (* 6 * [11, 11, 27, 29, 30, 31]*)
assert(element = 6);;
let q2 = add 21 q2;;   (* [11, 11, 21, 27, 29, 30, 31]*)
let q2 = add 8 q2;;   (* [8, 11, 11, 21, 27, 29, 30, 31]*)
let (element, q2) = delete_min q2;;   (* 8 * [11, 11, 21, 27, 29, 30, 31]*)
assert(element = 8);;
let q2 = add 0 q2;;   (* [0, 11, 11, 21, 27, 29, 30, 31]*)
let (element, q2) = delete_min q2;;   (* 0 * [11, 11, 21, 27, 29, 30, 31]*)
assert(element = 0);;
let (element, q2) = delete_min q2;;   (* 11 * [11, 21, 27, 29, 30, 31]*)
assert(element = 11);;
let q2 = add 9 q2;;   (* [9, 11, 21, 27, 29, 30, 31]*)
let q2 = add 24 q2;;   (* [9, 11, 21, 24, 27, 29, 30, 31]*)
let (element, q2) = delete_min q2;;   (* 9 * [11, 21, 24, 27, 29, 30, 31]*)
assert(element = 9);;
assert(is_empty q2 = false);;   (*[11, 21, 24, 27, 29, 30, 31]*)
assert(is_empty q2 = false);;   (*[11, 21, 24, 27, 29, 30, 31]*)
let q2 = add 11 q2;;   (* [11, 11, 21, 24, 27, 29, 30, 31]*)
let q2 = add 1 q2;;   (* [1, 11, 11, 21, 24, 27, 29, 30, 31]*)
let q2 = add 39 q2;;   (* [1, 11, 11, 21, 24, 27, 29, 30, 31, 39]*)
let (element, q2) = delete_min q2;;   (* 1 * [11, 11, 21, 24, 27, 29, 30, 31, 39]*)
assert(element = 1);;
let (element, q2) = delete_min q2;;   (* 11 * [11, 21, 24, 27, 29, 30, 31, 39]*)
assert(element = 11);;
let (element, q2) = delete_min q2;;   (* 11 * [21, 24, 27, 29, 30, 31, 39]*)
assert(element = 11);;
let (element, q2) = delete_min q2;;   (* 21 * [24, 27, 29, 30, 31, 39]*)
assert(element = 21);;
let q2 = add 38 q2;;   (* [24, 27, 29, 30, 31, 38, 39]*)
let (element, q2) = delete_min q2;;   (* 24 * [27, 29, 30, 31, 38, 39]*)
assert(element = 24);;
assert(is_empty q2 = false);;   (*[27, 29, 30, 31, 38, 39]*)
let q2 = add 29 q2;;   (* [27, 29, 29, 30, 31, 38, 39]*)
let (element, q2) = delete_min q2;;   (* 27 * [29, 29, 30, 31, 38, 39]*)
assert(element = 27);;
let q2 = add 16 q2;;   (* [16, 29, 29, 30, 31, 38, 39]*)
let q2 = add 0 q2;;   (* [0, 16, 29, 29, 30, 31, 38, 39]*)
let (element, q2) = delete_min q2;;   (* 0 * [16, 29, 29, 30, 31, 38, 39]*)
assert(element = 0);;
let q2 = add 11 q2;;   (* [11, 16, 29, 29, 30, 31, 38, 39]*)
let q2 = add 7 q2;;   (* [7, 11, 16, 29, 29, 30, 31, 38, 39]*)
let q2 = add 9 q2;;   (* [7, 9, 11, 16, 29, 29, 30, 31, 38, 39]*)
let (element, q2) = delete_min q2;;   (* 7 * [9, 11, 16, 29, 29, 30, 31, 38, 39]*)
assert(element = 7);;
let (element, q2) = delete_min q2;;   (* 9 * [11, 16, 29, 29, 30, 31, 38, 39]*)
assert(element = 9);;
let q2 = add 21 q2;;   (* [11, 16, 21, 29, 29, 30, 31, 38, 39]*)
let q2 = add 28 q2;;   (* [11, 16, 21, 28, 29, 29, 30, 31, 38, 39]*)
let q2 = add 17 q2;;   (* [11, 16, 17, 21, 28, 29, 29, 30, 31, 38, 39]*)
assert(is_empty q2 = false);;   (*[11, 16, 17, 21, 28, 29, 29, 30, 31, 38, 39]*)
let q2 = add 38 q2;;   (* [11, 16, 17, 21, 28, 29, 29, 30, 31, 38, 38, 39]*)
let q2 = add 31 q2;;   (* [11, 16, 17, 21, 28, 29, 29, 30, 31, 31, 38, 38, 39]*)

(* -------q3------ *)
let q3 = empty;;
let q3 = add 24 q3;;   (* [24]*)
let q3 = add 17 q3;;   (* [17, 24]*)
let q3 = add 21 q3;;   (* [17, 21, 24]*)
let q3 = add 17 q3;;   (* [17, 17, 21, 24]*)
let q3 = add 19 q3;;   (* [17, 17, 19, 21, 24]*)
let q3 = add 39 q3;;   (* [17, 17, 19, 21, 24, 39]*)
let q3 = add 37 q3;;   (* [17, 17, 19, 21, 24, 37, 39]*)
assert(is_empty q3 = false);;   (*[17, 17, 19, 21, 24, 37, 39]*)
let q3 = add 15 q3;;   (* [15, 17, 17, 19, 21, 24, 37, 39]*)
let (element, q3) = delete_min q3;;   (* 15 * [17, 17, 19, 21, 24, 37, 39]*)
assert(element = 15);;
assert(is_empty q3 = false);;   (*[17, 17, 19, 21, 24, 37, 39]*)
let q3 = add 9 q3;;   (* [9, 17, 17, 19, 21, 24, 37, 39]*)
let q3 = add 27 q3;;   (* [9, 17, 17, 19, 21, 24, 27, 37, 39]*)
let q3 = add 28 q3;;   (* [9, 17, 17, 19, 21, 24, 27, 28, 37, 39]*)
assert(is_empty q3 = false);;   (*[9, 17, 17, 19, 21, 24, 27, 28, 37, 39]*)
let q3 = add 5 q3;;   (* [5, 9, 17, 17, 19, 21, 24, 27, 28, 37, 39]*)
let q3 = add 7 q3;;   (* [5, 7, 9, 17, 17, 19, 21, 24, 27, 28, 37, 39]*)
let q3 = add 21 q3;;   (* [5, 7, 9, 17, 17, 19, 21, 21, 24, 27, 28, 37, 39]*)
let (element, q3) = delete_min q3;;   (* 5 * [7, 9, 17, 17, 19, 21, 21, 24, 27, 28, 37, 39]*)
assert(element = 5);;
let q3 = add 0 q3;;   (* [0, 7, 9, 17, 17, 19, 21, 21, 24, 27, 28, 37, 39]*)
assert(is_empty q3 = false);;   (*[0, 7, 9, 17, 17, 19, 21, 21, 24, 27, 28, 37, 39]*)
let q3 = add 3 q3;;   (* [0, 3, 7, 9, 17, 17, 19, 21, 21, 24, 27, 28, 37, 39]*)
let q3 = add 28 q3;;   (* [0, 3, 7, 9, 17, 17, 19, 21, 21, 24, 27, 28, 28, 37, 39]*)
let q3 = add 32 q3;;   (* [0, 3, 7, 9, 17, 17, 19, 21, 21, 24, 27, 28, 28, 32, 37, 39]*)
let q3 = add 38 q3;;   (* [0, 3, 7, 9, 17, 17, 19, 21, 21, 24, 27, 28, 28, 32, 37, 38, 39]*)
let q3 = add 17 q3;;   (* [0, 3, 7, 9, 17, 17, 17, 19, 21, 21, 24, 27, 28, 28, 32, 37, 38, 39]*)
assert(is_empty q3 = false);;   (*[0, 3, 7, 9, 17, 17, 17, 19, 21, 21, 24, 27, 28, 28, 32, 37, 38, 39]*)
let (element, q3) = delete_min q3;;   (* 0 * [3, 7, 9, 17, 17, 17, 19, 21, 21, 24, 27, 28, 28, 32, 37, 38, 39]*)
assert(element = 0);;
let (element, q3) = delete_min q3;;   (* 3 * [7, 9, 17, 17, 17, 19, 21, 21, 24, 27, 28, 28, 32, 37, 38, 39]*)
assert(element = 3);;
let (element, q3) = delete_min q3;;   (* 7 * [9, 17, 17, 17, 19, 21, 21, 24, 27, 28, 28, 32, 37, 38, 39]*)
assert(element = 7);;
let q3 = add 0 q3;;   (* [0, 9, 17, 17, 17, 19, 21, 21, 24, 27, 28, 28, 32, 37, 38, 39]*)
let q3 = add 18 q3;;   (* [0, 9, 17, 17, 17, 18, 19, 21, 21, 24, 27, 28, 28, 32, 37, 38, 39]*)
assert(is_empty q3 = false);;   (*[0, 9, 17, 17, 17, 18, 19, 21, 21, 24, 27, 28, 28, 32, 37, 38, 39]*)
let (element, q3) = delete_min q3;;   (* 0 * [9, 17, 17, 17, 18, 19, 21, 21, 24, 27, 28, 28, 32, 37, 38, 39]*)
assert(element = 0);;
let (element, q3) = delete_min q3;;   (* 9 * [17, 17, 17, 18, 19, 21, 21, 24, 27, 28, 28, 32, 37, 38, 39]*)
assert(element = 9);;
let q3 = add 15 q3;;   (* [15, 17, 17, 17, 18, 19, 21, 21, 24, 27, 28, 28, 32, 37, 38, 39]*)
let (element, q3) = delete_min q3;;   (* 15 * [17, 17, 17, 18, 19, 21, 21, 24, 27, 28, 28, 32, 37, 38, 39]*)
assert(element = 15);;
let (element, q3) = delete_min q3;;   (* 17 * [17, 17, 18, 19, 21, 21, 24, 27, 28, 28, 32, 37, 38, 39]*)
assert(element = 17);;
let q3 = add 6 q3;;   (* [6, 17, 17, 18, 19, 21, 21, 24, 27, 28, 28, 32, 37, 38, 39]*)
let (element, q3) = delete_min q3;;   (* 6 * [17, 17, 18, 19, 21, 21, 24, 27, 28, 28, 32, 37, 38, 39]*)
assert(element = 6);;
let (element, q3) = delete_min q3;;   (* 17 * [17, 18, 19, 21, 21, 24, 27, 28, 28, 32, 37, 38, 39]*)
assert(element = 17);;
let (element, q3) = delete_min q3;;   (* 17 * [18, 19, 21, 21, 24, 27, 28, 28, 32, 37, 38, 39]*)
assert(element = 17);;
let (element, q3) = delete_min q3;;   (* 18 * [19, 21, 21, 24, 27, 28, 28, 32, 37, 38, 39]*)
assert(element = 18);;
let (element, q3) = delete_min q3;;   (* 19 * [21, 21, 24, 27, 28, 28, 32, 37, 38, 39]*)
assert(element = 19);;
assert(is_empty q3 = false);;   (*[21, 21, 24, 27, 28, 28, 32, 37, 38, 39]*)
let (element, q3) = delete_min q3;;   (* 21 * [21, 24, 27, 28, 28, 32, 37, 38, 39]*)
assert(element = 21);;
let (element, q3) = delete_min q3;;   (* 21 * [24, 27, 28, 28, 32, 37, 38, 39]*)
assert(element = 21);;
let (element, q3) = delete_min q3;;   (* 24 * [27, 28, 28, 32, 37, 38, 39]*)
assert(element = 24);;
let q3 = add 3 q3;;   (* [3, 27, 28, 28, 32, 37, 38, 39]*)
let q3 = add 17 q3;;   (* [3, 17, 27, 28, 28, 32, 37, 38, 39]*)

(* -------q4------ *)
let q4 = empty;;
assert(is_empty q4 = true);;   (*[]*)
let q4 = add 3 q4;;   (* [3]*)
let q4 = add 9 q4;;   (* [3, 9]*)
let q4 = add 23 q4;;   (* [3, 9, 23]*)
let q4 = add 23 q4;;   (* [3, 9, 23, 23]*)
let q4 = add 5 q4;;   (* [3, 5, 9, 23, 23]*)
let q4 = add 28 q4;;   (* [3, 5, 9, 23, 23, 28]*)
let q4 = add 19 q4;;   (* [3, 5, 9, 19, 23, 23, 28]*)
let q4 = add 4 q4;;   (* [3, 4, 5, 9, 19, 23, 23, 28]*)
let q4 = add 33 q4;;   (* [3, 4, 5, 9, 19, 23, 23, 28, 33]*)
let q4 = add 39 q4;;   (* [3, 4, 5, 9, 19, 23, 23, 28, 33, 39]*)
let q4 = add 6 q4;;   (* [3, 4, 5, 6, 9, 19, 23, 23, 28, 33, 39]*)
let q4 = add 33 q4;;   (* [3, 4, 5, 6, 9, 19, 23, 23, 28, 33, 33, 39]*)
let q4 = add 1 q4;;   (* [1, 3, 4, 5, 6, 9, 19, 23, 23, 28, 33, 33, 39]*)
let (element, q4) = delete_min q4;;   (* 1 * [3, 4, 5, 6, 9, 19, 23, 23, 28, 33, 33, 39]*)
assert(element = 1);;
assert(is_empty q4 = false);;   (*[3, 4, 5, 6, 9, 19, 23, 23, 28, 33, 33, 39]*)
let (element, q4) = delete_min q4;;   (* 3 * [4, 5, 6, 9, 19, 23, 23, 28, 33, 33, 39]*)
assert(element = 3);;
let q4 = add 33 q4;;   (* [4, 5, 6, 9, 19, 23, 23, 28, 33, 33, 33, 39]*)
let q4 = add 3 q4;;   (* [3, 4, 5, 6, 9, 19, 23, 23, 28, 33, 33, 33, 39]*)
let q4 = add 20 q4;;   (* [3, 4, 5, 6, 9, 19, 20, 23, 23, 28, 33, 33, 33, 39]*)
assert(is_empty q4 = false);;   (*[3, 4, 5, 6, 9, 19, 20, 23, 23, 28, 33, 33, 33, 39]*)
let q4 = add 28 q4;;   (* [3, 4, 5, 6, 9, 19, 20, 23, 23, 28, 28, 33, 33, 33, 39]*)
let (element, q4) = delete_min q4;;   (* 3 * [4, 5, 6, 9, 19, 20, 23, 23, 28, 28, 33, 33, 33, 39]*)
assert(element = 3);;
let q4 = add 16 q4;;   (* [4, 5, 6, 9, 16, 19, 20, 23, 23, 28, 28, 33, 33, 33, 39]*)
let q4 = add 3 q4;;   (* [3, 4, 5, 6, 9, 16, 19, 20, 23, 23, 28, 28, 33, 33, 33, 39]*)
let q4 = add 1 q4;;   (* [1, 3, 4, 5, 6, 9, 16, 19, 20, 23, 23, 28, 28, 33, 33, 33, 39]*)
let q4 = add 32 q4;;   (* [1, 3, 4, 5, 6, 9, 16, 19, 20, 23, 23, 28, 28, 32, 33, 33, 33, 39]*)
let q4 = add 10 q4;;   (* [1, 3, 4, 5, 6, 9, 10, 16, 19, 20, 23, 23, 28, 28, 32, 33, 33, 33, 39]*)
let (element, q4) = delete_min q4;;   (* 1 * [3, 4, 5, 6, 9, 10, 16, 19, 20, 23, 23, 28, 28, 32, 33, 33, 33, 39]*)
assert(element = 1);;
assert(is_empty q4 = false);;   (*[3, 4, 5, 6, 9, 10, 16, 19, 20, 23, 23, 28, 28, 32, 33, 33, 33, 39]*)
let (element, q4) = delete_min q4;;   (* 3 * [4, 5, 6, 9, 10, 16, 19, 20, 23, 23, 28, 28, 32, 33, 33, 33, 39]*)
assert(element = 3);;
let q4 = add 10 q4;;   (* [4, 5, 6, 9, 10, 10, 16, 19, 20, 23, 23, 28, 28, 32, 33, 33, 33, 39]*)
let q4 = add 3 q4;;   (* [3, 4, 5, 6, 9, 10, 10, 16, 19, 20, 23, 23, 28, 28, 32, 33, 33, 33, 39]*)
let q4 = add 1 q4;;   (* [1, 3, 4, 5, 6, 9, 10, 10, 16, 19, 20, 23, 23, 28, 28, 32, 33, 33, 33, 39]*)
let q4 = add 26 q4;;   (* [1, 3, 4, 5, 6, 9, 10, 10, 16, 19, 20, 23, 23, 26, 28, 28, 32, 33, 33, 33, 39]*)
let q4 = add 13 q4;;   (* [1, 3, 4, 5, 6, 9, 10, 10, 13, 16, 19, 20, 23, 23, 26, 28, 28, 32, 33, 33, 33, 39]*)
let (element, q4) = delete_min q4;;   (* 1 * [3, 4, 5, 6, 9, 10, 10, 13, 16, 19, 20, 23, 23, 26, 28, 28, 32, 33, 33, 33, 39]*)
assert(element = 1);;
let q4 = add 17 q4;;   (* [3, 4, 5, 6, 9, 10, 10, 13, 16, 17, 19, 20, 23, 23, 26, 28, 28, 32, 33, 33, 33, 39]*)
let (element, q4) = delete_min q4;;   (* 3 * [4, 5, 6, 9, 10, 10, 13, 16, 17, 19, 20, 23, 23, 26, 28, 28, 32, 33, 33, 33, 39]*)
assert(element = 3);;
let q4 = add 21 q4;;   (* [4, 5, 6, 9, 10, 10, 13, 16, 17, 19, 20, 21, 23, 23, 26, 28, 28, 32, 33, 33, 33, 39]*)
let q4 = add 14 q4;;   (* [4, 5, 6, 9, 10, 10, 13, 14, 16, 17, 19, 20, 21, 23, 23, 26, 28, 28, 32, 33, 33, 33, 39]*)
let q4 = add 13 q4;;   (* [4, 5, 6, 9, 10, 10, 13, 13, 14, 16, 17, 19, 20, 21, 23, 23, 26, 28, 28, 32, 33, 33, 33, 39]*)
let (element, q4) = delete_min q4;;   (* 4 * [5, 6, 9, 10, 10, 13, 13, 14, 16, 17, 19, 20, 21, 23, 23, 26, 28, 28, 32, 33, 33, 33, 39]*)
assert(element = 4);;
assert(is_empty q4 = false);;   (*[5, 6, 9, 10, 10, 13, 13, 14, 16, 17, 19, 20, 21, 23, 23, 26, 28, 28, 32, 33, 33, 33, 39]*)
let q4 = add 2 q4;;   (* [2, 5, 6, 9, 10, 10, 13, 13, 14, 16, 17, 19, 20, 21, 23, 23, 26, 28, 28, 32, 33, 33, 33, 39]*)
let q4 = add 2 q4;;   (* [2, 2, 5, 6, 9, 10, 10, 13, 13, 14, 16, 17, 19, 20, 21, 23, 23, 26, 28, 28, 32, 33, 33, 33, 39]*)
let q4 = add 28 q4;;   (* [2, 2, 5, 6, 9, 10, 10, 13, 13, 14, 16, 17, 19, 20, 21, 23, 23, 26, 28, 28, 28, 32, 33, 33, 33, 39]*)
let (element, q4) = delete_min q4;;   (* 2 * [2, 5, 6, 9, 10, 10, 13, 13, 14, 16, 17, 19, 20, 21, 23, 23, 26, 28, 28, 28, 32, 33, 33, 33, 39]*)
assert(element = 2);;
let (element, q4) = delete_min q4;;   (* 2 * [5, 6, 9, 10, 10, 13, 13, 14, 16, 17, 19, 20, 21, 23, 23, 26, 28, 28, 28, 32, 33, 33, 33, 39]*)
assert(element = 2);;
let q4 = add 9 q4;;   (* [5, 6, 9, 9, 10, 10, 13, 13, 14, 16, 17, 19, 20, 21, 23, 23, 26, 28, 28, 28, 32, 33, 33, 33, 39]*)

(* -------q5------ *)
let q5 = empty;;
let q5 = add 20 q5;;   (* [20]*)
let q5 = add 36 q5;;   (* [20, 36]*)
let q5 = add 5 q5;;   (* [5, 20, 36]*)
let (element, q5) = delete_min q5;;   (* 5 * [20, 36]*)
assert(element = 5);;
let q5 = add 11 q5;;   (* [11, 20, 36]*)
assert(is_empty q5 = false);;   (*[11, 20, 36]*)
let q5 = add 24 q5;;   (* [11, 20, 24, 36]*)
let (element, q5) = delete_min q5;;   (* 11 * [20, 24, 36]*)
assert(element = 11);;
let (element, q5) = delete_min q5;;   (* 20 * [24, 36]*)
assert(element = 20);;
let q5 = add 9 q5;;   (* [9, 24, 36]*)
let q5 = add 18 q5;;   (* [9, 18, 24, 36]*)
let q5 = add 31 q5;;   (* [9, 18, 24, 31, 36]*)
let q5 = add 26 q5;;   (* [9, 18, 24, 26, 31, 36]*)
let (element, q5) = delete_min q5;;   (* 9 * [18, 24, 26, 31, 36]*)
assert(element = 9);;
let q5 = add 11 q5;;   (* [11, 18, 24, 26, 31, 36]*)
let q5 = add 20 q5;;   (* [11, 18, 20, 24, 26, 31, 36]*)
let q5 = add 23 q5;;   (* [11, 18, 20, 23, 24, 26, 31, 36]*)
let q5 = add 29 q5;;   (* [11, 18, 20, 23, 24, 26, 29, 31, 36]*)
let q5 = add 6 q5;;   (* [6, 11, 18, 20, 23, 24, 26, 29, 31, 36]*)
let (element, q5) = delete_min q5;;   (* 6 * [11, 18, 20, 23, 24, 26, 29, 31, 36]*)
assert(element = 6);;
let (element, q5) = delete_min q5;;   (* 11 * [18, 20, 23, 24, 26, 29, 31, 36]*)
assert(element = 11);;
let q5 = add 1 q5;;   (* [1, 18, 20, 23, 24, 26, 29, 31, 36]*)
let (element, q5) = delete_min q5;;   (* 1 * [18, 20, 23, 24, 26, 29, 31, 36]*)
assert(element = 1);;
let q5 = add 5 q5;;   (* [5, 18, 20, 23, 24, 26, 29, 31, 36]*)
let (element, q5) = delete_min q5;;   (* 5 * [18, 20, 23, 24, 26, 29, 31, 36]*)
assert(element = 5);;
let q5 = add 12 q5;;   (* [12, 18, 20, 23, 24, 26, 29, 31, 36]*)
let (element, q5) = delete_min q5;;   (* 12 * [18, 20, 23, 24, 26, 29, 31, 36]*)
assert(element = 12);;
let (element, q5) = delete_min q5;;   (* 18 * [20, 23, 24, 26, 29, 31, 36]*)
assert(element = 18);;
let q5 = add 15 q5;;   (* [15, 20, 23, 24, 26, 29, 31, 36]*)
let (element, q5) = delete_min q5;;   (* 15 * [20, 23, 24, 26, 29, 31, 36]*)
assert(element = 15);;
let (element, q5) = delete_min q5;;   (* 20 * [23, 24, 26, 29, 31, 36]*)
assert(element = 20);;
let (element, q5) = delete_min q5;;   (* 23 * [24, 26, 29, 31, 36]*)
assert(element = 23);;
let q5 = add 32 q5;;   (* [24, 26, 29, 31, 32, 36]*)
let q5 = add 21 q5;;   (* [21, 24, 26, 29, 31, 32, 36]*)
let q5 = add 32 q5;;   (* [21, 24, 26, 29, 31, 32, 32, 36]*)
let (element, q5) = delete_min q5;;   (* 21 * [24, 26, 29, 31, 32, 32, 36]*)
assert(element = 21);;
let q5 = add 33 q5;;   (* [24, 26, 29, 31, 32, 32, 33, 36]*)
let q5 = add 19 q5;;   (* [19, 24, 26, 29, 31, 32, 32, 33, 36]*)
let (element, q5) = delete_min q5;;   (* 19 * [24, 26, 29, 31, 32, 32, 33, 36]*)
assert(element = 19);;
let q5 = add 37 q5;;   (* [24, 26, 29, 31, 32, 32, 33, 36, 37]*)
let q5 = add 22 q5;;   (* [22, 24, 26, 29, 31, 32, 32, 33, 36, 37]*)
let q5 = add 17 q5;;   (* [17, 22, 24, 26, 29, 31, 32, 32, 33, 36, 37]*)
let (element, q5) = delete_min q5;;   (* 17 * [22, 24, 26, 29, 31, 32, 32, 33, 36, 37]*)
assert(element = 17);;
let q5 = add 31 q5;;   (* [22, 24, 26, 29, 31, 31, 32, 32, 33, 36, 37]*)
let q5 = add 9 q5;;   (* [9, 22, 24, 26, 29, 31, 31, 32, 32, 33, 36, 37]*)
let q5 = add 24 q5;;   (* [9, 22, 24, 24, 26, 29, 31, 31, 32, 32, 33, 36, 37]*)
let q5 = add 16 q5;;   (* [9, 16, 22, 24, 24, 26, 29, 31, 31, 32, 32, 33, 36, 37]*)
let (element, q5) = delete_min q5;;   (* 9 * [16, 22, 24, 24, 26, 29, 31, 31, 32, 32, 33, 36, 37]*)
assert(element = 9);;
let (element, q5) = delete_min q5;;   (* 16 * [22, 24, 24, 26, 29, 31, 31, 32, 32, 33, 36, 37]*)
assert(element = 16);;
let (element, q5) = delete_min q5;;   (* 22 * [24, 24, 26, 29, 31, 31, 32, 32, 33, 36, 37]*)
assert(element = 22);;

(* -------q------ *)
let q = join empty q1;;
let q = join q q2;;
let q = join q q3;;
let q = join q q4;;
let q = join q q5;;   (*[1, 3, 5, 6, 9, 9, 10, 10, 10, 11, 13, 13, 14, 14, 16, 16, 16, 17, 17, 17, 18, 19, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 24, 24, 24, 24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39]*)
let (element, q) = delete_min q;;   (* 1 * [3, 5, 6, 9, 9, 10, 10, 10, 11, 13, 13, 14, 14, 16, 16, 16, 17, 17, 17, 18, 19, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 24, 24, 24, 24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 1);;
let (element, q) = delete_min q;;   (* 3 * [5, 6, 9, 9, 10, 10, 10, 11, 13, 13, 14, 14, 16, 16, 16, 17, 17, 17, 18, 19, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 24, 24, 24, 24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 3);;
let (element, q) = delete_min q;;   (* 5 * [6, 9, 9, 10, 10, 10, 11, 13, 13, 14, 14, 16, 16, 16, 17, 17, 17, 18, 19, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 24, 24, 24, 24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 5);;
let (element, q) = delete_min q;;   (* 6 * [9, 9, 10, 10, 10, 11, 13, 13, 14, 14, 16, 16, 16, 17, 17, 17, 18, 19, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 24, 24, 24, 24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 6);;
let (element, q) = delete_min q;;   (* 9 * [9, 10, 10, 10, 11, 13, 13, 14, 14, 16, 16, 16, 17, 17, 17, 18, 19, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 24, 24, 24, 24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 9 * [10, 10, 10, 11, 13, 13, 14, 14, 16, 16, 16, 17, 17, 17, 18, 19, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 24, 24, 24, 24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 9);;
let (element, q) = delete_min q;;   (* 10 * [10, 10, 11, 13, 13, 14, 14, 16, 16, 16, 17, 17, 17, 18, 19, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 24, 24, 24, 24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 10 * [10, 11, 13, 13, 14, 14, 16, 16, 16, 17, 17, 17, 18, 19, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 24, 24, 24, 24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 10 * [11, 13, 13, 14, 14, 16, 16, 16, 17, 17, 17, 18, 19, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 24, 24, 24, 24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 10);;
let (element, q) = delete_min q;;   (* 11 * [13, 13, 14, 14, 16, 16, 16, 17, 17, 17, 18, 19, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 24, 24, 24, 24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 11);;
let (element, q) = delete_min q;;   (* 13 * [13, 14, 14, 16, 16, 16, 17, 17, 17, 18, 19, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 24, 24, 24, 24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 13 * [14, 14, 16, 16, 16, 17, 17, 17, 18, 19, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 24, 24, 24, 24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 13);;
let (element, q) = delete_min q;;   (* 14 * [14, 16, 16, 16, 17, 17, 17, 18, 19, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 24, 24, 24, 24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 14 * [16, 16, 16, 17, 17, 17, 18, 19, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 24, 24, 24, 24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 14);;
let (element, q) = delete_min q;;   (* 16 * [16, 16, 17, 17, 17, 18, 19, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 24, 24, 24, 24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [16, 17, 17, 17, 18, 19, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 24, 24, 24, 24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 16 * [17, 17, 17, 18, 19, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 24, 24, 24, 24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 16);;
let (element, q) = delete_min q;;   (* 17 * [17, 17, 18, 19, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 24, 24, 24, 24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [17, 18, 19, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 24, 24, 24, 24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 17 * [18, 19, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 24, 24, 24, 24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 17);;
let (element, q) = delete_min q;;   (* 18 * [19, 20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 24, 24, 24, 24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 18);;
let (element, q) = delete_min q;;   (* 19 * [20, 20, 21, 21, 21, 21, 21, 22, 23, 23, 24, 24, 24, 24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 19);;
let (element, q) = delete_min q;;   (* 20 * [20, 21, 21, 21, 21, 21, 22, 23, 23, 24, 24, 24, 24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 20 * [21, 21, 21, 21, 21, 22, 23, 23, 24, 24, 24, 24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 20);;
let (element, q) = delete_min q;;   (* 21 * [21, 21, 21, 21, 22, 23, 23, 24, 24, 24, 24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [21, 21, 21, 22, 23, 23, 24, 24, 24, 24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [21, 21, 22, 23, 23, 24, 24, 24, 24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [21, 22, 23, 23, 24, 24, 24, 24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 21 * [22, 23, 23, 24, 24, 24, 24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 21);;
let (element, q) = delete_min q;;   (* 22 * [23, 23, 24, 24, 24, 24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 22);;
let (element, q) = delete_min q;;   (* 23 * [23, 24, 24, 24, 24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 23 * [24, 24, 24, 24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 23);;
let (element, q) = delete_min q;;   (* 24 * [24, 24, 24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [24, 24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [24, 24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [24, 24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [24, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 24 * [26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 24);;
let (element, q) = delete_min q;;   (* 26 * [26, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 26 * [27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 26);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 27 * [28, 28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 27);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 28 * [29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 28);;
let (element, q) = delete_min q;;   (* 29 * [29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [29, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 29 * [30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 29);;
let (element, q) = delete_min q;;   (* 30 * [31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 30);;
let (element, q) = delete_min q;;   (* 31 * [31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 31 * [32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 31);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [32, 33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 32 * [33, 33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 32);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [33, 34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 33 * [34, 34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 33);;
let (element, q) = delete_min q;;   (* 34 * [34, 36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 34 * [36, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 34);;
let (element, q) = delete_min q;;   (* 36 * [37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 36);;
let (element, q) = delete_min q;;   (* 37 * [37, 38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 37 * [38, 38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 37);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 38, 39, 39, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 38, 39, 39, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [38, 39, 39, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 38 * [39, 39, 39, 39, 39]*)
assert(element = 38);;
let (element, q) = delete_min q;;   (* 39 * [39, 39, 39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39, 39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39, 39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * [39]*)
assert(element = 39);;
let (element, q) = delete_min q;;   (* 39 * []*)
assert(element = 39);;
assert (try let _=delete_min q in false with Empty -> true);;
assert(is_empty q = true);;   (*[]*)




